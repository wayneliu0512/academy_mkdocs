{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7ae0\u7bc0 C++ Git Concurrency Principles of Object-Oriented Design Agile Project Manage Qt Design Pattern ROS","title":"Home"},{"location":"#_1","text":"C++ Git Concurrency Principles of Object-Oriented Design Agile Project Manage Qt Design Pattern ROS","title":"\u7ae0\u7bc0"},{"location":"Agile%20project%20managment/","text":"Agile Project Management \u6b64\u5c08\u6848\u5167\u5bb9\u5305\u542b\u654f\u6377\u5f0f\u958b\u767c\u7684\u6838\u5fc3\u7406\u5ff5( Agile_Development ), \u4ee5\u53ca\u5982\u4f55\u5728 Jira \u9019\u5957\u8edf\u9ad4\u4e2d\u5be6\u73fe( Jira_Project_Management ), \u518d\u4f86\u6703\u4ecb\u7d39\u5169\u7a2e\u5178\u578b\u654f\u6377\u5f0f\u958b\u767c\u65b9\u6cd5, Kanban , Scrum , \u6700\u5f8c\u63d0\u5230\u654f\u6377\u8207\u8edf\u9ad4\u958b\u767c\u76f8\u95dc\u7684\u91cd\u8981\u89c0\u5ff5( Software_Development )","title":"Agile Project Management"},{"location":"Agile%20project%20managment/#agile-project-management","text":"\u6b64\u5c08\u6848\u5167\u5bb9\u5305\u542b\u654f\u6377\u5f0f\u958b\u767c\u7684\u6838\u5fc3\u7406\u5ff5( Agile_Development ), \u4ee5\u53ca\u5982\u4f55\u5728 Jira \u9019\u5957\u8edf\u9ad4\u4e2d\u5be6\u73fe( Jira_Project_Management ), \u518d\u4f86\u6703\u4ecb\u7d39\u5169\u7a2e\u5178\u578b\u654f\u6377\u5f0f\u958b\u767c\u65b9\u6cd5, Kanban , Scrum , \u6700\u5f8c\u63d0\u5230\u654f\u6377\u8207\u8edf\u9ad4\u958b\u767c\u76f8\u95dc\u7684\u91cd\u8981\u89c0\u5ff5( Software_Development )","title":"Agile Project Management"},{"location":"Agile%20project%20managment/Agile_Development/","text":"Agile Development What is Agile? Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a \"big bang\" launch, an agile team delivers work in small, but consumable, increments. Requirements, plans, and results are evaluated continuously so teams have a natural mechanism for responding to change quickly. Whereas the traditional \"waterfall\" approach has one discipline contribute to the project, then \"throw it over the wall\" to the next contributor, agile calls for collaborative cross-functional teams. Open communication, collaboration, adaptation, and trust amongst team members are at the heart of agile. Although the project lead or product owner typically prioritizes the work to be delivered, the team takes the lead on deciding how the work will get done, self-organizing around granular tasks and assignments. Agile isn't defined by a set of ceremonies or specific development techniques. Rather, agile is a group of methodologies that demonstrate a commitment to tight feedback cycles and continuous improvement. Srum Scrum is a framework for agile project management that uses fixed-length iterations of work, called sprints. There are four ceremonies that bring structure to each sprint. KanBan Kanban is a framework for agile project management that matches the work to the team's capacity. It's focused on getting things done as fast as possible, giving teams the ability to react to change even faster than scrum. Agile delivery vehicles Agile can be implemented using various frameworks (like scrum and kanban) to deliver software. Scrum teams use sprints to guide development, and kanban teams often work without fixed work intervals. Both frameworks, however, use large delivery vehicles like epics and versions to structure development for a synchronized release cadence out to production. Agile metrics Agile teams thrive on metrics. Work in progress (WIP) limits keep the team, and the business, focused on delivering the highest priority work. Graphs like burndown and control charts help the team predict their delivery cadence, and continuous flow diagrams help identify bottlenecks. These metrics and artifacts keep everyone focused on the big goals and boost confidence in the team's ability to deliver future work. Agile runs on trust An agile program cannot function without a high level of trust amongst team members. It requires candor to have difficult conversations regarding what's right for the program and the product. Because conversations happen at regular intervals, ideas and concerns are regularly expressed. That means team members also have to be confident in each other's ability (and willingness) to execute on the decisions made during those conversations.","title":"Agile Development"},{"location":"Agile%20project%20managment/Agile_Development/#agile-development","text":"","title":"Agile Development"},{"location":"Agile%20project%20managment/Agile_Development/#what-is-agile","text":"Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a \"big bang\" launch, an agile team delivers work in small, but consumable, increments. Requirements, plans, and results are evaluated continuously so teams have a natural mechanism for responding to change quickly. Whereas the traditional \"waterfall\" approach has one discipline contribute to the project, then \"throw it over the wall\" to the next contributor, agile calls for collaborative cross-functional teams. Open communication, collaboration, adaptation, and trust amongst team members are at the heart of agile. Although the project lead or product owner typically prioritizes the work to be delivered, the team takes the lead on deciding how the work will get done, self-organizing around granular tasks and assignments. Agile isn't defined by a set of ceremonies or specific development techniques. Rather, agile is a group of methodologies that demonstrate a commitment to tight feedback cycles and continuous improvement.","title":"What is Agile?"},{"location":"Agile%20project%20managment/Agile_Development/#srum","text":"Scrum is a framework for agile project management that uses fixed-length iterations of work, called sprints. There are four ceremonies that bring structure to each sprint.","title":"Srum"},{"location":"Agile%20project%20managment/Agile_Development/#kanban","text":"Kanban is a framework for agile project management that matches the work to the team's capacity. It's focused on getting things done as fast as possible, giving teams the ability to react to change even faster than scrum.","title":"KanBan"},{"location":"Agile%20project%20managment/Agile_Development/#agile-delivery-vehicles","text":"Agile can be implemented using various frameworks (like scrum and kanban) to deliver software. Scrum teams use sprints to guide development, and kanban teams often work without fixed work intervals. Both frameworks, however, use large delivery vehicles like epics and versions to structure development for a synchronized release cadence out to production.","title":"Agile delivery vehicles"},{"location":"Agile%20project%20managment/Agile_Development/#agile-metrics","text":"Agile teams thrive on metrics. Work in progress (WIP) limits keep the team, and the business, focused on delivering the highest priority work. Graphs like burndown and control charts help the team predict their delivery cadence, and continuous flow diagrams help identify bottlenecks. These metrics and artifacts keep everyone focused on the big goals and boost confidence in the team's ability to deliver future work.","title":"Agile metrics"},{"location":"Agile%20project%20managment/Agile_Development/#agile-runs-on-trust","text":"An agile program cannot function without a high level of trust amongst team members. It requires candor to have difficult conversations regarding what's right for the program and the product. Because conversations happen at regular intervals, ideas and concerns are regularly expressed. That means team members also have to be confident in each other's ability (and willingness) to execute on the decisions made during those conversations.","title":"Agile runs on trust"},{"location":"Agile%20project%20managment/Jira_Project_Management/","text":"Jira Introduction Workflow Every software team has a process they use to complete work. Normalizing that process\u2013i.e., establishing it as a workflow\u2013makes it clearly structured and repeatable, which, in turn, makes it scalable. In an issue tracker, these statuses flow from one to the next using transitions which structure the workflow. Some software teams include additional states in their workflow that help them track the status of work more precisely. Discuss each pain point in the team's retrospective, and keep in mind that each team will have slightly different values based on their project, technology stack, and method in which they like to work. That's why it's important to choose an issue tracker that has a flexible workflow configuration. Too many teams compromise their work style to fit a particular toolset, which is frustrating for everyone. So team members start to avoid using that tool altogether, compounding frustration across the team and generally wreaking havoc. And when morale falls, productivity suffers. That's a double whammy we all want to avoid! Optimize the workflow When building a workflow, think about which metrics are important to report on and what non-team members might be interested in learning. For example, a well designed workflow answers the following questions: What work has the team completed? Is the backlog of work increasing or keeping pace with the team? How many items are in each status? Are there any bottlenecks that are slowing the team down? How long does it take to complete an average task? How many work items didn't pass our quality standards the first time around? The next step in optimizing the workflow is to ensure a steady stream of work through the workflow. Work-in-progress (WIP) limits dictate a minimum and maximum number of issues in a particular state of the workflow, making sure each state in the workflow has enough work to keep the team fully utilized, but not so much that they lose focus because they're juggling priorities. Enforcing work-in-progress limits will quickly show which processes in the team are slowing down the overall work through the pipeline. As the team learns to optimize around its work-in-progress limits, throughput will increase. No matter what your workflow looks like, the process of developing it should be agile, too. Discuss it in retrospectives from time to time, and adapt it as the team's culture and composition changes. Epics, Stories, Themes, and Initiatives Let\u2019s say you and your team want to do something ambitious, like launch a rocket into space. To do so, you\u2019ll need to structure your work: from the largest objectives down to the minute details. You\u2019ll want to be able to respond to change, report your progress, and stick to a plan. Epics, stories, themes, and initiatives are precisely the tools you\u2019ll need to do so. What are stories, epics, initiatives, and themes? Stories , also called \u201cuser stories,\u201d are short requirements or requests written from the perspective of an end user. Epics are large bodies of work that can be broken down into a number of smaller tasks (called stories). Initiatives are collections of epics that drive toward a common goal. Themes are large focus areas that span the organization. Epics vs. Stories Oftentimes, developers would work on dozens of stories a month. Epics, in contrast, are few in number and take longer to complete. Teams often have two or three epics they work to complete each quarter. Examples of an agile story: iPhone users need access to a vertical view of the live feed when using the mobile app. Desktop users need a \u201cview fullscreen\u201d button in the lower right hand corner of the video player. Android users need to be linked to apple store. In this case, the epic might be \u201cImprove Streaming Service for Q1 Launch.\u201d Epics vs. Initiatives Initiatives offer another level of organization above epics. In many cases, an initiative compiles epics from multiple teams to achieve a much broader, bigger goal than any of the epics themselves. While an epic is something you might complete in a month or a quarter, initiatives are often completed in multiple quarters to a year. Example of epics in an initiative: Let\u2019s say your rocket ship company wants to decrease the cost per launch by 5% this year. That\u2019s a great fit for an initiative, as no single epic could likely achieve that big of a goal. Within that initiative, there would be epics such as, \u201cDecrease launch-phase fuel consumption by 1%,\u201d \u201cIncrease launches per quarter from 3 to 4,\u201d and \u201cTurn all thermostats down from 71 to 69 degrees #Dadmode.\u201d At Atlassian: Internally, we call our Initiatives \u201cPC Tickets.\u201d Project Central tickets are configured in Jira Software just like our epics. Initiatives vs. themes In many organizations the founders and management team will encourage the pursuit of some aspirational destination. These are the (sometimes super corny) goals announced each year or quarter, and themes are how you keep track of them. Initiatives are collections of epics Themes are labels that track high-level organizational goals Themes should inspire the creation of epics and initiatives but don\u2019t have a ridgid 1-to-1 relationship with them. A theme for a rocket ship company would be something like \u201cSafety First.\u201d","title":"Jira Introduction"},{"location":"Agile%20project%20managment/Jira_Project_Management/#jira-introduction","text":"","title":"Jira Introduction"},{"location":"Agile%20project%20managment/Jira_Project_Management/#workflow","text":"Every software team has a process they use to complete work. Normalizing that process\u2013i.e., establishing it as a workflow\u2013makes it clearly structured and repeatable, which, in turn, makes it scalable. In an issue tracker, these statuses flow from one to the next using transitions which structure the workflow. Some software teams include additional states in their workflow that help them track the status of work more precisely. Discuss each pain point in the team's retrospective, and keep in mind that each team will have slightly different values based on their project, technology stack, and method in which they like to work. That's why it's important to choose an issue tracker that has a flexible workflow configuration. Too many teams compromise their work style to fit a particular toolset, which is frustrating for everyone. So team members start to avoid using that tool altogether, compounding frustration across the team and generally wreaking havoc. And when morale falls, productivity suffers. That's a double whammy we all want to avoid!","title":"Workflow"},{"location":"Agile%20project%20managment/Jira_Project_Management/#optimize-the-workflow","text":"When building a workflow, think about which metrics are important to report on and what non-team members might be interested in learning. For example, a well designed workflow answers the following questions: What work has the team completed? Is the backlog of work increasing or keeping pace with the team? How many items are in each status? Are there any bottlenecks that are slowing the team down? How long does it take to complete an average task? How many work items didn't pass our quality standards the first time around? The next step in optimizing the workflow is to ensure a steady stream of work through the workflow. Work-in-progress (WIP) limits dictate a minimum and maximum number of issues in a particular state of the workflow, making sure each state in the workflow has enough work to keep the team fully utilized, but not so much that they lose focus because they're juggling priorities. Enforcing work-in-progress limits will quickly show which processes in the team are slowing down the overall work through the pipeline. As the team learns to optimize around its work-in-progress limits, throughput will increase. No matter what your workflow looks like, the process of developing it should be agile, too. Discuss it in retrospectives from time to time, and adapt it as the team's culture and composition changes.","title":"Optimize the workflow"},{"location":"Agile%20project%20managment/Jira_Project_Management/#epics-stories-themes-and-initiatives","text":"Let\u2019s say you and your team want to do something ambitious, like launch a rocket into space. To do so, you\u2019ll need to structure your work: from the largest objectives down to the minute details. You\u2019ll want to be able to respond to change, report your progress, and stick to a plan. Epics, stories, themes, and initiatives are precisely the tools you\u2019ll need to do so.","title":"Epics, Stories, Themes, and Initiatives"},{"location":"Agile%20project%20managment/Jira_Project_Management/#what-are-stories-epics-initiatives-and-themes","text":"Stories , also called \u201cuser stories,\u201d are short requirements or requests written from the perspective of an end user. Epics are large bodies of work that can be broken down into a number of smaller tasks (called stories). Initiatives are collections of epics that drive toward a common goal. Themes are large focus areas that span the organization.","title":"What are stories, epics, initiatives, and themes?"},{"location":"Agile%20project%20managment/Jira_Project_Management/#epics-vs-stories","text":"Oftentimes, developers would work on dozens of stories a month. Epics, in contrast, are few in number and take longer to complete. Teams often have two or three epics they work to complete each quarter.","title":"Epics vs. Stories"},{"location":"Agile%20project%20managment/Jira_Project_Management/#examples-of-an-agile-story","text":"iPhone users need access to a vertical view of the live feed when using the mobile app. Desktop users need a \u201cview fullscreen\u201d button in the lower right hand corner of the video player. Android users need to be linked to apple store. In this case, the epic might be \u201cImprove Streaming Service for Q1 Launch.\u201d","title":"Examples of an agile story:"},{"location":"Agile%20project%20managment/Jira_Project_Management/#epics-vs-initiatives","text":"Initiatives offer another level of organization above epics. In many cases, an initiative compiles epics from multiple teams to achieve a much broader, bigger goal than any of the epics themselves. While an epic is something you might complete in a month or a quarter, initiatives are often completed in multiple quarters to a year.","title":"Epics vs. Initiatives"},{"location":"Agile%20project%20managment/Jira_Project_Management/#example-of-epics-in-an-initiative","text":"Let\u2019s say your rocket ship company wants to decrease the cost per launch by 5% this year. That\u2019s a great fit for an initiative, as no single epic could likely achieve that big of a goal. Within that initiative, there would be epics such as, \u201cDecrease launch-phase fuel consumption by 1%,\u201d \u201cIncrease launches per quarter from 3 to 4,\u201d and \u201cTurn all thermostats down from 71 to 69 degrees #Dadmode.\u201d","title":"Example of epics in an initiative:"},{"location":"Agile%20project%20managment/Jira_Project_Management/#at-atlassian","text":"Internally, we call our Initiatives \u201cPC Tickets.\u201d Project Central tickets are configured in Jira Software just like our epics.","title":"At Atlassian:"},{"location":"Agile%20project%20managment/Jira_Project_Management/#initiatives-vs-themes","text":"In many organizations the founders and management team will encourage the pursuit of some aspirational destination. These are the (sometimes super corny) goals announced each year or quarter, and themes are how you keep track of them. Initiatives are collections of epics Themes are labels that track high-level organizational goals Themes should inspire the creation of epics and initiatives but don\u2019t have a ridgid 1-to-1 relationship with them. A theme for a rocket ship company would be something like \u201cSafety First.\u201d","title":"Initiatives vs. themes"},{"location":"Agile%20project%20managment/Kanban/","text":"Kanban What is Kanban? Kanban is a popular framework used to implement agile software development. It requires real-time communication of capacity and full transparency of work. Work items are represented visually on a kanban board, allowing team members to see the state of every piece of work at any time. Kanban boards The work of all kanban teams revolves around a kanban board, a tool used to visualize work and optimize the flow of the work among the team. While physical boards are popular among some teams, virtual boards are a crucial feature in any agile software development tool for their traceability, easier collaboration, and accessibility from multiple locations. Regardless of whether a team's board is physical or digital, their function is to ensure the team's work is visualized, their workflow is standardized, and all blockers and dependencies are immediately identified and resolved. A basic kanban board has a three-step workflow: To Do, In Progress, and Done. However, depending on a team's size, structure, and objectives, the workflow can be mapped to meet the unique process of any particular team. Kanban cards In Japanese, kanban literally translates to \"visual signal.\" For kanban teams, every work item is represented as a separate card on the board. The main purpose of representing work as a card on the kanban board is to allow team members to track the progress of work through its workflow in a highly visual manner. Kanban cards feature critical information about that particular work item, giving the entire team full visibility into who is responsible for that item of work, a brief description of the job being done, how long that piece of work is estimated to take, and so on. The benefits of Kanban Planning flexibility A kanban team is only focused on the work that's actively in progress. Once the team completes a work item, they pluck the next work item off the top of the backlog. The product owner is free to reprioritize work in the backlog without disrupting the team, because any changes outside the current work items don't impact the team. As long as the product owner keeps the most important work items on top of the backlog, the development team is assured they are delivering maximum value back to the business. So there's no need for the fixed-length iterations you find in scrum. Shortened time cycles Cycle time is a key metric for kanban teams. Cycle time is the amount of time it takes for a unit of work to travel through the team\u2019s workflow\u2013from the moment work starts to the moment it ships. By optimizing cycle time, the team can confidently forecast the delivery of future work. Overlapping skill sets lead to smaller cycle times. When only one person holds a skill set, that person becomes a bottleneck in the workflow. So teams employ basic best practices like code review and mentoring help to spread knowledge. Shared skills mean that team members can take on heterogeneous work, which further optimizes cycle time. It also means that if there is a backup of work, the entire team can swarm on it to get the process flowing smoothly again. For instance, testing isn't only done by QA engineers. Developers pitch in, too. In a kanban framework, it's the entire team's responsibility to ensure work is moving smoothly through the process. Fewer bottlenecks Multitasking kills efficiency. The more work items in flight at any given time, the more context switching, which hinders their path to completion. That's why a key tenant of kanban is to limit the amount of work in progress (WIP). Work-in-progress limits highlight bottlenecks and backups in the team's process due to lack of focus, people, or skill sets. For example, a typical software team might have four workflow states: To Do, In Progress, Code Review, and Done. They could choose to set a WIP limit of 2 for the code review state. That might seem like a low limit, but there's good reason for it: developers often prefer to write new code, rather than spend time reviewing someone else's work. A low limit encourages the team to pay special attention to issues in the review state, and to review others work before raising their own code reviews. This ultimately reduces the overall cycle time. What are WIP limits? In agile development, work in progress (WIP) limits set the maximum amount of work that can exist in each status of a workflow. Limiting the amount of work in progress makes it easier to identify inefficiency in a team's workflow. Bottlenecks in a team's delivery pipeline are clearly visible before a situation becomes dire. Kanban vs. Scrum Next to Kanban tutorial...","title":"Kanban"},{"location":"Agile%20project%20managment/Kanban/#kanban","text":"","title":"Kanban"},{"location":"Agile%20project%20managment/Kanban/#what-is-kanban","text":"Kanban is a popular framework used to implement agile software development. It requires real-time communication of capacity and full transparency of work. Work items are represented visually on a kanban board, allowing team members to see the state of every piece of work at any time.","title":"What is Kanban?"},{"location":"Agile%20project%20managment/Kanban/#kanban-boards","text":"The work of all kanban teams revolves around a kanban board, a tool used to visualize work and optimize the flow of the work among the team. While physical boards are popular among some teams, virtual boards are a crucial feature in any agile software development tool for their traceability, easier collaboration, and accessibility from multiple locations. Regardless of whether a team's board is physical or digital, their function is to ensure the team's work is visualized, their workflow is standardized, and all blockers and dependencies are immediately identified and resolved. A basic kanban board has a three-step workflow: To Do, In Progress, and Done. However, depending on a team's size, structure, and objectives, the workflow can be mapped to meet the unique process of any particular team.","title":"Kanban boards"},{"location":"Agile%20project%20managment/Kanban/#kanban-cards","text":"In Japanese, kanban literally translates to \"visual signal.\" For kanban teams, every work item is represented as a separate card on the board. The main purpose of representing work as a card on the kanban board is to allow team members to track the progress of work through its workflow in a highly visual manner. Kanban cards feature critical information about that particular work item, giving the entire team full visibility into who is responsible for that item of work, a brief description of the job being done, how long that piece of work is estimated to take, and so on.","title":"Kanban cards"},{"location":"Agile%20project%20managment/Kanban/#the-benefits-of-kanban","text":"","title":"The benefits of Kanban"},{"location":"Agile%20project%20managment/Kanban/#planning-flexibility","text":"A kanban team is only focused on the work that's actively in progress. Once the team completes a work item, they pluck the next work item off the top of the backlog. The product owner is free to reprioritize work in the backlog without disrupting the team, because any changes outside the current work items don't impact the team. As long as the product owner keeps the most important work items on top of the backlog, the development team is assured they are delivering maximum value back to the business. So there's no need for the fixed-length iterations you find in scrum.","title":"Planning flexibility"},{"location":"Agile%20project%20managment/Kanban/#shortened-time-cycles","text":"Cycle time is a key metric for kanban teams. Cycle time is the amount of time it takes for a unit of work to travel through the team\u2019s workflow\u2013from the moment work starts to the moment it ships. By optimizing cycle time, the team can confidently forecast the delivery of future work. Overlapping skill sets lead to smaller cycle times. When only one person holds a skill set, that person becomes a bottleneck in the workflow. So teams employ basic best practices like code review and mentoring help to spread knowledge. Shared skills mean that team members can take on heterogeneous work, which further optimizes cycle time. It also means that if there is a backup of work, the entire team can swarm on it to get the process flowing smoothly again. For instance, testing isn't only done by QA engineers. Developers pitch in, too. In a kanban framework, it's the entire team's responsibility to ensure work is moving smoothly through the process.","title":"Shortened time cycles"},{"location":"Agile%20project%20managment/Kanban/#fewer-bottlenecks","text":"Multitasking kills efficiency. The more work items in flight at any given time, the more context switching, which hinders their path to completion. That's why a key tenant of kanban is to limit the amount of work in progress (WIP). Work-in-progress limits highlight bottlenecks and backups in the team's process due to lack of focus, people, or skill sets. For example, a typical software team might have four workflow states: To Do, In Progress, Code Review, and Done. They could choose to set a WIP limit of 2 for the code review state. That might seem like a low limit, but there's good reason for it: developers often prefer to write new code, rather than spend time reviewing someone else's work. A low limit encourages the team to pay special attention to issues in the review state, and to review others work before raising their own code reviews. This ultimately reduces the overall cycle time.","title":"Fewer bottlenecks"},{"location":"Agile%20project%20managment/Kanban/#what-are-wip-limits","text":"In agile development, work in progress (WIP) limits set the maximum amount of work that can exist in each status of a workflow. Limiting the amount of work in progress makes it easier to identify inefficiency in a team's workflow. Bottlenecks in a team's delivery pipeline are clearly visible before a situation becomes dire.","title":"What are WIP limits?"},{"location":"Agile%20project%20managment/Kanban/#kanban-vs-scrum","text":"Next to Kanban tutorial...","title":"Kanban vs. Scrum"},{"location":"Agile%20project%20managment/Scrum/","text":"Scrum What is Scrum? While the Scrum I\u2019m talking about is most frequently used by software development teams, its principles and lessons can be applied to all kinds of teamwork. This is one of the reasons Scrum is so popular. Often thought of as an agile project management framework, Scrum describes a set of meetings, tools, and roles that work in concert to help teams structure and manage their work. Videos link... The framework The scrum framework is heuristic; it\u2019s based on continuous learning and adjustment to fluctuating factors. It acknowledges that the team doesn\u2019t know everything at the start of a project and will evolve through experience. Scrum is structured to help teams naturally adapt to changing conditions and user requirements, with re-prioritization built into the process and short release cycles so your team can constantly learn and improve. While Scrum is structured, it is not entirely rigid. we\u2019ve learned that clear communication, transparency, and a dedication for continuous improvement should always remain at the center of whatever framework you choose. And the rest is up to you. read more... Next to Scrum tutorial... Question and Answer Why would teams use the Fibonacci sequence for story points estimation in agile? Answer link... What is the difference between the Sprint Review and the Sprint Retrospective? Answer link...","title":"Scrum"},{"location":"Agile%20project%20managment/Scrum/#scrum","text":"","title":"Scrum"},{"location":"Agile%20project%20managment/Scrum/#what-is-scrum","text":"While the Scrum I\u2019m talking about is most frequently used by software development teams, its principles and lessons can be applied to all kinds of teamwork. This is one of the reasons Scrum is so popular. Often thought of as an agile project management framework, Scrum describes a set of meetings, tools, and roles that work in concert to help teams structure and manage their work. Videos link...","title":"What is Scrum?"},{"location":"Agile%20project%20managment/Scrum/#the-framework","text":"The scrum framework is heuristic; it\u2019s based on continuous learning and adjustment to fluctuating factors. It acknowledges that the team doesn\u2019t know everything at the start of a project and will evolve through experience. Scrum is structured to help teams naturally adapt to changing conditions and user requirements, with re-prioritization built into the process and short release cycles so your team can constantly learn and improve. While Scrum is structured, it is not entirely rigid. we\u2019ve learned that clear communication, transparency, and a dedication for continuous improvement should always remain at the center of whatever framework you choose. And the rest is up to you. read more... Next to Scrum tutorial...","title":"The framework"},{"location":"Agile%20project%20managment/Scrum/#question-and-answer","text":"Why would teams use the Fibonacci sequence for story points estimation in agile? Answer link... What is the difference between the Sprint Review and the Sprint Retrospective? Answer link...","title":"Question and Answer"},{"location":"Agile%20project%20managment/Software_Development/","text":"Software Development Developer Nobody wants to ship software with lots of bugs, performance issues, and low customer satisfaction. Continuous integration and code reviews help prevent this... but who has the time, right? Well, agile teams maketime. Agile developers focus on sustainable development\u2013not heroics. Sustainability is about good estimation, effective branching strategies for managing code, automated testing to protect quality, and continuous deployment to get fast feedback from users. Adopting sustainable development practices requires a discipline most of us aspire to\u2013but often struggle to realize\u2013as individuals. That's because nobody can go agile in a vacuum. The culture of the entire organization has to rally behind it. That means getting project leaders to buy into the notion that quality is more important than scope or schedule, which is often the hardest part of adopting agile. Git Tip 1: Start thinking about tasks as Git branches At Atlassian, we create a new branch for every single issue. Whether it's a new feature, a bug fix, or a small improvement to some existing code, every code change gets its own branch. Branching is straightforwards and allows teams to easily collaborate inside one central codebase. When a developer create a branch, they effectively have their own isolated version of the codebase in which to make changes. Tip 2: Multiple branches are individually testable, so take advantage Once branches are considered done and ready for code reviews, Git plays another key role in an agile development workflow: testing. Successful agile teams practice code reviews and setup automated tests (Continuous Integration or Continuous Development). To help with code reviews and testing, developers can easily notify the rest of their team that the branch work is ready for review and that it needs to be reviewed through a pull request. More simply put, a pull request is a way to ask another developer to merge one of your branches into the master branch and that it is ready for testing. With the right tooling, your Continuous Integration server can build and test your pull requests before you merge them. This gives you confidence that your merge won't cause problems. Pro Tip: A long running feature branch that is not merged to the master branch may hurt your ability to be agile and iterate. If you have a long running feature branch remember that you effectively have two divergent versions of your code base, which will result is more bug fixes and conflicts. But the best solution is to have short-lived feature branches. This can be achieved through decomposing user stories into smaller tasks, careful sprint planning, and merging code early to ship as dark features. Tip 3: Git provides transparency and quality to agile development Adopting a regular release cadence is key to agile development. In order to make Git work for your agile workflow, you need to make sure that your master is always green. This means that if a feature isn\u2019t ready then wait for the next release. If you practice shorter release cycles this shouldn\u2019t and won\u2019t be a big deal. Branching Three branching strategies for agile teams Branching models often differ between teams, and are the subject of much debate in the software community. One big theme is how much work should remain in a branch before getting merged back into master. 1. Release branching Release branching refers to the idea that a release is contained entirely within a branch. This means that late in the development cycle, the release manager will create a branch from the master (e.g., \u201c1.1 development branch\u201d). All changes for the 1.1 release need to be applied twice: once to the 1.1 branch and then to the master code line. Working with two branches is extra work for the team and it's easy to forget to merge to both branches. Release branches can be unwieldy and hard to manage as many people are working on the same branch. We\u2019ve all felt the pain of having to merge many different changes on one single branch. If you must do a release branch, create the branch as close to the actual release as possible. 2. Feature branching Feature branches are often coupled with feature flags\u2013\"toggles\" that enable or disable a feature within the product. That makes it easy to deploy code into master and control when the feature is activated, making it easy to initially deploy the code well before the feature is exposed to end-users. 3. Task branching At Atlassian, we focus on a branch-per-task workflow. Every organization has a natural way to break down work in individual tasks inside of an issue tracker, like Jira Software. Issues then becomes the team's central point of contact for that piece of work. Task branching, also known as issue branching, directly connects those issues with the source code. Each issue is implemented on its own branch with the issue key included in the branch name. It\u2019s easy to see which code implements which issue: just look for the issue key in the branch name. With that level of transparency, it's easier to apply specific changes to master or any longer running legacy release branch. The merge Branches tend to be short-lived, making them easier to merge and more flexible across the code base. Between the ability to frequently and automatically merge branches as part of continuous integration (CI), and the fact that short-lived branches simply contain fewer changes, \"merge hell\" becomes is a thing of the past for teams using Git and Mercurial. That's what makes task branching so awesome! Code reviews So, what exactly is a code review? When a developer is finished working on an issue, another developer looks over the code and considers questions like: Are there any obvious logic errors in the code? Looking at the requirements, are all cases fully implemented? Are the new automated tests sufficient for the new code? Do existing automated tests need to be rewritten to account for changes in the code? Does the new code conform to existing style guidelines? What's in it for an agile team? Code reviews share knowledge At the heart of all agile teams is unbeatable flexibility: an ability to take work off the backlog and begin execution by all team members. As a result, teams are better able to swarm around new work because no one is the \"critical path.\" Full stack engineers can tackle front-end work as well as server-side work. Code reviews make for better estimates Estimation is a team exercise, and the team makes better estimates as product knowledge is spread across the team. As new features are added to the existing code, the original developer can provide good feedback and estimation. In addition, any code reviewer is also exposed to the complexity, known issues, and concerns of that area of the code base. Code reviews enable time off Nobody likes to be the sole point of contact on a piece of code. Likewise, nobody wants to dive into a critical piece of code they didn\u2019t write\u2013especially during a production emergency. Code reviews share knowledge across the team so that any team member can take up the reins and continue steering the ship. (We love mixed metaphors at Atlassian!) Freedom to take that needed vacation, or freedom to spend some time working on a different area of the product. Code reviews mentor newer engineers A special aspect of agile is that when new members join the team more seasoned engineers mentor the newer members. And code review helps facilitate conversations about the code base. Often, teams have hidden knowledge within the code that surfaces during code review. Newer members, with fresh eyes, discover gnarly, time-plauged areas of the code base that need a new perspective. So, code review also helps ensure new insight is tempered with existing knowledge. But code reviews take time! Sure, they take time. But that time isn't wasted\u2013far from it. When done right, code reviews actually save time in the long run. Here are three ways to optimize for that. Share the load At Atlassian, many teams require two reviews of any code before it's checked into the code base. Sound like a lot of overhead? Really, it's not. When an author selects reviewers, they cast a wide net across the team. Any two engineers can give input. This decentralizes the process so that no one is a bottleneck, and ensures good coverage for code review across the team. Use peer pressure to your advantage When developers know their code will be reviewed by a teammate, they make an extra effort to ensure that all tests are passing and the code is as well-designed as they can make it so the review will go smoothly. That mindfulness also tends to make the coding process itself go smoother and, ultimately, faster. Testing Moving from traditional to agile testing methods Much like compounding credit card debt, it starts with a small amount of pain, but snowballs quickly\u2013and saps the team of critical agility. To combat snowballing technical debt, at Atlassian we empower (nay: expect) our developers to be great champions for quality. We believe that developers bring key skills that help drive quality into the product: Developers are great at solving problems with code. Developers that write their own tests are more vested in fixing them when they fail. Developers who understand the feature requirements and their testing implications generally write better code. We believe each user story in the backlog requires both feature code and automated test code. Although some teams assign the developers the feature code while the test team takes on automated testing, we find it's more effective to have a single engineer deliver the complete set. Pro Tip: Treat bugs in new features and regressions in existing features differently. If a bug surfaces during development, take the time to understand the mistake, fix it, and move on. If a regression appears (i.e., something worked before but doesn't anymore), then it's likely to reappear. Create an automated test to protect against that regression in the future. Human touch through exploratory testing Exploratory testing makes the code, and the team, stronger. But isn't exploratory testing manual testing? Nope. At least not in the same sense as manual regression testing. Exploratory testing is a risk-based, critical thinking approach to testing that enables the person testing to use their knowledge of risks, implementation details, and the customers' needs. Knowing these things earlier in the testing process allows the developer or QA engineer to find issues rapidly and comprehensively, without the need for scripted test cases, detailed test plans, or requirements. We find it's much more effective than traditional manual testing, because we can take insights from exploratory testing sessions back to the original code and automated tests. Exploratory testing also teaches us about the experience of using the feature in a way that scripted testing doesn't. what is exploratory testing ? Continuous integration (CI) What is continuous integration? Continuous integration is the practice of routinely integrating code changes into the main branch of a repository, and testing the changes, as early and often as possible. Ideally, developers will integrate their code daily, if not multiple times a day. Protect quality with continuous builds and test automation Two practices keep us out of that situation: Continuous builds: Building the project as soon as a change is made. Ideally, the delta between each build is a single change-set. Test automation: Programatic validation of the software to ensure quality. Tests can initiate actions in the software from the UI (more on that in a moment), or from within the backend services layer. Testing in CI: Unit, API, and functional tests CI runs have two major phases. Step one makes sure the code compiles. (Or, in the case of interpreted languages, simply pulls all the pieces together.) Step two ensures the code works as designed. The surest way to do this is with a series of automated tests that validate all levels of the product. Unit Tests Unit tests run very close to core components in the code. They are the first line of defense in ensuring quality. Benefits: Easy to write, run fast, closely model the architecture of the code base. Drawbacks: Unit tests only validate core components of software; they don't reflect user workflows which often involve several components working together. API tests Good software is modular, which allows for clearer separation of work across several applications. APIs are the end points where different modules communicate with one another, and API tests validate them by making calls from one module to another. Benefits: Generally easy to write, run fast, and can easily model how applications will interact with one another. Drawbacks: In simple areas of the code, API tests can mimic some unit tests. Since APIs are the interfaces between parts of the application, they are especially useful when preparing for a release. Once a release candidate build passes all it's API tests, the team can be much more confident shipping it to customers. Functional tests Functional tests work over larger areas of the code base and model user workflows. In web applications, for example, HTTPUnit and Selenium directly interact with the user interface to test the product. Benefits: More likely to find bugs because they mimic user actions and test the interoperability of multiple components. Drawbacks: Slower than unit tests, and sometimes report false negatives because of network latency or a momentary outage somewhere in the technology stack.","title":"Software Development"},{"location":"Agile%20project%20managment/Software_Development/#software-development","text":"","title":"Software Development"},{"location":"Agile%20project%20managment/Software_Development/#developer","text":"Nobody wants to ship software with lots of bugs, performance issues, and low customer satisfaction. Continuous integration and code reviews help prevent this... but who has the time, right? Well, agile teams maketime. Agile developers focus on sustainable development\u2013not heroics. Sustainability is about good estimation, effective branching strategies for managing code, automated testing to protect quality, and continuous deployment to get fast feedback from users. Adopting sustainable development practices requires a discipline most of us aspire to\u2013but often struggle to realize\u2013as individuals. That's because nobody can go agile in a vacuum. The culture of the entire organization has to rally behind it. That means getting project leaders to buy into the notion that quality is more important than scope or schedule, which is often the hardest part of adopting agile.","title":"Developer"},{"location":"Agile%20project%20managment/Software_Development/#git","text":"","title":"Git"},{"location":"Agile%20project%20managment/Software_Development/#tip-1-start-thinking-about-tasks-as-git-branches","text":"At Atlassian, we create a new branch for every single issue. Whether it's a new feature, a bug fix, or a small improvement to some existing code, every code change gets its own branch. Branching is straightforwards and allows teams to easily collaborate inside one central codebase. When a developer create a branch, they effectively have their own isolated version of the codebase in which to make changes.","title":"Tip 1: Start thinking about tasks as Git branches"},{"location":"Agile%20project%20managment/Software_Development/#tip-2-multiple-branches-are-individually-testable-so-take-advantage","text":"Once branches are considered done and ready for code reviews, Git plays another key role in an agile development workflow: testing. Successful agile teams practice code reviews and setup automated tests (Continuous Integration or Continuous Development). To help with code reviews and testing, developers can easily notify the rest of their team that the branch work is ready for review and that it needs to be reviewed through a pull request. More simply put, a pull request is a way to ask another developer to merge one of your branches into the master branch and that it is ready for testing. With the right tooling, your Continuous Integration server can build and test your pull requests before you merge them. This gives you confidence that your merge won't cause problems. Pro Tip: A long running feature branch that is not merged to the master branch may hurt your ability to be agile and iterate. If you have a long running feature branch remember that you effectively have two divergent versions of your code base, which will result is more bug fixes and conflicts. But the best solution is to have short-lived feature branches. This can be achieved through decomposing user stories into smaller tasks, careful sprint planning, and merging code early to ship as dark features.","title":"Tip 2: Multiple branches are individually testable, so take advantage"},{"location":"Agile%20project%20managment/Software_Development/#tip-3-git-provides-transparency-and-quality-to-agile-development","text":"Adopting a regular release cadence is key to agile development. In order to make Git work for your agile workflow, you need to make sure that your master is always green. This means that if a feature isn\u2019t ready then wait for the next release. If you practice shorter release cycles this shouldn\u2019t and won\u2019t be a big deal.","title":"Tip 3: Git provides transparency and quality to agile development"},{"location":"Agile%20project%20managment/Software_Development/#branching","text":"","title":"Branching"},{"location":"Agile%20project%20managment/Software_Development/#three-branching-strategies-for-agile-teams","text":"Branching models often differ between teams, and are the subject of much debate in the software community. One big theme is how much work should remain in a branch before getting merged back into master.","title":"Three branching strategies for agile teams"},{"location":"Agile%20project%20managment/Software_Development/#1-release-branching","text":"Release branching refers to the idea that a release is contained entirely within a branch. This means that late in the development cycle, the release manager will create a branch from the master (e.g., \u201c1.1 development branch\u201d). All changes for the 1.1 release need to be applied twice: once to the 1.1 branch and then to the master code line. Working with two branches is extra work for the team and it's easy to forget to merge to both branches. Release branches can be unwieldy and hard to manage as many people are working on the same branch. We\u2019ve all felt the pain of having to merge many different changes on one single branch. If you must do a release branch, create the branch as close to the actual release as possible.","title":"1. Release branching"},{"location":"Agile%20project%20managment/Software_Development/#2-feature-branching","text":"Feature branches are often coupled with feature flags\u2013\"toggles\" that enable or disable a feature within the product. That makes it easy to deploy code into master and control when the feature is activated, making it easy to initially deploy the code well before the feature is exposed to end-users.","title":"2. Feature branching"},{"location":"Agile%20project%20managment/Software_Development/#3-task-branching","text":"At Atlassian, we focus on a branch-per-task workflow. Every organization has a natural way to break down work in individual tasks inside of an issue tracker, like Jira Software. Issues then becomes the team's central point of contact for that piece of work. Task branching, also known as issue branching, directly connects those issues with the source code. Each issue is implemented on its own branch with the issue key included in the branch name. It\u2019s easy to see which code implements which issue: just look for the issue key in the branch name. With that level of transparency, it's easier to apply specific changes to master or any longer running legacy release branch.","title":"3. Task branching"},{"location":"Agile%20project%20managment/Software_Development/#the-merge","text":"Branches tend to be short-lived, making them easier to merge and more flexible across the code base. Between the ability to frequently and automatically merge branches as part of continuous integration (CI), and the fact that short-lived branches simply contain fewer changes, \"merge hell\" becomes is a thing of the past for teams using Git and Mercurial. That's what makes task branching so awesome!","title":"The merge"},{"location":"Agile%20project%20managment/Software_Development/#code-reviews","text":"","title":"Code reviews"},{"location":"Agile%20project%20managment/Software_Development/#so-what-exactly-is-a-code-review","text":"When a developer is finished working on an issue, another developer looks over the code and considers questions like: Are there any obvious logic errors in the code? Looking at the requirements, are all cases fully implemented? Are the new automated tests sufficient for the new code? Do existing automated tests need to be rewritten to account for changes in the code? Does the new code conform to existing style guidelines?","title":"So, what exactly is a code review?"},{"location":"Agile%20project%20managment/Software_Development/#whats-in-it-for-an-agile-team","text":"","title":"What's in it for an agile team?"},{"location":"Agile%20project%20managment/Software_Development/#code-reviews-share-knowledge","text":"At the heart of all agile teams is unbeatable flexibility: an ability to take work off the backlog and begin execution by all team members. As a result, teams are better able to swarm around new work because no one is the \"critical path.\" Full stack engineers can tackle front-end work as well as server-side work.","title":"Code reviews share knowledge"},{"location":"Agile%20project%20managment/Software_Development/#code-reviews-make-for-better-estimates","text":"Estimation is a team exercise, and the team makes better estimates as product knowledge is spread across the team. As new features are added to the existing code, the original developer can provide good feedback and estimation. In addition, any code reviewer is also exposed to the complexity, known issues, and concerns of that area of the code base.","title":"Code reviews make for better estimates"},{"location":"Agile%20project%20managment/Software_Development/#code-reviews-enable-time-off","text":"Nobody likes to be the sole point of contact on a piece of code. Likewise, nobody wants to dive into a critical piece of code they didn\u2019t write\u2013especially during a production emergency. Code reviews share knowledge across the team so that any team member can take up the reins and continue steering the ship. (We love mixed metaphors at Atlassian!) Freedom to take that needed vacation, or freedom to spend some time working on a different area of the product.","title":"Code reviews enable time off"},{"location":"Agile%20project%20managment/Software_Development/#code-reviews-mentor-newer-engineers","text":"A special aspect of agile is that when new members join the team more seasoned engineers mentor the newer members. And code review helps facilitate conversations about the code base. Often, teams have hidden knowledge within the code that surfaces during code review. Newer members, with fresh eyes, discover gnarly, time-plauged areas of the code base that need a new perspective. So, code review also helps ensure new insight is tempered with existing knowledge.","title":"Code reviews mentor newer engineers"},{"location":"Agile%20project%20managment/Software_Development/#but-code-reviews-take-time","text":"Sure, they take time. But that time isn't wasted\u2013far from it. When done right, code reviews actually save time in the long run. Here are three ways to optimize for that.","title":"But code reviews take time!"},{"location":"Agile%20project%20managment/Software_Development/#share-the-load","text":"At Atlassian, many teams require two reviews of any code before it's checked into the code base. Sound like a lot of overhead? Really, it's not. When an author selects reviewers, they cast a wide net across the team. Any two engineers can give input. This decentralizes the process so that no one is a bottleneck, and ensures good coverage for code review across the team.","title":"Share the load"},{"location":"Agile%20project%20managment/Software_Development/#use-peer-pressure-to-your-advantage","text":"When developers know their code will be reviewed by a teammate, they make an extra effort to ensure that all tests are passing and the code is as well-designed as they can make it so the review will go smoothly. That mindfulness also tends to make the coding process itself go smoother and, ultimately, faster.","title":"Use peer pressure to your advantage"},{"location":"Agile%20project%20managment/Software_Development/#testing","text":"","title":"Testing"},{"location":"Agile%20project%20managment/Software_Development/#moving-from-traditional-to-agile-testing-methods","text":"Much like compounding credit card debt, it starts with a small amount of pain, but snowballs quickly\u2013and saps the team of critical agility. To combat snowballing technical debt, at Atlassian we empower (nay: expect) our developers to be great champions for quality. We believe that developers bring key skills that help drive quality into the product: Developers are great at solving problems with code. Developers that write their own tests are more vested in fixing them when they fail. Developers who understand the feature requirements and their testing implications generally write better code. We believe each user story in the backlog requires both feature code and automated test code. Although some teams assign the developers the feature code while the test team takes on automated testing, we find it's more effective to have a single engineer deliver the complete set. Pro Tip: Treat bugs in new features and regressions in existing features differently. If a bug surfaces during development, take the time to understand the mistake, fix it, and move on. If a regression appears (i.e., something worked before but doesn't anymore), then it's likely to reappear. Create an automated test to protect against that regression in the future.","title":"Moving from traditional to agile testing methods"},{"location":"Agile%20project%20managment/Software_Development/#human-touch-through-exploratory-testing","text":"Exploratory testing makes the code, and the team, stronger. But isn't exploratory testing manual testing? Nope. At least not in the same sense as manual regression testing. Exploratory testing is a risk-based, critical thinking approach to testing that enables the person testing to use their knowledge of risks, implementation details, and the customers' needs. Knowing these things earlier in the testing process allows the developer or QA engineer to find issues rapidly and comprehensively, without the need for scripted test cases, detailed test plans, or requirements. We find it's much more effective than traditional manual testing, because we can take insights from exploratory testing sessions back to the original code and automated tests. Exploratory testing also teaches us about the experience of using the feature in a way that scripted testing doesn't. what is exploratory testing ?","title":"Human touch through exploratory testing"},{"location":"Agile%20project%20managment/Software_Development/#continuous-integration-ci","text":"","title":"Continuous integration (CI)"},{"location":"Agile%20project%20managment/Software_Development/#what-is-continuous-integration","text":"Continuous integration is the practice of routinely integrating code changes into the main branch of a repository, and testing the changes, as early and often as possible. Ideally, developers will integrate their code daily, if not multiple times a day.","title":"What is continuous integration?"},{"location":"Agile%20project%20managment/Software_Development/#protect-quality-with-continuous-builds-and-test-automation","text":"Two practices keep us out of that situation: Continuous builds: Building the project as soon as a change is made. Ideally, the delta between each build is a single change-set. Test automation: Programatic validation of the software to ensure quality. Tests can initiate actions in the software from the UI (more on that in a moment), or from within the backend services layer.","title":"Protect quality with continuous builds and test automation"},{"location":"Agile%20project%20managment/Software_Development/#testing-in-ci-unit-api-and-functional-tests","text":"CI runs have two major phases. Step one makes sure the code compiles. (Or, in the case of interpreted languages, simply pulls all the pieces together.) Step two ensures the code works as designed. The surest way to do this is with a series of automated tests that validate all levels of the product.","title":"Testing in CI: Unit, API, and functional tests"},{"location":"Agile%20project%20managment/Software_Development/#unit-tests","text":"Unit tests run very close to core components in the code. They are the first line of defense in ensuring quality. Benefits: Easy to write, run fast, closely model the architecture of the code base. Drawbacks: Unit tests only validate core components of software; they don't reflect user workflows which often involve several components working together.","title":"Unit Tests"},{"location":"Agile%20project%20managment/Software_Development/#api-tests","text":"Good software is modular, which allows for clearer separation of work across several applications. APIs are the end points where different modules communicate with one another, and API tests validate them by making calls from one module to another. Benefits: Generally easy to write, run fast, and can easily model how applications will interact with one another. Drawbacks: In simple areas of the code, API tests can mimic some unit tests. Since APIs are the interfaces between parts of the application, they are especially useful when preparing for a release. Once a release candidate build passes all it's API tests, the team can be much more confident shipping it to customers.","title":"API tests"},{"location":"Agile%20project%20managment/Software_Development/#functional-tests","text":"Functional tests work over larger areas of the code base and model user workflows. In web applications, for example, HTTPUnit and Selenium directly interact with the user interface to test the product. Benefits: More likely to find bugs because they mimic user actions and test the interoperability of multiple components. Drawbacks: Slower than unit tests, and sometimes report false negatives because of network latency or a momentary outage somewhere in the technology stack.","title":"Functional tests"},{"location":"C%2B%2B/","text":"C++ Academy \u7ae0\u7bc0 Class Compound Type Copy Control Object-Oriented Programming Exception Template C++ Standard Library Smart Pointer Q&A Effective C++, 55 Specific Ways to Improve Your Programs and Designs Example Code Repository on GitLab exception template","title":"C++ Academy"},{"location":"C%2B%2B/#c-academy","text":"","title":"C++ Academy"},{"location":"C%2B%2B/#_1","text":"Class Compound Type Copy Control Object-Oriented Programming Exception Template C++ Standard Library Smart Pointer Q&A Effective C++, 55 Specific Ways to Improve Your Programs and Designs","title":"\u7ae0\u7bc0"},{"location":"C%2B%2B/#example-code-repository-on-gitlab","text":"exception template","title":"Example Code Repository on GitLab"},{"location":"C%2B%2B/class/","text":"Class Class \u7684\u5b9a\u7fa9\u8207\u5ba3\u544a Class \u80cc\u5f8c\u7684\u57fa\u672c\u6982\u5ff5\u662f\u8cc7\u6599\u7684\u62bd\u8c61 ( data abstraction ) \u8207\u5c01\u88dd ( encapsulation ). \u4f7f\u7528 typedef \u8b93 Class \u66f4\u6613\u95b1\u8b80 class Screen { public : // \u6210\u54e1\u51fd\u5f0f\u7684\u4ecb\u9762 private : std :: string contents ; std :: string :: size_type cursor ; std :: string :: size_type height , width ; } class Screen { public : typedef std :: string :: size_type index ; private : std :: string contents ; index cursor ; index height , width ; } \u6210\u54e1\u51fd\u5f0f\u53ef\u4ee5\u88ab\u91cd\u8f09 (Overloaded Member Functions) class Screen { public : typedef std :: string :: size_type index ; char get () const { return contents [ cursor ]; } char get ( index ht , index wd ) const ; private : std :: string contents ; index cursor ; index height , width ; } \u524d\u7f6e\u5ba3\u544a \u5ba3\u544a\u4e00\u500b class \u4f46\u662f\u4e0d\u5b9a\u7fa9\u5b83\uff0c\u662f\u53ef\u4ee5\u7684\uff1a class Screen ; // \u7d14\u7cb9\u5ba3\u544a \u9019\u7a2e\u5ba3\u544a\u7a31\u70ba \u524d\u7f6e\u5ba3\u544a (forward declaration)\uff0c\u6307\u51fa Screen \u4ee3\u8868\u67d0\u500b class \u578b\u5225\u3002\u5728\u5ba3\u544a\u4e4b\u5f8c\uff0c\u5b9a\u7fa9\u4e4b\u524d\uff0c Screen \u662f\u4e00\u500b\u4e0d\u5b8c\u6574\u578b\u5225 (incomplete type)\uff0c\u53ea\u77e5\u9053 Screen \u662f\u500b\u578b\u5225\uff0c\u4e0d\u77e5\u9053\u5b83\u542b\u6709\u4ec0\u9ebc\u6210\u54e1\u3002 \u4e0d\u5b8c\u6574\u578b\u5225\u53ea\u80fd\u7528\u4f86\u5b9a\u7fa9 \u6307\u5411\u9019\u500b\u578b\u5225\u7684 pointer \u6216\u662f reference\uff0c\u6216\u662f\u7528\u4f86\u5ba3\u544a\u4ee5\u6b64\u578b\u5225\u70ba\u53c3\u6578\u7684\u51fd\u5f0f\u3002 \u5982\u4f55\u4f7f\u7528 this pointer Class Screen \u5c31\u662f\u500b\u597d\u4f8b\u5b50\uff0c\u76ee\u524d\u70ba\u6b62\u53ea\u6709\u4e00\u5c0d get() \u51fd\u5f0f\uff0c\u5f88\u5408\u7406\u7684\u6211\u5011\u8a72\u6703\u8981\u52a0\u4e0a\uff1a \b\u4e00\u5c0d set() \uff0c\u7528\u4f86\u6307\u5b9a\u5b57\u5143\u6216\u6e38\u6a19\u6240\u6307\u5b57\u5143\u8a2d\u503c\u3002 \u4e00\u5c0d move() \uff0c\u7d66\u5b9a\u5169\u500b\u7d22\u5f15\u503c\uff0c\u5c07 cursor \u79fb\u81f3\u9019\u500b\u65b0\u4f4d\u7f6e\u3002 \u7406\u60f3\u4e0a\uff0c\u6211\u5011\u6703\u5e0c\u671b\u7528\u6236\u53ef\u4ee5\u628a\u9019\u4e9b\u64cd\u4f5c\u9023\u6210\u4e00\u5217\uff0c\u6210\u70ba\u55ae\u7368\u7b97\u5f0f\uff1a myScreen . move ( 4 , 0 ). set ( '#' ); \u6211\u5011\u5e0c\u671b\u4e0a\u9762\u7b49\u50f9\u65bc\uff1a myScreen . move ( 4 , 0 ); myScree . set ( '#' ); \u70ba\u4e86\u53ef\u4ee5\u5728\u540c\u4e00\u500b\u7b97\u5f0f\u4e2d\u547c\u53eb move() \u548c set() \uff0c\u6bcf\u500b\u64cd\u4f5c\u90fd\u5fc5\u9808\u56de\u50b3\u4e00\u500b reference \u6307\u5411\u7576\u524d\u7269\u4ef6\uff1a class Screen { public : Screen & set ( char ); Screen & move ( index r , index c ); } Screen & Screen :: set ( char c ){ content [ cursor ] = c ; return * this ; } Screen & Screen :: move ( index r , index c ){ index row = r * width ; cursor = row + c ; return * this ; } const \u6210\u54e1\u51fd\u5f0f\u8fd4\u56de *this \u5728 const \u6210\u54e1\u51fd\u5f0f\u4e2d\uff0c\u6211\u5011\u4e0d\u80fd\u8fd4\u56de\u4e00\u500b\u6307\u5411 class \u7269\u4ef6\u7684 reference\uff0c const \u6210\u54e1\u51fd\u5f0f\u53ea\u80fd\u4ee5 const reference \u7684\u5f62\u5f0f\u8fd4\u56de *this \u3002 \u5047\u8a2d\uff0c\u6211\u5011\u70ba class Screen \u6dfb\u52a0\u4e00\u500b display() \uff0c\u908f\u8f2f\u4e0a\u9019\u500b\u51fd\u793a\u61c9\u8a72\u662f const \u6210\u54e1\uff0c\u56e0\u70ba\u5217\u5370 contents \u4e26\u4e0d\u6703\u6539\u8b8a\u7269\u4ef6\u5167\u5bb9\u3002\u63a5\u8457\u770b\u4ee5\u4e0b\u7a0b\u5f0f\u78bc: Screen mySreen ; //\u9019\u6bb5\u7a0b\u5f0f\u78bc\u6703\u5931\u6557\uff0cdisplay() \u8fd4\u56de\u4e00\u500b const reference; \u7136\u5f8c\u6211\u5011\u4e0d\u80fd\u5920\u4ee5\u4e00\u500b const \u7269\u4ef6\u559a\u8d77 set() myScreen . display (). set ( '*' ); \u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u6211\u5011\u5229\u7528\u91cd\u8f09\u5fc5\u9808\u5b9a\u7fa9\u5169\u500b display() : \u4e00\u500b\u662f const \u4e00\u500b\u4e0d\u662f\u3002 class Screen { public : Screen & display ( std :: iostream & os ) { do_display ( os ); return * this ; } const Screen & display ( std :: iostream & os ) const { do_display ( os ); return * this ; } private : void do_display ( std :: iostream & os ) const { os << contents ; } } \u73fe\u5728\u628a display() \u653e\u5165\u5927\u7b97\u5f0f\u4e2d, nonconst \u7248\u672c\u6703\u88ab\u559a\u8d77\u3002\u4f46\u662f\u7576\u6211\u5011\u8981 display() \u4e00\u500b const \u7269\u4ef6\u6642\uff0c const \u7248\u672c\u6703\u88ab\u559a\u8d77: Screen myScreen ( 5 , 3 ); const Screen blank ( 5 , 3 ); myScreen . set ( '#' ). display ( cout ); \u53ef\u8b8a\u7684 (Mutable) \u6210\u54e1\u51fd\u5f0f \u5e38\u5e38\uff0c\u5373\u4f7f\u5728\u4e00\u500b const \u6210\u54e1\u51fd\u5f0f\u4e2d\uff0c\u6211\u5011\u4e5f\u5e0c\u671b\u80fd\u5920\u4fee\u6539 class \u7684\u67d0\u500b\u6210\u54e1\u3002\u53ea\u8981\u4ee5\u95dc\u9375\u5b57 mutable \u4fee\u98fe\u6210\u54e1\u8b8a\u6578\uff0c\u5c31\u53ef\u4ee5\u9054\u5230\u9019\u6a23\u7684\u76ee\u7684\u3002 class Screen { public : private : mutable size_t access_ctr ; void do_display ( std :: iostream & os ) const { ++ access_ctr ; // \u8a08\u7b97\u6210\u54e1\u51fd\u5f0f\u88ab\u547c\u53eb\u7684\u6b21\u6578 os << contents ; } }; \u5efa\u69cb\u5f0f (Constructors) \u5efa\u69cb\u662f\u53ef\u4ee5\u88ab\u91cd\u8f09 class Sales_item { public : Sales_item ( const std :: string & ); Sales_item ( std :: istream & ); Sales_item (); // default \u5efa\u69cb\u5f0f } \u5f15\u6578\u6c7a\u5b9a\u4f7f\u7528\u54ea\u500b\u5efa\u69cb\u5f0f // \u4f7f\u7528 default \u5efa\u69cb\u5f0f Sales_item empty ; Sales_item primer_3rd ( \"0-201-82470-1\" ); Sales_item primer_4th ( cin ); \u5efa\u69cb\u5f0f\u521d\u503c\u5668 (Constructor Initializer) // \u7de8\u5beb\u5efa\u69cb\u5f0f\u6642\uff0c\u63a8\u85a6\u4f7f\u7528\u5efa\u69cb\u5f0f\u521d\u503c\u5217 Sales_item :: Sales_item ( const string & book ) : isbn ( book ), units_sold ( 0 ), revenue ( 0.0 ) {} // \u5408\u6cd5\u4f46\u57f7\u884c\u901f\u5ea6\u8f03\u6162\u7684\u5efa\u69cb\u5f0f // \u6c92\u6709\u5efa\u69cb\u5f0f\u521d\u503c\u5668 Sales_item :: Sales_item ( const string & book ) { isbn = book ; units_sold = 0 ; revenue = 0.0 ; } \u6982\u5ff5\u4e0a\u6211\u5011\u8a8d\u70ba\u5efa\u69cb\u5f0f\u5206\u5169\u500b\u968e\u6bb5\u57f7\u884c: 1. \u521d\u59cb\u5316\u968e\u6bb5 2. \u4e00\u822c\u8a08\u7b97\u968e\u6bb5 \u8a08\u7b97\u968e\u6bb5\u7531\u5efa\u69cb\u5f0f\u672c\u9ad4\u5167\u7684\u6240\u6709\u8ff0\u5f0f\u7d44\u6210 \u4e0a\u9762\u5169\u7248 Sales_item \u5efa\u69cb\u5f0f\u6548\u679c\u76f8\u540c\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u4f7f\u7528\u5efa\u69cb\u5f0f\u521d\u59cb\u5668\u7684\u7248\u672c\uff0c\u662f\u771f\u6b63\u7684 \u521d\u59cb\u5316 \u6210\u54e1\u8b8a\u6578\uff0c\u800c\u53e6\u4e00\u500b\u7248\u672c\u662f\u5728\u5efa\u69cb\u5f0f\u672c\u9ad4\u4e2d\u70ba\u6210\u54e1\u8b8a\u6578 \u8ce6\u503c \u6709\u6642\u5019\u5c31\u662f\u9700\u8981\u5efa\u69cb\u5f0f\u521d\u503c\u5668 \u8209\u500b\u4f8b\u5b50\uff0c\u4ee5\u4e0b\u5efa\u69cb\u5f0f\u6709\u8aa4: class ConstRef { public : ConstRef ( int ii ); private : int i ; const int ci ; int & ri ; }; ConstRef :: ConstRef ( int ii ) { // \u8ce6\u503c: i = ii ; // \u6c92\u554f\u984c ci = ii ; // \u932f\u8aa4: \u4e0d\u53ef\u5c0d\u4e00\u500b const \u8ce6\u503c ri = i ; // \u932f\u8aa4: \u8ce6\u503c\u7d66 ri\uff0c\u4f46\u5f8c\u8005\u5c1a\u672a\u7d81\u5b9a\u81f3\u67d0\u7269\u4ef6 } \u67d0\u4e9b\u6210\u54e1\u8b8a\u6578\u5fc5\u9808\u5728\u5efa\u69cb\u5f0f\u521d\u503c\u5668\u4e2d\u88ab\u521d\u59cb\u5316\u3002Class \u578b\u5225\u4e2d\u51e1\u662f\u4e0d\u5e36 default \u5efa\u69cb\u5f0f\u7684\u6210\u54e1\uff0c const \u6210\u54e1\uff0creference \u6210\u54e1\uff0c\u4e0d\u8ad6\u578b\u5225\u662f\u4ec0\u9ebc\uff0c\u90fd\u5fc5\u9808\u5728\u5efa\u69cb\u521d\u503c\u5668\u4e2d\u5b8c\u6210\u521d\u59cb\u5316 // \u6b63\u78ba: \u660e\u78ba\u7684\u521d\u59cb\u5316 reference \u548c const \u6210\u54e1 ConstRef :: ConstRef ( int ii ) : i ( ii ), ci ( i ), ri ( ii ) {} \u6210\u54e1\u521d\u59cb\u5316\u7684\u9806\u5e8f \u521d\u59cb\u5316\u9806\u5e8f\u5f80\u5f80\u4e26\u4e0d\u91cd\u8981\uff0c\u7136\u800c\u5982\u679c\u67d0\u500b\u6210\u54e1\u76f8\u4f9d\u65bc\u53e6\u4e00\u500b\u6210\u54e1\uff0c\u90a3\u9ebc\u521d\u59cb\u5316\u6210\u54e1\u5c31\u8b8a\u5f97\u91cd\u8981\u4e86\u3002 \u8003\u616e\u4ee5\u4e0b\u60c5\u6cc1: class X { int i ; int j ; public : // \u57f7\u884c\u671f\u932f\u8aa4:\u56e0\u70ba\u5176\u5be6 i \u5728 j \u4e4b\u524d\u88ab\u521d\u59cb\u5316\u3002 X ( int val ) : j ( val ), i ( j ) {} }; Default \u5efa\u69cb\u5f0f \u7576\u6211\u5011\u5b9a\u7fa9\u4e00\u500b\u7269\u4ef6\u537b\u6c92\u6709\u63d0\u4f9b\u521d\u503c\u6642\uff0c\u4fbf\u6703\u559a\u8d77 default \u5efa\u69cb\u5f0f\u3002\u5982\u679c\u5efa\u69cb\u5f0f\u7684\u6240\u6709\u53c3\u6578\u90fd\u6709\u9810\u8a2d\u5f15\u6578\uff0c\u90a3\u4e5f\u6210\u70ba\u4e00\u500b default \u5efa\u69cb\u5f0f\u3002 \u5982\u679c class \u6c92\u6709\u5b9a\u7fa9\u5efa\u69cb\u5f0f\uff0c\u7de8\u8b6f\u5668\u6703\u81ea\u52d5\u70ba\u5b83\u751f\u6210\u4e00\u500b default \u5efa\u69cb\u5f0f\u3002 \u96b1\u5f0f\u578b\u5225\u8f49\u63db \u53ef\u88ab\u552f\u4e00\u5f15\u6578\u559a\u8d77 \u7684\u5efa\u69cb\u5f0f\uff0c\u672c\u8eab\u5c31\u5b9a\u7fa9\u4e86\u5f9e\u5176\u53c3\u6578\u578b\u5225\u81f3 class \u578b\u5225\u7684\u4e00\u500b\u96b1\u5f0f\u8f49\u63db\u3002 string null_book = \"9-999-99999-9\" ; //\u6c92\u554f\u984c: \u5efa\u7acb\u4e00\u500b Sales_item\uff0c\u5176\u4e2d units_sold \u548c revenus \u7686\u70ba 0\uff0cisbn \u7b49\u65bc null_book item . same_isbn ( null_book ); \u9019\u500b\u7a0b\u5f0f\u4f7f\u7528 string \u7269\u4ef6\u4f5c\u70ba Sales_item \u4e2d\u7684 same_isbn() \u51fd\u5f0f\u5f15\u6578\u3002\u7136\u800c\u8a72\u7a0b\u5f0f\u671f\u671b\u7372\u5f97\u4e00\u500b Sales_item \u7269\u4ef6\u3002\u65bc\u662f\u7de8\u8b6f\u5668\u559a\u8d77 Sales_item \u4e2d \u5e36\u4e00\u500b string \u7684\u5efa\u69cb\u5f0f\uff0c\u4ee5 null_book \u751f\u6210\u4e00\u500b\u65b0\u7269\u4ef6\u3002\u65b0\u751f\u6210\u7684 Sales_item \u7269\u4ef6 (\u66ab\u6642\u7269\u4ef6) \u88ab\u50b3\u7d66 same_isbn() \u3002 \u7981\u6b62\u5efa\u69cb\u5f0f\u5b9a\u7fa9\u51fa\u96b1\u5f0f\u8f49\u63db \u5982\u679c\u5c07\u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba explicit \uff0c\u5c31\u53ef\u4ee5\u963b\u6b62\u7de8\u8b6f\u5668\u5728\u9700\u8981\u96b1\u5f0f\u8f49\u63db\u6642\u559a\u8d77\u90a3\u500b\u5efa\u69cb\u5f0f\u3002 class Sales_item { public : explicit Sales_item ( const string & book = \"\" ) : isbn ( book ), units_sold ( 0 ), revenus ( 0.0 ) {} explicit Sales_item ( std :: istream & is ); }; \u52a0\u4e0a\u95dc\u9375\u5b57 explicit \u4e4b\u5f8c\uff0c\u5b83\u5011\u90fd\u4e0d\u518d\u53ef\u88ab\u7528\u4f86\u96b1\u5f0f\u5275\u5efa Sales_item \u7269\u4ef6\u3002 item . same_isbn ( null_book ); //\u932f\u8aa4: string \u5efa\u69cb\u5f0f\u662f explicit item . same_isbn ( cin ); //\u932f\u8aa4: istream \u5efa\u69cb\u5f0f\u662f explicit \u901a\u5e38\u61c9\u8a72\u5c07\u55ae\u5f15\u6578\u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba explicit \uff0c\u9664\u975e\u6709\u5f88\u660e\u986f\u7684\u7406\u7531\u9700\u8981\u5b9a\u7fa9\u4e00\u500b\u96b1\u5f0f\u8f49\u63db\u3002\u628a\u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba explicit \u53ef\u907f\u514d\u67d0\u4e9b\u932f\u8aa4\uff0c\u800c\u7576\u7528\u6236\u9700\u8981\u8f49\u63db\u6642\u4f9d\u7136\u53ef\u4ee5\u660e\u78ba\u559a\u8d77\u4ed6\u3002 \u59d4\u6d3e\u5efa\u69cb\u5f0f (Delegating Constructors) C++11 \u63d0\u4f9b\u4e86\u65b0\u7684\u8a2d\u5b9a\u5efa\u69cb\u5f0f\u521d\u59cb\u503c\u7684\u529f\u80fd, \u7a31\u70ba\u59d4\u6d3e\u5efa\u69cb\u5f0f, \u7bc4\u4f8b\u5982\u4e0b: class Sales_data { public : // nondelegating constructor initializes members from corresponding arguments Sales_data ( std :: string s , unsigned cnt , double price ) : bookNo ( s ), units_sold ( cnt ), revenue ( cnt * price ) {} // remaining constructors all delegate to another constructor Sales_data () : Sales_data ( \"\" , 0 , 0 ) {} Sales_data ( std :: string s ) : Sales_data ( s , 0 , 0 ) {} Sales_data ( std :: istream & is ) : Sales_data () { read ( is , * this ); } // other members as before }; Friends (\u53cb\u5143) \u6709\u6642\u5019\uff0c\u4ee4 \u7279\u5b9a\u7684\u67d0\u4e9b\u975e\u6210\u54e1\u51fd\u5f0f \u5f97\u4ee5\u53d6\u7528 class \u7684 private \u6210\u54e1 \uff0c\u800c\u53c8\u4ecd\u80fd\u963b\u6b62\u5176\u4ed6\u7684\u4e00\u822c\u6027\u5b58\u53d6\uff0c\u53ef\u5e36\u4f86\u5f88\u5927\u7684\u65b9\u4fbf\u3002 class Screen { // Window_Mgr \u7684\u6210\u54e1\u51fd\u5f0f\u53ef\u4ee5\u5b58\u53d6 class Screen \u7684 private \u6210\u5206 friend class Window_Mgr ; //... } Window_Mgr & Window_Mgr::relocate ( Screen :: index r , Screen :: index c , Screen & s ) { // \u76f4\u63a5\u53d6\u7528 height \u548c width \u6c92\u554f\u984c s . height += r ; s . width += c ; return * this ; } \u8b93\u53e6\u4e00\u500b Class \u7684\u6210\u54e1\u51fd\u5f0f\u6210\u70ba friend class Screen { // Window_Mgr \u5fc5\u9808\u5728 class Screen \u4e4b\u524d\u5148\u5b9a\u7fa9\u597d friend Window_Mgr & Window_Mgr::relocate ( Screen :: index , Screen :: index , Screen & ); //... }; static \u6210\u54e1 \u4e00\u822c\u7684\u6240\u8b02 nonstatic \u6210\u54e1\u8b8a\u6578\u5b58\u5728\u65bc class \u7684\u6bcf\u500b\u7269\u4ef6\u4e2d\u3002\u7136\u800c static \u6210\u54e1\u537b\u662f\u7368\u7acb\u65bc class \u7684\u4efb\u4f55\u7269\u4ef6\u800c\u5b58\u5728\uff1b\u6bcf\u4e00\u500b static \u6210\u54e1\u8b8a\u6578\u90fd\u662f \u8207 class \u76f8\u95dc\u806f \u800c\u975e \u8207 object \u76f8\u95dc\u806f \u3002 \u4f7f\u7528 static \u6210\u54e1\u800c\u4e0d\u4f7f\u7528 globals \u597d\u8655 static \u6210\u54e1\u540d\u7a31\u843d\u5728 class \u4f5c\u7528\u57df\u4e2d\uff0c\u9019\u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6 classes \u7684\u6210\u54e1\u6216\u662f\u548c global \u7269\u4ef6\u767c\u751f\u540d\u7a31\u4e0a\u7684\u885d\u7a81\u3002 \u53b2\u884c\u5c01\u88dd\u3002 static \u6210\u54e1\u53ef\u4ee5\u662f private \uff0cglobal \u7269\u4ef6\u537b\u4e0d\u80fd\u5920\u3002 \u95b1\u8b80\u7a0b\u5f0f\u78bc\u53ef\u4ee5\u8f15\u9b06\u770b\u51fa\u4e00\u500b static \u6210\u54e1\u548c\u5176 class \u4e4b\u9593\u6709\u95dc\u9023\u6027\u3002\u9019\u53ef\u589e\u52a0\u7a0b\u5f0f\u53ef\u8b80\u6027\u3002 \u5b9a\u7fa9 static \u6210\u54e1 \u8209\u500b\u4f8b\u5b50\uff0c\u4e00\u500b\u9280\u884c\u5e33\u6236\u7684\u7c21\u55ae class\u3002\u6bcf\u500b\u5e33\u6236\u90fd\u6709\u9918\u984d\u548c\u6236\u540d\uff0c\u6bcf\u500b\u5e33\u6236\u90fd\u6709\u5229\u606f\uff0c\u4f46\u6bcf\u500b\u5e33\u6236\u7684\u5229\u7387\u7e3d\u662f\u76f8\u540c\u7684\u3002 class Account { public : void applyint () { amount += amount * interestRate ; } static double rate () { return interestRate ; } static void rate ( double ); //\u8a2d\u5b9a\u65b0\u5229\u7387 private : std :: string owner ; double amount ; static double interestRate ; static double initRate (); }; \u7269\u4ef6\u88e1\u9762\u4e26\u6c92\u6709\u54ea\u4e00\u500b\u6210\u54e1\u76f8\u61c9\u65bc static \u6210\u54e1\u8b8a\u6578\uff0c\u800c\u662f\u5b58\u5728\u552f\u4e00\u7684 interestRate \u7269\u4ef6\u88ab Account \u7684\u6240\u6709\u7269\u4ef6\u5171\u7528\u3002 \u4f7f\u7528 static \u6210\u54e1 Account ac1 ; Account * ac2 = & ac1 ; //\u4ee5\u4e0b\u662f\u547c\u53eb static rate() \u4e09\u7a2e\u7b49\u50f9\u5beb\u6cd5 double rate ; rate = ac1 . rate (); rate = ac2 -> rate (); rate = Account :: rate (); static \u6210\u54e1\u51fd\u5f0f\u4e0d\u5e36 this static \u6210\u54e1\u662f class \u7684\u4e00\u90e8\u5206\uff0c\u4e0d\u662f\u4efb\u4f55\u7269\u4ef6\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64 static \u6210\u54e1\u51fd\u5f0f\u6c92\u6709 this \u6307\u6a19\u3002\u5728 static \u6210\u54e1\u51fd\u5f0f\u4e2d\u53d6\u7528 this \u6307\u6a19\uff0c\u7de8\u8b6f\u6703\u932f\u8aa4\u3002 \u7531\u65bc static \u6210\u54e1\u4e0d\u662f\u4efb\u4f55\u7269\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5 static \u6210\u54e1\u51fd\u5f0f\u4e0d\u80fd\u5ba3\u544a\u70ba const \u3002 static \u6210\u54e1\u51fd\u5f0f\u4e5f\u4e0d\u8a72\u5ba3\u544a\u70ba virtual \u3002 static \u6210\u54e1\u8b8a\u6578 \u4f60\u5fc5\u9808\u5728 class \u672c\u9ad4\u5916\u5c0d static \u6210\u54e1\u8b8a\u6578\u5b9a\u7fa9\u4e00\u6b21\u3002\u548c\u4e00\u822c\u6210\u54e1\u8b8a\u6578\u4e0d\u540c\uff0c static \u6210\u54e1\u8b8a\u6578\u4e26\u975e\u7d93\u7531 class \u5efa\u69cb\u5f0f\u4f86\u521d\u59cb\u5316\uff0c\u800c\u662f\u5728\u5b9a\u7fa9\u6642\u88ab\u521d\u59cb\u5316\u3002 static \u6210\u54e1\u4e0d\u96b8\u5c6c\u65bc class \u7269\u4ef6 \u56e0\u70ba static \u6210\u54e1\u7368\u7acb\u65bc\u4efb\u4f55\u7269\u4ef6\u800c\u5b58\u5728\uff0c\u6240\u4ee5 static \u6210\u54e1\u8b8a\u6578\u53ef\u4ee5\u662f\u5176\u6240\u5728 class\u3002\u4f46 nonstatic \u6210\u54e1\u8b8a\u6578\u53ea\u80fd\u662f\u4ee5 pointer \u6216 reference \u6307\u5411\u5176\u6240\u5728\u7684 class: class Bar { public : // ... private : static Bar mem1 ; //\u6b63\u78ba Bar * mem2 ; //\u6b63\u78ba Bar mem3 ; //\u932f\u8aa4 }; \u985e\u4f3c\u60c5\u6cc1\uff0c static \u6210\u54e1\u8b8a\u6578\u53ef\u4ee5\u88ab\u7576\u4f5c\u4e00\u500b\u9810\u8a2d\u5f15\u6578: class Screen { public : Screen & clear ( char = bkground ); private : static const char bkground ; };","title":"Class"},{"location":"C%2B%2B/class/#class","text":"","title":"Class"},{"location":"C%2B%2B/class/#class_1","text":"Class \u80cc\u5f8c\u7684\u57fa\u672c\u6982\u5ff5\u662f\u8cc7\u6599\u7684\u62bd\u8c61 ( data abstraction ) \u8207\u5c01\u88dd ( encapsulation ).","title":"Class \u7684\u5b9a\u7fa9\u8207\u5ba3\u544a"},{"location":"C%2B%2B/class/#typedef-class","text":"class Screen { public : // \u6210\u54e1\u51fd\u5f0f\u7684\u4ecb\u9762 private : std :: string contents ; std :: string :: size_type cursor ; std :: string :: size_type height , width ; } class Screen { public : typedef std :: string :: size_type index ; private : std :: string contents ; index cursor ; index height , width ; }","title":"\u4f7f\u7528 typedef \u8b93 Class \u66f4\u6613\u95b1\u8b80"},{"location":"C%2B%2B/class/#overloaded-member-functions","text":"class Screen { public : typedef std :: string :: size_type index ; char get () const { return contents [ cursor ]; } char get ( index ht , index wd ) const ; private : std :: string contents ; index cursor ; index height , width ; }","title":"\u6210\u54e1\u51fd\u5f0f\u53ef\u4ee5\u88ab\u91cd\u8f09 (Overloaded Member Functions)"},{"location":"C%2B%2B/class/#_1","text":"\u5ba3\u544a\u4e00\u500b class \u4f46\u662f\u4e0d\u5b9a\u7fa9\u5b83\uff0c\u662f\u53ef\u4ee5\u7684\uff1a class Screen ; // \u7d14\u7cb9\u5ba3\u544a \u9019\u7a2e\u5ba3\u544a\u7a31\u70ba \u524d\u7f6e\u5ba3\u544a (forward declaration)\uff0c\u6307\u51fa Screen \u4ee3\u8868\u67d0\u500b class \u578b\u5225\u3002\u5728\u5ba3\u544a\u4e4b\u5f8c\uff0c\u5b9a\u7fa9\u4e4b\u524d\uff0c Screen \u662f\u4e00\u500b\u4e0d\u5b8c\u6574\u578b\u5225 (incomplete type)\uff0c\u53ea\u77e5\u9053 Screen \u662f\u500b\u578b\u5225\uff0c\u4e0d\u77e5\u9053\u5b83\u542b\u6709\u4ec0\u9ebc\u6210\u54e1\u3002 \u4e0d\u5b8c\u6574\u578b\u5225\u53ea\u80fd\u7528\u4f86\u5b9a\u7fa9 \u6307\u5411\u9019\u500b\u578b\u5225\u7684 pointer \u6216\u662f reference\uff0c\u6216\u662f\u7528\u4f86\u5ba3\u544a\u4ee5\u6b64\u578b\u5225\u70ba\u53c3\u6578\u7684\u51fd\u5f0f\u3002","title":"\u524d\u7f6e\u5ba3\u544a"},{"location":"C%2B%2B/class/#this-pointer","text":"Class Screen \u5c31\u662f\u500b\u597d\u4f8b\u5b50\uff0c\u76ee\u524d\u70ba\u6b62\u53ea\u6709\u4e00\u5c0d get() \u51fd\u5f0f\uff0c\u5f88\u5408\u7406\u7684\u6211\u5011\u8a72\u6703\u8981\u52a0\u4e0a\uff1a \b\u4e00\u5c0d set() \uff0c\u7528\u4f86\u6307\u5b9a\u5b57\u5143\u6216\u6e38\u6a19\u6240\u6307\u5b57\u5143\u8a2d\u503c\u3002 \u4e00\u5c0d move() \uff0c\u7d66\u5b9a\u5169\u500b\u7d22\u5f15\u503c\uff0c\u5c07 cursor \u79fb\u81f3\u9019\u500b\u65b0\u4f4d\u7f6e\u3002 \u7406\u60f3\u4e0a\uff0c\u6211\u5011\u6703\u5e0c\u671b\u7528\u6236\u53ef\u4ee5\u628a\u9019\u4e9b\u64cd\u4f5c\u9023\u6210\u4e00\u5217\uff0c\u6210\u70ba\u55ae\u7368\u7b97\u5f0f\uff1a myScreen . move ( 4 , 0 ). set ( '#' ); \u6211\u5011\u5e0c\u671b\u4e0a\u9762\u7b49\u50f9\u65bc\uff1a myScreen . move ( 4 , 0 ); myScree . set ( '#' ); \u70ba\u4e86\u53ef\u4ee5\u5728\u540c\u4e00\u500b\u7b97\u5f0f\u4e2d\u547c\u53eb move() \u548c set() \uff0c\u6bcf\u500b\u64cd\u4f5c\u90fd\u5fc5\u9808\u56de\u50b3\u4e00\u500b reference \u6307\u5411\u7576\u524d\u7269\u4ef6\uff1a class Screen { public : Screen & set ( char ); Screen & move ( index r , index c ); } Screen & Screen :: set ( char c ){ content [ cursor ] = c ; return * this ; } Screen & Screen :: move ( index r , index c ){ index row = r * width ; cursor = row + c ; return * this ; }","title":"\u5982\u4f55\u4f7f\u7528 this pointer"},{"location":"C%2B%2B/class/#const-this","text":"\u5728 const \u6210\u54e1\u51fd\u5f0f\u4e2d\uff0c\u6211\u5011\u4e0d\u80fd\u8fd4\u56de\u4e00\u500b\u6307\u5411 class \u7269\u4ef6\u7684 reference\uff0c const \u6210\u54e1\u51fd\u5f0f\u53ea\u80fd\u4ee5 const reference \u7684\u5f62\u5f0f\u8fd4\u56de *this \u3002 \u5047\u8a2d\uff0c\u6211\u5011\u70ba class Screen \u6dfb\u52a0\u4e00\u500b display() \uff0c\u908f\u8f2f\u4e0a\u9019\u500b\u51fd\u793a\u61c9\u8a72\u662f const \u6210\u54e1\uff0c\u56e0\u70ba\u5217\u5370 contents \u4e26\u4e0d\u6703\u6539\u8b8a\u7269\u4ef6\u5167\u5bb9\u3002\u63a5\u8457\u770b\u4ee5\u4e0b\u7a0b\u5f0f\u78bc: Screen mySreen ; //\u9019\u6bb5\u7a0b\u5f0f\u78bc\u6703\u5931\u6557\uff0cdisplay() \u8fd4\u56de\u4e00\u500b const reference; \u7136\u5f8c\u6211\u5011\u4e0d\u80fd\u5920\u4ee5\u4e00\u500b const \u7269\u4ef6\u559a\u8d77 set() myScreen . display (). set ( '*' ); \u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u6211\u5011\u5229\u7528\u91cd\u8f09\u5fc5\u9808\u5b9a\u7fa9\u5169\u500b display() : \u4e00\u500b\u662f const \u4e00\u500b\u4e0d\u662f\u3002 class Screen { public : Screen & display ( std :: iostream & os ) { do_display ( os ); return * this ; } const Screen & display ( std :: iostream & os ) const { do_display ( os ); return * this ; } private : void do_display ( std :: iostream & os ) const { os << contents ; } } \u73fe\u5728\u628a display() \u653e\u5165\u5927\u7b97\u5f0f\u4e2d, nonconst \u7248\u672c\u6703\u88ab\u559a\u8d77\u3002\u4f46\u662f\u7576\u6211\u5011\u8981 display() \u4e00\u500b const \u7269\u4ef6\u6642\uff0c const \u7248\u672c\u6703\u88ab\u559a\u8d77: Screen myScreen ( 5 , 3 ); const Screen blank ( 5 , 3 ); myScreen . set ( '#' ). display ( cout );","title":"const \u6210\u54e1\u51fd\u5f0f\u8fd4\u56de *this"},{"location":"C%2B%2B/class/#mutable","text":"\u5e38\u5e38\uff0c\u5373\u4f7f\u5728\u4e00\u500b const \u6210\u54e1\u51fd\u5f0f\u4e2d\uff0c\u6211\u5011\u4e5f\u5e0c\u671b\u80fd\u5920\u4fee\u6539 class \u7684\u67d0\u500b\u6210\u54e1\u3002\u53ea\u8981\u4ee5\u95dc\u9375\u5b57 mutable \u4fee\u98fe\u6210\u54e1\u8b8a\u6578\uff0c\u5c31\u53ef\u4ee5\u9054\u5230\u9019\u6a23\u7684\u76ee\u7684\u3002 class Screen { public : private : mutable size_t access_ctr ; void do_display ( std :: iostream & os ) const { ++ access_ctr ; // \u8a08\u7b97\u6210\u54e1\u51fd\u5f0f\u88ab\u547c\u53eb\u7684\u6b21\u6578 os << contents ; } };","title":"\u53ef\u8b8a\u7684 (Mutable) \u6210\u54e1\u51fd\u5f0f"},{"location":"C%2B%2B/class/#constructors","text":"","title":"\u5efa\u69cb\u5f0f (Constructors)"},{"location":"C%2B%2B/class/#_2","text":"class Sales_item { public : Sales_item ( const std :: string & ); Sales_item ( std :: istream & ); Sales_item (); // default \u5efa\u69cb\u5f0f } \u5f15\u6578\u6c7a\u5b9a\u4f7f\u7528\u54ea\u500b\u5efa\u69cb\u5f0f // \u4f7f\u7528 default \u5efa\u69cb\u5f0f Sales_item empty ; Sales_item primer_3rd ( \"0-201-82470-1\" ); Sales_item primer_4th ( cin );","title":"\u5efa\u69cb\u662f\u53ef\u4ee5\u88ab\u91cd\u8f09"},{"location":"C%2B%2B/class/#constructor-initializer","text":"// \u7de8\u5beb\u5efa\u69cb\u5f0f\u6642\uff0c\u63a8\u85a6\u4f7f\u7528\u5efa\u69cb\u5f0f\u521d\u503c\u5217 Sales_item :: Sales_item ( const string & book ) : isbn ( book ), units_sold ( 0 ), revenue ( 0.0 ) {} // \u5408\u6cd5\u4f46\u57f7\u884c\u901f\u5ea6\u8f03\u6162\u7684\u5efa\u69cb\u5f0f // \u6c92\u6709\u5efa\u69cb\u5f0f\u521d\u503c\u5668 Sales_item :: Sales_item ( const string & book ) { isbn = book ; units_sold = 0 ; revenue = 0.0 ; } \u6982\u5ff5\u4e0a\u6211\u5011\u8a8d\u70ba\u5efa\u69cb\u5f0f\u5206\u5169\u500b\u968e\u6bb5\u57f7\u884c: 1. \u521d\u59cb\u5316\u968e\u6bb5 2. \u4e00\u822c\u8a08\u7b97\u968e\u6bb5 \u8a08\u7b97\u968e\u6bb5\u7531\u5efa\u69cb\u5f0f\u672c\u9ad4\u5167\u7684\u6240\u6709\u8ff0\u5f0f\u7d44\u6210 \u4e0a\u9762\u5169\u7248 Sales_item \u5efa\u69cb\u5f0f\u6548\u679c\u76f8\u540c\uff0c\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u4f7f\u7528\u5efa\u69cb\u5f0f\u521d\u59cb\u5668\u7684\u7248\u672c\uff0c\u662f\u771f\u6b63\u7684 \u521d\u59cb\u5316 \u6210\u54e1\u8b8a\u6578\uff0c\u800c\u53e6\u4e00\u500b\u7248\u672c\u662f\u5728\u5efa\u69cb\u5f0f\u672c\u9ad4\u4e2d\u70ba\u6210\u54e1\u8b8a\u6578 \u8ce6\u503c","title":"\u5efa\u69cb\u5f0f\u521d\u503c\u5668 (Constructor Initializer)"},{"location":"C%2B%2B/class/#_3","text":"\u8209\u500b\u4f8b\u5b50\uff0c\u4ee5\u4e0b\u5efa\u69cb\u5f0f\u6709\u8aa4: class ConstRef { public : ConstRef ( int ii ); private : int i ; const int ci ; int & ri ; }; ConstRef :: ConstRef ( int ii ) { // \u8ce6\u503c: i = ii ; // \u6c92\u554f\u984c ci = ii ; // \u932f\u8aa4: \u4e0d\u53ef\u5c0d\u4e00\u500b const \u8ce6\u503c ri = i ; // \u932f\u8aa4: \u8ce6\u503c\u7d66 ri\uff0c\u4f46\u5f8c\u8005\u5c1a\u672a\u7d81\u5b9a\u81f3\u67d0\u7269\u4ef6 } \u67d0\u4e9b\u6210\u54e1\u8b8a\u6578\u5fc5\u9808\u5728\u5efa\u69cb\u5f0f\u521d\u503c\u5668\u4e2d\u88ab\u521d\u59cb\u5316\u3002Class \u578b\u5225\u4e2d\u51e1\u662f\u4e0d\u5e36 default \u5efa\u69cb\u5f0f\u7684\u6210\u54e1\uff0c const \u6210\u54e1\uff0creference \u6210\u54e1\uff0c\u4e0d\u8ad6\u578b\u5225\u662f\u4ec0\u9ebc\uff0c\u90fd\u5fc5\u9808\u5728\u5efa\u69cb\u521d\u503c\u5668\u4e2d\u5b8c\u6210\u521d\u59cb\u5316 // \u6b63\u78ba: \u660e\u78ba\u7684\u521d\u59cb\u5316 reference \u548c const \u6210\u54e1 ConstRef :: ConstRef ( int ii ) : i ( ii ), ci ( i ), ri ( ii ) {}","title":"\u6709\u6642\u5019\u5c31\u662f\u9700\u8981\u5efa\u69cb\u5f0f\u521d\u503c\u5668"},{"location":"C%2B%2B/class/#_4","text":"\u521d\u59cb\u5316\u9806\u5e8f\u5f80\u5f80\u4e26\u4e0d\u91cd\u8981\uff0c\u7136\u800c\u5982\u679c\u67d0\u500b\u6210\u54e1\u76f8\u4f9d\u65bc\u53e6\u4e00\u500b\u6210\u54e1\uff0c\u90a3\u9ebc\u521d\u59cb\u5316\u6210\u54e1\u5c31\u8b8a\u5f97\u91cd\u8981\u4e86\u3002 \u8003\u616e\u4ee5\u4e0b\u60c5\u6cc1: class X { int i ; int j ; public : // \u57f7\u884c\u671f\u932f\u8aa4:\u56e0\u70ba\u5176\u5be6 i \u5728 j \u4e4b\u524d\u88ab\u521d\u59cb\u5316\u3002 X ( int val ) : j ( val ), i ( j ) {} };","title":"\u6210\u54e1\u521d\u59cb\u5316\u7684\u9806\u5e8f"},{"location":"C%2B%2B/class/#default","text":"\u7576\u6211\u5011\u5b9a\u7fa9\u4e00\u500b\u7269\u4ef6\u537b\u6c92\u6709\u63d0\u4f9b\u521d\u503c\u6642\uff0c\u4fbf\u6703\u559a\u8d77 default \u5efa\u69cb\u5f0f\u3002\u5982\u679c\u5efa\u69cb\u5f0f\u7684\u6240\u6709\u53c3\u6578\u90fd\u6709\u9810\u8a2d\u5f15\u6578\uff0c\u90a3\u4e5f\u6210\u70ba\u4e00\u500b default \u5efa\u69cb\u5f0f\u3002 \u5982\u679c class \u6c92\u6709\u5b9a\u7fa9\u5efa\u69cb\u5f0f\uff0c\u7de8\u8b6f\u5668\u6703\u81ea\u52d5\u70ba\u5b83\u751f\u6210\u4e00\u500b default \u5efa\u69cb\u5f0f\u3002","title":"Default \u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/class/#_5","text":"\u53ef\u88ab\u552f\u4e00\u5f15\u6578\u559a\u8d77 \u7684\u5efa\u69cb\u5f0f\uff0c\u672c\u8eab\u5c31\u5b9a\u7fa9\u4e86\u5f9e\u5176\u53c3\u6578\u578b\u5225\u81f3 class \u578b\u5225\u7684\u4e00\u500b\u96b1\u5f0f\u8f49\u63db\u3002 string null_book = \"9-999-99999-9\" ; //\u6c92\u554f\u984c: \u5efa\u7acb\u4e00\u500b Sales_item\uff0c\u5176\u4e2d units_sold \u548c revenus \u7686\u70ba 0\uff0cisbn \u7b49\u65bc null_book item . same_isbn ( null_book ); \u9019\u500b\u7a0b\u5f0f\u4f7f\u7528 string \u7269\u4ef6\u4f5c\u70ba Sales_item \u4e2d\u7684 same_isbn() \u51fd\u5f0f\u5f15\u6578\u3002\u7136\u800c\u8a72\u7a0b\u5f0f\u671f\u671b\u7372\u5f97\u4e00\u500b Sales_item \u7269\u4ef6\u3002\u65bc\u662f\u7de8\u8b6f\u5668\u559a\u8d77 Sales_item \u4e2d \u5e36\u4e00\u500b string \u7684\u5efa\u69cb\u5f0f\uff0c\u4ee5 null_book \u751f\u6210\u4e00\u500b\u65b0\u7269\u4ef6\u3002\u65b0\u751f\u6210\u7684 Sales_item \u7269\u4ef6 (\u66ab\u6642\u7269\u4ef6) \u88ab\u50b3\u7d66 same_isbn() \u3002","title":"\u96b1\u5f0f\u578b\u5225\u8f49\u63db"},{"location":"C%2B%2B/class/#_6","text":"\u5982\u679c\u5c07\u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba explicit \uff0c\u5c31\u53ef\u4ee5\u963b\u6b62\u7de8\u8b6f\u5668\u5728\u9700\u8981\u96b1\u5f0f\u8f49\u63db\u6642\u559a\u8d77\u90a3\u500b\u5efa\u69cb\u5f0f\u3002 class Sales_item { public : explicit Sales_item ( const string & book = \"\" ) : isbn ( book ), units_sold ( 0 ), revenus ( 0.0 ) {} explicit Sales_item ( std :: istream & is ); }; \u52a0\u4e0a\u95dc\u9375\u5b57 explicit \u4e4b\u5f8c\uff0c\u5b83\u5011\u90fd\u4e0d\u518d\u53ef\u88ab\u7528\u4f86\u96b1\u5f0f\u5275\u5efa Sales_item \u7269\u4ef6\u3002 item . same_isbn ( null_book ); //\u932f\u8aa4: string \u5efa\u69cb\u5f0f\u662f explicit item . same_isbn ( cin ); //\u932f\u8aa4: istream \u5efa\u69cb\u5f0f\u662f explicit \u901a\u5e38\u61c9\u8a72\u5c07\u55ae\u5f15\u6578\u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba explicit \uff0c\u9664\u975e\u6709\u5f88\u660e\u986f\u7684\u7406\u7531\u9700\u8981\u5b9a\u7fa9\u4e00\u500b\u96b1\u5f0f\u8f49\u63db\u3002\u628a\u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba explicit \u53ef\u907f\u514d\u67d0\u4e9b\u932f\u8aa4\uff0c\u800c\u7576\u7528\u6236\u9700\u8981\u8f49\u63db\u6642\u4f9d\u7136\u53ef\u4ee5\u660e\u78ba\u559a\u8d77\u4ed6\u3002","title":"\u7981\u6b62\u5efa\u69cb\u5f0f\u5b9a\u7fa9\u51fa\u96b1\u5f0f\u8f49\u63db"},{"location":"C%2B%2B/class/#delegating-constructors","text":"C++11 \u63d0\u4f9b\u4e86\u65b0\u7684\u8a2d\u5b9a\u5efa\u69cb\u5f0f\u521d\u59cb\u503c\u7684\u529f\u80fd, \u7a31\u70ba\u59d4\u6d3e\u5efa\u69cb\u5f0f, \u7bc4\u4f8b\u5982\u4e0b: class Sales_data { public : // nondelegating constructor initializes members from corresponding arguments Sales_data ( std :: string s , unsigned cnt , double price ) : bookNo ( s ), units_sold ( cnt ), revenue ( cnt * price ) {} // remaining constructors all delegate to another constructor Sales_data () : Sales_data ( \"\" , 0 , 0 ) {} Sales_data ( std :: string s ) : Sales_data ( s , 0 , 0 ) {} Sales_data ( std :: istream & is ) : Sales_data () { read ( is , * this ); } // other members as before };","title":"\u59d4\u6d3e\u5efa\u69cb\u5f0f (Delegating Constructors)"},{"location":"C%2B%2B/class/#friends","text":"\u6709\u6642\u5019\uff0c\u4ee4 \u7279\u5b9a\u7684\u67d0\u4e9b\u975e\u6210\u54e1\u51fd\u5f0f \u5f97\u4ee5\u53d6\u7528 class \u7684 private \u6210\u54e1 \uff0c\u800c\u53c8\u4ecd\u80fd\u963b\u6b62\u5176\u4ed6\u7684\u4e00\u822c\u6027\u5b58\u53d6\uff0c\u53ef\u5e36\u4f86\u5f88\u5927\u7684\u65b9\u4fbf\u3002 class Screen { // Window_Mgr \u7684\u6210\u54e1\u51fd\u5f0f\u53ef\u4ee5\u5b58\u53d6 class Screen \u7684 private \u6210\u5206 friend class Window_Mgr ; //... } Window_Mgr & Window_Mgr::relocate ( Screen :: index r , Screen :: index c , Screen & s ) { // \u76f4\u63a5\u53d6\u7528 height \u548c width \u6c92\u554f\u984c s . height += r ; s . width += c ; return * this ; }","title":"Friends (\u53cb\u5143)"},{"location":"C%2B%2B/class/#class-friend","text":"class Screen { // Window_Mgr \u5fc5\u9808\u5728 class Screen \u4e4b\u524d\u5148\u5b9a\u7fa9\u597d friend Window_Mgr & Window_Mgr::relocate ( Screen :: index , Screen :: index , Screen & ); //... };","title":"\u8b93\u53e6\u4e00\u500b Class \u7684\u6210\u54e1\u51fd\u5f0f\u6210\u70ba friend"},{"location":"C%2B%2B/class/#static","text":"\u4e00\u822c\u7684\u6240\u8b02 nonstatic \u6210\u54e1\u8b8a\u6578\u5b58\u5728\u65bc class \u7684\u6bcf\u500b\u7269\u4ef6\u4e2d\u3002\u7136\u800c static \u6210\u54e1\u537b\u662f\u7368\u7acb\u65bc class \u7684\u4efb\u4f55\u7269\u4ef6\u800c\u5b58\u5728\uff1b\u6bcf\u4e00\u500b static \u6210\u54e1\u8b8a\u6578\u90fd\u662f \u8207 class \u76f8\u95dc\u806f \u800c\u975e \u8207 object \u76f8\u95dc\u806f \u3002","title":"static \u6210\u54e1"},{"location":"C%2B%2B/class/#static-globals","text":"static \u6210\u54e1\u540d\u7a31\u843d\u5728 class \u4f5c\u7528\u57df\u4e2d\uff0c\u9019\u53ef\u4ee5\u907f\u514d\u548c\u5176\u4ed6 classes \u7684\u6210\u54e1\u6216\u662f\u548c global \u7269\u4ef6\u767c\u751f\u540d\u7a31\u4e0a\u7684\u885d\u7a81\u3002 \u53b2\u884c\u5c01\u88dd\u3002 static \u6210\u54e1\u53ef\u4ee5\u662f private \uff0cglobal \u7269\u4ef6\u537b\u4e0d\u80fd\u5920\u3002 \u95b1\u8b80\u7a0b\u5f0f\u78bc\u53ef\u4ee5\u8f15\u9b06\u770b\u51fa\u4e00\u500b static \u6210\u54e1\u548c\u5176 class \u4e4b\u9593\u6709\u95dc\u9023\u6027\u3002\u9019\u53ef\u589e\u52a0\u7a0b\u5f0f\u53ef\u8b80\u6027\u3002","title":"\u4f7f\u7528 static \u6210\u54e1\u800c\u4e0d\u4f7f\u7528 globals \u597d\u8655"},{"location":"C%2B%2B/class/#static_1","text":"\u8209\u500b\u4f8b\u5b50\uff0c\u4e00\u500b\u9280\u884c\u5e33\u6236\u7684\u7c21\u55ae class\u3002\u6bcf\u500b\u5e33\u6236\u90fd\u6709\u9918\u984d\u548c\u6236\u540d\uff0c\u6bcf\u500b\u5e33\u6236\u90fd\u6709\u5229\u606f\uff0c\u4f46\u6bcf\u500b\u5e33\u6236\u7684\u5229\u7387\u7e3d\u662f\u76f8\u540c\u7684\u3002 class Account { public : void applyint () { amount += amount * interestRate ; } static double rate () { return interestRate ; } static void rate ( double ); //\u8a2d\u5b9a\u65b0\u5229\u7387 private : std :: string owner ; double amount ; static double interestRate ; static double initRate (); }; \u7269\u4ef6\u88e1\u9762\u4e26\u6c92\u6709\u54ea\u4e00\u500b\u6210\u54e1\u76f8\u61c9\u65bc static \u6210\u54e1\u8b8a\u6578\uff0c\u800c\u662f\u5b58\u5728\u552f\u4e00\u7684 interestRate \u7269\u4ef6\u88ab Account \u7684\u6240\u6709\u7269\u4ef6\u5171\u7528\u3002","title":"\u5b9a\u7fa9 static \u6210\u54e1"},{"location":"C%2B%2B/class/#static_2","text":"Account ac1 ; Account * ac2 = & ac1 ; //\u4ee5\u4e0b\u662f\u547c\u53eb static rate() \u4e09\u7a2e\u7b49\u50f9\u5beb\u6cd5 double rate ; rate = ac1 . rate (); rate = ac2 -> rate (); rate = Account :: rate ();","title":"\u4f7f\u7528 static \u6210\u54e1"},{"location":"C%2B%2B/class/#static-this","text":"static \u6210\u54e1\u662f class \u7684\u4e00\u90e8\u5206\uff0c\u4e0d\u662f\u4efb\u4f55\u7269\u4ef6\u7684\u4e00\u90e8\u5206\u3002\u56e0\u6b64 static \u6210\u54e1\u51fd\u5f0f\u6c92\u6709 this \u6307\u6a19\u3002\u5728 static \u6210\u54e1\u51fd\u5f0f\u4e2d\u53d6\u7528 this \u6307\u6a19\uff0c\u7de8\u8b6f\u6703\u932f\u8aa4\u3002 \u7531\u65bc static \u6210\u54e1\u4e0d\u662f\u4efb\u4f55\u7269\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5 static \u6210\u54e1\u51fd\u5f0f\u4e0d\u80fd\u5ba3\u544a\u70ba const \u3002 static \u6210\u54e1\u51fd\u5f0f\u4e5f\u4e0d\u8a72\u5ba3\u544a\u70ba virtual \u3002","title":"static \u6210\u54e1\u51fd\u5f0f\u4e0d\u5e36 this"},{"location":"C%2B%2B/class/#static_3","text":"\u4f60\u5fc5\u9808\u5728 class \u672c\u9ad4\u5916\u5c0d static \u6210\u54e1\u8b8a\u6578\u5b9a\u7fa9\u4e00\u6b21\u3002\u548c\u4e00\u822c\u6210\u54e1\u8b8a\u6578\u4e0d\u540c\uff0c static \u6210\u54e1\u8b8a\u6578\u4e26\u975e\u7d93\u7531 class \u5efa\u69cb\u5f0f\u4f86\u521d\u59cb\u5316\uff0c\u800c\u662f\u5728\u5b9a\u7fa9\u6642\u88ab\u521d\u59cb\u5316\u3002","title":"static \u6210\u54e1\u8b8a\u6578"},{"location":"C%2B%2B/class/#static-class","text":"\u56e0\u70ba static \u6210\u54e1\u7368\u7acb\u65bc\u4efb\u4f55\u7269\u4ef6\u800c\u5b58\u5728\uff0c\u6240\u4ee5 static \u6210\u54e1\u8b8a\u6578\u53ef\u4ee5\u662f\u5176\u6240\u5728 class\u3002\u4f46 nonstatic \u6210\u54e1\u8b8a\u6578\u53ea\u80fd\u662f\u4ee5 pointer \u6216 reference \u6307\u5411\u5176\u6240\u5728\u7684 class: class Bar { public : // ... private : static Bar mem1 ; //\u6b63\u78ba Bar * mem2 ; //\u6b63\u78ba Bar mem3 ; //\u932f\u8aa4 }; \u985e\u4f3c\u60c5\u6cc1\uff0c static \u6210\u54e1\u8b8a\u6578\u53ef\u4ee5\u88ab\u7576\u4f5c\u4e00\u500b\u9810\u8a2d\u5f15\u6578: class Screen { public : Screen & clear ( char = bkground ); private : static const char bkground ; };","title":"static \u6210\u54e1\u4e0d\u96b8\u5c6c\u65bc class \u7269\u4ef6"},{"location":"C%2B%2B/compound_type/","text":"\u8907\u5408\u578b\u5225 (Compound type) \u8907\u5408\u578b\u5225\u662f\u6307\u57fa\u65bc\u5176\u4ed6\u578b\u5225\u5b9a\u7fa9\u7684\u578b\u5225\uff0cC++\u6709\u5e7e\u7a2e\u8907\u5408\u578b\u5225\uff0c\u672c\u7ae0\u5c07\u4ecb\u7d39\u5176\u4e2d\u5169\u7a2e: \u53c3\u7167 (Reference) \u548c \u6307\u6a19 (Pointer)\u3002 \u53c3\u7167 (Reference) Reference \u662f\u500b\u8907\u5408\u578b\u5225 (compound type)\uff0c\u85c9\u7531\u5728\u8b8a\u6578\u540d\u7a31\u4e4b\u524d\u52a0\u4e0a & \u7b26\u865f\u800c\u5b9a\u7fa9\u51fa\u4f86\u3002\u5c31 reference \u800c\u8a00\uff0c\u6bcf\u500b reference \u578b\u5225\u90fd \"\u53c3\u7167\uff0c\u5f15\u7528\" \u5176\u4ed6\u578b\u5225\u3002\u6211\u5011\u4e0d\u80fd\u5b9a\u7fa9\u53c3\u7167\u53e6\u4e00\u500b reference \u578b\u5225\u7684 reference\uff0c\u4f46\u53ef\u4ee5\u8b93 reference \u53c3\u7167\u5176\u4ed6\u4efb\u4f55\u8cc7\u6599\u578b\u5225\u3002 int ival = 1024 ; int & refVal = ival ; // refVal refers to (is another name for) ival int & refVal2 ; // error: a reference must be initialized int & refVal3 = 10 ; // \u932f\u8aa4: \u521d\u59cb\u503c\u5fc5\u9808\u662f\u4e00\u500b object Reference \u662f\u500b\u5225\u540d refVal += 2 ; // \u5176\u5be6\u662f\u628a 2 \u52a0\u5165 ival int ii = refVal ; // \u5176\u5be6\u662f\u628a ival \u7684\u503c\u8ce6\u4e88 ii \u4e00\u65e6 reference \u88ab\u521d\u59cb\u5316\uff0c\u53ea\u8981\u4ed6\u4ecd\u7136\u5b58\u5728\uff0c\u5c31\u6703\u6301\u7e8c\u7d81\u5b9a (bind) \u539f\u5148\u90a3\u500b\u7269\u4ef6\u3002\u6c92\u6709\u4efb\u4f55\u8fa6\u6cd5\u53ef\u4ee5\u5c07 reference \u91cd\u65b0\u7d81\u5b9a (rebind) \u81f3\u53e6\u4e00\u500b\u4e0d\u540c\u7269\u4ef6\u3002 \u5b9a\u7fa9\u591a\u500b Reference int i = 1024 , i2 = 2048 ; int & r = i , r2 = i2 ; // r \u662f\u500b reference, r2 \u662f\u500b int int i3 = 1024 , & ri = i3 ; // \u5b9a\u7fa9\u4e00\u500b object \u548c\u4e00\u500b reference int & r3 = i3 , & r4 = i2 ; // \u5b9a\u7fa9\u5169\u500b reference const Reference \u6240\u8b02 const reference \u662f\u4e00\u500b \"\u7528\u4ee5\u53c3\u7167 const \u7269\u4ef6\" \u7684 reference : const int ival = 1024 ; const int & refVal = ival ; // \u6c92\u554f\u984c: reference \u548c object \u90fd\u662f const int & ref2 = ival ; // \u932f\u8aa4: nonconst reference \u537b\u53c3\u7167\u81f3\u4e00\u500b const object const reference \u53ef\u4ee5\u4e0d\u540c\u578b\u5225\u7684\u7269\u4ef6\u6216\u4ee5\u4e00\u500b\u53f3\u503c (rvalue) \u521d\u59cb\u5316\uff0c\u4f8b\u5982\u5b57\u9762\u5e38\u6578 int i = 42 ; // \u4ee5\u4e0b\u53ea\u6709\u4f7f\u7528 const reference \u624d\u5408\u6cd5 const int & r = 42 ; const int & r2 = r + i ; \u6b64\u7a2e\u521d\u59cb\u5316\u5c0d non const \u4e0d\u5408\u6cd5\uff0c\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\u3002 Pointer \u6982\u5ff5\u4e0a Pointer \u5f88\u7c21\u55ae:\u6307\u5411\u4e00\u500b\u7269\u4ef6\u3002\u5177\u9ad4\u800c\u8a00\uff0c pointer \u5167\u90e8\u5b58\u653e \u53e6\u4e00\u500b\u7269\u4ef6\u7684\u4f4d\u5740: string s ( \"hello world\" ); string * sp = & s ; // sp \u88e1\u5b58\u653e\u7684\u662f s \u7684\u4f4d\u5740 \u7b2c\u4e8c\u500b\u6558\u8ff0\u5f0f\u88e1\u628a sp \u5b9a\u7fa9\u70ba\u6307\u5411 string \u7684\u4e00\u500b pointer\u3002\u5f0f\u4e2d\u7684 * \u8868\u793a sp \u662f\u500b pointer, & \u5247\u662f\u6240\u8b02 address-off (\u53d6\u5740) \u904b\u7b97\u5b50 double dval ; double * pd = & dval ; // \u6b63\u78ba: \u521d\u59cb\u503c\u662f double \u578b\u5225\u5c0d\u8c61\u7684\u5730\u5740 double * pd2 = pd ; // \u6b63\u78ba: \u521d\u59cb\u503c\u662f\u6307\u5411 double \u5c0d\u8c61\u7684\u6307\u6a19 int * pi = pd ; // \u932f\u8aa4: \u6307\u6a19 pi \u7684\u578b\u5225\u548c pd \u7684\u578b\u5225\u4e0d\u5339\u914d pi = & dval ; // \u932f\u8aa4: \u8a66\u5716\u628a double \u578b\u5225\u5c0d\u8c61\u7684\u5730\u5740\u8ce6\u503c\u7d66 int \u578b\u5225\u6307\u6a19 \u4e0d\u540c\u7684 Pointer \u5ba3\u544a\u98a8\u683c string * ps ; //\u5408\u6cd5\uff0c\u4f46\u5bb9\u6613\u9020\u6210\u8aa4\u89e3 \u56e0\u70ba\u8b93\u4eba\u6709\u4ee5\u4e0b\u60f3\u6cd5: string* \u662f\u500b\u578b\u5225\uff0c\u6b64\u5b9a\u7fa9\u5f0f\u5b9a\u7fa9\u7684\u4efb\u4f55\u8b8a\u6578\u90fd\u662f pointer to string \u7684\u60f3\u6cd5\uff0c\u7136\u800c string * ps1 , ps2 ; // ps1 \u662f\u500b pointer to string, ps2 \u662f\u500b string \u907f\u514d\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684 Pointers \u672a\u521d\u59cb\u5316\u7684 pointers \u662f\u4e00\u7a2e\u5e38\u898b\u7684\u57f7\u884c\u671f\u932f\u8aa4\u3002 \u64cd\u4f5c Pointer \u6211\u5011\u53ef\u4ee5\u85c9\u7531\u63d0\u9818 (dereference) pointers \u4f86\u5b58\u53d6\u8a72\u7269\u4ef6\u3002 dereference \u904b\u7b97\u5b50 ( * ) \u50b3\u56de pointer \u6240\u6307\u7684\u7269\u4ef6: string s ( \"hello world\" ); string * sp = & s ; // sp \u5b58\u653e\u8457 s \u7684\u4f4d\u5740 cout << * sp ; // \u5370\u51fa hello world \u63d0\u9818 (Dereference) \u7522\u751f\u5de6\u503c Dereference \u904b\u7b97\u5b50\u50b3\u56de\u5e95\u5c64\u7269\u4ef6\u7684\u5de6\u503c\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u5b83\u6539\u8b8a pointer \u6240\u6307\u7684\u7269\u4ef6\u503c: * sp = \"goodbye\" ; \u56e0\u70ba\u6211\u5011\u662f\u5c0d *sp \u8ce6\u503c\uff0c\u6240\u4ee5\u9019\u500b\u8ff0\u53e5\u8b93 sp \u4ecd\u7136\u6307\u5411 s \uff0c\u4f46\u6539\u8b8a\u4e86 s \u7684\u503c\u3002 \u6211\u5011\u4e5f\u53ef\u4ee5\u8ce6\u4e88\u65b0\u503c\u7d66 sp \u672c\u8eab\uff0c\u9019\u6703\u9020\u6210 sp \u6307\u5411\u4e0d\u540c\u7684\u7269\u4ef6: string s2 = \"some value\" ; sp = & s2 ; // sp \u73fe\u5728\u6307\u5411 s2 \u95dc\u9375\u6982\u5ff5 \u50cf & \u548c * \u9019\u6a23\u7684\u7b26\u865f\uff0c\u65e2\u80fd\u505a\u8868\u9054\u5f0f\u88e1\u9762\u7684\u904b\u7b97\u7b26\uff0c\u4e5f\u80fd\u4f5c\u70ba\u5ba3\u544a\u7684\u4e00\u90e8\u5206\uff0c\u7b26\u865f\u7684\u4e0a\u4e0b\u6587\u6c7a\u5b9a\u4e86\u7b26\u865f\u7684\u6db5\u7fa9: int i = 42 ; int & r = i ; // & \u5728\u578b\u5225\u540d\u5f8c\u51fa\u73fe\uff0c\u56e0\u6b64\u662f\u5ba3\u544a\u7684\u4e00\u90e8\u5206\uff0cr \u662f\u4e00\u500b\u53c3\u7167 int * p ; // * \u5728\u578b\u5225\u540d\u5f8c\u51fa\u73fe\uff0c\u56e0\u6b64\u662f\u5ba3\u544a\u7684\u4e00\u90e8\u5206\uff0cp \u662f\u4e00\u500b\u6307\u6a19 p = & i ; // & \u51fa\u73fe\u5728\u8868\u9054\u5f0f\u4e2d\uff0c\u662f\u4e00\u500b\u53d6\u5740\u904b\u7b97\u5b50 (address-off) * p = i ; // * \u51fa\u73fe\u5728\u8868\u9054\u5f0f\u4e2d\uff0c\u662f\u4e00\u500b\u63d0\u9818\u904b\u7b97\u5b50 (dereference) int & r2 = * p ; // & \u662f\u5ba3\u544a\u7684\u4e00\u90e8\u4efd\uff0c* \u662f\u4e00\u500b\u63d0\u9818\u904b\u7b97\u5b50 \u7a7a\u6307\u6a19 \u7a7a\u6307\u6a19 (null pointer) \u4e0d\u6307\u5411\u4efb\u4f55\u5c0d\u8c61\uff0c\u5728\u8a66\u5716\u4f7f\u7528\u4e00\u500b\u6307\u6a19\u4e4b\u524d\u7a0b\u5f0f\u78bc\u53ef\u4ee5\u9996\u5148\u6aa2\u67e5\u4ed6\u662f\u5426\u70ba\u7a7a\u3002 int * p1 = nullptr ; // \u7b49\u50f9\u65bc int *p1 = 0, C++11 \u65b0\u6a19\u6e96 int * p2 = 0 ; // \u76f4\u63a5\u5c07 p2 \u521d\u59cb\u5316\u70ba\u5b57\u9762\u5e38\u6578 0 // \u9700\u8981\u9996\u5148 #include cstdlib int * p3 = NULL ; // \u7b49\u50f9\u65bc int *p3 = 0 Pointers \u8207 const pointer \u8207 const \u6709\u5169\u7a2e\u76f8\u95dc\u9023: \u6211\u5011\u53ef\u4ee5\u64c1\u6709 \u6307\u5411 const \u7269\u4ef6 \u548c \u672c\u8eab\u70ba const \u5169\u7a2e pointers\u3002 Pointers to const (\u6307\u5411\u5e38\u6578\u7684\u6307\u6a19) const double * cptr ; // cptr \u53ef\u6307\u5411\u4e00\u500b const double * cptr = 42 ; // \u932f\u8aa4: *cptr \u53ef\u80fd\u662f\u500b const \u5c07\u4e00\u500b const \u7269\u4ef6\u7684\u4f4d\u5740\u8ce6\u4e88 non- const pointer \u6703\u9020\u6210\u7de8\u8b6f\u932f\u8aa4: const double pi = 3.14 ; double * ptr = & pi ; // \u932f\u8aa4: ptr \u662f\u4e00\u822c\u7684 pointer const double * cptr = & pi ; // \u6c92\u554f\u984c: cptr \u6307\u5411 const \u4e00\u500b pointers to const \u53ef\u88ab\u8ce6\u4e88\u4e00\u500b non const \u7269\u4ef6\u4f4d\u5740: double dval = 3.14 ; // dval \u662f\u500b double: \u5176\u503c\u53ef\u4ee5\u88ab\u6539\u8b8a cptr = & dval ; // \u6c92\u554f\u984c: \u4f46\u4e0d\u80fd\u900f\u904e cptr \u6539\u8b8a dval const Pointers \u9664\u4e86 pointer to const \uff0c\u9084\u6709\u6240\u8b02 const pointer\uff0c\u90a3\u662f\u4e00\u500b\u6211\u5011\u4e0d\u80fd\u6539\u8b8a\u5176\u672c\u8eab\u503c\u7684 pointer: int errNumb = 0 ; int * const curErr = & errNumb ; // curErr \u662f\u500b const pointer curErr = curErr // \u932f\u8aa4: curErr \u662f\u500b const \u50cf\u9762\u5c0d\u4efb\u4f55 const \u4e00\u6a23\uff0c\u6211\u5011\u5fc5\u9808\u5728\u5efa\u7acb const pointer \u6642\u628a\u5b83\u521d\u59cb\u5316\u3002 Pointer \u672c\u8eab\u662f const \u9019\u500b\u4e8b\u5be6\u4e26\u4e0d\u4ee3\u8868\u6211\u5011\u4e0d\u80fd\u900f\u904e\u5b83\u6539\u8b8a\u5b83\u6240\u6307\u7684\u503c\u3002 if ( * curErr ) { errorHandler (); * curErr = 0 ; // \u6c92\u554f\u984c: \u91cd\u8a2d curErr \u6240\u7d81\u5b9a\u7684\u7269\u4ef6\u503c } \u88dc\u5145\uff1a\u53ef\u4ee5\u85c9\u7531 const \u5728 * \u5de6\u908a\u9084\u662f\u53f3\u908a\u4f86\u5206\u8fa8\u662f const pointer \u9084\u662f pointer to const","title":"\u8907\u5408\u578b\u5225 (Compound type)"},{"location":"C%2B%2B/compound_type/#compound-type","text":"\u8907\u5408\u578b\u5225\u662f\u6307\u57fa\u65bc\u5176\u4ed6\u578b\u5225\u5b9a\u7fa9\u7684\u578b\u5225\uff0cC++\u6709\u5e7e\u7a2e\u8907\u5408\u578b\u5225\uff0c\u672c\u7ae0\u5c07\u4ecb\u7d39\u5176\u4e2d\u5169\u7a2e: \u53c3\u7167 (Reference) \u548c \u6307\u6a19 (Pointer)\u3002","title":"\u8907\u5408\u578b\u5225 (Compound type)"},{"location":"C%2B%2B/compound_type/#reference","text":"Reference \u662f\u500b\u8907\u5408\u578b\u5225 (compound type)\uff0c\u85c9\u7531\u5728\u8b8a\u6578\u540d\u7a31\u4e4b\u524d\u52a0\u4e0a & \u7b26\u865f\u800c\u5b9a\u7fa9\u51fa\u4f86\u3002\u5c31 reference \u800c\u8a00\uff0c\u6bcf\u500b reference \u578b\u5225\u90fd \"\u53c3\u7167\uff0c\u5f15\u7528\" \u5176\u4ed6\u578b\u5225\u3002\u6211\u5011\u4e0d\u80fd\u5b9a\u7fa9\u53c3\u7167\u53e6\u4e00\u500b reference \u578b\u5225\u7684 reference\uff0c\u4f46\u53ef\u4ee5\u8b93 reference \u53c3\u7167\u5176\u4ed6\u4efb\u4f55\u8cc7\u6599\u578b\u5225\u3002 int ival = 1024 ; int & refVal = ival ; // refVal refers to (is another name for) ival int & refVal2 ; // error: a reference must be initialized int & refVal3 = 10 ; // \u932f\u8aa4: \u521d\u59cb\u503c\u5fc5\u9808\u662f\u4e00\u500b object","title":"\u53c3\u7167 (Reference)"},{"location":"C%2B%2B/compound_type/#reference_1","text":"refVal += 2 ; // \u5176\u5be6\u662f\u628a 2 \u52a0\u5165 ival int ii = refVal ; // \u5176\u5be6\u662f\u628a ival \u7684\u503c\u8ce6\u4e88 ii \u4e00\u65e6 reference \u88ab\u521d\u59cb\u5316\uff0c\u53ea\u8981\u4ed6\u4ecd\u7136\u5b58\u5728\uff0c\u5c31\u6703\u6301\u7e8c\u7d81\u5b9a (bind) \u539f\u5148\u90a3\u500b\u7269\u4ef6\u3002\u6c92\u6709\u4efb\u4f55\u8fa6\u6cd5\u53ef\u4ee5\u5c07 reference \u91cd\u65b0\u7d81\u5b9a (rebind) \u81f3\u53e6\u4e00\u500b\u4e0d\u540c\u7269\u4ef6\u3002","title":"Reference \u662f\u500b\u5225\u540d"},{"location":"C%2B%2B/compound_type/#reference_2","text":"int i = 1024 , i2 = 2048 ; int & r = i , r2 = i2 ; // r \u662f\u500b reference, r2 \u662f\u500b int int i3 = 1024 , & ri = i3 ; // \u5b9a\u7fa9\u4e00\u500b object \u548c\u4e00\u500b reference int & r3 = i3 , & r4 = i2 ; // \u5b9a\u7fa9\u5169\u500b reference","title":"\u5b9a\u7fa9\u591a\u500b Reference"},{"location":"C%2B%2B/compound_type/#const-reference","text":"\u6240\u8b02 const reference \u662f\u4e00\u500b \"\u7528\u4ee5\u53c3\u7167 const \u7269\u4ef6\" \u7684 reference : const int ival = 1024 ; const int & refVal = ival ; // \u6c92\u554f\u984c: reference \u548c object \u90fd\u662f const int & ref2 = ival ; // \u932f\u8aa4: nonconst reference \u537b\u53c3\u7167\u81f3\u4e00\u500b const object const reference \u53ef\u4ee5\u4e0d\u540c\u578b\u5225\u7684\u7269\u4ef6\u6216\u4ee5\u4e00\u500b\u53f3\u503c (rvalue) \u521d\u59cb\u5316\uff0c\u4f8b\u5982\u5b57\u9762\u5e38\u6578 int i = 42 ; // \u4ee5\u4e0b\u53ea\u6709\u4f7f\u7528 const reference \u624d\u5408\u6cd5 const int & r = 42 ; const int & r2 = r + i ; \u6b64\u7a2e\u521d\u59cb\u5316\u5c0d non const \u4e0d\u5408\u6cd5\uff0c\u6703\u5c0e\u81f4\u7de8\u8b6f\u932f\u8aa4\u3002","title":"const Reference"},{"location":"C%2B%2B/compound_type/#pointer","text":"\u6982\u5ff5\u4e0a Pointer \u5f88\u7c21\u55ae:\u6307\u5411\u4e00\u500b\u7269\u4ef6\u3002\u5177\u9ad4\u800c\u8a00\uff0c pointer \u5167\u90e8\u5b58\u653e \u53e6\u4e00\u500b\u7269\u4ef6\u7684\u4f4d\u5740: string s ( \"hello world\" ); string * sp = & s ; // sp \u88e1\u5b58\u653e\u7684\u662f s \u7684\u4f4d\u5740 \u7b2c\u4e8c\u500b\u6558\u8ff0\u5f0f\u88e1\u628a sp \u5b9a\u7fa9\u70ba\u6307\u5411 string \u7684\u4e00\u500b pointer\u3002\u5f0f\u4e2d\u7684 * \u8868\u793a sp \u662f\u500b pointer, & \u5247\u662f\u6240\u8b02 address-off (\u53d6\u5740) \u904b\u7b97\u5b50 double dval ; double * pd = & dval ; // \u6b63\u78ba: \u521d\u59cb\u503c\u662f double \u578b\u5225\u5c0d\u8c61\u7684\u5730\u5740 double * pd2 = pd ; // \u6b63\u78ba: \u521d\u59cb\u503c\u662f\u6307\u5411 double \u5c0d\u8c61\u7684\u6307\u6a19 int * pi = pd ; // \u932f\u8aa4: \u6307\u6a19 pi \u7684\u578b\u5225\u548c pd \u7684\u578b\u5225\u4e0d\u5339\u914d pi = & dval ; // \u932f\u8aa4: \u8a66\u5716\u628a double \u578b\u5225\u5c0d\u8c61\u7684\u5730\u5740\u8ce6\u503c\u7d66 int \u578b\u5225\u6307\u6a19","title":"Pointer"},{"location":"C%2B%2B/compound_type/#pointer_1","text":"string * ps ; //\u5408\u6cd5\uff0c\u4f46\u5bb9\u6613\u9020\u6210\u8aa4\u89e3 \u56e0\u70ba\u8b93\u4eba\u6709\u4ee5\u4e0b\u60f3\u6cd5: string* \u662f\u500b\u578b\u5225\uff0c\u6b64\u5b9a\u7fa9\u5f0f\u5b9a\u7fa9\u7684\u4efb\u4f55\u8b8a\u6578\u90fd\u662f pointer to string \u7684\u60f3\u6cd5\uff0c\u7136\u800c string * ps1 , ps2 ; // ps1 \u662f\u500b pointer to string, ps2 \u662f\u500b string","title":"\u4e0d\u540c\u7684 Pointer \u5ba3\u544a\u98a8\u683c"},{"location":"C%2B%2B/compound_type/#pointers","text":"\u672a\u521d\u59cb\u5316\u7684 pointers \u662f\u4e00\u7a2e\u5e38\u898b\u7684\u57f7\u884c\u671f\u932f\u8aa4\u3002","title":"\u907f\u514d\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684 Pointers"},{"location":"C%2B%2B/compound_type/#pointer_2","text":"\u6211\u5011\u53ef\u4ee5\u85c9\u7531\u63d0\u9818 (dereference) pointers \u4f86\u5b58\u53d6\u8a72\u7269\u4ef6\u3002 dereference \u904b\u7b97\u5b50 ( * ) \u50b3\u56de pointer \u6240\u6307\u7684\u7269\u4ef6: string s ( \"hello world\" ); string * sp = & s ; // sp \u5b58\u653e\u8457 s \u7684\u4f4d\u5740 cout << * sp ; // \u5370\u51fa hello world","title":"\u64cd\u4f5c Pointer"},{"location":"C%2B%2B/compound_type/#dereference","text":"Dereference \u904b\u7b97\u5b50\u50b3\u56de\u5e95\u5c64\u7269\u4ef6\u7684\u5de6\u503c\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u7528\u5b83\u6539\u8b8a pointer \u6240\u6307\u7684\u7269\u4ef6\u503c: * sp = \"goodbye\" ; \u56e0\u70ba\u6211\u5011\u662f\u5c0d *sp \u8ce6\u503c\uff0c\u6240\u4ee5\u9019\u500b\u8ff0\u53e5\u8b93 sp \u4ecd\u7136\u6307\u5411 s \uff0c\u4f46\u6539\u8b8a\u4e86 s \u7684\u503c\u3002 \u6211\u5011\u4e5f\u53ef\u4ee5\u8ce6\u4e88\u65b0\u503c\u7d66 sp \u672c\u8eab\uff0c\u9019\u6703\u9020\u6210 sp \u6307\u5411\u4e0d\u540c\u7684\u7269\u4ef6: string s2 = \"some value\" ; sp = & s2 ; // sp \u73fe\u5728\u6307\u5411 s2","title":"\u63d0\u9818 (Dereference) \u7522\u751f\u5de6\u503c"},{"location":"C%2B%2B/compound_type/#_1","text":"\u50cf & \u548c * \u9019\u6a23\u7684\u7b26\u865f\uff0c\u65e2\u80fd\u505a\u8868\u9054\u5f0f\u88e1\u9762\u7684\u904b\u7b97\u7b26\uff0c\u4e5f\u80fd\u4f5c\u70ba\u5ba3\u544a\u7684\u4e00\u90e8\u5206\uff0c\u7b26\u865f\u7684\u4e0a\u4e0b\u6587\u6c7a\u5b9a\u4e86\u7b26\u865f\u7684\u6db5\u7fa9: int i = 42 ; int & r = i ; // & \u5728\u578b\u5225\u540d\u5f8c\u51fa\u73fe\uff0c\u56e0\u6b64\u662f\u5ba3\u544a\u7684\u4e00\u90e8\u5206\uff0cr \u662f\u4e00\u500b\u53c3\u7167 int * p ; // * \u5728\u578b\u5225\u540d\u5f8c\u51fa\u73fe\uff0c\u56e0\u6b64\u662f\u5ba3\u544a\u7684\u4e00\u90e8\u5206\uff0cp \u662f\u4e00\u500b\u6307\u6a19 p = & i ; // & \u51fa\u73fe\u5728\u8868\u9054\u5f0f\u4e2d\uff0c\u662f\u4e00\u500b\u53d6\u5740\u904b\u7b97\u5b50 (address-off) * p = i ; // * \u51fa\u73fe\u5728\u8868\u9054\u5f0f\u4e2d\uff0c\u662f\u4e00\u500b\u63d0\u9818\u904b\u7b97\u5b50 (dereference) int & r2 = * p ; // & \u662f\u5ba3\u544a\u7684\u4e00\u90e8\u4efd\uff0c* \u662f\u4e00\u500b\u63d0\u9818\u904b\u7b97\u5b50","title":"\u95dc\u9375\u6982\u5ff5"},{"location":"C%2B%2B/compound_type/#_2","text":"\u7a7a\u6307\u6a19 (null pointer) \u4e0d\u6307\u5411\u4efb\u4f55\u5c0d\u8c61\uff0c\u5728\u8a66\u5716\u4f7f\u7528\u4e00\u500b\u6307\u6a19\u4e4b\u524d\u7a0b\u5f0f\u78bc\u53ef\u4ee5\u9996\u5148\u6aa2\u67e5\u4ed6\u662f\u5426\u70ba\u7a7a\u3002 int * p1 = nullptr ; // \u7b49\u50f9\u65bc int *p1 = 0, C++11 \u65b0\u6a19\u6e96 int * p2 = 0 ; // \u76f4\u63a5\u5c07 p2 \u521d\u59cb\u5316\u70ba\u5b57\u9762\u5e38\u6578 0 // \u9700\u8981\u9996\u5148 #include cstdlib int * p3 = NULL ; // \u7b49\u50f9\u65bc int *p3 = 0","title":"\u7a7a\u6307\u6a19"},{"location":"C%2B%2B/compound_type/#pointers-const","text":"pointer \u8207 const \u6709\u5169\u7a2e\u76f8\u95dc\u9023: \u6211\u5011\u53ef\u4ee5\u64c1\u6709 \u6307\u5411 const \u7269\u4ef6 \u548c \u672c\u8eab\u70ba const \u5169\u7a2e pointers\u3002","title":"Pointers \u8207 const"},{"location":"C%2B%2B/compound_type/#pointers-to-const","text":"const double * cptr ; // cptr \u53ef\u6307\u5411\u4e00\u500b const double * cptr = 42 ; // \u932f\u8aa4: *cptr \u53ef\u80fd\u662f\u500b const \u5c07\u4e00\u500b const \u7269\u4ef6\u7684\u4f4d\u5740\u8ce6\u4e88 non- const pointer \u6703\u9020\u6210\u7de8\u8b6f\u932f\u8aa4: const double pi = 3.14 ; double * ptr = & pi ; // \u932f\u8aa4: ptr \u662f\u4e00\u822c\u7684 pointer const double * cptr = & pi ; // \u6c92\u554f\u984c: cptr \u6307\u5411 const \u4e00\u500b pointers to const \u53ef\u88ab\u8ce6\u4e88\u4e00\u500b non const \u7269\u4ef6\u4f4d\u5740: double dval = 3.14 ; // dval \u662f\u500b double: \u5176\u503c\u53ef\u4ee5\u88ab\u6539\u8b8a cptr = & dval ; // \u6c92\u554f\u984c: \u4f46\u4e0d\u80fd\u900f\u904e cptr \u6539\u8b8a dval","title":"Pointers to const (\u6307\u5411\u5e38\u6578\u7684\u6307\u6a19)"},{"location":"C%2B%2B/compound_type/#const-pointers","text":"\u9664\u4e86 pointer to const \uff0c\u9084\u6709\u6240\u8b02 const pointer\uff0c\u90a3\u662f\u4e00\u500b\u6211\u5011\u4e0d\u80fd\u6539\u8b8a\u5176\u672c\u8eab\u503c\u7684 pointer: int errNumb = 0 ; int * const curErr = & errNumb ; // curErr \u662f\u500b const pointer curErr = curErr // \u932f\u8aa4: curErr \u662f\u500b const \u50cf\u9762\u5c0d\u4efb\u4f55 const \u4e00\u6a23\uff0c\u6211\u5011\u5fc5\u9808\u5728\u5efa\u7acb const pointer \u6642\u628a\u5b83\u521d\u59cb\u5316\u3002 Pointer \u672c\u8eab\u662f const \u9019\u500b\u4e8b\u5be6\u4e26\u4e0d\u4ee3\u8868\u6211\u5011\u4e0d\u80fd\u900f\u904e\u5b83\u6539\u8b8a\u5b83\u6240\u6307\u7684\u503c\u3002 if ( * curErr ) { errorHandler (); * curErr = 0 ; // \u6c92\u554f\u984c: \u91cd\u8a2d curErr \u6240\u7d81\u5b9a\u7684\u7269\u4ef6\u503c } \u88dc\u5145\uff1a\u53ef\u4ee5\u85c9\u7531 const \u5728 * \u5de6\u908a\u9084\u662f\u53f3\u908a\u4f86\u5206\u8fa8\u662f const pointer \u9084\u662f pointer to const","title":"const Pointers"},{"location":"C%2B%2B/copy_control/","text":"\u62f7\u8c9d\u63a7\u5236\u9805 (Copy Control) \u5b9a\u7fa9\u4e00\u500b\u65b0\u578b\u5225\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u660e\u767d\u6216\u662f\u96b1\u6666 (\u96b1\u5f0f\u6216\u986f\u5f0f) \u7684\u6307\u51fa\u6b64\u578b\u7269\u4ef6\u88ab\u8907\u88fd (copied)\uff0c\u88ab\u8ce6\u503c (assigned)\uff0c\u88ab\u92b7\u6bc0 (destoryed)\u6642\u6703\u767c\u751f\u4ec0\u9ebc\u4e8b\u3002\u53ea\u8981\u5b9a\u7fa9\u9019\u4e9b\u7279\u6b8a\u6210\u54e1\u51fd\u5f0f: copy \u5efa\u69cb\u5f0f\uff0c assignment \u904b\u7b97\u5b50\uff0c\u89e3\u69cb\u5f0f \u5c31\u53ef\u4ee5\u5b8c\u6210\u63a7\u5236\u3002 copy \u5efa\u69cb\u5f0f (copy constructor) \u89e3\u69cb\u5f0f (destructor) assignment \u904b\u7b97\u5b50 \u4ee5\u4e0a\u5408\u7a31 Copy Control (\u62f7\u8c9d\u63a7\u5236\u9805)\uff0c\u5982\u679c\u6c92\u6709\u660e\u78ba\u5b9a\u7fa9\u9019\u4e9b\u7279\u6b8a\u6210\u54e1\u51fd\u5f0f\uff0c\u7de8\u8b6f\u5668\u5f80\u5f80\u6703\u5e6b\u6211\u5011\u5b9a\u7fa9\u4e00\u4efd\uff0c\u4f46 classes \u4e5f\u53ef\u4ee5\u5b9a\u7fa9\u81ea\u5df1\u7684\u7248\u672c\u3002 \u7de8\u8b6f\u5668\u5408\u6210\u7684 copy-control \u51fd\u5f0f\u5e38\u5e38\u662f\u597d\u7684\u3002\u4f46\u662f\u5c0d\u65bc\u67d0\u4e9b classes\uff0c\u501a\u8cf4\u9019\u4e9b\u9810\u8a2d\u5b9a\u7fa9\u53ef\u80fd\u6703\u5c0e\u81f4\u707d\u96e3\u3002\u5be6\u4f5c\u9019\u4e9b copy-control \u64cd\u4f5c\u7684\u6700\u56f0\u96e3\u7684\u90e8\u5206\u662f: \u5206\u8fa8\u4ec0\u9ebc\u6642\u5019\u9700\u8981\u6539\u5beb\u9019\u4e9b\u9810\u8a2d\u7248\u672c\u3002\u6700\u5e38\u898b\u7684\u60c5\u6cc1\u662f: \u7576 class \u64c1\u6709 pointer \u6210\u54e1\uff0c\u5b83\u5c31\u61c9\u8a72\u8981\u5b9a\u7fa9\u81ea\u5df1\u7684 copy-control \u6210\u54e1\u3002 Copy \u5efa\u69cb\u5f0f \u9019\u7a2e\u5efa\u69cb\u5f0f\u7528\u4f86: - \u4ee5\u540c\u578b\u7269\u4ef6\u521d\u59cb\u5316\u53e6\u4e00\u500b\u7269\u4ef6\u3002 - \u8907\u88fd (\u62f7\u8c9d) \u4e00\u500b\u7269\u4ef6\uff0c\u5c07\u5fa9\u4ef6\u505a\u70ba\u5f15\u6578\u50b3\u7d66\u4e00\u500b\u51fd\u5f0f\u3002 - \u8907\u88fd\u4e00\u500b\u7269\u4ef6\uff0c\u5f9e\u51fd\u5f0f\u4e2d\u8fd4\u56de\u5fa9\u4ef6\u3002 - \u5728\u5faa\u5e8f\u5bb9\u5668\u4e2d\u5c07\u5143\u7d20\u521d\u59cb\u5316\u3002 - \u6839\u64da\u4e00\u7cfb\u5217\u5143\u7d20\u51fa\u503c\u8a2d\u5b9a\u503c\u4f86\u521d\u59cb\u5316 array \u5167\u7684\u5143\u7d20\u3002 \u7269\u4ef6\u5b9a\u7fa9\u5f0f (Object Definition) \u7684\u5f62\u5f0f C++ \u652f\u63f4\u5169\u7a2e\u521d\u59cb\u5316\u5f62\u5f0f: \u76f4\u63a5\u5f62\u5f0f\u548c\u62f7\u8c9d\u5f62\u5f0f\u3002\u62f7\u8c9d\u521d\u59cb\u5316 (copy-initialization) \u4f7f\u7528\u7b26\u865f = \uff0c\u76f4\u63a5\u521d\u59cb\u5316 (direct-initialization) \u5247\u662f\u628a\u521d\u503c\u653e\u5728\u5c0f\u62ec\u865f\u88e1\u3002 string null_book = \"9-999-99999-9\" ; // copy-initialization string dots ( 10 , '.' ); // direct-initialization string empty_direct ; // direct-initialization \u9019\u5169\u7a2e\u5f62\u5f0f\u7528\u5728 classes \u7269\u4ef6\u8eab\u4e0a\u6709\u4e9b\u5fae\u7684\u4e0d\u540c\u3002\u76f4\u63a5\u521d\u59cb\u5316\u6703\u76f4\u63a5\u559a\u8d77\u8207\u5f15\u6578\u543b\u5408\u7684\u5efa\u69cb\u5f0f\u3002\u62f7\u8c9d\u521d\u59cb\u5316\u7e3d\u662f\u559a\u8d77 copy \u5efa\u69cb\u5f0f\u3002\u62f7\u8c9d\u521d\u59cb\u5316\u9996\u5148\u4f7f\u7528\u88ab\u6307\u51fa\u7684\u5efa\u69cb\u5f0f\u5275\u5efa\u4e00\u500b\u66ab\u6642\u7269\u4ef6\uff0c\u7136\u5f8c\u518d\u4f7f\u7528 copy \u5efa\u69cb\u5f0f\u628a\u66ab\u6642\u7269\u4ef6\u62f7\u8c9d\u5230\u65b0\u7269\u4ef6\u3002 \u53c3\u6578\u548c\u8fd4\u56de\u503c \u6211\u5011\u5df2\u7d93\u77e5\u9053\uff0c\u5982\u679c\u53c3\u6578\u4e0d\u662f reference \u578b\u5225\uff0c\u5f15\u6578\u6703\u88ab\u62f7\u8c9d\u50b3\u905e\u3002\u540c\u6a23\u9053\u7406\uff0c\u8fd4\u56de\u503c\u5982\u679c\u4e0d\u662f reference \u578b\u5225\uff0c return \u6578\u64da\u4e2d\u7684\u503c\u6703\u5148\u88ab\u8907\u88fd\u5728\u88ab\u8fd4\u56de\u3002 \u7576\u53c3\u6578\u6216\u8fd4\u56de\u578b\u5225\u662f class \u578b\u5225\uff0c\u62f7\u8c9d\u884c\u70ba\u5c31\u7531 copy \u5efa\u69cb\u5f0f\u5b8c\u6210\u3002 string make_plural ( const string & , const string & ); \u51fd\u5f0f\u8fd4\u56de\u503c\u4e0d\u662f reference\uff0c\u6240\u4ee5\u6703\u4f7f\u7528 copy \u5efa\u69cb\u5f0f\u8fd4\u56de\u7d66\u5b9a\u503c\u3002 \u53c3\u6578\u90fd\u662f const reference\uff0c\u56e0\u6b64\u4e0d\u6703\u767c\u751f\u62f7\u8c9d\u884c\u70ba\u3002 \u5c07\u5bb9\u5668\u5143\u7d20\u521d\u59cb\u5316 copy \u5efa\u69cb\u5f0f\u53ef\u7528\u4f86\u521d\u59cb\u5316\u5faa\u5e8f\u662f\u5bb9\u5668\u7684\u5143\u7d20\u3002 // \u559a\u8d77 string \u7684 default \u5efa\u69cb\u5f0f 1 \u6b21\uff0c\u548c string \u7684 copy \u5efa\u69cb\u5f0f 5 \u6b21 vector < string > svec ( 5 ); \u5efa\u69cb\u5f0f\u8207 array \u5143\u7d20 \u5982\u679c\u6211\u5011\u4ee5 \u5927\u62ec\u5f27\u570d\u4f4f\u7684 array \u521d\u503c\u5217 \u63d0\u4f9b\u660e\u78ba\u7684\u5143\u7d20\u521d\u503c\uff0c\u90a3\u9ebc\u6bcf\u500b\u5143\u7d20\u90fd\u6703\u63a1\u53d6\u62f7\u8c9d\u521d\u59cb\u5316\u3002 Sales_item primer_eds [] = { string ( \"0-201-16487-6\" ), string ( \"0-201-54848-8\" ), string ( \"0-201-82470-1\" ), Sales_item () } \u5b9a\u7fa9 Copy \u5efa\u69cb\u5f0f Sales_item { Sales_item ( const Sales_item & ); private : std :: string isbn ; int units_sold ; double revenue ; }; Sales_item :: Sales_item ( const Sales_item & orig ) : isbn ( orig . isbn ), // \u4f7f\u7528 string \u7684 copy \u5efa\u69cb\u5f0f units_sold ( orig . units_sold ), // \u8907\u88fd orig.units_sold revenue ( orig . revenue ) // \u8907\u88fd orig.revenue { } \u5c0d\u5f88\u591a classes \u800c\u8a00\uff0c\u5408\u6210\u7684 copy \u5efa\u69cb\u5f0f\u5df2\u7d93\u9664\u5920\u5b8c\u6210\u6240\u6709\u5fc5\u8981\u5de5\u4f5c\u3002\u7136\u800c\u6709\u4e9b classes \u6709\u5fc5\u8981\u63a7\u5236\u8907\u88fd\u7269\u4ef6\u7684\u884c\u70ba\u3002\u9019\u4e9b classes \u4e00\u822c\u90fd\u6709 pointer \u6210\u54e1\u3002 \u963b\u6b62\u62f7\u8c9d (Preventing Copies) \u67d0\u4e9b classes \u9700\u8981\u963b\u6b62\u88ab\u62f7\u8c9d\uff0c\u90a3\u5c31\u4e0d\u8a72\u5beb\u51fa copy \u5efa\u69cb\u5f0f\uff0c\u7136\u800c\u5982\u679c\u6211\u5011\u4e0d\u5b9a\u7fa9 copy \u5efa\u69cb\u5f0f\uff0c\u7de8\u8b6f\u5668\u6703\u81ea\u52d5\u5e6b\u6211\u5011\u5408\u6210\u3002 \u70ba\u4e86\u963b\u6b62\u62f7\u8c9d\uff0c\u6709\u4ee5\u4e0b\u5169\u7a2e\u65b9\u5f0f: - \u5c07 copy \u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba private \u3002 - \u5c07 copy \u5efa\u69cb\u5f0f = delete \u3002 Sales_item { // ... private : Sales_item ( const Sales_item & ); }; Sales_item { Sales_item ( const Sales_item & ) = delete ; private : // ... }; \u8ce6\u503c (Assignment) \u904b\u7b97\u5b50 \u5c31\u50cf classes \u53ef\u4ee5\u63a7\u5236\u7269\u4ef6\u521d\u59cb\u5316\u4e00\u6a23\uff0c\u4ed6\u5011\u4e5f\u53ef\u4ee5\u5b9a\u7fa9 \u7576\u8ce6\u503c\u64cd\u4f5c\u51fa\u73fe\u6642\u6703\u767c\u751f\u4ec0\u9ebc\u4e8b: Sales_item trans , accum ; trans = accum ; \u548c copy \u5efa\u69cb\u5f0f\u4e00\u6a23\uff0c\u5982\u679c class \u6c92\u6709\u5b9a\u7fa9\u81ea\u5df1\u7684 assignment \u904b\u7b97\u5b50\uff0c\u7de8\u8b6f\u5668\u6703\u81ea\u52d5\u5408\u6210\u4e00\u500b\u3002 \u4f8b\u5982 Sales_item \u7684 assignment \u904b\u7b97\u5b50\u53ef\u4ee5\u5ba3\u544a\u70ba: class Sales_item { public : // \u4ee5\u4e0b\u7b49\u50f9\u65bc\u7de8\u8b6f\u5668\u5408\u6210\u7684 assignment \u904b\u7b97\u5b50 Sales_item & operator = ( const Sales_item & ); } \u5408\u6210\u7684 Assignment \u904b\u7b97\u5b50 \u5408\u6210\u7684 assignment \u904b\u7b97\u5b50\u8207\u5408\u6210\u7684 copy \u5efa\u69cb\u5b50\u64cd\u4f5c\u5f62\u5f0f\u76f8\u4f3c\u3002 Sales_item & Sales_item :: operator = ( const Sales_item & rhs ) { isbn = rhs . isbn ; // \u559a\u8d77 string::operator= units_sold = rhs . units_sold ; // \u4f7f\u7528\u5167\u5efa\u7684 int \u8ce6\u503c\u64cd\u4f5c revenue = rhs . revenue ; // \u4f7f\u7528\u5167\u5efa\u7684 double \u8ce6\u503c\u64cd\u4f5c return * this ; } Copy \u548c Assign \u5f80\u5f80\u7d50\u4f34\u800c\u884c \u4e8b\u5be6\u4e0a\uff0c\u9019\u5169\u500b\u64cd\u4f5c\u53ef\u88ab\u8996\u70ba\u4e00\u9ad4\u3002\u5982\u679c\u6211\u5011\u9700\u8981\u5176\u4e2d\u4e00\u500b\uff0c\u5e7e\u4e4e\u5c31\u53ef\u4ee5\u78ba\u5b9a\u4e5f\u9700\u8981\u53e6\u4e00\u500b\u3002 \u89e3\u69cb\u5f0f (Destructor) \u89e3\u69cb\u5f0f\u662f\u4e00\u7a2e\u7279\u6b8a\u7684\u6210\u54e1\u51fd\u5f0f\uff0c\u53ef\u4ee5\u7528\u4f86\u89e3\u9664\u4efb\u4f55\u8cc7\u6e90\u914d\u7f6e\u3002\u4ed6\u5c31\u50cf\u5efa\u69cb\u5f0f\u7684\u4e92\u88dc\u64cd\u4f5c\u3002 \u4ec0\u9ebc\u6642\u5019\u547c\u53eb\u89e3\u69cb\u5f0f \u7576 class \u7269\u4ef6\u88ab\u92b7\u6bc0 (destroyed)\uff0c\u89e3\u69cb\u5f0f\u5c31\u6703\u88ab\u7de8\u8b6f\u5668\u81ea\u52d5\u559a\u8d77\u3002 \u4f55\u6642\u624d\u9700\u660e\u767d\u5beb\u51fa\u4e00\u500b\u89e3\u69cb\u5f0f \u4e00\u500b\u6709\u8457\u5efa\u69cb\u5f0f\u7684 class \u4e0d\u4e00\u5b9a\u9700\u8981\u89e3\u69cb\u5f0f\u3002\u7576\u6709\u9700\u8981\u653e\u68c4\u5efa\u69cb\u5f0f\u4e2d\u6216\u7269\u4ef6\u751f\u547d\u4e2d\u66fe\u7d93\u7d22\u53d6\u7684\u8cc7\u6e90\u6642\uff0c\u6211\u5011\u624d\u5b9a\u7fa9\u5efa\u69cb\u5f0f\u3002 \u4e00\u500b\u5f88\u6709\u7528\u7684\u539f\u5247\u662f\uff0c\u5982\u679c class \u9700\u8981\u89e3\u69cb\u5f0f\uff0c\u4ed6\u4e5f\u6703\u9700\u8981 assignment \u904b\u7b97\u5b50\u548c copy \u5efa\u69cb\u5f0f\u3002\u9019\u500b\u898f\u5247\u5e38\u88ab\u7a31\u70ba Rule of Three \u3002\u4e5f\u5c31\u662f\u8aaa\u5982\u679c\u4f60\u9700\u8981\u4e00\u500b\u89e3\u69cb\u5f0f\uff0c\u4f60\u4e5f\u5c07\u9700\u8981\u6240\u6709\u4e09\u500b copy-control (\u62f7\u8c9d\u63a7\u5236\u9805) \u6210\u54e1\u3002 \u5408\u6210\u7684\u89e3\u69cb\u5f0f \u4e0d\u540c\u65bc copy \u5efa\u69cb\u5f0f\u6216 assignment \u904b\u7b97\u5b50\uff0c\u7de8\u8b6f\u5668\u7121\u8ad6\u5982\u4f55\u7e3d\u662f\u6703\u70ba\u6211\u5011\u5408\u6210\u4e00\u500b\u89e3\u69cb\u5f0f\u3002\u9019\u500b\u5408\u6210\u7248\u672c\u6703\u6309\u7269\u4ef6\u5275\u5efa\u6642\u7684\u76f8\u53cd\u9806\u5e8f\u92b7\u6bc0\u6bcf\u4e00\u500b non static \u6210\u54e1\uff0c\u4f46\u662f\u5408\u6210\u7248\u89e3\u69cb\u5f0f\u4e26\u4e0d\u6703\u5c07 pointer \u6210\u54e1\u6240\u6307\u5411\u7684\u7269\u4ef6 delete \u6389\u3002 \u79fb\u52d5\u5efa\u69cb\u5b50(Move contructor) C++11 \u65b0\u529f\u80fd\uff0c\u76ee\u524d\u4e0d\u6703\u7528\u5230\uff0c\u5f85\u7e8c... \u8a0a\u606f\u8655\u7406\u7bc4\u4f8b (A Message-Handling Example) \u5f85\u7e8c... QObject No Copy Constructor or Assignment Operator QObject has neither a copy constructor nor an assignment operator. This is by design. Actually, they are declared, but in a private section with the macro Q_DISABLE_COPY() . In fact, all Qt classes derived from QObject (direct or indirect) use this macro to declare their copy constructor and assignment operator to be private. The reasoning is found in the discussion on Identity vs Value on the Qt Object Model page. The main consequence is that you should use pointers to QObject (or to your QObject subclass) where you might otherwise be tempted to use your QObject subclass as a value. For example, without a copy constructor, you can't use a subclass of QObject as the value to be stored in one of the container classes. You must store pointers.","title":"\u62f7\u8c9d\u63a7\u5236\u9805 (Copy Control)"},{"location":"C%2B%2B/copy_control/#copy-control","text":"\u5b9a\u7fa9\u4e00\u500b\u65b0\u578b\u5225\u6642\uff0c\u6211\u5011\u53ef\u4ee5\u660e\u767d\u6216\u662f\u96b1\u6666 (\u96b1\u5f0f\u6216\u986f\u5f0f) \u7684\u6307\u51fa\u6b64\u578b\u7269\u4ef6\u88ab\u8907\u88fd (copied)\uff0c\u88ab\u8ce6\u503c (assigned)\uff0c\u88ab\u92b7\u6bc0 (destoryed)\u6642\u6703\u767c\u751f\u4ec0\u9ebc\u4e8b\u3002\u53ea\u8981\u5b9a\u7fa9\u9019\u4e9b\u7279\u6b8a\u6210\u54e1\u51fd\u5f0f: copy \u5efa\u69cb\u5f0f\uff0c assignment \u904b\u7b97\u5b50\uff0c\u89e3\u69cb\u5f0f \u5c31\u53ef\u4ee5\u5b8c\u6210\u63a7\u5236\u3002 copy \u5efa\u69cb\u5f0f (copy constructor) \u89e3\u69cb\u5f0f (destructor) assignment \u904b\u7b97\u5b50 \u4ee5\u4e0a\u5408\u7a31 Copy Control (\u62f7\u8c9d\u63a7\u5236\u9805)\uff0c\u5982\u679c\u6c92\u6709\u660e\u78ba\u5b9a\u7fa9\u9019\u4e9b\u7279\u6b8a\u6210\u54e1\u51fd\u5f0f\uff0c\u7de8\u8b6f\u5668\u5f80\u5f80\u6703\u5e6b\u6211\u5011\u5b9a\u7fa9\u4e00\u4efd\uff0c\u4f46 classes \u4e5f\u53ef\u4ee5\u5b9a\u7fa9\u81ea\u5df1\u7684\u7248\u672c\u3002 \u7de8\u8b6f\u5668\u5408\u6210\u7684 copy-control \u51fd\u5f0f\u5e38\u5e38\u662f\u597d\u7684\u3002\u4f46\u662f\u5c0d\u65bc\u67d0\u4e9b classes\uff0c\u501a\u8cf4\u9019\u4e9b\u9810\u8a2d\u5b9a\u7fa9\u53ef\u80fd\u6703\u5c0e\u81f4\u707d\u96e3\u3002\u5be6\u4f5c\u9019\u4e9b copy-control \u64cd\u4f5c\u7684\u6700\u56f0\u96e3\u7684\u90e8\u5206\u662f: \u5206\u8fa8\u4ec0\u9ebc\u6642\u5019\u9700\u8981\u6539\u5beb\u9019\u4e9b\u9810\u8a2d\u7248\u672c\u3002\u6700\u5e38\u898b\u7684\u60c5\u6cc1\u662f: \u7576 class \u64c1\u6709 pointer \u6210\u54e1\uff0c\u5b83\u5c31\u61c9\u8a72\u8981\u5b9a\u7fa9\u81ea\u5df1\u7684 copy-control \u6210\u54e1\u3002","title":"\u62f7\u8c9d\u63a7\u5236\u9805 (Copy Control)"},{"location":"C%2B%2B/copy_control/#copy","text":"\u9019\u7a2e\u5efa\u69cb\u5f0f\u7528\u4f86: - \u4ee5\u540c\u578b\u7269\u4ef6\u521d\u59cb\u5316\u53e6\u4e00\u500b\u7269\u4ef6\u3002 - \u8907\u88fd (\u62f7\u8c9d) \u4e00\u500b\u7269\u4ef6\uff0c\u5c07\u5fa9\u4ef6\u505a\u70ba\u5f15\u6578\u50b3\u7d66\u4e00\u500b\u51fd\u5f0f\u3002 - \u8907\u88fd\u4e00\u500b\u7269\u4ef6\uff0c\u5f9e\u51fd\u5f0f\u4e2d\u8fd4\u56de\u5fa9\u4ef6\u3002 - \u5728\u5faa\u5e8f\u5bb9\u5668\u4e2d\u5c07\u5143\u7d20\u521d\u59cb\u5316\u3002 - \u6839\u64da\u4e00\u7cfb\u5217\u5143\u7d20\u51fa\u503c\u8a2d\u5b9a\u503c\u4f86\u521d\u59cb\u5316 array \u5167\u7684\u5143\u7d20\u3002","title":"Copy \u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/copy_control/#object-definition","text":"C++ \u652f\u63f4\u5169\u7a2e\u521d\u59cb\u5316\u5f62\u5f0f: \u76f4\u63a5\u5f62\u5f0f\u548c\u62f7\u8c9d\u5f62\u5f0f\u3002\u62f7\u8c9d\u521d\u59cb\u5316 (copy-initialization) \u4f7f\u7528\u7b26\u865f = \uff0c\u76f4\u63a5\u521d\u59cb\u5316 (direct-initialization) \u5247\u662f\u628a\u521d\u503c\u653e\u5728\u5c0f\u62ec\u865f\u88e1\u3002 string null_book = \"9-999-99999-9\" ; // copy-initialization string dots ( 10 , '.' ); // direct-initialization string empty_direct ; // direct-initialization \u9019\u5169\u7a2e\u5f62\u5f0f\u7528\u5728 classes \u7269\u4ef6\u8eab\u4e0a\u6709\u4e9b\u5fae\u7684\u4e0d\u540c\u3002\u76f4\u63a5\u521d\u59cb\u5316\u6703\u76f4\u63a5\u559a\u8d77\u8207\u5f15\u6578\u543b\u5408\u7684\u5efa\u69cb\u5f0f\u3002\u62f7\u8c9d\u521d\u59cb\u5316\u7e3d\u662f\u559a\u8d77 copy \u5efa\u69cb\u5f0f\u3002\u62f7\u8c9d\u521d\u59cb\u5316\u9996\u5148\u4f7f\u7528\u88ab\u6307\u51fa\u7684\u5efa\u69cb\u5f0f\u5275\u5efa\u4e00\u500b\u66ab\u6642\u7269\u4ef6\uff0c\u7136\u5f8c\u518d\u4f7f\u7528 copy \u5efa\u69cb\u5f0f\u628a\u66ab\u6642\u7269\u4ef6\u62f7\u8c9d\u5230\u65b0\u7269\u4ef6\u3002","title":"\u7269\u4ef6\u5b9a\u7fa9\u5f0f (Object Definition) \u7684\u5f62\u5f0f"},{"location":"C%2B%2B/copy_control/#_1","text":"\u6211\u5011\u5df2\u7d93\u77e5\u9053\uff0c\u5982\u679c\u53c3\u6578\u4e0d\u662f reference \u578b\u5225\uff0c\u5f15\u6578\u6703\u88ab\u62f7\u8c9d\u50b3\u905e\u3002\u540c\u6a23\u9053\u7406\uff0c\u8fd4\u56de\u503c\u5982\u679c\u4e0d\u662f reference \u578b\u5225\uff0c return \u6578\u64da\u4e2d\u7684\u503c\u6703\u5148\u88ab\u8907\u88fd\u5728\u88ab\u8fd4\u56de\u3002 \u7576\u53c3\u6578\u6216\u8fd4\u56de\u578b\u5225\u662f class \u578b\u5225\uff0c\u62f7\u8c9d\u884c\u70ba\u5c31\u7531 copy \u5efa\u69cb\u5f0f\u5b8c\u6210\u3002 string make_plural ( const string & , const string & ); \u51fd\u5f0f\u8fd4\u56de\u503c\u4e0d\u662f reference\uff0c\u6240\u4ee5\u6703\u4f7f\u7528 copy \u5efa\u69cb\u5f0f\u8fd4\u56de\u7d66\u5b9a\u503c\u3002 \u53c3\u6578\u90fd\u662f const reference\uff0c\u56e0\u6b64\u4e0d\u6703\u767c\u751f\u62f7\u8c9d\u884c\u70ba\u3002","title":"\u53c3\u6578\u548c\u8fd4\u56de\u503c"},{"location":"C%2B%2B/copy_control/#_2","text":"copy \u5efa\u69cb\u5f0f\u53ef\u7528\u4f86\u521d\u59cb\u5316\u5faa\u5e8f\u662f\u5bb9\u5668\u7684\u5143\u7d20\u3002 // \u559a\u8d77 string \u7684 default \u5efa\u69cb\u5f0f 1 \u6b21\uff0c\u548c string \u7684 copy \u5efa\u69cb\u5f0f 5 \u6b21 vector < string > svec ( 5 );","title":"\u5c07\u5bb9\u5668\u5143\u7d20\u521d\u59cb\u5316"},{"location":"C%2B%2B/copy_control/#array","text":"\u5982\u679c\u6211\u5011\u4ee5 \u5927\u62ec\u5f27\u570d\u4f4f\u7684 array \u521d\u503c\u5217 \u63d0\u4f9b\u660e\u78ba\u7684\u5143\u7d20\u521d\u503c\uff0c\u90a3\u9ebc\u6bcf\u500b\u5143\u7d20\u90fd\u6703\u63a1\u53d6\u62f7\u8c9d\u521d\u59cb\u5316\u3002 Sales_item primer_eds [] = { string ( \"0-201-16487-6\" ), string ( \"0-201-54848-8\" ), string ( \"0-201-82470-1\" ), Sales_item () }","title":"\u5efa\u69cb\u5f0f\u8207 array \u5143\u7d20"},{"location":"C%2B%2B/copy_control/#copy_1","text":"Sales_item { Sales_item ( const Sales_item & ); private : std :: string isbn ; int units_sold ; double revenue ; }; Sales_item :: Sales_item ( const Sales_item & orig ) : isbn ( orig . isbn ), // \u4f7f\u7528 string \u7684 copy \u5efa\u69cb\u5f0f units_sold ( orig . units_sold ), // \u8907\u88fd orig.units_sold revenue ( orig . revenue ) // \u8907\u88fd orig.revenue { } \u5c0d\u5f88\u591a classes \u800c\u8a00\uff0c\u5408\u6210\u7684 copy \u5efa\u69cb\u5f0f\u5df2\u7d93\u9664\u5920\u5b8c\u6210\u6240\u6709\u5fc5\u8981\u5de5\u4f5c\u3002\u7136\u800c\u6709\u4e9b classes \u6709\u5fc5\u8981\u63a7\u5236\u8907\u88fd\u7269\u4ef6\u7684\u884c\u70ba\u3002\u9019\u4e9b classes \u4e00\u822c\u90fd\u6709 pointer \u6210\u54e1\u3002","title":"\u5b9a\u7fa9 Copy \u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/copy_control/#preventing-copies","text":"\u67d0\u4e9b classes \u9700\u8981\u963b\u6b62\u88ab\u62f7\u8c9d\uff0c\u90a3\u5c31\u4e0d\u8a72\u5beb\u51fa copy \u5efa\u69cb\u5f0f\uff0c\u7136\u800c\u5982\u679c\u6211\u5011\u4e0d\u5b9a\u7fa9 copy \u5efa\u69cb\u5f0f\uff0c\u7de8\u8b6f\u5668\u6703\u81ea\u52d5\u5e6b\u6211\u5011\u5408\u6210\u3002 \u70ba\u4e86\u963b\u6b62\u62f7\u8c9d\uff0c\u6709\u4ee5\u4e0b\u5169\u7a2e\u65b9\u5f0f: - \u5c07 copy \u5efa\u69cb\u5f0f\u5ba3\u544a\u70ba private \u3002 - \u5c07 copy \u5efa\u69cb\u5f0f = delete \u3002 Sales_item { // ... private : Sales_item ( const Sales_item & ); }; Sales_item { Sales_item ( const Sales_item & ) = delete ; private : // ... };","title":"\u963b\u6b62\u62f7\u8c9d (Preventing Copies)"},{"location":"C%2B%2B/copy_control/#assignment","text":"\u5c31\u50cf classes \u53ef\u4ee5\u63a7\u5236\u7269\u4ef6\u521d\u59cb\u5316\u4e00\u6a23\uff0c\u4ed6\u5011\u4e5f\u53ef\u4ee5\u5b9a\u7fa9 \u7576\u8ce6\u503c\u64cd\u4f5c\u51fa\u73fe\u6642\u6703\u767c\u751f\u4ec0\u9ebc\u4e8b: Sales_item trans , accum ; trans = accum ; \u548c copy \u5efa\u69cb\u5f0f\u4e00\u6a23\uff0c\u5982\u679c class \u6c92\u6709\u5b9a\u7fa9\u81ea\u5df1\u7684 assignment \u904b\u7b97\u5b50\uff0c\u7de8\u8b6f\u5668\u6703\u81ea\u52d5\u5408\u6210\u4e00\u500b\u3002 \u4f8b\u5982 Sales_item \u7684 assignment \u904b\u7b97\u5b50\u53ef\u4ee5\u5ba3\u544a\u70ba: class Sales_item { public : // \u4ee5\u4e0b\u7b49\u50f9\u65bc\u7de8\u8b6f\u5668\u5408\u6210\u7684 assignment \u904b\u7b97\u5b50 Sales_item & operator = ( const Sales_item & ); }","title":"\u8ce6\u503c (Assignment) \u904b\u7b97\u5b50"},{"location":"C%2B%2B/copy_control/#assignment_1","text":"\u5408\u6210\u7684 assignment \u904b\u7b97\u5b50\u8207\u5408\u6210\u7684 copy \u5efa\u69cb\u5b50\u64cd\u4f5c\u5f62\u5f0f\u76f8\u4f3c\u3002 Sales_item & Sales_item :: operator = ( const Sales_item & rhs ) { isbn = rhs . isbn ; // \u559a\u8d77 string::operator= units_sold = rhs . units_sold ; // \u4f7f\u7528\u5167\u5efa\u7684 int \u8ce6\u503c\u64cd\u4f5c revenue = rhs . revenue ; // \u4f7f\u7528\u5167\u5efa\u7684 double \u8ce6\u503c\u64cd\u4f5c return * this ; }","title":"\u5408\u6210\u7684 Assignment \u904b\u7b97\u5b50"},{"location":"C%2B%2B/copy_control/#copy-assign","text":"\u4e8b\u5be6\u4e0a\uff0c\u9019\u5169\u500b\u64cd\u4f5c\u53ef\u88ab\u8996\u70ba\u4e00\u9ad4\u3002\u5982\u679c\u6211\u5011\u9700\u8981\u5176\u4e2d\u4e00\u500b\uff0c\u5e7e\u4e4e\u5c31\u53ef\u4ee5\u78ba\u5b9a\u4e5f\u9700\u8981\u53e6\u4e00\u500b\u3002","title":"Copy \u548c Assign \u5f80\u5f80\u7d50\u4f34\u800c\u884c"},{"location":"C%2B%2B/copy_control/#destructor","text":"\u89e3\u69cb\u5f0f\u662f\u4e00\u7a2e\u7279\u6b8a\u7684\u6210\u54e1\u51fd\u5f0f\uff0c\u53ef\u4ee5\u7528\u4f86\u89e3\u9664\u4efb\u4f55\u8cc7\u6e90\u914d\u7f6e\u3002\u4ed6\u5c31\u50cf\u5efa\u69cb\u5f0f\u7684\u4e92\u88dc\u64cd\u4f5c\u3002","title":"\u89e3\u69cb\u5f0f (Destructor)"},{"location":"C%2B%2B/copy_control/#_3","text":"\u7576 class \u7269\u4ef6\u88ab\u92b7\u6bc0 (destroyed)\uff0c\u89e3\u69cb\u5f0f\u5c31\u6703\u88ab\u7de8\u8b6f\u5668\u81ea\u52d5\u559a\u8d77\u3002","title":"\u4ec0\u9ebc\u6642\u5019\u547c\u53eb\u89e3\u69cb\u5f0f"},{"location":"C%2B%2B/copy_control/#_4","text":"\u4e00\u500b\u6709\u8457\u5efa\u69cb\u5f0f\u7684 class \u4e0d\u4e00\u5b9a\u9700\u8981\u89e3\u69cb\u5f0f\u3002\u7576\u6709\u9700\u8981\u653e\u68c4\u5efa\u69cb\u5f0f\u4e2d\u6216\u7269\u4ef6\u751f\u547d\u4e2d\u66fe\u7d93\u7d22\u53d6\u7684\u8cc7\u6e90\u6642\uff0c\u6211\u5011\u624d\u5b9a\u7fa9\u5efa\u69cb\u5f0f\u3002 \u4e00\u500b\u5f88\u6709\u7528\u7684\u539f\u5247\u662f\uff0c\u5982\u679c class \u9700\u8981\u89e3\u69cb\u5f0f\uff0c\u4ed6\u4e5f\u6703\u9700\u8981 assignment \u904b\u7b97\u5b50\u548c copy \u5efa\u69cb\u5f0f\u3002\u9019\u500b\u898f\u5247\u5e38\u88ab\u7a31\u70ba Rule of Three \u3002\u4e5f\u5c31\u662f\u8aaa\u5982\u679c\u4f60\u9700\u8981\u4e00\u500b\u89e3\u69cb\u5f0f\uff0c\u4f60\u4e5f\u5c07\u9700\u8981\u6240\u6709\u4e09\u500b copy-control (\u62f7\u8c9d\u63a7\u5236\u9805) \u6210\u54e1\u3002","title":"\u4f55\u6642\u624d\u9700\u660e\u767d\u5beb\u51fa\u4e00\u500b\u89e3\u69cb\u5f0f"},{"location":"C%2B%2B/copy_control/#_5","text":"\u4e0d\u540c\u65bc copy \u5efa\u69cb\u5f0f\u6216 assignment \u904b\u7b97\u5b50\uff0c\u7de8\u8b6f\u5668\u7121\u8ad6\u5982\u4f55\u7e3d\u662f\u6703\u70ba\u6211\u5011\u5408\u6210\u4e00\u500b\u89e3\u69cb\u5f0f\u3002\u9019\u500b\u5408\u6210\u7248\u672c\u6703\u6309\u7269\u4ef6\u5275\u5efa\u6642\u7684\u76f8\u53cd\u9806\u5e8f\u92b7\u6bc0\u6bcf\u4e00\u500b non static \u6210\u54e1\uff0c\u4f46\u662f\u5408\u6210\u7248\u89e3\u69cb\u5f0f\u4e26\u4e0d\u6703\u5c07 pointer \u6210\u54e1\u6240\u6307\u5411\u7684\u7269\u4ef6 delete \u6389\u3002","title":"\u5408\u6210\u7684\u89e3\u69cb\u5f0f"},{"location":"C%2B%2B/copy_control/#move-contructor","text":"C++11 \u65b0\u529f\u80fd\uff0c\u76ee\u524d\u4e0d\u6703\u7528\u5230\uff0c\u5f85\u7e8c...","title":"\u79fb\u52d5\u5efa\u69cb\u5b50(Move contructor)"},{"location":"C%2B%2B/copy_control/#a-message-handling-example","text":"\u5f85\u7e8c...","title":"\u8a0a\u606f\u8655\u7406\u7bc4\u4f8b (A Message-Handling Example)"},{"location":"C%2B%2B/copy_control/#qobject-no-copy-constructor-or-assignment-operator","text":"QObject has neither a copy constructor nor an assignment operator. This is by design. Actually, they are declared, but in a private section with the macro Q_DISABLE_COPY() . In fact, all Qt classes derived from QObject (direct or indirect) use this macro to declare their copy constructor and assignment operator to be private. The reasoning is found in the discussion on Identity vs Value on the Qt Object Model page. The main consequence is that you should use pointers to QObject (or to your QObject subclass) where you might otherwise be tempted to use your QObject subclass as a value. For example, without a copy constructor, you can't use a subclass of QObject as the value to be stored in one of the container classes. You must store pointers.","title":"QObject No Copy Constructor or Assignment Operator"},{"location":"C%2B%2B/effective_cpp/","text":"Effective C++ 1. View C++ as a federation of languages. In the beginning, C++ was just C with some object-oriented features tacked on. Even C++'s original name, \"C with Classes\", reflected this simple heritage. As the language matured, it grew bolder and more adventurous. Today C++ is a multiparadigm programming language , one supporting a combination of procedural, object-oriented, functional, generic, and metaprogramming features. This is power and flexibility make C++ a tool without equal, but can also cause some confusion. The easiest way is to view C++ not as a single language but as a federation of related languages. To make sense of C++, you have to recognize its primary sub-languages. C Blocks, statements, the preprocessor, build-in data types, arrays, pointers, etc... Object-Oriented C++ Classes, encapsulation, inheritance, polymorphism, virtual functions, etc... Template C++ This is the generic programming part of C++. The STL The STL is a template library. Its conventions regarding containers, iterators, algorithm, and function objects, etc... Things to Remember Rules for effective C++ programming vary, depending on the part of C++ you are using. 2. Prefer const , enum , and inline to #define . This item might better be called \"prefer the compiler to the preprocessor\", because #define may be treated as if it's not part of the language. For example: #define ASPECT_RATIO 1.653 The symbolic name ASPECT_RATIO may never be seen by compiler; This can be confusing if you get an error during compilation involving the use of the constant, because the error message may refer to 1.653 , not ASPECT_RATIO . The solution is to replace the macro with a constant: const double kAspectRatio = 1.653; The second special case concerns class-specific constants. To limit the scope of a constant to a class, you must make it a member, and to ensure there's at most one copy of the constant, you must make it a static member: class CostEstimate { private : static const double FudgeFactor ; // declaration; goes in header file ... }; const double CostEstimate :: FudgeFactor = 1.35 ; //definition; goes in impl. file There is a exception when you need the value of a class constant during compilation of the class, you can use enum defined like this: class GamePlayer { private : enum { NumTurns = 5 }; // enum class is better. int scores [ NumTurns ]; ... }; Getting back to preprocessor, another common (mis)use of the #define directive is using it to implement macros that look like functions but that don't incur the overhead of a function call. #define CALL_WITH_MAX(a, b) f((a) > (b) ? (a) : (b)) Look at the weird things that can happen: int a = 5 , b = 0 ; CALL_WITH_MAX ( ++ a , b ); // a is incremented twice CALL_WITH_MAX ( ++ a , b + 10 ); // a is incremented once The solution is: template < typename T > // template <class T> inline void CallWithMax ( const T & a , const T & b ) { f ( a > b ? a : b ); } Things to Remember For simple constants, prefer const objects or enum to #define . For function-like macros, prefer inline functions to #define . 3. Use const whenever possible. The wonderful thing about const is that it allows you to specify a semantic constraint - a particular object should not be modified - and compilers will enforce that constraint. \u9019\u500b\u7ae0\u7bc0\u5e0c\u671b\u5927\u5bb6\u6bcf\u7576\u6709\u53ef\u80fd\u5c31\u4f7f\u7528 const , \u6240\u4ee5\u524d\u534a\u90e8\u5f88\u591a\u5167\u5bb9\u662f\u5728\u8907\u7fd2 const \u7684\u4f5c\u7528, \u9019\u90e8\u5206\u6211\u5c31\u53ea\u7528 sample code \u5e36\u904e, \u5927\u5bb6\u4e5f\u9806\u4fbf\u8907\u7fd2\u4e00\u4e0b, \u770b\u662f\u4e0d\u662f\u77e5\u9053\u9019\u4e9b const \u7684\u7528\u6cd5\u4ee5\u53ca\u5dee\u7570, \u5982\u679c\u6709\u4e0d\u61c2\u7684\u5730\u65b9\u53ef\u4ee5\u63d0\u51fa\u4f86. char greeting [] = \"Hello\" ; char * p = greeting ; // non-const pointer, // non-const data const char * p = greeting ; // non-const pointer, // const data char * const p = greeting ; // const pointer, // non-const data const char * const p = greeting ; // const pointer, // const data void f1 ( const Widget * pw ); // f1 takes a pointer to a constant Widget object void f2 ( Widget const * pw ); // so does f2 std :: vector < int > vec ; ... const std :: vector < int >:: iterator iter = vec . begin (); // iter acts like a T* const * iter = 10 ; // OK, changes what iter points to ++ iter ; // error! iter is const std :: vector < int >:: const_iterator c_iter = vec . begin (); // c_iter acts like a const T* * c_iter = 10 ; // error! *c_iter is const ++ c_iter ; // fine, changes c_iter const Member Functions The purpose of const on member functions is to identify which member functions may be invoked on const objects. Such member functions are important for two reasons. First, they make the interface of a class easier to understand. It's important to know which functions may modify an object and which may not. Seconds, they make it possible to work with const objects. That's a critical aspect of writing efficient code, because, as Item 20 explains, one of the fundamental ways to improve a C++ program's performance is to pass objects by reference-to-const. class TextBlock { public : ... const char & operator []( const std :: size_t position ) const // operator[] for { return text [ position ]; } // const objects char & operator []( const std :: size_t position ) // operator[] for { return text [ position ]; } // non-const objects private : std :: string text ; }; TextBlock 's operator[] s can be used like this: TextBlock tb ( \"Hello\" ); std :: cout << tb [ 0 ]; // calls non-const TextBlock::operator[] const TextBlock ctb ( \"World\" ); std :: cout << ctb [ 0 ]; // calls const TextBlock::operator[] Incidentally, const objects most often arise in real programs as a result of being passed by pointer- or reference-to-const. void print ( const TextBlock & ctb ) // in this function, ctb is const { std :: cout << ctb [ 0 ]; // call const TextBlock::operator[] ... } By overloading operator[] and giving the different versions different return types, you can have const and non- const TextBlock s handled differently: std :: cout << tb [ 0 ]; // fine - reading a non-const TextBlock tb [ 0 ] = 'x' ; // fine - writing a non-const TextBlock std :: cout << ctb [ 0 ]; // fine - reading a const TextBlock ctb [ 0 ] = 'x' ; // error! - writing a const TextBlock Sometimes const member function might modify some of the bits in the object on which it's invoked, but only in ways that clients cannot detect. For example, your CTextBlock class might want to cache the length of the textbook whenever it's requested: class CTextBlock { public : ... std :: size_t length () const ; private : char * pText ; std :: size_t textLength ; // last calculated length of textblock bool lengthIsValid ; // whether length is currently valid } std :: size_t CTextBlock :: length () const { if ( ! lengthIsValid ) { textLength = std :: strlen ( pText ); // error! can't assign to textLength and lengthIsValid in a const member function lengthIsValid = true ; } return textLength ; } This implementation of length is certainly not bitwise const - both textLength and lengthIsValid may be modified. Compilers disagree. They insist on bitwise constness. What to do? The solution is simple: take advantage of C++'s const -related wiggle room known as mutable . mutable frees non-static data members from the constraints of bitwise constness: class CTextBlock { public : ... std :: size_t length () const ; private : char * pText ; mutable std :: size_t textLength ; // these data members may mutable bool lengthIsValid ; // always be modified, even // in const member function } Avoiding Duplication in const and Non- const Member Functions For example, suppose that operator[] in TextBlock not only returned a reference to the appropriate character, it also performed bounds checking, logged access information, maybe even did data integrity validation. Putting all this in both the const and the non- const operator[] functions yields this kind of monstrosity: class TextBlock { public : ... const char & operator []( const std :: size_t position ) const { ... // do bounds checking ... // log access data ... // verify data integrity return text [ position ]; } char & operator []( const std :: size_t position ) { ... // do bounds checking ... // log access data ... // verify data integrity return text [ position ]; } private : std :: string text ; }; Ouch! Can you say code duplication, along with its attendant compilation time, maintenance, and code-bloat headaches? Sure, So what you really want to do is implement operator[] functionality once and use it twice. That is, you want to have one version of operator[] call the other one. And that bring us to casting away constness. class TextBlock { public : ... const char & operator []( const std :: size_t position ) const // same as before { ... ... ... return text [ position ]; } char & operator []( const std :: size_t position ) { return const_cast < char &> ( // cast away const on op[]'s return type; static_cast < const TextBlock &> ( * this ) // add const to *this's type; [ position ] // call const version of op[] ); } private : std :: string text ; }; Things to Remember Declaring something const helps compilers detect usage errors. const can be applied to objects at any scope, to function parameters and return types, and to member functions as a whole. Compilers enforce bitwise constness, but you should program using logical constness. When const and non- const member functions have essentially identical implementations, code duplication can be avoided by having the non- const version call the const version. 4. Make sure that objects are initialized before they're used. C++ can seem rather fickle about initializing the values of objects. For example, if you say this, int x ; in some constexts, x is guaranteed to be initialized(to zero), but in others, it's not. If you say this, class Point { int x , y } ... Point p ; p 's data members are sometimes guaranteed to be initialized(to zero), but sometimes they're not. Reading uninitialized values yields undefined behavior. Now, there are rules that describe when object initialization is guaranteed to take place and when it isn't. Unfortunately, the rules are complicated - too complicated to be memorizing. The best way to deal with this seemingly indeterminate state of affairs is to always initialize your objects before you use them. int x = 0 ; // manual initialization of an int const char * text = \"A C-style string\" ; // manual initialization of a pointer double d ; // \"initialization\" by std :: cin >> d ; // reading from an input stream For almost everything else, the responsibility for initialization falls on constructors. The rule there is simple: make sure that all constructors initialize everything in the object. The rule is easy to follow, but it's important not to confuse assignment with initialization. class PhoneNumber {...}; class ABEntry { // ABEntry = \"Address Book Entry\" public : ABEntry ( const std :: string & name , const std :: string & address , const std :: list < PhoneNumber >& phone ); private : std :: string theName ; std :: string theAddress ; std :: list < PhoneNumber > thePhones ; int numTimesConsulted ; }; ABEntry :: ABEntry ( const std :: string & name , const std :: string & address , const std :: list < PhoneNumber >& phone ) { theName = name ; // these are all assignments, theAddress = address ; // not initializations thePhones = phones ; numTimesConsulted = 0 ; } This will yield ABEntry objects with the values you expect, but it's still not the best approach. They aren't being initialized, they're being assigned. Initialization took place earlier. A better way to write the ABEntry constructor is to use the member initialization list instead of assignments: ABEntry :: ABEntry ( const std :: string & name , const std :: string & address , const std :: list < PhoneNumber >& phone ) : theName ( name ), theAddress ( address ), // these are now all initializations thePhones ( phones ), numTimesConsulted ( 0 ) {} Sometimes the initialization list must be used, even for built-in types. For example, data member that are const or are references must be initialized. They cant't be assigned. One aspect of C++ that isn't fickle is the order in which an object's data is initialized. This order is always the same: base classes are initialized before derived classes, and within a class, data members are initialized in the order in which they are declared. This is true even if they are listed in a different order on the member initialization list. To avoid reader confusion, always list members in the initialization list in the same order as they're declared in the class. Things to Remember Manually initialize objects of built-in type, because C++ only sometimes initializes them itself. In a constructor, prefer use of the member initialization list to assignment inside the body of the constructor. List data members in the initialization list in the same order ther're declared in the class. Avoid initialization order problem across translation units by replacing non-local statics objects with local static objects. 5. Know what function C++ silently writes and calls. When is an empty class not an empty class? When C++ gets through with it. If you don't declare them yourself, compiler will declare their own versions of a copy constructor, a copy assignment operator, and a destructor. As a result, if you write class Empty {}; it's essentially the same as if you'd written this: class Empty { public : Empty (){...} // default constructor Empty ( const Empty & rhs ){...} // copy constructor ~ Empty (){...} // destructor Empty & operator = ( const Empty & rhs ){...} // copy assignment operator }; These functions are generated only if they are needed. The following code will cause each function to be generated: Empty e1 ; // default constructor // destructor Empty e2 ( e1 ); // copy constructor e2 = e1 ; // copy assignment operator Let's consider next example: template < typename T > class NamedObject { public : NamedObject ( const char * name , const T & value ); NamedObject ( const std :: string & name , const T & value ); ... private : std :: string nameValue ; T objectValue ; } Because a constructor is declared in NamedObject , compilers won't generate a default constructor. This is important. NamedObject declares neither copy constructor nor copy assignment operator. so compilers will generate those functions. Look, then, at this use of the copy constructor: NamedObject < int > no1 ( \"Small prime number\" , 2 ); NamedObject < int > no2 ( no1 ); // calls copy constructor The copy constructor generated by compilers must initialize no2.nameValue and no2.objectValue using no1.nameValue and no1.objectValue , respectively. The type of nameValue is string , so no2.nameValue will be initialized by calling the string copy constructor with no1.nameValue as its argument. On the other hand, int is a built-in type, so no2.objectValue will be initialized by copying the bits in no1.objectValue . The compiler-generated copy assignment operator for NameObject<int> would behave essentially the same way. Next example, suppose NameObject were defined like this, where nameValue is a reference to a string and objectValue is a const T : template < typename T > class NamedObject { public : NamedObject ( const std :: string & name , const T & value ); ... private : std :: string & nameValue ; // this is now a reference const T objectValue ; // this is now const } Now consider what should happen here: std :: string newDog ( \"Persephone\" ); std :: string oldDog ( \"Satch\" ); NameObject < int > p ( newDog , 2 ); NameObject < int > s ( oldDog , 36 ); p = s ; // what should happen to the data members in p ? After the assignment, should p.nameValue refer to the string referred to by s.nameValue . Should the reference itself be modified? If so, that breaks new ground, because C++ doesn't provide a way to make a reference refer to a different object. Faced with this conundrum, C++ refuse to compile the code. If you want to support copy assignment in a class containing a reference member, you must define the copy assignment operator yourself. Compilers behave similarly for classes containing const members. Things to Remember Compilers may implicitly generate a class's default constructor, copy constructor, copy assignment operator, and destructor. 6. Explicitly disallow the use of compiler-generated functions you do not want. \u9019\u908a\u66f8\u662f\u4ee5\u623f\u7522\u505a\u8209\u4f8b, \u5047\u8a2d\u6211\u5011\u628a\u623f\u7522\u5beb\u6210\u4e00\u500b\u985e: class HomeForSale {...}; \u6211\u5011\u53ef\u4ee5\u77e5\u9053\u73fe\u5be6\u4e2d\u4efb\u4f55\u4e00\u500b\u623f\u7522\u90fd\u662f\u7368\u4e00\u7121\u4e8c\u7684, \u5982\u679c\u5b83\u53ef\u4ee5\u8907\u88fd, \u90a3\u80af\u5b9a\u662f\u4e0d\u5408\u7406\u7684, \u6240\u4ee5\u5c0d\u65bc\u4ee5\u4e0b\u60c5\u6cc1, \u6211\u5011\u61c9\u8a72\u8b93\u5b83\u7de8\u8b6f\u5931\u6557: HomeForSale h1 ; HomeForSale h2 ; HomeForSale h3 ( h1 ); // attempt to copy h1 - should not compile! h1 = h2 // attempt to copy h2 - should not compile! \u7136\u800c\u8981\u4f5c\u5230\u9019\u6a23\u7684\u6548\u679c\u4e26\u4e0d\u76f4\u89c0, \u901a\u5e38\u6211\u5011\u76f4\u89ba\u6703\u8a8d\u70ba\u5982\u679c\u6211\u5011\u4e0d\u60f3\u8981\u4e00\u500b function \u7684\u529f\u80fd, \u6211\u5011\u53ea\u8981\u4e0d\u5ba3\u544a\u9019\u500b function \u5c31\u597d\u4e86, \u4f46\u9019\u500b\u4f5c\u6cd5\u5728 copy constructor, copy assignment operator \u4e0d\u7ba1\u7528, \u56e0\u70ba\u6839\u64da\u7b2c 5 \u9ede\u6211\u5011\u63d0\u5230, \u5982\u679c\u4f60\u4e0d\u5ba3\u544a, compiler \u6703\u5e6b\u4f60\u81ea\u52d5\u5ba3\u544a. \u6240\u4ee5\u5982\u679c\u6211\u5011\u8981\u89e3\u6c7a\u9019\u500b\u554f\u984c, \u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u6cd5: class HomeForSale { public : ... HomeForSale ( const HomeForSale & ) = delete ; HomeForSale & operator = ( const HomeForSale & ) = delete ; }; Things to Remember To disallow functionality automatically provided by compilers, declare the corresponding member functions = delete and give no implementations. 7. Declare destructors virtual in polymorphic base classes. There are lots of ways to keep track of time, so it would be resonable to create a TimeKeeper base class along with derived classes for different approaches to timekeeping: class TimeKeeper { public : TimeKeeper (); ~ TimeKeeper (); ... }; class AtomicClock : public TimeKeeper {...}; class WaterClock : public TimeKeeper {...}; class WristWatch : public TimeKeeper {...}; Many clients will want access to the time without worrying about the details of how it's calculated, so a factory function - a function that return a base class pointer to a newly-created derived class object - can be used to return a pointer to a timekeeping object: TimeKeeper * getTimeKeeper (); // returns a pointer to a dynamically allocated object of a class derived from TimeKeeper Consider next situation: TimeKeeper * ptk = getTimeKeeper (); // get dynamically allocated object from TimeKeeper hierachy ... // use it delete ptk ; // release it to avoid resource leak The problem is that getTimeKeeper returns a pointer to a derived class object(e.g. AtomClock ), that object is being deleted via a base class pointer(i.e., a TimeKeeper* pointer), and the base class ( TimeKeeper ) has a non-virtual destructor. This is a recipe for disaster, result are undefined. What typically happens at runtime is that the derived part of the object is never destroyed. Eliminating the problem is simple: give the base class a virtual destructor. Then deleting the derived class object will do exactly what you want. It will destory the entire object, including all its derived class parts: class TimeKeeper { public : TimeKeeper (); virtual ~ TimeKeeper (); ... }; TimeKeeper * ptk = getTimeKeeper (); ... delete ptk ; Things to Remember Polymorphic base classes should declare virtual destructors. If a class has any virtual functions, it should have a virtual destructor. Classes not designed to be base classes or not designed to be used polymorphically should not declare virtual destructors. 8. Prevent exceptions from leaving destructors. Consider: class Widget { public : ... ~ Widget (){...} // assume this might emit an exception }; void doSomething () { std :: vector < Widget > v ; } // v is automatically destroyed here When the vector v is destroyed, suppose v has ten Widget s in it, and during destruction of the first one, an exception is thrown. The other nine Widget s still have to be destroyed, so v should invoke their destructors. But suppose that during those calls, a second Widget destructor throws an exception. Now there are two simultaneously active exceptions, and that's one too many for C++. Program execution either terminates or yields undefined behavior. That's easy enough to understand, but what should you do if your destructor needs to perform an operation that may fail by throwing an exception? For example: class DBConnection { public : ... static DBConnection create (); void close (); // close connection; throw an exception if closing fails }; To ensure that clients don't forget to call close on DBConnetion objects, a reasonable idea would be create a resourse-managing class for DBConnection that calls close in its destructor. class DBConn { public : ... ~ DBConn () { db . close (); } private : DBConnection db ; }; That allows clients to program like this: { DBConn dbc ( DBConnection :: create ()); ... } // at the end of block, the DBConn object is destroyed, thus automatically calling close on the DBConnection object If destructor yields an exception, allow it to leave the destructor. That's a problem. There are two primary ways to avoid the trouble: Terminate the program if close throws, typically by calling abort : DBConn ::~ DBConn () { try { db . close (); } catch (...){ // make log entry that the call to close failed; std :: abort (); } } Swallow the exception arising from the call to close : DBConn ::~ DBConn () { try { db . close (); } catch (...){ // make log entry that the call to close failed; } } In general, swallowing exception is a bad idea, because it suppresses important information. Sometimes, however, swallowing exception is preferable to running the risk of premature program termination or undefined behavior. Things to Remember Destructors should never emit exceptions. If functions called in a destructor may throw, the destructor should catch any exceptions, then swallow them or terminate the program. If class clients need to be able to react to exceptions thrown during an operation, the class should provide a regular function that performs the operation.","title":"Effective C++"},{"location":"C%2B%2B/effective_cpp/#effective-c","text":"","title":"Effective C++"},{"location":"C%2B%2B/effective_cpp/#1-view-c-as-a-federation-of-languages","text":"In the beginning, C++ was just C with some object-oriented features tacked on. Even C++'s original name, \"C with Classes\", reflected this simple heritage. As the language matured, it grew bolder and more adventurous. Today C++ is a multiparadigm programming language , one supporting a combination of procedural, object-oriented, functional, generic, and metaprogramming features. This is power and flexibility make C++ a tool without equal, but can also cause some confusion. The easiest way is to view C++ not as a single language but as a federation of related languages. To make sense of C++, you have to recognize its primary sub-languages. C Blocks, statements, the preprocessor, build-in data types, arrays, pointers, etc... Object-Oriented C++ Classes, encapsulation, inheritance, polymorphism, virtual functions, etc... Template C++ This is the generic programming part of C++. The STL The STL is a template library. Its conventions regarding containers, iterators, algorithm, and function objects, etc... Things to Remember Rules for effective C++ programming vary, depending on the part of C++ you are using.","title":"1. View C++ as a federation of languages."},{"location":"C%2B%2B/effective_cpp/#2-prefer-const-enum-and-inline-to-define","text":"This item might better be called \"prefer the compiler to the preprocessor\", because #define may be treated as if it's not part of the language. For example: #define ASPECT_RATIO 1.653 The symbolic name ASPECT_RATIO may never be seen by compiler; This can be confusing if you get an error during compilation involving the use of the constant, because the error message may refer to 1.653 , not ASPECT_RATIO . The solution is to replace the macro with a constant: const double kAspectRatio = 1.653; The second special case concerns class-specific constants. To limit the scope of a constant to a class, you must make it a member, and to ensure there's at most one copy of the constant, you must make it a static member: class CostEstimate { private : static const double FudgeFactor ; // declaration; goes in header file ... }; const double CostEstimate :: FudgeFactor = 1.35 ; //definition; goes in impl. file There is a exception when you need the value of a class constant during compilation of the class, you can use enum defined like this: class GamePlayer { private : enum { NumTurns = 5 }; // enum class is better. int scores [ NumTurns ]; ... }; Getting back to preprocessor, another common (mis)use of the #define directive is using it to implement macros that look like functions but that don't incur the overhead of a function call. #define CALL_WITH_MAX(a, b) f((a) > (b) ? (a) : (b)) Look at the weird things that can happen: int a = 5 , b = 0 ; CALL_WITH_MAX ( ++ a , b ); // a is incremented twice CALL_WITH_MAX ( ++ a , b + 10 ); // a is incremented once The solution is: template < typename T > // template <class T> inline void CallWithMax ( const T & a , const T & b ) { f ( a > b ? a : b ); } Things to Remember For simple constants, prefer const objects or enum to #define . For function-like macros, prefer inline functions to #define .","title":"2. Prefer const , enum , and inline to #define ."},{"location":"C%2B%2B/effective_cpp/#3-use-const-whenever-possible","text":"The wonderful thing about const is that it allows you to specify a semantic constraint - a particular object should not be modified - and compilers will enforce that constraint. \u9019\u500b\u7ae0\u7bc0\u5e0c\u671b\u5927\u5bb6\u6bcf\u7576\u6709\u53ef\u80fd\u5c31\u4f7f\u7528 const , \u6240\u4ee5\u524d\u534a\u90e8\u5f88\u591a\u5167\u5bb9\u662f\u5728\u8907\u7fd2 const \u7684\u4f5c\u7528, \u9019\u90e8\u5206\u6211\u5c31\u53ea\u7528 sample code \u5e36\u904e, \u5927\u5bb6\u4e5f\u9806\u4fbf\u8907\u7fd2\u4e00\u4e0b, \u770b\u662f\u4e0d\u662f\u77e5\u9053\u9019\u4e9b const \u7684\u7528\u6cd5\u4ee5\u53ca\u5dee\u7570, \u5982\u679c\u6709\u4e0d\u61c2\u7684\u5730\u65b9\u53ef\u4ee5\u63d0\u51fa\u4f86. char greeting [] = \"Hello\" ; char * p = greeting ; // non-const pointer, // non-const data const char * p = greeting ; // non-const pointer, // const data char * const p = greeting ; // const pointer, // non-const data const char * const p = greeting ; // const pointer, // const data void f1 ( const Widget * pw ); // f1 takes a pointer to a constant Widget object void f2 ( Widget const * pw ); // so does f2 std :: vector < int > vec ; ... const std :: vector < int >:: iterator iter = vec . begin (); // iter acts like a T* const * iter = 10 ; // OK, changes what iter points to ++ iter ; // error! iter is const std :: vector < int >:: const_iterator c_iter = vec . begin (); // c_iter acts like a const T* * c_iter = 10 ; // error! *c_iter is const ++ c_iter ; // fine, changes c_iter","title":"3. Use const whenever possible."},{"location":"C%2B%2B/effective_cpp/#const-member-functions","text":"The purpose of const on member functions is to identify which member functions may be invoked on const objects. Such member functions are important for two reasons. First, they make the interface of a class easier to understand. It's important to know which functions may modify an object and which may not. Seconds, they make it possible to work with const objects. That's a critical aspect of writing efficient code, because, as Item 20 explains, one of the fundamental ways to improve a C++ program's performance is to pass objects by reference-to-const. class TextBlock { public : ... const char & operator []( const std :: size_t position ) const // operator[] for { return text [ position ]; } // const objects char & operator []( const std :: size_t position ) // operator[] for { return text [ position ]; } // non-const objects private : std :: string text ; }; TextBlock 's operator[] s can be used like this: TextBlock tb ( \"Hello\" ); std :: cout << tb [ 0 ]; // calls non-const TextBlock::operator[] const TextBlock ctb ( \"World\" ); std :: cout << ctb [ 0 ]; // calls const TextBlock::operator[] Incidentally, const objects most often arise in real programs as a result of being passed by pointer- or reference-to-const. void print ( const TextBlock & ctb ) // in this function, ctb is const { std :: cout << ctb [ 0 ]; // call const TextBlock::operator[] ... } By overloading operator[] and giving the different versions different return types, you can have const and non- const TextBlock s handled differently: std :: cout << tb [ 0 ]; // fine - reading a non-const TextBlock tb [ 0 ] = 'x' ; // fine - writing a non-const TextBlock std :: cout << ctb [ 0 ]; // fine - reading a const TextBlock ctb [ 0 ] = 'x' ; // error! - writing a const TextBlock Sometimes const member function might modify some of the bits in the object on which it's invoked, but only in ways that clients cannot detect. For example, your CTextBlock class might want to cache the length of the textbook whenever it's requested: class CTextBlock { public : ... std :: size_t length () const ; private : char * pText ; std :: size_t textLength ; // last calculated length of textblock bool lengthIsValid ; // whether length is currently valid } std :: size_t CTextBlock :: length () const { if ( ! lengthIsValid ) { textLength = std :: strlen ( pText ); // error! can't assign to textLength and lengthIsValid in a const member function lengthIsValid = true ; } return textLength ; } This implementation of length is certainly not bitwise const - both textLength and lengthIsValid may be modified. Compilers disagree. They insist on bitwise constness. What to do? The solution is simple: take advantage of C++'s const -related wiggle room known as mutable . mutable frees non-static data members from the constraints of bitwise constness: class CTextBlock { public : ... std :: size_t length () const ; private : char * pText ; mutable std :: size_t textLength ; // these data members may mutable bool lengthIsValid ; // always be modified, even // in const member function }","title":"const Member Functions"},{"location":"C%2B%2B/effective_cpp/#avoiding-duplication-in-const-and-non-const-member-functions","text":"For example, suppose that operator[] in TextBlock not only returned a reference to the appropriate character, it also performed bounds checking, logged access information, maybe even did data integrity validation. Putting all this in both the const and the non- const operator[] functions yields this kind of monstrosity: class TextBlock { public : ... const char & operator []( const std :: size_t position ) const { ... // do bounds checking ... // log access data ... // verify data integrity return text [ position ]; } char & operator []( const std :: size_t position ) { ... // do bounds checking ... // log access data ... // verify data integrity return text [ position ]; } private : std :: string text ; }; Ouch! Can you say code duplication, along with its attendant compilation time, maintenance, and code-bloat headaches? Sure, So what you really want to do is implement operator[] functionality once and use it twice. That is, you want to have one version of operator[] call the other one. And that bring us to casting away constness. class TextBlock { public : ... const char & operator []( const std :: size_t position ) const // same as before { ... ... ... return text [ position ]; } char & operator []( const std :: size_t position ) { return const_cast < char &> ( // cast away const on op[]'s return type; static_cast < const TextBlock &> ( * this ) // add const to *this's type; [ position ] // call const version of op[] ); } private : std :: string text ; }; Things to Remember Declaring something const helps compilers detect usage errors. const can be applied to objects at any scope, to function parameters and return types, and to member functions as a whole. Compilers enforce bitwise constness, but you should program using logical constness. When const and non- const member functions have essentially identical implementations, code duplication can be avoided by having the non- const version call the const version.","title":"Avoiding Duplication in const and Non-const Member Functions"},{"location":"C%2B%2B/effective_cpp/#4-make-sure-that-objects-are-initialized-before-theyre-used","text":"C++ can seem rather fickle about initializing the values of objects. For example, if you say this, int x ; in some constexts, x is guaranteed to be initialized(to zero), but in others, it's not. If you say this, class Point { int x , y } ... Point p ; p 's data members are sometimes guaranteed to be initialized(to zero), but sometimes they're not. Reading uninitialized values yields undefined behavior. Now, there are rules that describe when object initialization is guaranteed to take place and when it isn't. Unfortunately, the rules are complicated - too complicated to be memorizing. The best way to deal with this seemingly indeterminate state of affairs is to always initialize your objects before you use them. int x = 0 ; // manual initialization of an int const char * text = \"A C-style string\" ; // manual initialization of a pointer double d ; // \"initialization\" by std :: cin >> d ; // reading from an input stream For almost everything else, the responsibility for initialization falls on constructors. The rule there is simple: make sure that all constructors initialize everything in the object. The rule is easy to follow, but it's important not to confuse assignment with initialization. class PhoneNumber {...}; class ABEntry { // ABEntry = \"Address Book Entry\" public : ABEntry ( const std :: string & name , const std :: string & address , const std :: list < PhoneNumber >& phone ); private : std :: string theName ; std :: string theAddress ; std :: list < PhoneNumber > thePhones ; int numTimesConsulted ; }; ABEntry :: ABEntry ( const std :: string & name , const std :: string & address , const std :: list < PhoneNumber >& phone ) { theName = name ; // these are all assignments, theAddress = address ; // not initializations thePhones = phones ; numTimesConsulted = 0 ; } This will yield ABEntry objects with the values you expect, but it's still not the best approach. They aren't being initialized, they're being assigned. Initialization took place earlier. A better way to write the ABEntry constructor is to use the member initialization list instead of assignments: ABEntry :: ABEntry ( const std :: string & name , const std :: string & address , const std :: list < PhoneNumber >& phone ) : theName ( name ), theAddress ( address ), // these are now all initializations thePhones ( phones ), numTimesConsulted ( 0 ) {} Sometimes the initialization list must be used, even for built-in types. For example, data member that are const or are references must be initialized. They cant't be assigned. One aspect of C++ that isn't fickle is the order in which an object's data is initialized. This order is always the same: base classes are initialized before derived classes, and within a class, data members are initialized in the order in which they are declared. This is true even if they are listed in a different order on the member initialization list. To avoid reader confusion, always list members in the initialization list in the same order as they're declared in the class. Things to Remember Manually initialize objects of built-in type, because C++ only sometimes initializes them itself. In a constructor, prefer use of the member initialization list to assignment inside the body of the constructor. List data members in the initialization list in the same order ther're declared in the class. Avoid initialization order problem across translation units by replacing non-local statics objects with local static objects.","title":"4. Make sure that objects are initialized before they're used."},{"location":"C%2B%2B/effective_cpp/#5-know-what-function-c-silently-writes-and-calls","text":"When is an empty class not an empty class? When C++ gets through with it. If you don't declare them yourself, compiler will declare their own versions of a copy constructor, a copy assignment operator, and a destructor. As a result, if you write class Empty {}; it's essentially the same as if you'd written this: class Empty { public : Empty (){...} // default constructor Empty ( const Empty & rhs ){...} // copy constructor ~ Empty (){...} // destructor Empty & operator = ( const Empty & rhs ){...} // copy assignment operator }; These functions are generated only if they are needed. The following code will cause each function to be generated: Empty e1 ; // default constructor // destructor Empty e2 ( e1 ); // copy constructor e2 = e1 ; // copy assignment operator Let's consider next example: template < typename T > class NamedObject { public : NamedObject ( const char * name , const T & value ); NamedObject ( const std :: string & name , const T & value ); ... private : std :: string nameValue ; T objectValue ; } Because a constructor is declared in NamedObject , compilers won't generate a default constructor. This is important. NamedObject declares neither copy constructor nor copy assignment operator. so compilers will generate those functions. Look, then, at this use of the copy constructor: NamedObject < int > no1 ( \"Small prime number\" , 2 ); NamedObject < int > no2 ( no1 ); // calls copy constructor The copy constructor generated by compilers must initialize no2.nameValue and no2.objectValue using no1.nameValue and no1.objectValue , respectively. The type of nameValue is string , so no2.nameValue will be initialized by calling the string copy constructor with no1.nameValue as its argument. On the other hand, int is a built-in type, so no2.objectValue will be initialized by copying the bits in no1.objectValue . The compiler-generated copy assignment operator for NameObject<int> would behave essentially the same way. Next example, suppose NameObject were defined like this, where nameValue is a reference to a string and objectValue is a const T : template < typename T > class NamedObject { public : NamedObject ( const std :: string & name , const T & value ); ... private : std :: string & nameValue ; // this is now a reference const T objectValue ; // this is now const } Now consider what should happen here: std :: string newDog ( \"Persephone\" ); std :: string oldDog ( \"Satch\" ); NameObject < int > p ( newDog , 2 ); NameObject < int > s ( oldDog , 36 ); p = s ; // what should happen to the data members in p ? After the assignment, should p.nameValue refer to the string referred to by s.nameValue . Should the reference itself be modified? If so, that breaks new ground, because C++ doesn't provide a way to make a reference refer to a different object. Faced with this conundrum, C++ refuse to compile the code. If you want to support copy assignment in a class containing a reference member, you must define the copy assignment operator yourself. Compilers behave similarly for classes containing const members. Things to Remember Compilers may implicitly generate a class's default constructor, copy constructor, copy assignment operator, and destructor.","title":"5. Know what function C++ silently writes and calls."},{"location":"C%2B%2B/effective_cpp/#6-explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want","text":"\u9019\u908a\u66f8\u662f\u4ee5\u623f\u7522\u505a\u8209\u4f8b, \u5047\u8a2d\u6211\u5011\u628a\u623f\u7522\u5beb\u6210\u4e00\u500b\u985e: class HomeForSale {...}; \u6211\u5011\u53ef\u4ee5\u77e5\u9053\u73fe\u5be6\u4e2d\u4efb\u4f55\u4e00\u500b\u623f\u7522\u90fd\u662f\u7368\u4e00\u7121\u4e8c\u7684, \u5982\u679c\u5b83\u53ef\u4ee5\u8907\u88fd, \u90a3\u80af\u5b9a\u662f\u4e0d\u5408\u7406\u7684, \u6240\u4ee5\u5c0d\u65bc\u4ee5\u4e0b\u60c5\u6cc1, \u6211\u5011\u61c9\u8a72\u8b93\u5b83\u7de8\u8b6f\u5931\u6557: HomeForSale h1 ; HomeForSale h2 ; HomeForSale h3 ( h1 ); // attempt to copy h1 - should not compile! h1 = h2 // attempt to copy h2 - should not compile! \u7136\u800c\u8981\u4f5c\u5230\u9019\u6a23\u7684\u6548\u679c\u4e26\u4e0d\u76f4\u89c0, \u901a\u5e38\u6211\u5011\u76f4\u89ba\u6703\u8a8d\u70ba\u5982\u679c\u6211\u5011\u4e0d\u60f3\u8981\u4e00\u500b function \u7684\u529f\u80fd, \u6211\u5011\u53ea\u8981\u4e0d\u5ba3\u544a\u9019\u500b function \u5c31\u597d\u4e86, \u4f46\u9019\u500b\u4f5c\u6cd5\u5728 copy constructor, copy assignment operator \u4e0d\u7ba1\u7528, \u56e0\u70ba\u6839\u64da\u7b2c 5 \u9ede\u6211\u5011\u63d0\u5230, \u5982\u679c\u4f60\u4e0d\u5ba3\u544a, compiler \u6703\u5e6b\u4f60\u81ea\u52d5\u5ba3\u544a. \u6240\u4ee5\u5982\u679c\u6211\u5011\u8981\u89e3\u6c7a\u9019\u500b\u554f\u984c, \u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u6cd5: class HomeForSale { public : ... HomeForSale ( const HomeForSale & ) = delete ; HomeForSale & operator = ( const HomeForSale & ) = delete ; }; Things to Remember To disallow functionality automatically provided by compilers, declare the corresponding member functions = delete and give no implementations.","title":"6. Explicitly disallow the use of compiler-generated functions you do not want."},{"location":"C%2B%2B/effective_cpp/#7-declare-destructors-virtual-in-polymorphic-base-classes","text":"There are lots of ways to keep track of time, so it would be resonable to create a TimeKeeper base class along with derived classes for different approaches to timekeeping: class TimeKeeper { public : TimeKeeper (); ~ TimeKeeper (); ... }; class AtomicClock : public TimeKeeper {...}; class WaterClock : public TimeKeeper {...}; class WristWatch : public TimeKeeper {...}; Many clients will want access to the time without worrying about the details of how it's calculated, so a factory function - a function that return a base class pointer to a newly-created derived class object - can be used to return a pointer to a timekeeping object: TimeKeeper * getTimeKeeper (); // returns a pointer to a dynamically allocated object of a class derived from TimeKeeper Consider next situation: TimeKeeper * ptk = getTimeKeeper (); // get dynamically allocated object from TimeKeeper hierachy ... // use it delete ptk ; // release it to avoid resource leak The problem is that getTimeKeeper returns a pointer to a derived class object(e.g. AtomClock ), that object is being deleted via a base class pointer(i.e., a TimeKeeper* pointer), and the base class ( TimeKeeper ) has a non-virtual destructor. This is a recipe for disaster, result are undefined. What typically happens at runtime is that the derived part of the object is never destroyed. Eliminating the problem is simple: give the base class a virtual destructor. Then deleting the derived class object will do exactly what you want. It will destory the entire object, including all its derived class parts: class TimeKeeper { public : TimeKeeper (); virtual ~ TimeKeeper (); ... }; TimeKeeper * ptk = getTimeKeeper (); ... delete ptk ; Things to Remember Polymorphic base classes should declare virtual destructors. If a class has any virtual functions, it should have a virtual destructor. Classes not designed to be base classes or not designed to be used polymorphically should not declare virtual destructors.","title":"7. Declare destructors virtual in polymorphic base classes."},{"location":"C%2B%2B/effective_cpp/#8-prevent-exceptions-from-leaving-destructors","text":"Consider: class Widget { public : ... ~ Widget (){...} // assume this might emit an exception }; void doSomething () { std :: vector < Widget > v ; } // v is automatically destroyed here When the vector v is destroyed, suppose v has ten Widget s in it, and during destruction of the first one, an exception is thrown. The other nine Widget s still have to be destroyed, so v should invoke their destructors. But suppose that during those calls, a second Widget destructor throws an exception. Now there are two simultaneously active exceptions, and that's one too many for C++. Program execution either terminates or yields undefined behavior. That's easy enough to understand, but what should you do if your destructor needs to perform an operation that may fail by throwing an exception? For example: class DBConnection { public : ... static DBConnection create (); void close (); // close connection; throw an exception if closing fails }; To ensure that clients don't forget to call close on DBConnetion objects, a reasonable idea would be create a resourse-managing class for DBConnection that calls close in its destructor. class DBConn { public : ... ~ DBConn () { db . close (); } private : DBConnection db ; }; That allows clients to program like this: { DBConn dbc ( DBConnection :: create ()); ... } // at the end of block, the DBConn object is destroyed, thus automatically calling close on the DBConnection object If destructor yields an exception, allow it to leave the destructor. That's a problem. There are two primary ways to avoid the trouble: Terminate the program if close throws, typically by calling abort : DBConn ::~ DBConn () { try { db . close (); } catch (...){ // make log entry that the call to close failed; std :: abort (); } } Swallow the exception arising from the call to close : DBConn ::~ DBConn () { try { db . close (); } catch (...){ // make log entry that the call to close failed; } } In general, swallowing exception is a bad idea, because it suppresses important information. Sometimes, however, swallowing exception is preferable to running the risk of premature program termination or undefined behavior. Things to Remember Destructors should never emit exceptions. If functions called in a destructor may throw, the destructor should catch any exceptions, then swallow them or terminate the program. If class clients need to be able to react to exceptions thrown during an operation, the class should provide a regular function that performs the operation.","title":"8. Prevent exceptions from leaving destructors."},{"location":"C%2B%2B/exception_additional_doc/","text":"Exception \u88dc\u5145 \u62cb\u64f2\u7570\u5e38 \u7570\u5e38\u8207\u6307\u6a19 \u5982\u679c\u6211\u5011\u62cb\u64f2 ( throw ) \u6307\u6a19\u672c\u8eab\u3002\u66f4\u660e\u78ba\u5730\u8aaa\uff0c\u62cb\u64f2\u4e00\u500b local \u7269\u4ef6\u6307\u6a19\uff0c\u6c38\u9060\u662f\u932f\u8aa4\u7684\uff0c\u56e0\u70ba\u8655\u7406\u55ae\u5143\u4f4d\u65bc\u53e6\u4e00\u500b\u51fd\u5f0f\u4e2d\uff0c\u90a3\u9ebc\u8655\u7406\u55ae\u5143\u57f7\u884c\u8d77\u4f86\u6642\u8a72\u7269\u4ef6\u4ee5\u4e0d\u518d\u5b58\u5728\u3002 \u89e3\u69cb\u5f0f\u6c38\u9060\u4e0d\u8a72\u62cb\u64f2\u7570\u5e38 \u89e3\u69cb\u5f0f\u5e38\u6703\u5728\u5806\u758a\u8f3e\u8f49\u958b\u89e3\u6642\u57f7\u884c\u8d77\u4f86\uff0c\u7576\u4ed6\u57f7\u884c\u6642\uff0c\u7570\u5e38\u5df2\u88ab\u89f8\u767c\uff0c\u4f46\u5c1a\u672a\u88ab\u8655\u7406\u3002\u5982\u679c\u89e3\u69cb\u5f0f\u672c\u8eab\u53c8\u62cb\u64f2\u4e00\u500b\u7570\u5e38\uff0c\u6c92\u4eba\u77e5\u9053\u6703\u5f62\u6210\u4ec0\u9ebc\u7d50\u679c\u3002 \u7b54\u6848\u662f\uff0c\u7576\u5806\u758a\u8f3e\u8f49\u958b\u89e3\u904e\u7a0b\u6b63\u5728\u8655\u7406\u4e00\u500b\u7570\u5e38\u6642\uff0c\u5982\u679c\u89e3\u69cb\u5f0f\u62cb\u51fa\u4e00\u500b\u81ea\u5df1\u4e26\u4e0d\u8655\u7406\u7684\u7570\u5e38\uff0c\u6703\u5c0e\u81f4\u6a19\u6e96\u5eab\u7684 terminate() \u88ab\u559a\u8d77\uff0c\u901a\u5e38 terminate() \u6703\u547c\u53eb abort() \uff0c\u5f37\u5236\u7d50\u675f\u6574\u500b\u7a0b\u5f0f\u3002 \u6240\u4ee5\u8b93\u89e3\u69cb\u5f0f\u9032\u884c\u4efb\u4f55 \"\u53ef\u80fd\u5c0e\u81f4\u7570\u5e38\u7684\u5de5\u4f5c\" \u662f\u5f88\u7cdf\u7cd5\u7684\u60f3\u6cd5\u3002 \u672a\u88ab\u6355\u7372\u7684\u7570\u5e38\u6703\u7d50\u675f\u7a0b\u5f0f \u7570\u5e38\u662f \"\u9020\u6210\u7a0b\u5f0f\u4e0d\u80fd\u7e7c\u7e8c\u6b63\u78ba\u57f7\u884c\u7684\u4e00\u500b\u91cd\u5927\u4e8b\u4ef6\"\u3002\u5982\u679c\u7de8\u8b6f\u5668\u6c92\u80fd\u5920\u627e\u5230\u5339\u914d\u7684 catch \uff0c\u6703\u559a\u8d77\u6a19\u6e96\u5eab\u7684 terminate() \u3002 try { // program-statements } catch ( /*exception-specifier*/ ) { // handler-statements } catch ( /*exception-specifier*/ ) { // handler-statements } \u6355\u6349\u7570\u5e38 catch \u5b50\u53e5\u4e2d\u7684\u7570\u5e38\u6307\u793a (exception specifier) \u5f62\u5f0f\u5f88\u50cf \"\u53ea\u542b\u4e00\u500b\u5f15\u6578\" \u7684\u5f15\u6578\u5217\u3002\u7570\u5e38\u6307\u793a\u7531\u578b\u5225\u540d\u7a31\u548c\u5176\u5f8c\u7684\u5f15\u6578\u540d\u7a31\u7d44\u6210\u3002 \u7570\u5e38\u6307\u793a (Exception Specifiers) \u5982\u679c\u7570\u5e38\u6307\u793a\u7684\u578b\u5225\u4e0d\u662f\u500b reference\uff0c\u90a3\u9ebc\u7570\u5e38\u7269\u4ef6\u5c31\u6703\u88ab\u8907\u88fd\u7d66 catch \u53c3\u6578\u3002 catch \u5b50\u53e5\u64cd\u4f5c\u7684\u662f\u7570\u5e38\u7269\u4ef6\u7684 local \u8907\u4ef6\u3002\u4f5c\u7528\u65bc catch \u53c3\u6578\u8eab\u4e0a\u7684\u4efb\u4f55\u6539\u8b8a\uff0c\u5f71\u97ff\u7684\u90fd\u662f\u8907\u4ef6\u800c\u975e\u7570\u5e38\u7269\u4ef6\u672c\u8eab\u3002\u4f46\u662f\u5982\u679c\u7570\u5e38\u6307\u793a\u662f\u500b reference\uff0c\u90a3\u9ebc\u5c31\u50cf reference \u53c3\u6578\u4e00\u6a23\uff0c\u4e0d\u53e6\u5916\u5b58\u5728\u4e00\u4efd\u4f9b catch \u4f7f\u7528\u7684\u7269\u4ef6\uff0c\u6b64\u6642\u7684 catch \u53c3\u6578\u53ea\u662f\u7570\u5e38\u7269\u4ef6\u7684\u5225\u540d\u800c\u5df2\uff0c\u5c0d\u5b83\u6240\u505a\u7684\u4efb\u4f55\u6539\u8b8a\u90fd\u5c07\u76f4\u63a5\u5f71\u97ff\u7570\u5e38\u7269\u4ef6\u672c\u8eab\u3002 \u7570\u5e38\u6307\u793a (Exception Specifiers) \u8207\u7e7c\u627f \u901a\u5e38\uff0c\u5982\u679c\u7570\u5e38\u7269\u4ef6\u7684\u578b\u5225\u8207\u67d0\u500b\u7e7c\u627f\u9ad4\u7cfb\u6709\u95dc\uff0c\u6253\u7b97\u8655\u7406\u5b83\u7684 catch \u5b50\u53e5\u61c9\u8a72\u5c07\u5176\u53c3\u6578\u5b9a\u7fa9\u70ba\u4e00\u500b reference\u3002 catch \u5b50\u53e5\u7684\u9806\u5e8f\u5fc5\u9808\u53cd\u6620\u51fa\u578b\u5225\u968e\u5c64\u9ad4\u7cfb \u5982\u679c\u4e00\u7fa4 catch \u5b50\u53e5\u6240\u8655\u7406\u7684\u7570\u5e38\u578b\u5225\u7d44\u6210\u4e86\u4e00\u500b\u7e7c\u627f\u9ad4\u7cfb\uff0c\u9019\u4e9b catch \u5b50\u53e5\u61c9\u8a72\u6309\u5176\u6240\u8655\u7406\u7684\u7570\u5e38\u578b\u5225\u5728\u7e7c\u627f\u9ad4\u7cfb\u4e2d\u7684\u9806\u5e8f\u4f86\u6392\u5217\uff0c\u5f9e\u6700\u5e95\u5c64 (\u5b50) \u81f3\u6700\u9802\u5c64 (\u7236)\u3002 \u5fa9\u62cb (Rethrow) \u6709\u53ef\u80fd\u55ae\u500b catch \u7121\u6cd5\u5fb9\u5e95\u8655\u7406\u67d0\u500b\u7570\u5e38\uff0c catch \u53ef\u80fd\u6703\u6c7a\u5b9a\u8b93\u5176\u51fd\u5f0f\u547c\u53eb\u93c8\u7684\u66f4\u4e0a\u5c64\u51fd\u5f0f\u4f86\u8655\u7406\u9019\u500b\u7570\u5e38\u3002 catch \u53ef\u4ee5\u5fa9\u62cb (rethrowing) \u7570\u5e38\uff0c\u5c07\u7570\u5e38\u50b3\u7d66\u66f4\u4e0a\u5c64\u7684 catch \u3002\u5fa9\u62cb\u5f62\u5f0f\u5982\u4e0b: throw ; \u5fa9\u62cb\u4e26\u4e0d\u660e\u793a\u5176\u7570\u5e38\u7269\u4ef6\uff0c\u5b83\u6cbf\u8457\u51fd\u5f0f\u547c\u53eb\u93c8\u5411\u4e0a\u50b3\u905e\u4e00\u500b\u7570\u5e38\u7269\u4ef6\uff0c\u90a3\u662f\u6700\u521d\u7684\u7269\u4ef6\uff0c\u4e0d\u662f catch \u53c3\u6578\u6240\u8868\u73fe\u7684\u90a3\u500b\u3002 \u901a\u5e38 catch \u5340\u584a\u5167\u6709\u53ef\u80fd\u4fee\u6539\u5176\u53c3\u6578\u5167\u5bb9\u3002\u5728\u90a3\u4e4b\u5f8c\u5982\u679c\u5fa9\u62cb\u7570\u5e38\uff0c\u53ea\u6709\u7576\u7570\u5e38\u662f\u4ee5 reference \u50b3\u5165\uff0c\u90a3\u4e9b\u4fee\u6539\u624d\u6703\u50b3\u905e\u51fa\u53bb: catch ( my_error & eObj ) { // \u7570\u5e38\u6307\u793a\u662f\u500b reference type eObj . status = severeErr ; // \u6539\u52d5\u7570\u5e38\u7269\u4ef6 throw ; // \u7570\u5e38\u7269\u4ef6\u7684 status \u6210\u54e1\u5167\u5bb9\u8b8a\u6210\u4e86 severeErr } catch ( other_error eObj ) { // \u7570\u5e38\u6307\u793a\u662f\u500b nonreference type eObj . status = badErr ; // \u53ea\u6539\u52d5\u4e86\u7570\u5e38\u7269\u4ef6\u7684 local \u5fa9\u4ef6 throw ; // \u7570\u5e38\u7269\u4ef6\u7684 status \u6210\u54e1\u5167\u5bb9\u6c92\u6709\u8b8a\u5316 } Catch-ALL \u8655\u7406\u55ae\u5143 \u6709\u53ef\u80fd\u51fd\u5f0f\u5e0c\u671b\u5728\u7d50\u675f\u4e4b\u524d\u5c0d\u88ab\u62cb\u64f2\u7684\u7570\u5e38\u63a1\u53d6\u67d0\u4e9b\u884c\u70ba - \u5373\u4f7f\u5b83\u4e0d\u80fd\u6599\u7406\u597d\u9019\u500b\u7570\u5e38\u3002 \u6211\u5011\u53ef\u4ee5\u4f7f\u7528 \"\u6355\u6349\u6240\u6709\" (catch-all) \u7684 catch \u53e5\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u7a2e\u985e\u7684\u7570\u5e38\u3002 void manip () { try { // \u9019\u88e1\u7684\u52d5\u4f5c\u5f15\u767c\u7570\u5e38\u88ab\u62cb\u51fa } catch (...) { // \u9019\u88e1\u9032\u884c\u90e8\u5206\u8655\u7406 throw ; } } \u95dc\u9375 catch(...) \u5982\u679c\u88ab\u62ff\u4f86\u548c\u5176\u4ed6 catch \u806f\u5408\u4f7f\u7528\uff0c\u5fc5\u9808\u6700\u5f8c\u51fa\u73fe\uff0c\u5426\u5247\u5176\u5f8c\u7684\u4efb\u4f55 catch \u90fd\u4e0d\u53ef\u80fd\u7372\u5f97\u6a5f\u6703\u3002 Function Try Blocks \u8207\u5efa\u69cb\u5f0f \u5982\u679c\u7570\u5e38\u767c\u751f\u5728\u5efa\u69cb\u662f\u521d\u503c\u5217\u4e2d\u3002\u7531\u65bc\u521d\u503c\u8a2d\u5b9a\u5217\u6703\u5728\u5efa\u69cb\u5f0f\u4e4b\u524d\u66f4\u65e9\u88ab\u8655\u7406\uff0c\u56e0\u6b64\u4e00\u500b\u4f4d\u65bc\u5efa\u69cb\u5f0f\u5167\u7684 catch \u5b50\u53e5\u7121\u6cd5\u8655\u7406\u53ef\u80fd\u4f86\u81ea\u521d\u503c\u8a2d\u5b9a\u5217\u7684\u7570\u5e38\u3002 \u70ba\u4e86\u8655\u7406\u9019\u7a2e\u4f86\u81ea\u5efa\u69cb\u5f0f\u521d\u503c\u8a2d\u5b9a\u5217\u7684\u7570\u5e38\uff0c\u6211\u5011\u5fc5\u9808\u5c07\u5efa\u69cb\u662f\u5beb\u6210 function try block \u5f62\u5f0f\u3002 \u4e0b\u9762\u5beb\u6cd5\u70ba\u4e86\u6aa2\u6e2c new \u6240\u7522\u751f\u932f\u8aa4: template < class T > Handle < T >:: Handle ( T * p ) try : ptr ( p ), use ( new size_t ( 1 )) { } catch ( const std :: bad_alloc & e ) { handle_out_of_memory ( e ); } Exception Classes \u968e\u5c64\u9ad4\u7cfb \u6a19\u6e96\u7684 exception classes \u9069\u7528\u65bc\u8a31\u591a\u7a0b\u5f0f\uff0c\u61c9\u7528\u7a0b\u5f0f\u4e5f\u5e38\u5e38\u5f9e exception \u884d\u751f\u51fa\u5176\u4ed6\u578b\u5225\uff0c\u5f9e\u800c\u64f4\u5c55 exception \u7e7c\u627f\u9ad4\u7cfb\u3002\u9019\u4e9b derived classes \u53ef\u4ee5\u8868\u73fe\u7a0b\u5f0f\u5c08\u5c6c\u7684\u7570\u5e38\u578b\u5225\u3002 \u4e0b\u5716\u70ba: \u6a19\u6e96\u7684 exception classses \u7e7c\u627f\u9ad4\u7cfb \u81ea\u52d5\u5f0f\u8cc7\u6e90\u91cb\u653e \u7576\u7570\u5e38\u767c\u751f\uff0clocal \u7269\u4ef6\u6703\u88ab\u81ea\u52d5\u92b7\u6bc0\uff0c\u89e3\u69cb\u5f0f\u6703\u88ab\u559a\u8d77\u3002\u9019\u4e00\u9ede\u5c0d\u7de8\u7a0b\u662f\u500b\u91cd\u8981\u6697\u793a\u3002\u9019\u4e5f\u662f\u6211\u5011\u9f13\u52f5\u4f7f\u7528\u6a19\u6e96\u5eab\u7684\u539f\u56e0\u4e4b\u4e00\u3002\u8003\u616e\u4ee5\u4e0b\u51fd\u5f0f: void f () { vector < string > v ; string s ; while ( cin >> s ) v . push_back ( s ); string * p = new string [ v . size ()]; // \u52d5\u614b\u914d\u7f6e array // \u5176\u4ed6\u52d5\u4f5c // \u9019\u88e1\u53ef\u80fd\u767c\u751f\u7570\u5e38 delete [] p ; // \u7576\u51fd\u5f0f\u9000\u51fa\uff0cv \u6703\u88ab\u81ea\u52d5\u92b7\u6bc0 } \u5982\u679c\u5728 \" new \u4e4b\u5f8c\uff0c\u5c0d\u61c9\u7684 delete \u4e4b\u524d\" \u767c\u751f\u7570\u5e38\uff0c vector \u4ecd\u6703\u88ab\u92b7\u6bc0\u800c array \u4e0d\u6703\u88ab\u91cb\u653e\u3002 \u4ee5 Classes \u7ba1\u7406\u8cc7\u6e90 \"\u89e3\u69cb\u5f0f\u6703\u88ab\u559a\u8d77\" \u7684\u4e8b\u5be6\u4f7f\u7a0b\u5f0f\u66f4\u52a0\u5177\u5099\u4e86 \u7570\u5e38\u5b89\u5168\u6027 (exception-safe)\u3002 \u6240\u8b02\u7570\u5e38\u5b89\u5168\u6027\uff0c\u662f\u6307 \"\u5373\u4f7f\u767c\u751f\u7570\u5e38\u7a0b\u5f0f\u4e5f\u53ef\u4ee5\u6b63\u5e38\u904b\u884c\"\u3002\u4ee5\u672c\u7ae0\u5c0d\u5b89\u5168\u7684\u5b9a\u7fa9\u662f\uff0c\u5728\u767c\u751f\u7570\u5e38\u6642\uff0c\u4fdd\u8b49\u5df2\u914d\u7f6e\u7684\u8cc7\u6e90\u90fd\u80fd\u88ab\u6b63\u78ba\u91cb\u653e\u3002 \u91cd\u9ede \u51e1\u662f \"\u914d\u7f6e\u8cc7\u6e90\u4e26\u53ef\u80fd\u767c\u751f\u7570\u5e38\" \u7684\u7a0b\u5f0f\uff0c\u90fd\u61c9\u8a72\u4f7f\u7528 class \u4f86\u7ba1\u7406\u8cc7\u6e90\u3002\u4ee5 classes \u7372\u53d6\u548c\u91cb\u653e\u8cc7\u6e90\uff0c\u53ef\u4fdd\u8b49\u8cc7\u6e90\u88ab\u6b63\u78ba\u91cb\u653e\uff0c\u5373\u4f7f\u5728\u767c\u751f\u7570\u5e38\u7684\u60c5\u6cc1\u4e0b\u3002 \u7570\u5e38\u898f\u683c (Exception Specifications) \u7576\u6211\u5011\u770b\u5230\u4e00\u500b\u4e00\u822c\u7684\u51fd\u5f0f\u5ba3\u544a\uff0c\u7121\u6cd5\u5f97\u77e5\u8a72\u51fd\u5f0f\u53ef\u80fd\u62cb\u64f2\u4ec0\u9ebc\u7570\u5e38\u3002\u7136\u800c \"\u77e5\u9053\u51fd\u5f0f\u53ef\u80fd\u6703\u62cb\u64f2\u4ec0\u9ebc\u7570\u5e38\" \u6703\u5c0d\u6b63\u78ba\u7de8\u5beb catch \u5b50\u53e5\u6709\u597d\u8655\u3002 \u7570\u5e38\u898f\u683c (exception specification) \u5c31\u662f\u7528\u4f86\u6307\u793a\u51fd\u5f0f\u662f\u5426\u62cb\u64f2\u7570\u5e38\u3002 \u5b9a\u7fa9\u4e00\u500b\u7570\u5e38\u898f\u683c (Exception Specification) \u4ee5\u4e0b\u7570\u5e38\u898f\u683c\u8868\u793a\u51fd\u5f0f\u4e0d\u62cb\u64f2\u4efb\u4f55\u7570\u5e38: void no_problem () noexcept ; \u9055\u80cc\u7570\u5e38\u898f\u683c \u5982\u679c\u51fd\u5f0f\u62cb\u51fa\u4e00\u500b\u4e26\u672a\u5217\u540d\u65bc\u7570\u5e38\u898f\u683c\u4e2d\u7684\u7570\u5e38\uff0c\u90a3\u9ebc C++ \u6a19\u6e96\u5eab unexpected() \u6703\u8d77\u800c\u57f7\u884c\uff0c\u9810\u8a2d\u60c5\u6cc1\u4e0b\u6703\u547c\u53eb terminate() \u7d42\u6b62\u7a0b\u5f0f\u3002 \u6ce8\u610f \u7de8\u8b6f\u5668\u4e0d\u80fd\u4e5f\u4e0d\u6703\u5728\u7de8\u8b6f\u671f\u5c0d\u7570\u5e38\u898f\u683c\u9032\u884c\u6aa2\u6e2c\u3002 Qt Exception Safety \u53c3\u8003\u5b98\u65b9\u6587\u4ef6\u9023\u7d50 \u5e38\u898b\u554f\u984c Exceptions and Error Handling FAQ Exception object lifetime Scope of exception object in C++ What is the purpose of a function try block? - 1 What is the purpose of a function try block? - 2","title":"Exception \u88dc\u5145"},{"location":"C%2B%2B/exception_additional_doc/#exception","text":"","title":"Exception \u88dc\u5145"},{"location":"C%2B%2B/exception_additional_doc/#_1","text":"","title":"\u62cb\u64f2\u7570\u5e38"},{"location":"C%2B%2B/exception_additional_doc/#_2","text":"\u5982\u679c\u6211\u5011\u62cb\u64f2 ( throw ) \u6307\u6a19\u672c\u8eab\u3002\u66f4\u660e\u78ba\u5730\u8aaa\uff0c\u62cb\u64f2\u4e00\u500b local \u7269\u4ef6\u6307\u6a19\uff0c\u6c38\u9060\u662f\u932f\u8aa4\u7684\uff0c\u56e0\u70ba\u8655\u7406\u55ae\u5143\u4f4d\u65bc\u53e6\u4e00\u500b\u51fd\u5f0f\u4e2d\uff0c\u90a3\u9ebc\u8655\u7406\u55ae\u5143\u57f7\u884c\u8d77\u4f86\u6642\u8a72\u7269\u4ef6\u4ee5\u4e0d\u518d\u5b58\u5728\u3002","title":"\u7570\u5e38\u8207\u6307\u6a19"},{"location":"C%2B%2B/exception_additional_doc/#_3","text":"\u89e3\u69cb\u5f0f\u5e38\u6703\u5728\u5806\u758a\u8f3e\u8f49\u958b\u89e3\u6642\u57f7\u884c\u8d77\u4f86\uff0c\u7576\u4ed6\u57f7\u884c\u6642\uff0c\u7570\u5e38\u5df2\u88ab\u89f8\u767c\uff0c\u4f46\u5c1a\u672a\u88ab\u8655\u7406\u3002\u5982\u679c\u89e3\u69cb\u5f0f\u672c\u8eab\u53c8\u62cb\u64f2\u4e00\u500b\u7570\u5e38\uff0c\u6c92\u4eba\u77e5\u9053\u6703\u5f62\u6210\u4ec0\u9ebc\u7d50\u679c\u3002 \u7b54\u6848\u662f\uff0c\u7576\u5806\u758a\u8f3e\u8f49\u958b\u89e3\u904e\u7a0b\u6b63\u5728\u8655\u7406\u4e00\u500b\u7570\u5e38\u6642\uff0c\u5982\u679c\u89e3\u69cb\u5f0f\u62cb\u51fa\u4e00\u500b\u81ea\u5df1\u4e26\u4e0d\u8655\u7406\u7684\u7570\u5e38\uff0c\u6703\u5c0e\u81f4\u6a19\u6e96\u5eab\u7684 terminate() \u88ab\u559a\u8d77\uff0c\u901a\u5e38 terminate() \u6703\u547c\u53eb abort() \uff0c\u5f37\u5236\u7d50\u675f\u6574\u500b\u7a0b\u5f0f\u3002 \u6240\u4ee5\u8b93\u89e3\u69cb\u5f0f\u9032\u884c\u4efb\u4f55 \"\u53ef\u80fd\u5c0e\u81f4\u7570\u5e38\u7684\u5de5\u4f5c\" \u662f\u5f88\u7cdf\u7cd5\u7684\u60f3\u6cd5\u3002","title":"\u89e3\u69cb\u5f0f\u6c38\u9060\u4e0d\u8a72\u62cb\u64f2\u7570\u5e38"},{"location":"C%2B%2B/exception_additional_doc/#_4","text":"\u7570\u5e38\u662f \"\u9020\u6210\u7a0b\u5f0f\u4e0d\u80fd\u7e7c\u7e8c\u6b63\u78ba\u57f7\u884c\u7684\u4e00\u500b\u91cd\u5927\u4e8b\u4ef6\"\u3002\u5982\u679c\u7de8\u8b6f\u5668\u6c92\u80fd\u5920\u627e\u5230\u5339\u914d\u7684 catch \uff0c\u6703\u559a\u8d77\u6a19\u6e96\u5eab\u7684 terminate() \u3002 try { // program-statements } catch ( /*exception-specifier*/ ) { // handler-statements } catch ( /*exception-specifier*/ ) { // handler-statements }","title":"\u672a\u88ab\u6355\u7372\u7684\u7570\u5e38\u6703\u7d50\u675f\u7a0b\u5f0f"},{"location":"C%2B%2B/exception_additional_doc/#_5","text":"catch \u5b50\u53e5\u4e2d\u7684\u7570\u5e38\u6307\u793a (exception specifier) \u5f62\u5f0f\u5f88\u50cf \"\u53ea\u542b\u4e00\u500b\u5f15\u6578\" \u7684\u5f15\u6578\u5217\u3002\u7570\u5e38\u6307\u793a\u7531\u578b\u5225\u540d\u7a31\u548c\u5176\u5f8c\u7684\u5f15\u6578\u540d\u7a31\u7d44\u6210\u3002","title":"\u6355\u6349\u7570\u5e38"},{"location":"C%2B%2B/exception_additional_doc/#exception-specifiers","text":"\u5982\u679c\u7570\u5e38\u6307\u793a\u7684\u578b\u5225\u4e0d\u662f\u500b reference\uff0c\u90a3\u9ebc\u7570\u5e38\u7269\u4ef6\u5c31\u6703\u88ab\u8907\u88fd\u7d66 catch \u53c3\u6578\u3002 catch \u5b50\u53e5\u64cd\u4f5c\u7684\u662f\u7570\u5e38\u7269\u4ef6\u7684 local \u8907\u4ef6\u3002\u4f5c\u7528\u65bc catch \u53c3\u6578\u8eab\u4e0a\u7684\u4efb\u4f55\u6539\u8b8a\uff0c\u5f71\u97ff\u7684\u90fd\u662f\u8907\u4ef6\u800c\u975e\u7570\u5e38\u7269\u4ef6\u672c\u8eab\u3002\u4f46\u662f\u5982\u679c\u7570\u5e38\u6307\u793a\u662f\u500b reference\uff0c\u90a3\u9ebc\u5c31\u50cf reference \u53c3\u6578\u4e00\u6a23\uff0c\u4e0d\u53e6\u5916\u5b58\u5728\u4e00\u4efd\u4f9b catch \u4f7f\u7528\u7684\u7269\u4ef6\uff0c\u6b64\u6642\u7684 catch \u53c3\u6578\u53ea\u662f\u7570\u5e38\u7269\u4ef6\u7684\u5225\u540d\u800c\u5df2\uff0c\u5c0d\u5b83\u6240\u505a\u7684\u4efb\u4f55\u6539\u8b8a\u90fd\u5c07\u76f4\u63a5\u5f71\u97ff\u7570\u5e38\u7269\u4ef6\u672c\u8eab\u3002","title":"\u7570\u5e38\u6307\u793a (Exception Specifiers)"},{"location":"C%2B%2B/exception_additional_doc/#exception-specifiers_1","text":"\u901a\u5e38\uff0c\u5982\u679c\u7570\u5e38\u7269\u4ef6\u7684\u578b\u5225\u8207\u67d0\u500b\u7e7c\u627f\u9ad4\u7cfb\u6709\u95dc\uff0c\u6253\u7b97\u8655\u7406\u5b83\u7684 catch \u5b50\u53e5\u61c9\u8a72\u5c07\u5176\u53c3\u6578\u5b9a\u7fa9\u70ba\u4e00\u500b reference\u3002","title":"\u7570\u5e38\u6307\u793a (Exception Specifiers) \u8207\u7e7c\u627f"},{"location":"C%2B%2B/exception_additional_doc/#catch","text":"\u5982\u679c\u4e00\u7fa4 catch \u5b50\u53e5\u6240\u8655\u7406\u7684\u7570\u5e38\u578b\u5225\u7d44\u6210\u4e86\u4e00\u500b\u7e7c\u627f\u9ad4\u7cfb\uff0c\u9019\u4e9b catch \u5b50\u53e5\u61c9\u8a72\u6309\u5176\u6240\u8655\u7406\u7684\u7570\u5e38\u578b\u5225\u5728\u7e7c\u627f\u9ad4\u7cfb\u4e2d\u7684\u9806\u5e8f\u4f86\u6392\u5217\uff0c\u5f9e\u6700\u5e95\u5c64 (\u5b50) \u81f3\u6700\u9802\u5c64 (\u7236)\u3002","title":"catch \u5b50\u53e5\u7684\u9806\u5e8f\u5fc5\u9808\u53cd\u6620\u51fa\u578b\u5225\u968e\u5c64\u9ad4\u7cfb"},{"location":"C%2B%2B/exception_additional_doc/#rethrow","text":"\u6709\u53ef\u80fd\u55ae\u500b catch \u7121\u6cd5\u5fb9\u5e95\u8655\u7406\u67d0\u500b\u7570\u5e38\uff0c catch \u53ef\u80fd\u6703\u6c7a\u5b9a\u8b93\u5176\u51fd\u5f0f\u547c\u53eb\u93c8\u7684\u66f4\u4e0a\u5c64\u51fd\u5f0f\u4f86\u8655\u7406\u9019\u500b\u7570\u5e38\u3002 catch \u53ef\u4ee5\u5fa9\u62cb (rethrowing) \u7570\u5e38\uff0c\u5c07\u7570\u5e38\u50b3\u7d66\u66f4\u4e0a\u5c64\u7684 catch \u3002\u5fa9\u62cb\u5f62\u5f0f\u5982\u4e0b: throw ; \u5fa9\u62cb\u4e26\u4e0d\u660e\u793a\u5176\u7570\u5e38\u7269\u4ef6\uff0c\u5b83\u6cbf\u8457\u51fd\u5f0f\u547c\u53eb\u93c8\u5411\u4e0a\u50b3\u905e\u4e00\u500b\u7570\u5e38\u7269\u4ef6\uff0c\u90a3\u662f\u6700\u521d\u7684\u7269\u4ef6\uff0c\u4e0d\u662f catch \u53c3\u6578\u6240\u8868\u73fe\u7684\u90a3\u500b\u3002 \u901a\u5e38 catch \u5340\u584a\u5167\u6709\u53ef\u80fd\u4fee\u6539\u5176\u53c3\u6578\u5167\u5bb9\u3002\u5728\u90a3\u4e4b\u5f8c\u5982\u679c\u5fa9\u62cb\u7570\u5e38\uff0c\u53ea\u6709\u7576\u7570\u5e38\u662f\u4ee5 reference \u50b3\u5165\uff0c\u90a3\u4e9b\u4fee\u6539\u624d\u6703\u50b3\u905e\u51fa\u53bb: catch ( my_error & eObj ) { // \u7570\u5e38\u6307\u793a\u662f\u500b reference type eObj . status = severeErr ; // \u6539\u52d5\u7570\u5e38\u7269\u4ef6 throw ; // \u7570\u5e38\u7269\u4ef6\u7684 status \u6210\u54e1\u5167\u5bb9\u8b8a\u6210\u4e86 severeErr } catch ( other_error eObj ) { // \u7570\u5e38\u6307\u793a\u662f\u500b nonreference type eObj . status = badErr ; // \u53ea\u6539\u52d5\u4e86\u7570\u5e38\u7269\u4ef6\u7684 local \u5fa9\u4ef6 throw ; // \u7570\u5e38\u7269\u4ef6\u7684 status \u6210\u54e1\u5167\u5bb9\u6c92\u6709\u8b8a\u5316 }","title":"\u5fa9\u62cb (Rethrow)"},{"location":"C%2B%2B/exception_additional_doc/#catch-all","text":"\u6709\u53ef\u80fd\u51fd\u5f0f\u5e0c\u671b\u5728\u7d50\u675f\u4e4b\u524d\u5c0d\u88ab\u62cb\u64f2\u7684\u7570\u5e38\u63a1\u53d6\u67d0\u4e9b\u884c\u70ba - \u5373\u4f7f\u5b83\u4e0d\u80fd\u6599\u7406\u597d\u9019\u500b\u7570\u5e38\u3002 \u6211\u5011\u53ef\u4ee5\u4f7f\u7528 \"\u6355\u6349\u6240\u6709\" (catch-all) \u7684 catch \u53e5\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u7a2e\u985e\u7684\u7570\u5e38\u3002 void manip () { try { // \u9019\u88e1\u7684\u52d5\u4f5c\u5f15\u767c\u7570\u5e38\u88ab\u62cb\u51fa } catch (...) { // \u9019\u88e1\u9032\u884c\u90e8\u5206\u8655\u7406 throw ; } }","title":"Catch-ALL \u8655\u7406\u55ae\u5143"},{"location":"C%2B%2B/exception_additional_doc/#_6","text":"catch(...) \u5982\u679c\u88ab\u62ff\u4f86\u548c\u5176\u4ed6 catch \u806f\u5408\u4f7f\u7528\uff0c\u5fc5\u9808\u6700\u5f8c\u51fa\u73fe\uff0c\u5426\u5247\u5176\u5f8c\u7684\u4efb\u4f55 catch \u90fd\u4e0d\u53ef\u80fd\u7372\u5f97\u6a5f\u6703\u3002","title":"\u95dc\u9375"},{"location":"C%2B%2B/exception_additional_doc/#function-try-blocks","text":"\u5982\u679c\u7570\u5e38\u767c\u751f\u5728\u5efa\u69cb\u662f\u521d\u503c\u5217\u4e2d\u3002\u7531\u65bc\u521d\u503c\u8a2d\u5b9a\u5217\u6703\u5728\u5efa\u69cb\u5f0f\u4e4b\u524d\u66f4\u65e9\u88ab\u8655\u7406\uff0c\u56e0\u6b64\u4e00\u500b\u4f4d\u65bc\u5efa\u69cb\u5f0f\u5167\u7684 catch \u5b50\u53e5\u7121\u6cd5\u8655\u7406\u53ef\u80fd\u4f86\u81ea\u521d\u503c\u8a2d\u5b9a\u5217\u7684\u7570\u5e38\u3002 \u70ba\u4e86\u8655\u7406\u9019\u7a2e\u4f86\u81ea\u5efa\u69cb\u5f0f\u521d\u503c\u8a2d\u5b9a\u5217\u7684\u7570\u5e38\uff0c\u6211\u5011\u5fc5\u9808\u5c07\u5efa\u69cb\u662f\u5beb\u6210 function try block \u5f62\u5f0f\u3002 \u4e0b\u9762\u5beb\u6cd5\u70ba\u4e86\u6aa2\u6e2c new \u6240\u7522\u751f\u932f\u8aa4: template < class T > Handle < T >:: Handle ( T * p ) try : ptr ( p ), use ( new size_t ( 1 )) { } catch ( const std :: bad_alloc & e ) { handle_out_of_memory ( e ); }","title":"Function Try Blocks \u8207\u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/exception_additional_doc/#exception-classes","text":"\u6a19\u6e96\u7684 exception classes \u9069\u7528\u65bc\u8a31\u591a\u7a0b\u5f0f\uff0c\u61c9\u7528\u7a0b\u5f0f\u4e5f\u5e38\u5e38\u5f9e exception \u884d\u751f\u51fa\u5176\u4ed6\u578b\u5225\uff0c\u5f9e\u800c\u64f4\u5c55 exception \u7e7c\u627f\u9ad4\u7cfb\u3002\u9019\u4e9b derived classes \u53ef\u4ee5\u8868\u73fe\u7a0b\u5f0f\u5c08\u5c6c\u7684\u7570\u5e38\u578b\u5225\u3002 \u4e0b\u5716\u70ba: \u6a19\u6e96\u7684 exception classses \u7e7c\u627f\u9ad4\u7cfb","title":"Exception Classes \u968e\u5c64\u9ad4\u7cfb"},{"location":"C%2B%2B/exception_additional_doc/#_7","text":"\u7576\u7570\u5e38\u767c\u751f\uff0clocal \u7269\u4ef6\u6703\u88ab\u81ea\u52d5\u92b7\u6bc0\uff0c\u89e3\u69cb\u5f0f\u6703\u88ab\u559a\u8d77\u3002\u9019\u4e00\u9ede\u5c0d\u7de8\u7a0b\u662f\u500b\u91cd\u8981\u6697\u793a\u3002\u9019\u4e5f\u662f\u6211\u5011\u9f13\u52f5\u4f7f\u7528\u6a19\u6e96\u5eab\u7684\u539f\u56e0\u4e4b\u4e00\u3002\u8003\u616e\u4ee5\u4e0b\u51fd\u5f0f: void f () { vector < string > v ; string s ; while ( cin >> s ) v . push_back ( s ); string * p = new string [ v . size ()]; // \u52d5\u614b\u914d\u7f6e array // \u5176\u4ed6\u52d5\u4f5c // \u9019\u88e1\u53ef\u80fd\u767c\u751f\u7570\u5e38 delete [] p ; // \u7576\u51fd\u5f0f\u9000\u51fa\uff0cv \u6703\u88ab\u81ea\u52d5\u92b7\u6bc0 } \u5982\u679c\u5728 \" new \u4e4b\u5f8c\uff0c\u5c0d\u61c9\u7684 delete \u4e4b\u524d\" \u767c\u751f\u7570\u5e38\uff0c vector \u4ecd\u6703\u88ab\u92b7\u6bc0\u800c array \u4e0d\u6703\u88ab\u91cb\u653e\u3002","title":"\u81ea\u52d5\u5f0f\u8cc7\u6e90\u91cb\u653e"},{"location":"C%2B%2B/exception_additional_doc/#classes","text":"\"\u89e3\u69cb\u5f0f\u6703\u88ab\u559a\u8d77\" \u7684\u4e8b\u5be6\u4f7f\u7a0b\u5f0f\u66f4\u52a0\u5177\u5099\u4e86 \u7570\u5e38\u5b89\u5168\u6027 (exception-safe)\u3002 \u6240\u8b02\u7570\u5e38\u5b89\u5168\u6027\uff0c\u662f\u6307 \"\u5373\u4f7f\u767c\u751f\u7570\u5e38\u7a0b\u5f0f\u4e5f\u53ef\u4ee5\u6b63\u5e38\u904b\u884c\"\u3002\u4ee5\u672c\u7ae0\u5c0d\u5b89\u5168\u7684\u5b9a\u7fa9\u662f\uff0c\u5728\u767c\u751f\u7570\u5e38\u6642\uff0c\u4fdd\u8b49\u5df2\u914d\u7f6e\u7684\u8cc7\u6e90\u90fd\u80fd\u88ab\u6b63\u78ba\u91cb\u653e\u3002","title":"\u4ee5 Classes \u7ba1\u7406\u8cc7\u6e90"},{"location":"C%2B%2B/exception_additional_doc/#_8","text":"\u51e1\u662f \"\u914d\u7f6e\u8cc7\u6e90\u4e26\u53ef\u80fd\u767c\u751f\u7570\u5e38\" \u7684\u7a0b\u5f0f\uff0c\u90fd\u61c9\u8a72\u4f7f\u7528 class \u4f86\u7ba1\u7406\u8cc7\u6e90\u3002\u4ee5 classes \u7372\u53d6\u548c\u91cb\u653e\u8cc7\u6e90\uff0c\u53ef\u4fdd\u8b49\u8cc7\u6e90\u88ab\u6b63\u78ba\u91cb\u653e\uff0c\u5373\u4f7f\u5728\u767c\u751f\u7570\u5e38\u7684\u60c5\u6cc1\u4e0b\u3002","title":"\u91cd\u9ede"},{"location":"C%2B%2B/exception_additional_doc/#exception-specifications","text":"\u7576\u6211\u5011\u770b\u5230\u4e00\u500b\u4e00\u822c\u7684\u51fd\u5f0f\u5ba3\u544a\uff0c\u7121\u6cd5\u5f97\u77e5\u8a72\u51fd\u5f0f\u53ef\u80fd\u62cb\u64f2\u4ec0\u9ebc\u7570\u5e38\u3002\u7136\u800c \"\u77e5\u9053\u51fd\u5f0f\u53ef\u80fd\u6703\u62cb\u64f2\u4ec0\u9ebc\u7570\u5e38\" \u6703\u5c0d\u6b63\u78ba\u7de8\u5beb catch \u5b50\u53e5\u6709\u597d\u8655\u3002 \u7570\u5e38\u898f\u683c (exception specification) \u5c31\u662f\u7528\u4f86\u6307\u793a\u51fd\u5f0f\u662f\u5426\u62cb\u64f2\u7570\u5e38\u3002","title":"\u7570\u5e38\u898f\u683c (Exception Specifications)"},{"location":"C%2B%2B/exception_additional_doc/#exception-specification","text":"\u4ee5\u4e0b\u7570\u5e38\u898f\u683c\u8868\u793a\u51fd\u5f0f\u4e0d\u62cb\u64f2\u4efb\u4f55\u7570\u5e38: void no_problem () noexcept ;","title":"\u5b9a\u7fa9\u4e00\u500b\u7570\u5e38\u898f\u683c (Exception Specification)"},{"location":"C%2B%2B/exception_additional_doc/#_9","text":"\u5982\u679c\u51fd\u5f0f\u62cb\u51fa\u4e00\u500b\u4e26\u672a\u5217\u540d\u65bc\u7570\u5e38\u898f\u683c\u4e2d\u7684\u7570\u5e38\uff0c\u90a3\u9ebc C++ \u6a19\u6e96\u5eab unexpected() \u6703\u8d77\u800c\u57f7\u884c\uff0c\u9810\u8a2d\u60c5\u6cc1\u4e0b\u6703\u547c\u53eb terminate() \u7d42\u6b62\u7a0b\u5f0f\u3002","title":"\u9055\u80cc\u7570\u5e38\u898f\u683c"},{"location":"C%2B%2B/exception_additional_doc/#_10","text":"\u7de8\u8b6f\u5668\u4e0d\u80fd\u4e5f\u4e0d\u6703\u5728\u7de8\u8b6f\u671f\u5c0d\u7570\u5e38\u898f\u683c\u9032\u884c\u6aa2\u6e2c\u3002","title":"\u6ce8\u610f"},{"location":"C%2B%2B/exception_additional_doc/#qt-exception-safety","text":"\u53c3\u8003\u5b98\u65b9\u6587\u4ef6\u9023\u7d50","title":"Qt Exception Safety"},{"location":"C%2B%2B/exception_additional_doc/#_11","text":"Exceptions and Error Handling FAQ Exception object lifetime Scope of exception object in C++ What is the purpose of a function try block? - 1 What is the purpose of a function try block? - 2","title":"\u5e38\u898b\u554f\u984c"},{"location":"C%2B%2B/object_oriented_programming/","text":"\u7269\u4ef6\u5c0e\u5411\u7de8\u7a0b (OOP) Base Classes \u548c Derived Classes class Item_base { public : Item_base ( const std :: string & book = \"\" , double sales_price = 0.0 ) : isbn ( book ), price ( sales_price ) {} std :: string book () const { return isbn ; } virtual double net_price ( std :: size_t n ) const { return n * price ; } virtual ~ Item_base () {} private : std :: string isbn ; protected : double price ; } \u76ee\u524d\u53ea\u8981\u8a18\u4f4f\uff0c\u7e7c\u627f\u9ad4\u7cfb\u7684 root class \u4e00\u822c\u90fd\u6703\u5b9a\u7fa9\u4e00\u500b virtual \u89e3\u69cb\u5f0f\u3002 Item_base class \u5b9a\u7fa9\u5169\u500b\u51fd\u5f0f\uff0c\u5176\u4e2d\u4e00\u500b\u4f46\u6709\u95dc\u9375\u5b57 virtual \uff0c\u5176\u76ee\u7684\u662f\u555f\u52d5\u52d5\u614b\u7d81\u5b9a\u3002\u5728\u9810\u8a2d\u60c5\u6cc1\u4e0b\u6210\u54e1\u51fd\u5f0f\u4e26\u975e virtual\u3002\u5c0d non-virtual \u51fd\u5f0f\u7684\u547c\u53eb\u6703\u5728\u7de8\u8b6f\u6642\u671f\u88ab\u6c7a\u8b70\u3002 Base class \u901a\u5e38\u61c9\u8a72\u628a \u6709\u5fc5\u8981\u7531 derived class \u91cd\u65b0\u5b9a\u7fa9 \u7684\u51fd\u5f0f\u5b9a\u7fa9\u70ba virtual\u3002 \u5b58\u53d6\u63a7\u5236 (Access Control) \u8207\u7e7c\u627f Derived class \u53ef\u5b58\u53d6\u5176 base class \u7684 public \u6210\u54e1\u4f46\u4e0d\u80fd\u5b58\u53d6\u5176 private \u6210\u54e1\u3002 \u6709\u6642\u5019 base class \u7684\u6210\u54e1\u6703\u60f3\u8b93 derived class \u5b58\u53d6\uff0c\u4f46\u7981\u6b62\u88ab\u5176\u4ed6\u7528\u6236\u5b58\u53d6\u3002 protected \u5b58\u53d6\u7d1a\u5225\u662f\u70ba\u6b64\u800c\u751f\u3002 protected \u6210\u54e1\u53ef\u88ab derived \u7269\u4ef6\u5b58\u53d6\uff0c\u4f46\u4e0d\u80fd\u88ab\u4e00\u822c\u7528\u6236\u5b58\u53d6\u3002 Derived Classes (\u884d\u751f\u985e\u5225) \u5b9a\u7fa9\u4e00\u500b derived class\uff0c\u6211\u5011\u7528 class derivation list (\u884d\u5316\u5217) \u6a19\u793a base class\u3002\u4e5f\u5c31\u662f\u5217\u51fa\u4e00\u6216\u591a\u500b base class \u540d\u7a31\uff0c\u5f62\u5f0f\u5982\u4e0b: class classname : access-label base-class \u5176\u4e2d access-label \u662f public , protected , private \u4e09\u8005\u4e4b\u4e00\uff0c base-class \u662f\u5148\u524d\u5df2\u5b9a\u7fa9\u597d\u7684 class \u540d\u7a31\u3002 // \u540c\u4e00\u672c\u66f8\u552e\u51fa\u4e00\u5b9a\u6578\u91cf\u5f8c\u53ef\u4eab\u6709\u6298\u6263 class Bulk_item : public Item_base { public : // \u5c07 base \u7248\u672c\u91cd\u65b0\u5b9a\u7fa9\uff0c\u7528\u4ee5\u5be6\u73fe\u5927\u91cf\u8cfc\u66f8\u60c5\u6cc1\u4e0b\u7684\u6298\u6263\u7b56\u7565 double net_price ( std :: size_t ) const override ; private : std :: size_t min_qty ; // \u6298\u6263\u6240\u9700\u7684\u6700\u4f4e\u8cfc\u8cb7\u91cf double discount ; // \u6298\u6263\u7387 } \u6bcf\u500b Bulk_item \u7269\u4ef6\u542b\u6709 4 \u7b46\u8cc7\u6599\u5143\u7d20: \u5f9e Item_base \u7e7c\u627f\u800c\u5f97\u7684 isbn \u548c price \uff0c\u4ee5\u53ca\u81ea\u5df1\u5b9a\u7fa9\u7684 min_qty \u548c discount \u3002 Bulk_item \u9084\u9700\u8981\u5b9a\u7fa9\u5efa\u69cb\u5f0f\uff0c\u5f8c\u9762\u6703\u63d0\u3002 Derived \u8f49\u63db\u70ba Base double print_total ( const Item_base & , size_t ); Item_base item ; print_total ( item , 10 ); Item_base * p = & item ; Bulk_item bulk ; print_total ( bulk , 10 ); p = & bulk ; \u9019\u6bb5\u7a0b\u5f0f\u78bc\u4ee5\u540c\u4e00\u500b base-type pointer \u5728\u4e0d\u540c\u6642\u9593\u5206\u5225\u6307\u5411 base-type \u7269\u4ef6\u548c derived-type \u7269\u4ef6\u3002\u4e26\u4e14\u547c\u53eb \u63a5\u6536\u4e00\u500b base-type reference \u51fd\u5f0f\uff0c\u4e0d\u540c\u6642\u9593\u5206\u5225\u50b3\u5165\u4e00\u500b base-type \u7269\u4ef6\u548c\u4e00\u500b derived-type \u7269\u4ef6\u3002\u5169\u7a2e\u7528\u6cd5\u90fd\u6c92\u6709\u554f\u984c\uff0c\u56e0\u70ba\u6bcf\u500b derived \u7269\u4ef6\u90fd\u5167\u542b\u5176 base \u6210\u5206\u3002 void print_total ( ostream & os , const Item_base & item , size_t n ) { os << \"ISBN: \" << item . book () << \" \\t number sold: \" << n << \" \\t total price: \" // virtual call: \u4ee5\u4e0b\u547c\u53eb\u7684 net_price() \u5728\u57f7\u884c\u671f\u624d\u7372\u5f97\u6c7a\u8b70 << item . net_price ( n ) << endl ; } Item_base base ; bulk_item derived ; // print_total() \u5c0d net_price() \u9032\u884c virtual call print_total ( cout , base , 10 ); // \u547c\u53eb Item_base::net_price print_total ( cout , derived , 10 ); // \u547c\u53eb Bulk_item::net_price \u95dc\u9375\u89c0\u5ff5: C++ \u591a\u578b (Polymorphism) Reference \u548c Pointer \u7684\u975c\u614b\u578b\u5225\u548c\u52d5\u614b\u578b\u5225\u53ef\u4ee5\u4e0d\u540c\uff0c\u9019\u500b\u4e8b\u5be6\u662f C++ \u591a\u578b\u7684\u57fa\u77f3\u3002 \u7576\u6211\u5011\u900f\u904e\u4e00\u500b base-class reference \u6216 pointer \u547c\u53eb\u5b9a\u7fa9\u65bc base-class \u5167\u7684\u51fd\u5f0f\u6642\uff0c\u6211\u5011\u4e26\u4e0d\u77e5\u9053\u8a72\u51fd\u5f0f\u6240\u8655\u88e1\u7684\u7269\u4ef6\u7684\u7cbe\u78ba\u578b\u5225\uff0c\u56e0\u70ba\u8a72\u7269\u4ef6\u53ef\u4ee5\u662f base type, \u4e5f\u53ef\u4ee5\u662f derived type\u3002 \u5982\u679c\u547c\u53eb\u7684\u662f virtual \u51fd\u5f0f\uff0c\u90a3\u9ebc \u559a\u8d77\u54ea\u500b\u51fd\u5f0f \u7684\u6289\u64c7\u6703\u5ef6\u81f3\u57f7\u884c\u671f\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7269\u4ef6(\u975e reference \u6216 pointer) \u4e0d\u5e36\u591a\u578b\u6027 (\u4e0d\u662f polymorphic)\uff0c\u56e0\u70ba\u5176\u578b\u5225\u5df2\u77e5\u4e14\u4e0d\u53ef\u80fd\u6539\u8b8a\u3002\u7269\u4ef6\u7684\u52d5\u614b\u578b\u5225\u6c38\u9060\u548c\u975c\u614b\u578b\u5225\u76f8\u540c\u3002 \u63a8\u7ffb\u865b\u64ec\u6a5f\u5236 (Overriding Virtual Mechanism) \u67d0\u7a2e\u60c5\u6cc1\u4e0b\u6211\u5011\u6703\u60f3\u63a8\u7ffb\u865b\u64ec\u6a5f\u5236\uff0c\u5f37\u8feb\u559a\u8d77 virtual \u51fd\u5f0f\u7684\u67d0\u500b\u7279\u5b9a\u7248\u672c\u3002 scope \u904b\u7b97\u5b50\u53ef\u4ee5\u5e6b\u6211\u5011\u9054\u5230\u76ee\u7684\u3002 Item_base * baseP = & derived ; // \u7121\u8ad6 baseP \u7684\u52d5\u614b\u578b\u5225\u662f\u4ec0\u9ebc\uff0c\u90fd\u5e0c\u671b\u559a\u8d77\u5b9a\u7fa9\u65bc base class \u7684\u7248\u672c double d = baseP -> Item_base :: net_price ( 42 ); override \u95dc\u9375\u5b57 derived class \u5982\u679c\u5b9a\u7fa9\u4e86\u4e00\u500b\u51fd\u6578\u8207 base class \u4e2d\u7684\u865b\u64ec\u51fd\u5f0f\u7684\u540d\u5b50\u76f8\u540c\u4f46\u662f\u53c3\u6578\u5217\u4e0d\u540c\uff0c\u9019\u4ecd\u7136\u662f\u5408\u6cd5\u884c\u70ba\u3002\u7de8\u8b6f\u5668\u5c07\u8a8d\u70ba\u65b0\u5b9a\u7fa9\u500b\u9019\u500b\u51fd\u6578\u8207 base class \u4e2d\u539f\u6709\u7684\u51fd\u5f0f\u662f\u76f8\u4e92\u7368\u7acb\u7684\u3002\u5c31\u5be6\u969b\u7684\u7de8\u7a0b\u7fd2\u6163\u800c\u8a00\uff0c\u9019\u7a2e\u8072\u660e\u5f80\u5f80\u610f\u5473\u8457\u767c\u751f\u4e86\u932f\u8aa4\uff0c\u56e0\u70ba\u6211\u5011\u539f\u672c\u5e0c\u671b derived class \u80fd\u8986\u84cb\u6389 base class \u4e2d\u7684\u865b\u64ec\u51fd\u5f0f\uff0c\u4f46\u662f\u4e0d\u5c0f\u5fc3\u628a\u53c3\u6578\u5217\u5beb\u932f\u4e86\u3002 struct B { virtual void f1 ( int ) const ; virtual void f2 (); void f3 (); }; struct D1 : B { void f1 ( int ) const override ; // \u6b63\u78ba: f1\u8207 base class \u4e2d\u7684 f1 \u5339\u914d void f2 ( int ) override ; // \u932f\u8aa4: B \u6c92\u6709\u5f62\u5982 f2(int) \u7684\u51fd\u5f0f void f3 () override ; // \u932f\u8aa4: f3 \u4e0d\u662f\u865b\u64ec\u51fd\u5f0f void f4 () override ; // \u932f\u8aa4: B \u6c92\u6709\u540d\u70ba f4 \u7684\u51fd\u5f0f } Public, Private, Protected \u4e09\u7a2e\u7e7c\u627f public \u7e7c\u627f: base \u6210\u54e1\u7684\u5b58\u53d6\u7d1a\u5225\u4e0d\u8b8a\u3002 protected \u7e7c\u627f: base class \u7684 public \u548c protected \u6210\u54e1\u5c07\u8b8a\u6210 derived class \u7684 protected \u6210\u54e1\u3002 private \u7e7c\u627f: base class \u7684\u6240\u6709\u6210\u54e1\u5728 derived class \u5167\u90e8\u8b8a\u6210 private\u3002 \u963b\u6b62\u7e7c\u627f\u7684\u767c\u751f \u6709\u6642\u5019\u6211\u5011\u5728\u5275\u9020\u67d0\u500b\u985e\u5225\u6642\uff0c\u6211\u5011\u4e0d\u5e0c\u671b\u5176\u4ed6\u985e\u53ef\u4ee5\u7e7c\u627f\u5b83\uff0cC++11 \u63d0\u4f9b\u4e00\u7a2e\u963b\u6b62\u7e7c\u627f\u767c\u751f\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5728\u985e\u540d\u5f8c\u52a0\u5165\u95dc\u9375\u5b57 final \u3002 class NoDerived final { /* */ }; // \u4e0d\u80fd\u4f5c\u70ba\u57fa\u985e\u3002 struct D2 : B { void f1 ( int ) const final ; // \u4e0d\u5141\u8a31\u5f8c\u7e8c\u7684\u5176\u4ed6\u985e\u8986\u84cb f1(int) } Friendship \u548c \u7e7c\u627f friend class \u53ef\u4ee5\u76f4\u63a5\u5b58\u53d6 class \u7684 private \u548c protected \u8cc7\u6599\u3002 friend \u95dc\u4fc2\u4e0d\u6703\u88ab\u7e7c\u627f\uff0cbase \u7684 friends \u5c0d\u65bc derived classes \u7684\u6210\u54e1\u4e26\u7121\u7279\u6b8a\u5b58\u53d6\u6b0a\u3002 \u7e7c\u627f\u8207 Static \u6210\u54e1 \u5982\u679c base class \u5b9a\u7fa9\u4e00\u500b static \u6210\u54e1\uff0c\u6574\u500b\u7e7c\u627f\u9ad4\u7cfb\u4e5f\u5c31\u53ea\u5b9a\u7fa9\u9019\u9ebc\u4e00\u500b\u6210\u54e1\u3002\u7121\u8ad6\u9019\u500b base class \u884d\u751f\u591a\u5c11 classes, static \u6210\u54e1\u53ea\u6709\u4e00\u4efd\u5be6\u9ad4\u3002 \u7e7c\u627f\u8207\u8f49\u63db (Conversions and Inheritance) \u7406\u89e3 base \u8207 derived \u578b\u5225\u4e4b\u9593\u7684\u8f49\u63db\u95dc\u4fc2\uff0c\u5c0d\u65bc\u7406\u89e3 \u7269\u4ef6\u5c0e\u5411\u7de8\u7a0b\u5728 C++ \u5982\u4f55\u904b\u4f5c \u5341\u5206\u91cd\u8981\u3002 \u8f49\u63db\u81f3 Reference \u4e0d\u540c\u65bc \u8f49\u63db\u81f3 Object \u4e00\u5982\u5148\u524d\u6240\u898b\uff0c\u6211\u5011\u53ef\u4ee5\u50b3\u905e derived type \u7269\u4ef6\u7d66\u9810\u671f\u63a5\u6536\u4e00\u500b reference to base \u7684\u51fd\u5f0f\u3002\u7576\u6211\u5011\u50b3\u905e\u7269\u4ef6\u7d66\u63a5\u6536 reference \u7684\u51fd\u5f0f\uff0c\u8a72 reference \u6703\u88ab\u76f4\u63a5\u7d81\u5b9a\u65bc\u8a72\u7269\u4ef6\u8eab\u4e0a\u3002\u96d6\u7136\u770b\u8d77\u4f86\u5f88\u50cf\u662f\u5728\u50b3\u905e\u7269\u4ef6\uff0c\u5176\u5be6\u5f15\u6578\u662f\u6307\u5411\u8a72\u7269\u4ef6\u7684\u4e00\u500b reference\u3002\u7269\u4ef6\u672c\u8eab\u4e26\u672a\u88ab\u8907\u88fd\uff0c\u4e5f\u6c92\u6709\u4efb\u4f55\u8f49\u63db\u52d5\u4f5c\u6539\u8b8a derived type \u7269\u4ef6\u3002 \u7576\u6211\u5011\u50b3\u905e derived \u7269\u4ef6\u7d66\u9810\u671f\u63a5\u6536 base-type object (\u800c\u975e reference) \u7684\u51fd\u5f0f\u6642\uff0c\u60c5\u6cc1\u5927\u70ba\u4e0d\u540c\u3002\u5982\u679c\u6211\u5011\u50b3\u5165 derived type \u7269\u4ef6\uff0c\u8a72\u7269\u4ef6\u4e2d\u7684 base \u6210\u5206\u6703\u88ab\u8907\u88fd\u5230\u53c3\u6578\u8eab\u4e0a\u3002 \u7406\u89e3 \"derived \u7269\u4ef6\u8f49\u63db\u70ba base type reference\" \u548c \"\u4ee5 derived \u7269\u4ef6\u521d\u59cb\u5316\u6216\u8ce6\u503c base \u7269\u4ef6\" \u4e4b\u9593\u7684\u5dee\u7570\uff0c\u662f\u5f88\u91cd\u8981\u7684\u3002 Derived-to-Base \u8f49\u63db\u7684\u53ef\u7528\u6027 (Accessibility) \u82e5\u60f3\u5224\u65b7\u662f\u5426\u53ef\u8f49\u63db\u81f3 base\uff0c\u53ef\u8003\u616e base class \u7684 public \u6210\u54e1\u53ef\u5426\u5b58\u53d6\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u8f49\u63db\u4fbf\u53ef\u9032\u884c\uff0c\u5426\u5247\u7121\u6cd5\u3002 Base \u8f49\u63db\u81f3 Derived Base class \u81f3 derived class \u4e4b\u9593\u4e26\u7121\u81ea\u767c\u8f49\u63db\u95dc\u4fc2\u3002 Item_base base ; Bulk_item * bulkP = & base ; // \u932f\u8aa4: \u7121\u6cd5\u5c07 base \u8f49\u63db\u70ba derived Bulk_item & bulkRef = base ; // \u932f\u8aa4: \u7121\u6cd5\u5c07 base \u8f49\u63db\u70ba derived Bulk_item bulk = base ; // \u932f\u8aa4: \u7121\u6cd5\u5c07 base \u8f49\u63db\u70ba derived \u4e4b\u6240\u4ee5\u5982\u6b64\uff0c\u662f\u56e0\u70ba base \u7269\u4ef6\u5c31\u53ea\u662f\u4e00\u500b base\uff0c\u5b83\u4e26\u6c92\u6709 derived type \u6210\u54e1\u3002 \u5efa\u69cb\u5f0f\u548c\u62f7\u8c9d\u63a7\u5236\u9805 (Copy Control) \u6bcf\u500b derived \u7269\u4ef6\u90fd\u6703\u64c1\u6709 derived class \u5b9a\u7fa9\u7684\u6210\u54e1\uff0c\u4ee5\u53ca\u4e00\u500b (\u4ee5\u4e0a) \u7684 base class \u5b50\u7269\u4ef6\u3002\u9019\u500b\u4e8b\u5be6\u5f71\u97ff\u4e86 derived \u7269\u4ef6\u7684\u5efa\u69cb, \u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u3002\u7576\u6211\u5011\u5efa\u69cb, \u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u4e00\u500b derived-type \u7269\u4ef6\uff0c\u6211\u5011\u4e5f\u540c\u6642\u5efa\u69cb, \u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u5176\u4e2d\u7684 base class \u5b50\u7269\u4ef6\u3002 \u5efa\u69cb\u5f0f\u548c copy-control \u6210\u54e1\u4e0d\u6703\u88ab\u7e7c\u627f\u3002\u6bcf\u500b class \u61c9\u8a72\u5b9a\u7fa9\u81ea\u5df1\u7684\u5efa\u69cb\u5f0f\u548c copy-control \u6210\u54e1\u3002\u4efb\u4f55 class \u5982\u679c\u6c92\u6709\u5b9a\u7fa9\u81ea\u5df1\u7684 default \u5efa\u69cb\u5f0f\u548c copy-control \u6210\u54e1\uff0c\u5c31\u4f7f\u7528\u7de8\u8b6f\u5668\u81ea\u52d5\u5408\u6210\u7684\u7248\u672c\u3002 Base-class \u5efa\u69cb\u5f0f\u548c\u62f7\u8c9d\u63a7\u5236\u9805 (Copy Control) \u81ea\u8eab\u4e0d\u662f derived class \u7684 base class\uff0c\u5176\u5efa\u69cb\u5f0f\u548c copy control \u591a\u534a\u4e0d\u53d7\u7e7c\u627f\u5f71\u97ff\uff0c\u552f\u4e00\u5f71\u97ff\u7684\u662f\uff0c\u7576\u6211\u5011\u6c7a\u5b9a\u8981\u63d0\u4f9b\u90a3\u4e9b\u5efa\u69cb\u5f0f\u6642\uff0c\u5fc5\u9808\u591a\u8003\u616e\u4e00\u7a2e\u65b0\u7528\u6236\uff0cderived class\uff0c\u7576\u9700\u8981\u67d0\u4e9b\u7279\u6b8a\u5efa\u69cb\u5f0f\u53ea\u7d66 derived class \u4f7f\u7528\uff0c\u9019\u7a2e\u5efa\u69cb\u5f0f\u61c9\u8a72\u8a2d\u8a08\u70ba protected Derived-class \u5efa\u69cb\u5f0f Derived \u5efa\u69cb\u5f0f\u53d7\u5230 \"\u7e7c\u627f\u81ea\u53e6\u4e00\u500b class\" \u7684\u5f71\u97ff\u3002\u6bcf\u500b derived \u5efa\u69cb\u5f0f\u9664\u4e86\u521d\u59cb\u5316\u81ea\u8eab\u6210\u54e1\u8b8a\u6578\u5916\uff0c\u9084\u5f97\u521d\u59cb\u5316\u5176 base class\u3002 \u5408\u6210\u7684 Derived class default \u5efa\u69cb\u5f0f Derived class \u7684 default \u5efa\u69cb\u5f0f\u53ea\u6709\u4e00\u500b\u5730\u65b9\u4e0d\u540c\u65bc non-derived \u5efa\u69cb\u5f0f\u3002\u5b83\u5011\u4e0d\u50c5\u521d\u59cb\u5316 derived class \u7684\u6210\u54e1\u8b8a\u6578\uff0c\u4e5f\u521d\u59cb\u5316\u5176\u7269\u4ef6\u7684 base \u6210\u5206\u3002Base \u6210\u5206\u7531 base class \u7684 default \u5efa\u69cb\u5f0f\u521d\u59cb\u5316\u3002 \u4ee5\u6211\u5011\u7684 Bulk_item class \u800c\u8a00\uff0c\u5408\u6210\u7684 default \u5efa\u69cb\u5f0f\u6703\u57f7\u884c\u4ee5\u4e0b\u52d5\u4f5c: 1. \u559a\u8d77 Item_base \u7684 default \u5efa\u69cb\u5f0f\uff0c\u5c07 isbn \u521d\u59cb\u5316\u70ba\u7a7a\u5b57\u4e32\uff0c\u5c07 price \u521d\u59cb\u5316\u70ba\u96f6\u3002 2. \u4ee5\u8b8a\u6578\u521d\u59cb\u5316\u4e00\u73ed\u898f\u5247\u5b8c\u6210 Bulk_item \u6210\u54e1\u7684\u521d\u59cb\u5316\u3002 \u7531\u65bc Bulk_item \u6709\u5167\u5efa\u578b\u6210\u54e1\uff0c\u6211\u5011\u61c9\u8a72\u5b9a\u7fa9\u81ea\u5df1\u7684 default \u5efa\u69cb\u5f0f: class Bulk_item : public Item_base { public : Bulk_item () : min_qty ( 0 ), discount ( 0.0 ) { } // ... }; \u57f7\u884c\u9019\u500b\u5efa\u69cb\u5f0f\u7684\u6548\u679c\u5982\u4e0b: \u9996\u5148\u4ee5 Item_base \u7684 default \u5efa\u69cb\u5f0f\u5b8c\u6210 Item_base \u6210\u5206\u7684\u521d\u59cb\u5316\uff0c\u5c07 isbn \u8a2d\u70ba\u7a7a\u5b57\u4e32\u4e26\u5c07 price \u8a2d\u70ba\u96f6\u3002\u7136\u5f8c Bulk_item \u6210\u5206\u7684\u6210\u54e1\u88ab\u521d\u59cb\u5316\uff0c\u7136\u5f8c\u57f7\u884c\u5efa\u69cb\u5f0f\u4e3b\u9ad4\u3002 \u50b3\u905e\u5f15\u6578\u7d66 Base class \u5efa\u69cb\u5f0f Derived class \u5efa\u69cb\u5f0f\u7684\u521d\u503c\u5217 (initialize list) \u53ea\u80fd\u521d\u59cb\u5316 derived class \u6210\u54e1\uff0c\u4e0d\u80fd\u76f4\u63a5\u521d\u59cb\u5316\u7e7c\u627f\u4f86\u7684\u6210\u54e1\u3002derived \u5efa\u69cb\u5f0f\u5fc5\u9808\u85c9\u7531\u5728\u5efa\u69cb\u5f0f\u521d\u503c\u5217\u542b\u5165 base class\uff0c\u624d\u5f97\u4ee5\u9593\u63a5\u521d\u59cb\u5316\u7e7c\u627f\u800c\u4f86\u7684\u6210\u54e1: class Bulk_item : public Item_base { public : Bulk_item ( const std :: string & book , double sales_price , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Item_base ( book , sales_price ), min_qty ( 0 ), discount ( 0.0 ) { } // ... }; \u9019\u500b\u5efa\u69cb\u5f0f\u4ee5\u96d9\u53c3\u6578\u7684 Item_base \u5efa\u69cb\u5f0f\u521d\u59cb\u5316\u5176 base \u5b50\u7269\u4ef6\u3002\u6211\u5011\u53ef\u4ee5\u9019\u6a23\u4f7f\u7528\u9019\u500b\u5efa\u69cb\u5f0f: Bulk_item bulk ( \"0-201-82470-1\" , 50 , 5 , .19 ); \u5efa\u69cb\u5f0f\u521d\u59cb\u5217 (Constructor initializer list) \u63d0\u4f9b base class \u548c\u6210\u54e1\u7684\u521d\u503c\u3002\u5b83\u5011\u7684\u6392\u5217\u6b21\u5e8f\u4e26\u975e\u5c31\u662f\u521d\u59cb\u5316\u6b21\u5e8f\u3002Base class \u4e00\u5b9a\u5148\u88ab\u521d\u59cb\u5316\uff0c\u7136\u5f8c derived class \u6210\u54e1\u624d\u4ee5\u5176\u5ba3\u544a\u6b21\u5e8f\u88ab\u521d\u59cb\u5316\u3002 \u53ea\u6709\u76f4\u63a5\u7e7c\u627f\u7684 Base class \u53ef\u88ab\u521d\u59cb\u5316 \u5982\u679c class C \u884d\u751f\u81ea class B\uff0cclass B \u53c8\u884d\u751f\u81ea class A\uff0c\u5247 B \u662f C \u7684\u76f4\u63a5 base\u3002\u5373\u4f7f\u6bcf\u500b C \u7269\u4ef6\u90fd\u6709\u500b A \u6210\u5206\uff0cC \u7684\u5efa\u69cb\u5f0f\u4ecd\u7136\u4e0d\u80fd\u76f4\u63a5\u521d\u59cb\u5316 A \u6210\u5206\u3002\u5fc5\u9808 C \u521d\u59cb\u5316 B\uff0cB \u5efa\u69cb\u5f0f\u5728\u521d\u59cb\u5316 A\u3002 \u8209\u500b\u5177\u9ad4\u7684\u4f8b\u5b50\uff0c\u6211\u5011\u7684\u66f8\u4fbf\u53ef\u80fd\u6709\u6578\u7a2e\u6298\u6263\u7b56\u7565\u3002\u9664\u4e86\u5927\u91cf\u6298\u6263\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u8cfc\u8cb7\u4e00\u5b9a\u6578\u91cf\u5167\u63d0\u4f9b\u6298\u6263\uff0c\u8d85\u904e\u7279\u5b9a\u6578\u91cf\u5f8c\u4fbf\u6062\u5fa9\u539f\u50f9\u3002\u4e5f\u53ef\u4ee5\u5728\u8cfc\u8cb7\u4e00\u5b9a\u6578\u91cf\u5f8c\u624d\u63d0\u4f9b\u6298\u6263\uff0c\u5728\u90a3\u4e4b\u524d\u7dad\u6301\u5b9a\u50f9\u3002 \u9019\u4e9b\u6298\u6263\u7b56\u7565\u7684\u5171\u901a\u9ede\u662f\uff0c\u90fd\u9700\u8981\u4e00\u500b\u8cfc\u8cb7\u6578\u91cf\u548c\u4e00\u500b\u6298\u6263\u7387\u3002\u6211\u5011\u53ef\u4ee5\u5b9a\u7fa9\u4e00\u500b\u65b0\u7684 Disc_item class \u5132\u5b58\u8cfc\u8cb7\u91cf\u548c\u6298\u6263\u7387\uff0c\u7528\u4ee5\u652f\u6301\u9019\u4e9b\u4e0d\u540c\u7b56\u7565\u3002 \u60f3\u8981\u5be6\u73fe\u9019\u500b\u8a2d\u8a08\uff0c\u5fc5\u9808\u5148\u5b9a\u7fa9 Disc_item class: class Disc_item : public Item_base { public : Disc_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Item_base ( book , sales_price ), quantity ( qty ), discount ( disc_rate ) { } protected : std :: size_t quantity ; // \u5f97\u4eab\u53d7\u6298\u6263\u7684\u81e8\u754c\u8cfc\u8cb7\u6578 double discount // \u6298\u6263\u7387 } \u63a5\u4e0b\u4f86\u91cd\u65b0\u5be6\u4f5c Bulk_item \uff0c\u4ee4\u5b83\u7e7c\u627f\u81ea Disc_item \u800c\u4e0d\u518d\u76f4\u63a5\u7e7c\u627f Item_base : class Bulk_item : public Disc_item { public : Bulk_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Disc_item ( book , sales_price , qty , disc_rate ) { } // \u91cd\u65b0\u5b9a\u7fa9 base \u7248\u672c\uff0c\u4ee5\u5be6\u4f5c\u5927\u91cf\u63a1\u8cfc\u7684\u6298\u6263\u7b56\u7565 double net_price ( std :: size_t ) const ; }; \u95dc\u9375\u6982\u5ff5: \u9075\u5b88 Base class \u4ecb\u9762\u898f\u7bc4 \u7576\u6211\u5011\u5b9a\u7fa9 Disc_item \uff0c\u6211\u5011\u5b9a\u7fa9\u5176\u5efa\u69cb\u5f0f\uff0c\u6307\u660e\u5982\u4f55\u521d\u59cb\u5316 Disc_item \u3002\u4e00\u65e6 class \u5b9a\u7fa9\u5176\u4ecb\u9762\uff0c\u6240\u6709\u8207\u8a72 class \u7269\u4ef6\u7684\u4efb\u4f55\u4e92\u52d5\u90fd\u61c9\u8a72\u900f\u904e\u5176\u4ecb\u9762\u9032\u884c\uff0c\u5373\u4fbf\u9019\u4e9b\u7269\u4ef6\u662f derived \u7269\u4ef6\u7684\u4e00\u90e8\u5206\u3002 \u57fa\u65bc\u985e\u4f3c\u539f\u56e0\uff0cderived class \u4e0d\u80fd\u5c0d\u5176 base class \u6210\u54e1\u9032\u884c\u521d\u59cb\u5316\uff0c\u4e5f\u4e0d\u8a72\u5c0d\u5b83\u5011\u8ce6\u503c\u3002\u5982\u679c\u9019\u4e9b\u6210\u54e1\u662f public \u6216 protected \uff0cderived \u5efa\u69cb\u5f0f\u5c31\u8a9e\u6cd5\u800c\u8a00\u53ef\u5728\u51fd\u5f0f\u4e3b\u9ad4\u5167\u8ce6\u503c\u7d66\u5176 base class \u6210\u54e1\u3002\u7136\u800c\u9019\u6a23\u505a\u6703\u9055\u53cd base \u4ecb\u9762\u3002Derived classes \u61c9\u8a72\u6539\u7528\u5efa\u69cb\u5f0f\uff0c\u9075\u5f9e\u5176 base classes \u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u800c\u975e\u5728\u81ea\u5df1\u7684\u5efa\u69cb\u5f0f\u4e3b\u9ad4\u5167\u76f4\u63a5\u8ce6\u503c\u7d66\u90a3\u4e9b\u6210\u54e1\u3002 Copy Control \u8207\u7e7c\u627f \u5982\u540c\u5176\u4ed6 class\uff0cderived class \u53ef\u4f7f\u7528\u7de8\u8b6f\u5668\u5408\u6210\u7684 copy-control \u6210\u54e1\u3002\u9019\u4e9b\u5408\u6210\u64cd\u4f5c\u53ef\u7528\u4f86\u5c0d \"\u7269\u4ef6\u7684 base \u6210\u5206\u548c derived \u6210\u5206\u5167\u7684\u6210\u54e1\" \u9032\u884c\u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u3002Base \u6210\u5206\u662f\u4ee5 base class \u7684 copy \u5efa\u69cb\u5f0f, assignment \u904b\u7b97\u5b50\u53ca\u89e3\u69cb\u5f0f\u5206\u5225\u9032\u884c\u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u3002 \u5b9a\u7fa9 Derived \u7684 Copy \u5efa\u69cb\u5f0f \u5982\u679c derived class \u5b9a\u7fa9\u81ea\u5df1\u7684 copy \u5efa\u69cb\u5f0f\uff0c\u9019\u500b\u5efa\u69cb\u5f0f\u901a\u5e38\u61c9\u8a72\u660e\u78ba\u4f7f\u7528 base class \u7684 copy \u5efa\u69cb\u5f0f\u5c07\u7269\u4ef6\u7684 base \u6210\u5206\u521d\u59cb\u5316: class Base { /*...*/ } class Derived : public Base { public : // Base::Base(const Base&) \u4e0d\u6703\u81ea\u52d5\u88ab\u559a\u8d77 Derived ( const Derived & d ) : Base ( d ) /* \u521d\u59cb\u5316\u5176\u5b83\u6210\u54e1 */ { /*...*/ } }; \u4e0a\u9762\u7684 Base(d) \u6703\u5c07 derived \u7269\u4ef6 d \u8f49\u63db\u70ba\u4e00\u500b reference \u6307\u5411 base \u6210\u5206\uff0c\u7136\u5f8c\u559a\u8d77 base class \u7684 copy \u5efa\u69cb\u5f0f\u3002\u5982\u679c\u7565\u800c\u4e0d\u5beb Base(d) : // Derived \u7684 copy \u5efa\u69cb\u5f0f\u5b9a\u7fa9\uff0c\u53ef\u80fd\u6709\u8aa4\u3002 Derived ( const Derived & d ) /* \u521d\u59cb\u5316 Derived \u7684\u6210\u54e1 */ { /*...*/ } \u4e0a\u9762\u9019\u6a23\u5beb\u7684\u6548\u679c\u662f\u559a\u8d77 Base \u7684 default \u5efa\u69cb\u5f0f\u5c07 base \u6210\u5206\u521d\u59cb\u5316\u3002\u5047\u8a2d Derived \u6210\u54e1\u521d\u59cb\u5316\u65b9\u5f0f\u662f\u5c07 d \u7684\u5c0d\u61c9\u6210\u54e1\u8907\u88fd\u904e\u4f86\uff0c\u90a3\u9ebc\u65b0\u5efa\u7269\u4ef6\u5c07\u8655\u65bc\u5947\u602a\u7684\u72c0\u614b:\u5176 Base \u6210\u5206\u653e\u7f6e\u9810\u8a2d\u503c\uff0c\u800c\u5176 Derived \u6210\u54e1\u662f\u53e6\u4e00\u7269\u4ef6\u7684\u8907\u88fd\u54c1\u3002 Derived Class \u7684 Assignment \u904b\u7b97\u5b50 // Base::operator=(const Base&) \u4e0d\u6703\u88ab\u81ea\u52d5\u559a\u8d77 Derived & Derived :: operator = ( const Derived & rhs ) { if ( this != & rhs ) { Base :: operator = ( rhs ); // \u8ce6\u503c\u7d66 Base \u6210\u5206 // \u57f7\u884c \"\u6e05\u7406 derived \u6210\u5206\u820a\u503c\" \u6240\u9700\u7684\u4efb\u4f55\u52d5\u4f5c // \u8ce6\u503c\u7d66 derived \u6210\u54e1 } return * this ; } Derived Class \u7684\u89e3\u69cb\u5f0f (Destructor) \u89e3\u91cb\u7684\u904b\u4f5c\u65b9\u5f0f\u4e0d\u540c\u65bc copy \u5efa\u69cb\u5f0f\u548c assignment \u904b\u7b97\u5b50: \u5b83\u4e0d\u5fc5\u8ca0\u8cac\u6467\u6bc0\u5176 base \u7269\u4ef6\u6210\u54e1\u3002\u7de8\u8b6f\u5668\u7e3d\u662f\u6703\u96b1\u5bd3\u559a\u8d77 derived \u7269\u4ef6\u7684 base \u6210\u5206\u7684\u89e3\u69cb\u5f0f\u3002\u6bcf\u500b\u89e3\u69cb\u5f0f\u53ea\u9700\u8981\u6e05\u7406\u81ea\u5df1\u7684\u6210\u54e1: class Derived : public Base { public : // Base::~Base \u6703\u88ab\u81ea\u52d5\u559a\u8d77 ~ Derived () { /* \u6e05\u7406 derived \u6210\u54e1 */ } } \u7269\u4ef6\u7684\u92b7\u6bc0\u5c07\u4ee5 \"\u5efa\u69cb\u4e4b\u76f8\u53cd\u6b21\u5e8f\" \u9032\u884c\uff0c\u4e5f\u5c31\u662f derived \u89e3\u69cb\u5f0f\u5148\u57f7\u884c\uff0c\u7136\u5f8c\u559a\u8d77 base \u89e3\u69cb\u5f0f\uff0c\u4e26\u5411\u4e0a\u56de\u6714\u6574\u500b\u7e7c\u627f\u9ad4\u7cfb\u3002 Virtual \u89e3\u69cb\u5f0f \"Base \u89e3\u69cb\u5f0f\u6703\u81ea\u52d5\u88ab\u559a\u8d77\"\uff0c\u6b64\u4e00\u4e8b\u5be6\u5c0d base class \u7684\u8a2d\u8a08\u5e36\u4f86\u91cd\u8981\u5f71\u97ff\u3002 \u7576\u6211\u5011\u5c0d\u8457\u4e00\u500b\u6307\u5411\u52d5\u614b\u914d\u7f6e\u7269\u7684 pointer \u65bd\u884c delete \u6642\uff0c\u8a72\u7269\u4ef6\u7684\u8a18\u61b6\u9ad4\u88ab\u91cb\u653e\u524d\uff0c\u89e3\u69cb\u5f0f\u6703\u5148\u8d77\u4f86\u6e05\u7406\u7269\u4ef6\u3002\u8655\u7406\u7e7c\u627f\u9ad4\u7cfb\u7684\u7269\u4ef6\u6642\uff0cpointer \u7684\u975c\u614b\u578b\u5225\u53ef\u80fd\u4e0d\u540c\u65bc\u6b63\u88ab\u522a\u9664\u7684\u7269\u4ef6\u7684\u52d5\u614b\u578b\u5225\u3002\u6211\u5011\u53ef\u80fd\u65bd\u884c delete \u65bc\u4e00\u500b pointer to base-type\uff0c\u800c\u5f8c\u8005\u5be6\u969b\u6307\u5411\u4e00\u500b derived \u7269\u4ef6\u3002 \u5982\u679c\u6211\u5011\u5c0d pointer to base \u65bd\u884c delete \uff0c\u90a3\u9ebc base class \u89e3\u69cb\u5f0f\u6703\u88ab\u559a\u8d77\uff0c\u8ca0\u8cac\u6e05\u7406 base \u6210\u54e1\u3002\u5982\u679c\u6240\u6307\u7269\u4ef6\u5be6\u969b\u4e0a\u662f derived \u578b\u5225\uff0c\u5247\u4e0a\u8ff0\u884c\u70ba\u5c07\u4e0d\u660e\u78ba (undefined)\u3002\u82e5\u8981\u4fdd\u8b49\u559a\u8d77\u9069\u7576\u4e4b\u89e3\u69cb\u5f0f\uff0cbase class\u7684\u89e3\u69cb\u5f0f\u4e00\u5b9a\u5fc5\u9808\u662f virtual: class Item_base { public : virtual ~ Item_base () { } } \u5982\u679c\u89e3\u69cb\u5f0f\u662f virtual\uff0c\u7576\u5b83\u7d93\u7531 pointer \u88ab\u559a\u8d77\uff0c\u57f7\u884c\u8d77\u4f86\u7684\u89e3\u69cb\u5f0f\u6703\u4f9d pointer \u6240\u6307\u7269\u7684\u578b\u5225\u800c\u4e0d\u540c: Item_base * itemP = new Item_base ; // \u975c\u614b\u578b\u5225\u548c\u52d5\u614b\u578b\u5225\u76f8\u540c delete itemP ; // \u6c92\u554f\u984c: \u547c\u53eb Item_base \u7684\u89e3\u69cb\u5f0f itemP = new Bulk_item ; // \u6c92\u554f\u984c: \u975c\u614b\u578b\u5225\u548c\u52d5\u614b\u578b\u5225\u4e0d\u540c delete itemP ; // \u6c92\u554f\u984c: \u547c\u53eb Bulk_item \u7684\u89e3\u69cb\u5f0f \u91cd\u9ede: \u7e7c\u627f\u9ad4\u7cfb\u7684 root class \u61c9\u8a72\u5b9a\u7fa9\u4e00\u500b virtual \u89e3\u69cb\u5f0f\uff0c\u5373\u4f7f\u8a72\u89e3\u69cb\u5f0f\u7121\u4e8b\u53ef\u505a\u3002 \u5efa\u69cb\u5f0f\u548c Assignment \u904b\u7b97\u5b50\u4e0d\u662f virtual \u5c07 assignment \u904b\u7b97\u5b50\u8a2d\u70ba virtual \u53ef\u80fd\u6703\u5f15\u8d77\u7591\u60d1\uff0c\u56e0\u70ba virtual \u51fd\u5f0f\u5728 base class \u548c derived class \u5167\u5fc5\u9808\u64c1\u6709\u76f8\u540c\u7684\u53c3\u6578\u578b\u5225\u3002Base class \u7684 assignment \u904b\u7b97\u5b50\u63a5\u6536\u7684\u53c3\u6578\u662f\u500b reference \u6307\u5411\u81ea\u8eab class \u578b\u5225\u3002\u5982\u679c\u6b64\u904b\u7b97\u5b50\u70ba virtual\uff0c\u90a3\u9ebc\u6bcf\u500b derived classes \u90fd\u5c07\u7372\u5f97\u4e00\u500b virtual \u6210\u54e1\uff0c\u5b9a\u7fa9\u51fa \"\u4ee5 base \u7269\u4ef6\u70ba\u53c3\u6578\" \u7684 operator= \uff0c\u4f46\u90a3\u4e26\u4e0d\u7b49\u540c\u65bc derived class \u7684 assignment \u904b\u7b97\u5b50\u3002 \u7576 Virtuals \u51fa\u73fe\u5728\u5efa\u69cb\u5f0f\u548c\u89e3\u69cb\u5f0f\u5167 \u91cd\u9ede: \u5982\u679c\u5728\u5efa\u69cb\u6216\u89e3\u69cb\u5f0f\u4e2d\u547c\u53eb virtual \u51fd\u5f0f\uff0c\u559a\u8d77\u7684\u5c07\u662f\u5efa\u69cb\u6216\u89e3\u69cb\u5f0f\u6240\u5728\u578b\u5225\u6240\u5b9a\u7fa9\u7684\u7248\u672c\u3002 \u70ba\u4e86\u8981\u4e86\u89e3\u4e0a\u8ff0\u884c\u70ba\uff0c\u8a66\u8003\u616e virtual \u51fd\u5f0f\u7684 derived class \u7248\u672c\u88ab base class \u5efa\u69cb\u5f0f(\u6216\u89e3\u69cb\u5f0f)\u547c\u53eb\u3002\u6b64 virtual \u51fd\u5f0f\u7684 derived \u7248\u672c\u53ef\u80fd\u5b58\u53d6 derived \u7269\u4ef6\u6210\u54e1\uff0c\u7562\u7adf\u5982\u679c derived class \u7248\u672c\u4e0d\u9700\u8981\u4f7f\u7528 derived \u7269\u4ef6\u6210\u54e1\uff0c\u9019\u500b derived class \u53ef\u76f4\u63a5\u4f7f\u7528 base class \u7684 virtual \u51fd\u5f0f\u3002\u7136\u800c\u7576 base \u5efa\u69cb\u5f0f (\u6216\u89e3\u69cb\u5f0f) \u57f7\u884c\u6642\uff0c\u7269\u4ef6\u7684\u884d\u751f\u90e8\u7684\u6210\u54e1\u4e26\u672a\u521d\u59cb\u5316\u3002\u73fe\u5be6\u4e2d\u5982\u679c\u5141\u8a31\u9019\u7a2e\u5b58\u53d6\u52d5\u4f5c\uff0c\u7a0b\u5f0f\u6709\u53ef\u80fd\u7576\u6389\u3002 \u7e7c\u627f\u4e0b\u7684 Class \u4f5c\u7528\u57df \u7e7c\u627f\u6a5f\u5236\u4f7f\u5f97 class \u4f5c\u7528\u57df\u88ab\u968e\u5c64\u5f0f\u5730\u5d4c\u5957\u5806\u7f6e\uff0c\u7576\u6211\u5011\u5beb: Bulk_item bulk ; cout << bulk . book (); \u5c0d\u65bc\u540d\u7a31 book \u7684\u4f7f\u7528\u5c07\u9019\u9ebc\u6c7a\u8b70 (resolved): 1. bulk \u662f\u500b Bulk_item \u7269\u4ef6\u3002\u7de8\u8b6f\u5668\u65bc\u662f\u5728 Bulk_item class \u5167\u641c\u5c0b book \uff0c\u4f46\u627e\u4e0d\u5230\u3002 2. \u7531\u65bc Bulk_item \u884d\u751f\u81ea Item_base \uff0c\u7de8\u8b6f\u5668\u65bc\u662f\u641c\u5c0b Item_base class\uff0c\u627e\u5230\u4e86\u540d\u7a31 book \uff0c\u6c7a\u8b70\u6210\u529f\u3002 \u540d\u7a31\u885d\u7a81 (Name Collision) \u548c\u7e7c\u627f \u91cd\u9ede: Derived class \u6210\u54e1\u5982\u679c\u8207 base class \u6210\u54e1\u540c\u540d\uff0c\u6703\u5c0d\u5f8c\u8005\u7522\u751f\u906e\u853d\u6548\u679c\uff0c\u4f7f\u5f8c\u8005\u7121\u6cd5\u88ab\u76f4\u63a5\u5b58\u53d6\u3002 struct Base { Base () : mem ( 0 ) {} protected : int mem ; // \u6703\u88ab\u906e\u853d }; struct Derived : Base { Derived ( int i ) : mem ( i ) { } int get_mem () { return mem ; } protected : int mem ; }; \u4e00\u65e6\u5728 get_mem() \u4e2d\u6307\u6d89 mem \uff0c\u6703\u88ab\u7de8\u8b6f\u5668\u8996\u70ba Derived \u5167\u7684\u540d\u7a31\u3002 Derived d ( 42 ); cout << g . get_mem () << endl ; // \u5370\u51fa 42 \u4f5c\u7528\u57df (scope) \u8207\u6210\u54e1\u51fd\u5f0f \u5982\u679c base \u548c derived class \u64c1\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u51fd\u5f0f\uff0c\u5176\u904b\u4f5c\u65b9\u5f0f\u5982\u540c\u6210\u54e1\u8b8a\u6578: derived \u4f5c\u7528\u57df\u5167\u7684\u6210\u54e1\u6703\u906e\u853d base class \u7684\u6210\u54e1\u3002 struct Base { int memfcn (); }; struct Derived : Base { int memfcn ( int ); } Derived d ; Base b ; b . memfcn (); // \u547c\u53eb Base::memfcn d . memfcn ( 10 ); // \u547c\u53eb Derived::memfcn d . memfcn (); // \u932f\u8aa4 : \u7121\u5f15\u6578\u7684 memfcn \u5df2\u88ab\u906e\u853d d . Base :: memfcn (); // \u6c92\u554f\u984c : \u547c\u53eb Base::memfcn \u91cd\u8981\u89c0\u5ff5: \u56de\u61b6\u4e00\u4e0b\uff0c\u5ba3\u544a\u65bc local \u4f5c\u7528\u57df\u7684\u51fd\u5f0f\uff0c\u4e26\u4e0d\u6703\u8207\u5b9a\u7fa9\u65bc global \u4f5c\u7528\u57df\u7684\u51fd\u5f0f\u5f62\u6210\u91cd\u8f09\u3002\u540c\u6a23\u9053\u7406\uff0c\u5b9a\u7fa9\u65bc derived class \u7684\u51fd\u5f0f\u4e0d\u6703\u8207 base \u5b9a\u7fa9\u7684\u51fd\u5f0f\u5f62\u6210\u91cd\u8f09\u3002 \u95dc\u9375\u6982\u5ff5: \u540d\u7a31\u641c\u5c0b (Name Lookup) \u548c\u7e7c\u627f: \u4e86\u89e3 \"\u51fd\u5f0f\u547c\u53eb\u5982\u4f55\u88ab\u6c7a\u8b70\" \u5c0d\u65bc\u4e86\u89e3 C++ \u7e7c\u627f\u9ad4\u7cfb\u5341\u5206\u91cd\u8981\u3002\u6c7a\u8b70\u52d5\u4f5c\u4f9d\u4ee5\u4e0b\u56db\u6b65\u9a5f\u9032\u884c: 1. \u9996\u5148\u6c7a\u5b9a\u547c\u53eb\u8005 (object, reference \u6216 pointer) \u7684\u975c\u614b\u578b\u5225\u3002 2. \u5728\u4e0a\u8ff0 class \u5167\u641c\u5c0b\u8a72\u51fd\u5f0f\u3002\u5982\u679c\u6c92\u6709\u627e\u5230\uff0c\u5c31\u5f80\u6700\u63a5\u8fd1\u7684 (immediate) base class \u5c0b\u627e\uff0c\u5982\u6b64\u4e0a\u6714 classes \u7e7c\u627f\u93c8\uff0c\u76f4\u5230\u767c\u73fe\u8a72\u51fd\u5f0f\uff0c\u6216\u76f4\u81f3\u641c\u5c0b\u5230\u6700\u5f8c\u4e00\u500b class\u3002\u5982\u679c\u90fd\u6c92\u6709\u767c\u73fe\uff0c\u8868\u793a\u547c\u53eb\u6709\u8aa4\u3002 3. \u4e00\u65e6\u627e\u5230\u8a72\u540d\u7a31\uff0c\u5c31\u6839\u64da\u627e\u5230\u7684\u5b9a\u7fa9\u5f0f\u9032\u884c\u4e00\u822c\u7684\u578b\u5225\u6aa2\u9a57\uff0c\u6aa2\u67e5\u547c\u53eb\u52d5\u4f5c\u662f\u5426\u5408\u6cd5\u3002 4. \u82e5\u547c\u53eb\u5408\u6cd5\uff0c\u7de8\u8b6f\u5668\u8b8a\u7522\u51fa\u4e8c\u9032\u5236\u78bc\u3002\u5982\u679c\u51fd\u5f0f\u662f virtual\uff0c\u4e14\u4fc2\u900f\u904e reference \u6216 pointer \u88ab\u547c\u53eb\uff0c\u90a3\u9ebc\u7de8\u8b6f\u5668\u7522\u751f\u7684\u78bc\u6703\u6839\u64da\u7269\u4ef6\u7684\u52d5\u614b\u578b\u5225\u6c7a\u5b9a\u559a\u8d77\u54ea\u500b\u7248\u672c\u3002\u5426\u5247\u7de8\u8b6f\u5668\u7522\u751f\u7684\u78bc\u6703\u76f4\u63a5\u559a\u8d77\u8a72\u51fd\u5f0f\u3002 Pure Virtual (\u7d14\u865b\u64ec) \u51fd\u5f0f \u4e4b\u524d\u6240\u5beb\u7684 Disc_item class \u5448\u73fe\u4e00\u500b\u6709\u8da3\u7684\u554f\u984c: \u9019\u500b class \u5f9e Item_base \u7e7c\u627f\u5230 net_price() \uff0c\u4f46\u4e26\u672a\u91cd\u65b0\u5b9a\u7fa9\uff0c\u56e0\u70ba\u6c92\u5fc5\u8981\u3002\u9019\u500b class \u7684\u5b58\u5728\u53ea\u662f\u70ba\u4e86\u8b93\u5176\u4ed6 classes \u7e7c\u627f\u3002 class Disc_item : public Item_base { public : Disc_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Item_base ( book , sales_price ), quantity ( qty ), discount ( disc_rate ) { } protected : std :: size_t quantity ; // \u5f97\u4eab\u53d7\u6298\u6263\u7684\u81e8\u754c\u8cfc\u8cb7\u6578 double discount ; // \u6298\u6263\u7387 } class Bulk_item : public Disc_item { public : Bulk_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Disc_item ( book , sales_price , qty , disc_rate ) { } // \u91cd\u65b0\u5b9a\u7fa9 base \u7248\u672c\uff0c\u4ee5\u5be6\u4f5c\u5927\u91cf\u63a1\u8cfc\u7684\u6298\u6263\u7b56\u7565 double net_price ( std :: size_t ) const ; }; \u6211\u5011\u4e0d\u5e0c\u671b\u7528\u6236\u5275\u5efa\u4efb\u4f55 Disc_item \u7269\u4ef6\u3002\u7136\u800c\u6211\u5011\u7121\u6cd5\u963b\u6b62\u7528\u6236\u5b9a\u7fa9\u4e00\u500b Disc_item \u7269\u4ef6\u3002\u5982\u679c\u7528\u6236\u771f\u7684\u5efa\u7acb\u4e00\u500b Disc_item \u7269\u4ef6\u4e26\u559a\u8d77 net_price() \uff0c\u6703\u8a08\u7b97\u51fa\u672a\u6253\u6298\u7684\u50f9\u683c\u3002 \u7d50\u8ad6\u662f\u6211\u5011\u6839\u672c\u4e0d\u5e0c\u671b\u7528\u6236\u5efa\u7acb\u9019\u7a2e\u7269\u4ef6\uff0c\u5982\u679c\u5c07 net_price() \u8a2d\u70ba pure virtual \u51fd\u5f0f\u5c31\u53ef\u4ee5\u9054\u5230\u76ee\u7684\u3002 class Disc_item : public Item_base { public : double net_price ( std :: size_t ) const = 0 ; }; \u9019\u88e1\u5c07 virtual \u51fd\u5f0f\u5b9a\u7fa9\u70ba pure virtual\uff0c\u610f\u5473\u6b64\u51fd\u5f0f\u63d0\u4f9b\u4e00\u500b\u4ecb\u9762\uff0c\u53ef\u8b93\u5f8c\u7e8c (\u884d\u751f) \u578b\u5225\u8986\u5beb\uff0c\u800c\u6b64 class \u5167\u7684\u7248\u672c\u6c38\u9060\u4e0d\u6703\u88ab\u559a\u8d77\u3002\u800c\u4e14\u7528\u6236\u7121\u6cd5\u5efa\u7acb Disc_item \u7269\u4ef6\u3002 \u91cd\u9ede: \u5982\u679c class \u5167\u542b (\u6216\u7e7c\u627f) \u4e00\u500b\u4ee5\u4e0a\u7684 pure virtual \u51fd\u5f0f\uff0c\u4fbf\u7a31\u70ba\u6240\u8b02\u62bd\u8c61\u7684 (abstract) base class\u3002\u6211\u5011\u4e0d\u80fd\u70ba abstract \u578b\u5225\u5efa\u7acb\u4efb\u4f55\u7269\u4ef6\u3002 // Disc_item \u5167\u5ba3\u544a\u6709 pure virtual \u51fd\u5f0f Disc_item discounted ; // \u932f\u8aa4: \u4e0d\u80fd\u5b9a\u7fa9 (\u5efa\u7acb) Disc_item \u7269\u4ef6 Bulk_item bulk ; // \u6c92\u554f\u984c: Bulk_item \u5167\u542b Disc_item \u5b50\u7269\u4ef6","title":"\u7269\u4ef6\u5c0e\u5411\u7de8\u7a0b (OOP)"},{"location":"C%2B%2B/object_oriented_programming/#oop","text":"","title":"\u7269\u4ef6\u5c0e\u5411\u7de8\u7a0b (OOP)"},{"location":"C%2B%2B/object_oriented_programming/#base-classes-derived-classes","text":"class Item_base { public : Item_base ( const std :: string & book = \"\" , double sales_price = 0.0 ) : isbn ( book ), price ( sales_price ) {} std :: string book () const { return isbn ; } virtual double net_price ( std :: size_t n ) const { return n * price ; } virtual ~ Item_base () {} private : std :: string isbn ; protected : double price ; } \u76ee\u524d\u53ea\u8981\u8a18\u4f4f\uff0c\u7e7c\u627f\u9ad4\u7cfb\u7684 root class \u4e00\u822c\u90fd\u6703\u5b9a\u7fa9\u4e00\u500b virtual \u89e3\u69cb\u5f0f\u3002 Item_base class \u5b9a\u7fa9\u5169\u500b\u51fd\u5f0f\uff0c\u5176\u4e2d\u4e00\u500b\u4f46\u6709\u95dc\u9375\u5b57 virtual \uff0c\u5176\u76ee\u7684\u662f\u555f\u52d5\u52d5\u614b\u7d81\u5b9a\u3002\u5728\u9810\u8a2d\u60c5\u6cc1\u4e0b\u6210\u54e1\u51fd\u5f0f\u4e26\u975e virtual\u3002\u5c0d non-virtual \u51fd\u5f0f\u7684\u547c\u53eb\u6703\u5728\u7de8\u8b6f\u6642\u671f\u88ab\u6c7a\u8b70\u3002 Base class \u901a\u5e38\u61c9\u8a72\u628a \u6709\u5fc5\u8981\u7531 derived class \u91cd\u65b0\u5b9a\u7fa9 \u7684\u51fd\u5f0f\u5b9a\u7fa9\u70ba virtual\u3002","title":"Base Classes \u548c Derived Classes"},{"location":"C%2B%2B/object_oriented_programming/#access-control","text":"Derived class \u53ef\u5b58\u53d6\u5176 base class \u7684 public \u6210\u54e1\u4f46\u4e0d\u80fd\u5b58\u53d6\u5176 private \u6210\u54e1\u3002 \u6709\u6642\u5019 base class \u7684\u6210\u54e1\u6703\u60f3\u8b93 derived class \u5b58\u53d6\uff0c\u4f46\u7981\u6b62\u88ab\u5176\u4ed6\u7528\u6236\u5b58\u53d6\u3002 protected \u5b58\u53d6\u7d1a\u5225\u662f\u70ba\u6b64\u800c\u751f\u3002 protected \u6210\u54e1\u53ef\u88ab derived \u7269\u4ef6\u5b58\u53d6\uff0c\u4f46\u4e0d\u80fd\u88ab\u4e00\u822c\u7528\u6236\u5b58\u53d6\u3002","title":"\u5b58\u53d6\u63a7\u5236 (Access Control) \u8207\u7e7c\u627f"},{"location":"C%2B%2B/object_oriented_programming/#derived-classes","text":"\u5b9a\u7fa9\u4e00\u500b derived class\uff0c\u6211\u5011\u7528 class derivation list (\u884d\u5316\u5217) \u6a19\u793a base class\u3002\u4e5f\u5c31\u662f\u5217\u51fa\u4e00\u6216\u591a\u500b base class \u540d\u7a31\uff0c\u5f62\u5f0f\u5982\u4e0b: class classname : access-label base-class \u5176\u4e2d access-label \u662f public , protected , private \u4e09\u8005\u4e4b\u4e00\uff0c base-class \u662f\u5148\u524d\u5df2\u5b9a\u7fa9\u597d\u7684 class \u540d\u7a31\u3002 // \u540c\u4e00\u672c\u66f8\u552e\u51fa\u4e00\u5b9a\u6578\u91cf\u5f8c\u53ef\u4eab\u6709\u6298\u6263 class Bulk_item : public Item_base { public : // \u5c07 base \u7248\u672c\u91cd\u65b0\u5b9a\u7fa9\uff0c\u7528\u4ee5\u5be6\u73fe\u5927\u91cf\u8cfc\u66f8\u60c5\u6cc1\u4e0b\u7684\u6298\u6263\u7b56\u7565 double net_price ( std :: size_t ) const override ; private : std :: size_t min_qty ; // \u6298\u6263\u6240\u9700\u7684\u6700\u4f4e\u8cfc\u8cb7\u91cf double discount ; // \u6298\u6263\u7387 } \u6bcf\u500b Bulk_item \u7269\u4ef6\u542b\u6709 4 \u7b46\u8cc7\u6599\u5143\u7d20: \u5f9e Item_base \u7e7c\u627f\u800c\u5f97\u7684 isbn \u548c price \uff0c\u4ee5\u53ca\u81ea\u5df1\u5b9a\u7fa9\u7684 min_qty \u548c discount \u3002 Bulk_item \u9084\u9700\u8981\u5b9a\u7fa9\u5efa\u69cb\u5f0f\uff0c\u5f8c\u9762\u6703\u63d0\u3002","title":"Derived Classes (\u884d\u751f\u985e\u5225)"},{"location":"C%2B%2B/object_oriented_programming/#derived-base","text":"double print_total ( const Item_base & , size_t ); Item_base item ; print_total ( item , 10 ); Item_base * p = & item ; Bulk_item bulk ; print_total ( bulk , 10 ); p = & bulk ; \u9019\u6bb5\u7a0b\u5f0f\u78bc\u4ee5\u540c\u4e00\u500b base-type pointer \u5728\u4e0d\u540c\u6642\u9593\u5206\u5225\u6307\u5411 base-type \u7269\u4ef6\u548c derived-type \u7269\u4ef6\u3002\u4e26\u4e14\u547c\u53eb \u63a5\u6536\u4e00\u500b base-type reference \u51fd\u5f0f\uff0c\u4e0d\u540c\u6642\u9593\u5206\u5225\u50b3\u5165\u4e00\u500b base-type \u7269\u4ef6\u548c\u4e00\u500b derived-type \u7269\u4ef6\u3002\u5169\u7a2e\u7528\u6cd5\u90fd\u6c92\u6709\u554f\u984c\uff0c\u56e0\u70ba\u6bcf\u500b derived \u7269\u4ef6\u90fd\u5167\u542b\u5176 base \u6210\u5206\u3002 void print_total ( ostream & os , const Item_base & item , size_t n ) { os << \"ISBN: \" << item . book () << \" \\t number sold: \" << n << \" \\t total price: \" // virtual call: \u4ee5\u4e0b\u547c\u53eb\u7684 net_price() \u5728\u57f7\u884c\u671f\u624d\u7372\u5f97\u6c7a\u8b70 << item . net_price ( n ) << endl ; } Item_base base ; bulk_item derived ; // print_total() \u5c0d net_price() \u9032\u884c virtual call print_total ( cout , base , 10 ); // \u547c\u53eb Item_base::net_price print_total ( cout , derived , 10 ); // \u547c\u53eb Bulk_item::net_price","title":"Derived \u8f49\u63db\u70ba Base"},{"location":"C%2B%2B/object_oriented_programming/#c-polymorphism","text":"Reference \u548c Pointer \u7684\u975c\u614b\u578b\u5225\u548c\u52d5\u614b\u578b\u5225\u53ef\u4ee5\u4e0d\u540c\uff0c\u9019\u500b\u4e8b\u5be6\u662f C++ \u591a\u578b\u7684\u57fa\u77f3\u3002 \u7576\u6211\u5011\u900f\u904e\u4e00\u500b base-class reference \u6216 pointer \u547c\u53eb\u5b9a\u7fa9\u65bc base-class \u5167\u7684\u51fd\u5f0f\u6642\uff0c\u6211\u5011\u4e26\u4e0d\u77e5\u9053\u8a72\u51fd\u5f0f\u6240\u8655\u88e1\u7684\u7269\u4ef6\u7684\u7cbe\u78ba\u578b\u5225\uff0c\u56e0\u70ba\u8a72\u7269\u4ef6\u53ef\u4ee5\u662f base type, \u4e5f\u53ef\u4ee5\u662f derived type\u3002 \u5982\u679c\u547c\u53eb\u7684\u662f virtual \u51fd\u5f0f\uff0c\u90a3\u9ebc \u559a\u8d77\u54ea\u500b\u51fd\u5f0f \u7684\u6289\u64c7\u6703\u5ef6\u81f3\u57f7\u884c\u671f\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7269\u4ef6(\u975e reference \u6216 pointer) \u4e0d\u5e36\u591a\u578b\u6027 (\u4e0d\u662f polymorphic)\uff0c\u56e0\u70ba\u5176\u578b\u5225\u5df2\u77e5\u4e14\u4e0d\u53ef\u80fd\u6539\u8b8a\u3002\u7269\u4ef6\u7684\u52d5\u614b\u578b\u5225\u6c38\u9060\u548c\u975c\u614b\u578b\u5225\u76f8\u540c\u3002","title":"\u95dc\u9375\u89c0\u5ff5: C++ \u591a\u578b (Polymorphism)"},{"location":"C%2B%2B/object_oriented_programming/#overriding-virtual-mechanism","text":"\u67d0\u7a2e\u60c5\u6cc1\u4e0b\u6211\u5011\u6703\u60f3\u63a8\u7ffb\u865b\u64ec\u6a5f\u5236\uff0c\u5f37\u8feb\u559a\u8d77 virtual \u51fd\u5f0f\u7684\u67d0\u500b\u7279\u5b9a\u7248\u672c\u3002 scope \u904b\u7b97\u5b50\u53ef\u4ee5\u5e6b\u6211\u5011\u9054\u5230\u76ee\u7684\u3002 Item_base * baseP = & derived ; // \u7121\u8ad6 baseP \u7684\u52d5\u614b\u578b\u5225\u662f\u4ec0\u9ebc\uff0c\u90fd\u5e0c\u671b\u559a\u8d77\u5b9a\u7fa9\u65bc base class \u7684\u7248\u672c double d = baseP -> Item_base :: net_price ( 42 );","title":"\u63a8\u7ffb\u865b\u64ec\u6a5f\u5236 (Overriding Virtual Mechanism)"},{"location":"C%2B%2B/object_oriented_programming/#override","text":"derived class \u5982\u679c\u5b9a\u7fa9\u4e86\u4e00\u500b\u51fd\u6578\u8207 base class \u4e2d\u7684\u865b\u64ec\u51fd\u5f0f\u7684\u540d\u5b50\u76f8\u540c\u4f46\u662f\u53c3\u6578\u5217\u4e0d\u540c\uff0c\u9019\u4ecd\u7136\u662f\u5408\u6cd5\u884c\u70ba\u3002\u7de8\u8b6f\u5668\u5c07\u8a8d\u70ba\u65b0\u5b9a\u7fa9\u500b\u9019\u500b\u51fd\u6578\u8207 base class \u4e2d\u539f\u6709\u7684\u51fd\u5f0f\u662f\u76f8\u4e92\u7368\u7acb\u7684\u3002\u5c31\u5be6\u969b\u7684\u7de8\u7a0b\u7fd2\u6163\u800c\u8a00\uff0c\u9019\u7a2e\u8072\u660e\u5f80\u5f80\u610f\u5473\u8457\u767c\u751f\u4e86\u932f\u8aa4\uff0c\u56e0\u70ba\u6211\u5011\u539f\u672c\u5e0c\u671b derived class \u80fd\u8986\u84cb\u6389 base class \u4e2d\u7684\u865b\u64ec\u51fd\u5f0f\uff0c\u4f46\u662f\u4e0d\u5c0f\u5fc3\u628a\u53c3\u6578\u5217\u5beb\u932f\u4e86\u3002 struct B { virtual void f1 ( int ) const ; virtual void f2 (); void f3 (); }; struct D1 : B { void f1 ( int ) const override ; // \u6b63\u78ba: f1\u8207 base class \u4e2d\u7684 f1 \u5339\u914d void f2 ( int ) override ; // \u932f\u8aa4: B \u6c92\u6709\u5f62\u5982 f2(int) \u7684\u51fd\u5f0f void f3 () override ; // \u932f\u8aa4: f3 \u4e0d\u662f\u865b\u64ec\u51fd\u5f0f void f4 () override ; // \u932f\u8aa4: B \u6c92\u6709\u540d\u70ba f4 \u7684\u51fd\u5f0f }","title":"override \u95dc\u9375\u5b57"},{"location":"C%2B%2B/object_oriented_programming/#public-private-protected","text":"public \u7e7c\u627f: base \u6210\u54e1\u7684\u5b58\u53d6\u7d1a\u5225\u4e0d\u8b8a\u3002 protected \u7e7c\u627f: base class \u7684 public \u548c protected \u6210\u54e1\u5c07\u8b8a\u6210 derived class \u7684 protected \u6210\u54e1\u3002 private \u7e7c\u627f: base class \u7684\u6240\u6709\u6210\u54e1\u5728 derived class \u5167\u90e8\u8b8a\u6210 private\u3002","title":"Public, Private, Protected \u4e09\u7a2e\u7e7c\u627f"},{"location":"C%2B%2B/object_oriented_programming/#_1","text":"\u6709\u6642\u5019\u6211\u5011\u5728\u5275\u9020\u67d0\u500b\u985e\u5225\u6642\uff0c\u6211\u5011\u4e0d\u5e0c\u671b\u5176\u4ed6\u985e\u53ef\u4ee5\u7e7c\u627f\u5b83\uff0cC++11 \u63d0\u4f9b\u4e00\u7a2e\u963b\u6b62\u7e7c\u627f\u767c\u751f\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u5728\u985e\u540d\u5f8c\u52a0\u5165\u95dc\u9375\u5b57 final \u3002 class NoDerived final { /* */ }; // \u4e0d\u80fd\u4f5c\u70ba\u57fa\u985e\u3002 struct D2 : B { void f1 ( int ) const final ; // \u4e0d\u5141\u8a31\u5f8c\u7e8c\u7684\u5176\u4ed6\u985e\u8986\u84cb f1(int) }","title":"\u963b\u6b62\u7e7c\u627f\u7684\u767c\u751f"},{"location":"C%2B%2B/object_oriented_programming/#friendship","text":"friend class \u53ef\u4ee5\u76f4\u63a5\u5b58\u53d6 class \u7684 private \u548c protected \u8cc7\u6599\u3002 friend \u95dc\u4fc2\u4e0d\u6703\u88ab\u7e7c\u627f\uff0cbase \u7684 friends \u5c0d\u65bc derived classes \u7684\u6210\u54e1\u4e26\u7121\u7279\u6b8a\u5b58\u53d6\u6b0a\u3002","title":"Friendship \u548c \u7e7c\u627f"},{"location":"C%2B%2B/object_oriented_programming/#static","text":"\u5982\u679c base class \u5b9a\u7fa9\u4e00\u500b static \u6210\u54e1\uff0c\u6574\u500b\u7e7c\u627f\u9ad4\u7cfb\u4e5f\u5c31\u53ea\u5b9a\u7fa9\u9019\u9ebc\u4e00\u500b\u6210\u54e1\u3002\u7121\u8ad6\u9019\u500b base class \u884d\u751f\u591a\u5c11 classes, static \u6210\u54e1\u53ea\u6709\u4e00\u4efd\u5be6\u9ad4\u3002","title":"\u7e7c\u627f\u8207 Static \u6210\u54e1"},{"location":"C%2B%2B/object_oriented_programming/#conversions-and-inheritance","text":"\u7406\u89e3 base \u8207 derived \u578b\u5225\u4e4b\u9593\u7684\u8f49\u63db\u95dc\u4fc2\uff0c\u5c0d\u65bc\u7406\u89e3 \u7269\u4ef6\u5c0e\u5411\u7de8\u7a0b\u5728 C++ \u5982\u4f55\u904b\u4f5c \u5341\u5206\u91cd\u8981\u3002","title":"\u7e7c\u627f\u8207\u8f49\u63db (Conversions and Inheritance)"},{"location":"C%2B%2B/object_oriented_programming/#reference-object","text":"\u4e00\u5982\u5148\u524d\u6240\u898b\uff0c\u6211\u5011\u53ef\u4ee5\u50b3\u905e derived type \u7269\u4ef6\u7d66\u9810\u671f\u63a5\u6536\u4e00\u500b reference to base \u7684\u51fd\u5f0f\u3002\u7576\u6211\u5011\u50b3\u905e\u7269\u4ef6\u7d66\u63a5\u6536 reference \u7684\u51fd\u5f0f\uff0c\u8a72 reference \u6703\u88ab\u76f4\u63a5\u7d81\u5b9a\u65bc\u8a72\u7269\u4ef6\u8eab\u4e0a\u3002\u96d6\u7136\u770b\u8d77\u4f86\u5f88\u50cf\u662f\u5728\u50b3\u905e\u7269\u4ef6\uff0c\u5176\u5be6\u5f15\u6578\u662f\u6307\u5411\u8a72\u7269\u4ef6\u7684\u4e00\u500b reference\u3002\u7269\u4ef6\u672c\u8eab\u4e26\u672a\u88ab\u8907\u88fd\uff0c\u4e5f\u6c92\u6709\u4efb\u4f55\u8f49\u63db\u52d5\u4f5c\u6539\u8b8a derived type \u7269\u4ef6\u3002 \u7576\u6211\u5011\u50b3\u905e derived \u7269\u4ef6\u7d66\u9810\u671f\u63a5\u6536 base-type object (\u800c\u975e reference) \u7684\u51fd\u5f0f\u6642\uff0c\u60c5\u6cc1\u5927\u70ba\u4e0d\u540c\u3002\u5982\u679c\u6211\u5011\u50b3\u5165 derived type \u7269\u4ef6\uff0c\u8a72\u7269\u4ef6\u4e2d\u7684 base \u6210\u5206\u6703\u88ab\u8907\u88fd\u5230\u53c3\u6578\u8eab\u4e0a\u3002 \u7406\u89e3 \"derived \u7269\u4ef6\u8f49\u63db\u70ba base type reference\" \u548c \"\u4ee5 derived \u7269\u4ef6\u521d\u59cb\u5316\u6216\u8ce6\u503c base \u7269\u4ef6\" \u4e4b\u9593\u7684\u5dee\u7570\uff0c\u662f\u5f88\u91cd\u8981\u7684\u3002","title":"\u8f49\u63db\u81f3 Reference \u4e0d\u540c\u65bc \u8f49\u63db\u81f3 Object"},{"location":"C%2B%2B/object_oriented_programming/#derived-to-base-accessibility","text":"\u82e5\u60f3\u5224\u65b7\u662f\u5426\u53ef\u8f49\u63db\u81f3 base\uff0c\u53ef\u8003\u616e base class \u7684 public \u6210\u54e1\u53ef\u5426\u5b58\u53d6\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u8f49\u63db\u4fbf\u53ef\u9032\u884c\uff0c\u5426\u5247\u7121\u6cd5\u3002","title":"Derived-to-Base \u8f49\u63db\u7684\u53ef\u7528\u6027 (Accessibility)"},{"location":"C%2B%2B/object_oriented_programming/#base-derived","text":"Base class \u81f3 derived class \u4e4b\u9593\u4e26\u7121\u81ea\u767c\u8f49\u63db\u95dc\u4fc2\u3002 Item_base base ; Bulk_item * bulkP = & base ; // \u932f\u8aa4: \u7121\u6cd5\u5c07 base \u8f49\u63db\u70ba derived Bulk_item & bulkRef = base ; // \u932f\u8aa4: \u7121\u6cd5\u5c07 base \u8f49\u63db\u70ba derived Bulk_item bulk = base ; // \u932f\u8aa4: \u7121\u6cd5\u5c07 base \u8f49\u63db\u70ba derived \u4e4b\u6240\u4ee5\u5982\u6b64\uff0c\u662f\u56e0\u70ba base \u7269\u4ef6\u5c31\u53ea\u662f\u4e00\u500b base\uff0c\u5b83\u4e26\u6c92\u6709 derived type \u6210\u54e1\u3002","title":"Base \u8f49\u63db\u81f3 Derived"},{"location":"C%2B%2B/object_oriented_programming/#copy-control","text":"\u6bcf\u500b derived \u7269\u4ef6\u90fd\u6703\u64c1\u6709 derived class \u5b9a\u7fa9\u7684\u6210\u54e1\uff0c\u4ee5\u53ca\u4e00\u500b (\u4ee5\u4e0a) \u7684 base class \u5b50\u7269\u4ef6\u3002\u9019\u500b\u4e8b\u5be6\u5f71\u97ff\u4e86 derived \u7269\u4ef6\u7684\u5efa\u69cb, \u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u3002\u7576\u6211\u5011\u5efa\u69cb, \u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u4e00\u500b derived-type \u7269\u4ef6\uff0c\u6211\u5011\u4e5f\u540c\u6642\u5efa\u69cb, \u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u5176\u4e2d\u7684 base class \u5b50\u7269\u4ef6\u3002 \u5efa\u69cb\u5f0f\u548c copy-control \u6210\u54e1\u4e0d\u6703\u88ab\u7e7c\u627f\u3002\u6bcf\u500b class \u61c9\u8a72\u5b9a\u7fa9\u81ea\u5df1\u7684\u5efa\u69cb\u5f0f\u548c copy-control \u6210\u54e1\u3002\u4efb\u4f55 class \u5982\u679c\u6c92\u6709\u5b9a\u7fa9\u81ea\u5df1\u7684 default \u5efa\u69cb\u5f0f\u548c copy-control \u6210\u54e1\uff0c\u5c31\u4f7f\u7528\u7de8\u8b6f\u5668\u81ea\u52d5\u5408\u6210\u7684\u7248\u672c\u3002","title":"\u5efa\u69cb\u5f0f\u548c\u62f7\u8c9d\u63a7\u5236\u9805 (Copy Control)"},{"location":"C%2B%2B/object_oriented_programming/#base-class-copy-control","text":"\u81ea\u8eab\u4e0d\u662f derived class \u7684 base class\uff0c\u5176\u5efa\u69cb\u5f0f\u548c copy control \u591a\u534a\u4e0d\u53d7\u7e7c\u627f\u5f71\u97ff\uff0c\u552f\u4e00\u5f71\u97ff\u7684\u662f\uff0c\u7576\u6211\u5011\u6c7a\u5b9a\u8981\u63d0\u4f9b\u90a3\u4e9b\u5efa\u69cb\u5f0f\u6642\uff0c\u5fc5\u9808\u591a\u8003\u616e\u4e00\u7a2e\u65b0\u7528\u6236\uff0cderived class\uff0c\u7576\u9700\u8981\u67d0\u4e9b\u7279\u6b8a\u5efa\u69cb\u5f0f\u53ea\u7d66 derived class \u4f7f\u7528\uff0c\u9019\u7a2e\u5efa\u69cb\u5f0f\u61c9\u8a72\u8a2d\u8a08\u70ba protected","title":"Base-class \u5efa\u69cb\u5f0f\u548c\u62f7\u8c9d\u63a7\u5236\u9805 (Copy Control)"},{"location":"C%2B%2B/object_oriented_programming/#derived-class","text":"Derived \u5efa\u69cb\u5f0f\u53d7\u5230 \"\u7e7c\u627f\u81ea\u53e6\u4e00\u500b class\" \u7684\u5f71\u97ff\u3002\u6bcf\u500b derived \u5efa\u69cb\u5f0f\u9664\u4e86\u521d\u59cb\u5316\u81ea\u8eab\u6210\u54e1\u8b8a\u6578\u5916\uff0c\u9084\u5f97\u521d\u59cb\u5316\u5176 base class\u3002","title":"Derived-class \u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/object_oriented_programming/#derived-class-default","text":"Derived class \u7684 default \u5efa\u69cb\u5f0f\u53ea\u6709\u4e00\u500b\u5730\u65b9\u4e0d\u540c\u65bc non-derived \u5efa\u69cb\u5f0f\u3002\u5b83\u5011\u4e0d\u50c5\u521d\u59cb\u5316 derived class \u7684\u6210\u54e1\u8b8a\u6578\uff0c\u4e5f\u521d\u59cb\u5316\u5176\u7269\u4ef6\u7684 base \u6210\u5206\u3002Base \u6210\u5206\u7531 base class \u7684 default \u5efa\u69cb\u5f0f\u521d\u59cb\u5316\u3002 \u4ee5\u6211\u5011\u7684 Bulk_item class \u800c\u8a00\uff0c\u5408\u6210\u7684 default \u5efa\u69cb\u5f0f\u6703\u57f7\u884c\u4ee5\u4e0b\u52d5\u4f5c: 1. \u559a\u8d77 Item_base \u7684 default \u5efa\u69cb\u5f0f\uff0c\u5c07 isbn \u521d\u59cb\u5316\u70ba\u7a7a\u5b57\u4e32\uff0c\u5c07 price \u521d\u59cb\u5316\u70ba\u96f6\u3002 2. \u4ee5\u8b8a\u6578\u521d\u59cb\u5316\u4e00\u73ed\u898f\u5247\u5b8c\u6210 Bulk_item \u6210\u54e1\u7684\u521d\u59cb\u5316\u3002 \u7531\u65bc Bulk_item \u6709\u5167\u5efa\u578b\u6210\u54e1\uff0c\u6211\u5011\u61c9\u8a72\u5b9a\u7fa9\u81ea\u5df1\u7684 default \u5efa\u69cb\u5f0f: class Bulk_item : public Item_base { public : Bulk_item () : min_qty ( 0 ), discount ( 0.0 ) { } // ... }; \u57f7\u884c\u9019\u500b\u5efa\u69cb\u5f0f\u7684\u6548\u679c\u5982\u4e0b: \u9996\u5148\u4ee5 Item_base \u7684 default \u5efa\u69cb\u5f0f\u5b8c\u6210 Item_base \u6210\u5206\u7684\u521d\u59cb\u5316\uff0c\u5c07 isbn \u8a2d\u70ba\u7a7a\u5b57\u4e32\u4e26\u5c07 price \u8a2d\u70ba\u96f6\u3002\u7136\u5f8c Bulk_item \u6210\u5206\u7684\u6210\u54e1\u88ab\u521d\u59cb\u5316\uff0c\u7136\u5f8c\u57f7\u884c\u5efa\u69cb\u5f0f\u4e3b\u9ad4\u3002","title":"\u5408\u6210\u7684 Derived class default \u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/object_oriented_programming/#base-class","text":"Derived class \u5efa\u69cb\u5f0f\u7684\u521d\u503c\u5217 (initialize list) \u53ea\u80fd\u521d\u59cb\u5316 derived class \u6210\u54e1\uff0c\u4e0d\u80fd\u76f4\u63a5\u521d\u59cb\u5316\u7e7c\u627f\u4f86\u7684\u6210\u54e1\u3002derived \u5efa\u69cb\u5f0f\u5fc5\u9808\u85c9\u7531\u5728\u5efa\u69cb\u5f0f\u521d\u503c\u5217\u542b\u5165 base class\uff0c\u624d\u5f97\u4ee5\u9593\u63a5\u521d\u59cb\u5316\u7e7c\u627f\u800c\u4f86\u7684\u6210\u54e1: class Bulk_item : public Item_base { public : Bulk_item ( const std :: string & book , double sales_price , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Item_base ( book , sales_price ), min_qty ( 0 ), discount ( 0.0 ) { } // ... }; \u9019\u500b\u5efa\u69cb\u5f0f\u4ee5\u96d9\u53c3\u6578\u7684 Item_base \u5efa\u69cb\u5f0f\u521d\u59cb\u5316\u5176 base \u5b50\u7269\u4ef6\u3002\u6211\u5011\u53ef\u4ee5\u9019\u6a23\u4f7f\u7528\u9019\u500b\u5efa\u69cb\u5f0f: Bulk_item bulk ( \"0-201-82470-1\" , 50 , 5 , .19 ); \u5efa\u69cb\u5f0f\u521d\u59cb\u5217 (Constructor initializer list) \u63d0\u4f9b base class \u548c\u6210\u54e1\u7684\u521d\u503c\u3002\u5b83\u5011\u7684\u6392\u5217\u6b21\u5e8f\u4e26\u975e\u5c31\u662f\u521d\u59cb\u5316\u6b21\u5e8f\u3002Base class \u4e00\u5b9a\u5148\u88ab\u521d\u59cb\u5316\uff0c\u7136\u5f8c derived class \u6210\u54e1\u624d\u4ee5\u5176\u5ba3\u544a\u6b21\u5e8f\u88ab\u521d\u59cb\u5316\u3002","title":"\u50b3\u905e\u5f15\u6578\u7d66 Base class \u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/object_oriented_programming/#base-class_1","text":"\u5982\u679c class C \u884d\u751f\u81ea class B\uff0cclass B \u53c8\u884d\u751f\u81ea class A\uff0c\u5247 B \u662f C \u7684\u76f4\u63a5 base\u3002\u5373\u4f7f\u6bcf\u500b C \u7269\u4ef6\u90fd\u6709\u500b A \u6210\u5206\uff0cC \u7684\u5efa\u69cb\u5f0f\u4ecd\u7136\u4e0d\u80fd\u76f4\u63a5\u521d\u59cb\u5316 A \u6210\u5206\u3002\u5fc5\u9808 C \u521d\u59cb\u5316 B\uff0cB \u5efa\u69cb\u5f0f\u5728\u521d\u59cb\u5316 A\u3002 \u8209\u500b\u5177\u9ad4\u7684\u4f8b\u5b50\uff0c\u6211\u5011\u7684\u66f8\u4fbf\u53ef\u80fd\u6709\u6578\u7a2e\u6298\u6263\u7b56\u7565\u3002\u9664\u4e86\u5927\u91cf\u6298\u6263\u5916\uff0c\u4e5f\u53ef\u4ee5\u5728\u8cfc\u8cb7\u4e00\u5b9a\u6578\u91cf\u5167\u63d0\u4f9b\u6298\u6263\uff0c\u8d85\u904e\u7279\u5b9a\u6578\u91cf\u5f8c\u4fbf\u6062\u5fa9\u539f\u50f9\u3002\u4e5f\u53ef\u4ee5\u5728\u8cfc\u8cb7\u4e00\u5b9a\u6578\u91cf\u5f8c\u624d\u63d0\u4f9b\u6298\u6263\uff0c\u5728\u90a3\u4e4b\u524d\u7dad\u6301\u5b9a\u50f9\u3002 \u9019\u4e9b\u6298\u6263\u7b56\u7565\u7684\u5171\u901a\u9ede\u662f\uff0c\u90fd\u9700\u8981\u4e00\u500b\u8cfc\u8cb7\u6578\u91cf\u548c\u4e00\u500b\u6298\u6263\u7387\u3002\u6211\u5011\u53ef\u4ee5\u5b9a\u7fa9\u4e00\u500b\u65b0\u7684 Disc_item class \u5132\u5b58\u8cfc\u8cb7\u91cf\u548c\u6298\u6263\u7387\uff0c\u7528\u4ee5\u652f\u6301\u9019\u4e9b\u4e0d\u540c\u7b56\u7565\u3002 \u60f3\u8981\u5be6\u73fe\u9019\u500b\u8a2d\u8a08\uff0c\u5fc5\u9808\u5148\u5b9a\u7fa9 Disc_item class: class Disc_item : public Item_base { public : Disc_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Item_base ( book , sales_price ), quantity ( qty ), discount ( disc_rate ) { } protected : std :: size_t quantity ; // \u5f97\u4eab\u53d7\u6298\u6263\u7684\u81e8\u754c\u8cfc\u8cb7\u6578 double discount // \u6298\u6263\u7387 } \u63a5\u4e0b\u4f86\u91cd\u65b0\u5be6\u4f5c Bulk_item \uff0c\u4ee4\u5b83\u7e7c\u627f\u81ea Disc_item \u800c\u4e0d\u518d\u76f4\u63a5\u7e7c\u627f Item_base : class Bulk_item : public Disc_item { public : Bulk_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Disc_item ( book , sales_price , qty , disc_rate ) { } // \u91cd\u65b0\u5b9a\u7fa9 base \u7248\u672c\uff0c\u4ee5\u5be6\u4f5c\u5927\u91cf\u63a1\u8cfc\u7684\u6298\u6263\u7b56\u7565 double net_price ( std :: size_t ) const ; };","title":"\u53ea\u6709\u76f4\u63a5\u7e7c\u627f\u7684 Base class \u53ef\u88ab\u521d\u59cb\u5316"},{"location":"C%2B%2B/object_oriented_programming/#base-class_2","text":"\u7576\u6211\u5011\u5b9a\u7fa9 Disc_item \uff0c\u6211\u5011\u5b9a\u7fa9\u5176\u5efa\u69cb\u5f0f\uff0c\u6307\u660e\u5982\u4f55\u521d\u59cb\u5316 Disc_item \u3002\u4e00\u65e6 class \u5b9a\u7fa9\u5176\u4ecb\u9762\uff0c\u6240\u6709\u8207\u8a72 class \u7269\u4ef6\u7684\u4efb\u4f55\u4e92\u52d5\u90fd\u61c9\u8a72\u900f\u904e\u5176\u4ecb\u9762\u9032\u884c\uff0c\u5373\u4fbf\u9019\u4e9b\u7269\u4ef6\u662f derived \u7269\u4ef6\u7684\u4e00\u90e8\u5206\u3002 \u57fa\u65bc\u985e\u4f3c\u539f\u56e0\uff0cderived class \u4e0d\u80fd\u5c0d\u5176 base class \u6210\u54e1\u9032\u884c\u521d\u59cb\u5316\uff0c\u4e5f\u4e0d\u8a72\u5c0d\u5b83\u5011\u8ce6\u503c\u3002\u5982\u679c\u9019\u4e9b\u6210\u54e1\u662f public \u6216 protected \uff0cderived \u5efa\u69cb\u5f0f\u5c31\u8a9e\u6cd5\u800c\u8a00\u53ef\u5728\u51fd\u5f0f\u4e3b\u9ad4\u5167\u8ce6\u503c\u7d66\u5176 base class \u6210\u54e1\u3002\u7136\u800c\u9019\u6a23\u505a\u6703\u9055\u53cd base \u4ecb\u9762\u3002Derived classes \u61c9\u8a72\u6539\u7528\u5efa\u69cb\u5f0f\uff0c\u9075\u5f9e\u5176 base classes \u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u800c\u975e\u5728\u81ea\u5df1\u7684\u5efa\u69cb\u5f0f\u4e3b\u9ad4\u5167\u76f4\u63a5\u8ce6\u503c\u7d66\u90a3\u4e9b\u6210\u54e1\u3002","title":"\u95dc\u9375\u6982\u5ff5: \u9075\u5b88 Base class \u4ecb\u9762\u898f\u7bc4"},{"location":"C%2B%2B/object_oriented_programming/#copy-control_1","text":"\u5982\u540c\u5176\u4ed6 class\uff0cderived class \u53ef\u4f7f\u7528\u7de8\u8b6f\u5668\u5408\u6210\u7684 copy-control \u6210\u54e1\u3002\u9019\u4e9b\u5408\u6210\u64cd\u4f5c\u53ef\u7528\u4f86\u5c0d \"\u7269\u4ef6\u7684 base \u6210\u5206\u548c derived \u6210\u5206\u5167\u7684\u6210\u54e1\" \u9032\u884c\u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u3002Base \u6210\u5206\u662f\u4ee5 base class \u7684 copy \u5efa\u69cb\u5f0f, assignment \u904b\u7b97\u5b50\u53ca\u89e3\u69cb\u5f0f\u5206\u5225\u9032\u884c\u62f7\u8c9d, \u8ce6\u503c, \u92b7\u6bc0\u3002","title":"Copy Control \u8207\u7e7c\u627f"},{"location":"C%2B%2B/object_oriented_programming/#derived-copy","text":"\u5982\u679c derived class \u5b9a\u7fa9\u81ea\u5df1\u7684 copy \u5efa\u69cb\u5f0f\uff0c\u9019\u500b\u5efa\u69cb\u5f0f\u901a\u5e38\u61c9\u8a72\u660e\u78ba\u4f7f\u7528 base class \u7684 copy \u5efa\u69cb\u5f0f\u5c07\u7269\u4ef6\u7684 base \u6210\u5206\u521d\u59cb\u5316: class Base { /*...*/ } class Derived : public Base { public : // Base::Base(const Base&) \u4e0d\u6703\u81ea\u52d5\u88ab\u559a\u8d77 Derived ( const Derived & d ) : Base ( d ) /* \u521d\u59cb\u5316\u5176\u5b83\u6210\u54e1 */ { /*...*/ } }; \u4e0a\u9762\u7684 Base(d) \u6703\u5c07 derived \u7269\u4ef6 d \u8f49\u63db\u70ba\u4e00\u500b reference \u6307\u5411 base \u6210\u5206\uff0c\u7136\u5f8c\u559a\u8d77 base class \u7684 copy \u5efa\u69cb\u5f0f\u3002\u5982\u679c\u7565\u800c\u4e0d\u5beb Base(d) : // Derived \u7684 copy \u5efa\u69cb\u5f0f\u5b9a\u7fa9\uff0c\u53ef\u80fd\u6709\u8aa4\u3002 Derived ( const Derived & d ) /* \u521d\u59cb\u5316 Derived \u7684\u6210\u54e1 */ { /*...*/ } \u4e0a\u9762\u9019\u6a23\u5beb\u7684\u6548\u679c\u662f\u559a\u8d77 Base \u7684 default \u5efa\u69cb\u5f0f\u5c07 base \u6210\u5206\u521d\u59cb\u5316\u3002\u5047\u8a2d Derived \u6210\u54e1\u521d\u59cb\u5316\u65b9\u5f0f\u662f\u5c07 d \u7684\u5c0d\u61c9\u6210\u54e1\u8907\u88fd\u904e\u4f86\uff0c\u90a3\u9ebc\u65b0\u5efa\u7269\u4ef6\u5c07\u8655\u65bc\u5947\u602a\u7684\u72c0\u614b:\u5176 Base \u6210\u5206\u653e\u7f6e\u9810\u8a2d\u503c\uff0c\u800c\u5176 Derived \u6210\u54e1\u662f\u53e6\u4e00\u7269\u4ef6\u7684\u8907\u88fd\u54c1\u3002","title":"\u5b9a\u7fa9 Derived \u7684 Copy \u5efa\u69cb\u5f0f"},{"location":"C%2B%2B/object_oriented_programming/#derived-class-assignment","text":"// Base::operator=(const Base&) \u4e0d\u6703\u88ab\u81ea\u52d5\u559a\u8d77 Derived & Derived :: operator = ( const Derived & rhs ) { if ( this != & rhs ) { Base :: operator = ( rhs ); // \u8ce6\u503c\u7d66 Base \u6210\u5206 // \u57f7\u884c \"\u6e05\u7406 derived \u6210\u5206\u820a\u503c\" \u6240\u9700\u7684\u4efb\u4f55\u52d5\u4f5c // \u8ce6\u503c\u7d66 derived \u6210\u54e1 } return * this ; }","title":"Derived Class \u7684 Assignment \u904b\u7b97\u5b50"},{"location":"C%2B%2B/object_oriented_programming/#derived-class-destructor","text":"\u89e3\u91cb\u7684\u904b\u4f5c\u65b9\u5f0f\u4e0d\u540c\u65bc copy \u5efa\u69cb\u5f0f\u548c assignment \u904b\u7b97\u5b50: \u5b83\u4e0d\u5fc5\u8ca0\u8cac\u6467\u6bc0\u5176 base \u7269\u4ef6\u6210\u54e1\u3002\u7de8\u8b6f\u5668\u7e3d\u662f\u6703\u96b1\u5bd3\u559a\u8d77 derived \u7269\u4ef6\u7684 base \u6210\u5206\u7684\u89e3\u69cb\u5f0f\u3002\u6bcf\u500b\u89e3\u69cb\u5f0f\u53ea\u9700\u8981\u6e05\u7406\u81ea\u5df1\u7684\u6210\u54e1: class Derived : public Base { public : // Base::~Base \u6703\u88ab\u81ea\u52d5\u559a\u8d77 ~ Derived () { /* \u6e05\u7406 derived \u6210\u54e1 */ } } \u7269\u4ef6\u7684\u92b7\u6bc0\u5c07\u4ee5 \"\u5efa\u69cb\u4e4b\u76f8\u53cd\u6b21\u5e8f\" \u9032\u884c\uff0c\u4e5f\u5c31\u662f derived \u89e3\u69cb\u5f0f\u5148\u57f7\u884c\uff0c\u7136\u5f8c\u559a\u8d77 base \u89e3\u69cb\u5f0f\uff0c\u4e26\u5411\u4e0a\u56de\u6714\u6574\u500b\u7e7c\u627f\u9ad4\u7cfb\u3002","title":"Derived Class \u7684\u89e3\u69cb\u5f0f (Destructor)"},{"location":"C%2B%2B/object_oriented_programming/#virtual","text":"\"Base \u89e3\u69cb\u5f0f\u6703\u81ea\u52d5\u88ab\u559a\u8d77\"\uff0c\u6b64\u4e00\u4e8b\u5be6\u5c0d base class \u7684\u8a2d\u8a08\u5e36\u4f86\u91cd\u8981\u5f71\u97ff\u3002 \u7576\u6211\u5011\u5c0d\u8457\u4e00\u500b\u6307\u5411\u52d5\u614b\u914d\u7f6e\u7269\u7684 pointer \u65bd\u884c delete \u6642\uff0c\u8a72\u7269\u4ef6\u7684\u8a18\u61b6\u9ad4\u88ab\u91cb\u653e\u524d\uff0c\u89e3\u69cb\u5f0f\u6703\u5148\u8d77\u4f86\u6e05\u7406\u7269\u4ef6\u3002\u8655\u7406\u7e7c\u627f\u9ad4\u7cfb\u7684\u7269\u4ef6\u6642\uff0cpointer \u7684\u975c\u614b\u578b\u5225\u53ef\u80fd\u4e0d\u540c\u65bc\u6b63\u88ab\u522a\u9664\u7684\u7269\u4ef6\u7684\u52d5\u614b\u578b\u5225\u3002\u6211\u5011\u53ef\u80fd\u65bd\u884c delete \u65bc\u4e00\u500b pointer to base-type\uff0c\u800c\u5f8c\u8005\u5be6\u969b\u6307\u5411\u4e00\u500b derived \u7269\u4ef6\u3002 \u5982\u679c\u6211\u5011\u5c0d pointer to base \u65bd\u884c delete \uff0c\u90a3\u9ebc base class \u89e3\u69cb\u5f0f\u6703\u88ab\u559a\u8d77\uff0c\u8ca0\u8cac\u6e05\u7406 base \u6210\u54e1\u3002\u5982\u679c\u6240\u6307\u7269\u4ef6\u5be6\u969b\u4e0a\u662f derived \u578b\u5225\uff0c\u5247\u4e0a\u8ff0\u884c\u70ba\u5c07\u4e0d\u660e\u78ba (undefined)\u3002\u82e5\u8981\u4fdd\u8b49\u559a\u8d77\u9069\u7576\u4e4b\u89e3\u69cb\u5f0f\uff0cbase class\u7684\u89e3\u69cb\u5f0f\u4e00\u5b9a\u5fc5\u9808\u662f virtual: class Item_base { public : virtual ~ Item_base () { } } \u5982\u679c\u89e3\u69cb\u5f0f\u662f virtual\uff0c\u7576\u5b83\u7d93\u7531 pointer \u88ab\u559a\u8d77\uff0c\u57f7\u884c\u8d77\u4f86\u7684\u89e3\u69cb\u5f0f\u6703\u4f9d pointer \u6240\u6307\u7269\u7684\u578b\u5225\u800c\u4e0d\u540c: Item_base * itemP = new Item_base ; // \u975c\u614b\u578b\u5225\u548c\u52d5\u614b\u578b\u5225\u76f8\u540c delete itemP ; // \u6c92\u554f\u984c: \u547c\u53eb Item_base \u7684\u89e3\u69cb\u5f0f itemP = new Bulk_item ; // \u6c92\u554f\u984c: \u975c\u614b\u578b\u5225\u548c\u52d5\u614b\u578b\u5225\u4e0d\u540c delete itemP ; // \u6c92\u554f\u984c: \u547c\u53eb Bulk_item \u7684\u89e3\u69cb\u5f0f \u91cd\u9ede: \u7e7c\u627f\u9ad4\u7cfb\u7684 root class \u61c9\u8a72\u5b9a\u7fa9\u4e00\u500b virtual \u89e3\u69cb\u5f0f\uff0c\u5373\u4f7f\u8a72\u89e3\u69cb\u5f0f\u7121\u4e8b\u53ef\u505a\u3002","title":"Virtual \u89e3\u69cb\u5f0f"},{"location":"C%2B%2B/object_oriented_programming/#assignment-virtual","text":"\u5c07 assignment \u904b\u7b97\u5b50\u8a2d\u70ba virtual \u53ef\u80fd\u6703\u5f15\u8d77\u7591\u60d1\uff0c\u56e0\u70ba virtual \u51fd\u5f0f\u5728 base class \u548c derived class \u5167\u5fc5\u9808\u64c1\u6709\u76f8\u540c\u7684\u53c3\u6578\u578b\u5225\u3002Base class \u7684 assignment \u904b\u7b97\u5b50\u63a5\u6536\u7684\u53c3\u6578\u662f\u500b reference \u6307\u5411\u81ea\u8eab class \u578b\u5225\u3002\u5982\u679c\u6b64\u904b\u7b97\u5b50\u70ba virtual\uff0c\u90a3\u9ebc\u6bcf\u500b derived classes \u90fd\u5c07\u7372\u5f97\u4e00\u500b virtual \u6210\u54e1\uff0c\u5b9a\u7fa9\u51fa \"\u4ee5 base \u7269\u4ef6\u70ba\u53c3\u6578\" \u7684 operator= \uff0c\u4f46\u90a3\u4e26\u4e0d\u7b49\u540c\u65bc derived class \u7684 assignment \u904b\u7b97\u5b50\u3002","title":"\u5efa\u69cb\u5f0f\u548c Assignment \u904b\u7b97\u5b50\u4e0d\u662f virtual"},{"location":"C%2B%2B/object_oriented_programming/#virtuals","text":"\u91cd\u9ede: \u5982\u679c\u5728\u5efa\u69cb\u6216\u89e3\u69cb\u5f0f\u4e2d\u547c\u53eb virtual \u51fd\u5f0f\uff0c\u559a\u8d77\u7684\u5c07\u662f\u5efa\u69cb\u6216\u89e3\u69cb\u5f0f\u6240\u5728\u578b\u5225\u6240\u5b9a\u7fa9\u7684\u7248\u672c\u3002 \u70ba\u4e86\u8981\u4e86\u89e3\u4e0a\u8ff0\u884c\u70ba\uff0c\u8a66\u8003\u616e virtual \u51fd\u5f0f\u7684 derived class \u7248\u672c\u88ab base class \u5efa\u69cb\u5f0f(\u6216\u89e3\u69cb\u5f0f)\u547c\u53eb\u3002\u6b64 virtual \u51fd\u5f0f\u7684 derived \u7248\u672c\u53ef\u80fd\u5b58\u53d6 derived \u7269\u4ef6\u6210\u54e1\uff0c\u7562\u7adf\u5982\u679c derived class \u7248\u672c\u4e0d\u9700\u8981\u4f7f\u7528 derived \u7269\u4ef6\u6210\u54e1\uff0c\u9019\u500b derived class \u53ef\u76f4\u63a5\u4f7f\u7528 base class \u7684 virtual \u51fd\u5f0f\u3002\u7136\u800c\u7576 base \u5efa\u69cb\u5f0f (\u6216\u89e3\u69cb\u5f0f) \u57f7\u884c\u6642\uff0c\u7269\u4ef6\u7684\u884d\u751f\u90e8\u7684\u6210\u54e1\u4e26\u672a\u521d\u59cb\u5316\u3002\u73fe\u5be6\u4e2d\u5982\u679c\u5141\u8a31\u9019\u7a2e\u5b58\u53d6\u52d5\u4f5c\uff0c\u7a0b\u5f0f\u6709\u53ef\u80fd\u7576\u6389\u3002","title":"\u7576 Virtuals \u51fa\u73fe\u5728\u5efa\u69cb\u5f0f\u548c\u89e3\u69cb\u5f0f\u5167"},{"location":"C%2B%2B/object_oriented_programming/#class","text":"\u7e7c\u627f\u6a5f\u5236\u4f7f\u5f97 class \u4f5c\u7528\u57df\u88ab\u968e\u5c64\u5f0f\u5730\u5d4c\u5957\u5806\u7f6e\uff0c\u7576\u6211\u5011\u5beb: Bulk_item bulk ; cout << bulk . book (); \u5c0d\u65bc\u540d\u7a31 book \u7684\u4f7f\u7528\u5c07\u9019\u9ebc\u6c7a\u8b70 (resolved): 1. bulk \u662f\u500b Bulk_item \u7269\u4ef6\u3002\u7de8\u8b6f\u5668\u65bc\u662f\u5728 Bulk_item class \u5167\u641c\u5c0b book \uff0c\u4f46\u627e\u4e0d\u5230\u3002 2. \u7531\u65bc Bulk_item \u884d\u751f\u81ea Item_base \uff0c\u7de8\u8b6f\u5668\u65bc\u662f\u641c\u5c0b Item_base class\uff0c\u627e\u5230\u4e86\u540d\u7a31 book \uff0c\u6c7a\u8b70\u6210\u529f\u3002","title":"\u7e7c\u627f\u4e0b\u7684 Class \u4f5c\u7528\u57df"},{"location":"C%2B%2B/object_oriented_programming/#name-collision","text":"\u91cd\u9ede: Derived class \u6210\u54e1\u5982\u679c\u8207 base class \u6210\u54e1\u540c\u540d\uff0c\u6703\u5c0d\u5f8c\u8005\u7522\u751f\u906e\u853d\u6548\u679c\uff0c\u4f7f\u5f8c\u8005\u7121\u6cd5\u88ab\u76f4\u63a5\u5b58\u53d6\u3002 struct Base { Base () : mem ( 0 ) {} protected : int mem ; // \u6703\u88ab\u906e\u853d }; struct Derived : Base { Derived ( int i ) : mem ( i ) { } int get_mem () { return mem ; } protected : int mem ; }; \u4e00\u65e6\u5728 get_mem() \u4e2d\u6307\u6d89 mem \uff0c\u6703\u88ab\u7de8\u8b6f\u5668\u8996\u70ba Derived \u5167\u7684\u540d\u7a31\u3002 Derived d ( 42 ); cout << g . get_mem () << endl ; // \u5370\u51fa 42","title":"\u540d\u7a31\u885d\u7a81 (Name Collision) \u548c\u7e7c\u627f"},{"location":"C%2B%2B/object_oriented_programming/#scope","text":"\u5982\u679c base \u548c derived class \u64c1\u6709\u76f8\u540c\u540d\u7a31\u7684\u6210\u54e1\u51fd\u5f0f\uff0c\u5176\u904b\u4f5c\u65b9\u5f0f\u5982\u540c\u6210\u54e1\u8b8a\u6578: derived \u4f5c\u7528\u57df\u5167\u7684\u6210\u54e1\u6703\u906e\u853d base class \u7684\u6210\u54e1\u3002 struct Base { int memfcn (); }; struct Derived : Base { int memfcn ( int ); } Derived d ; Base b ; b . memfcn (); // \u547c\u53eb Base::memfcn d . memfcn ( 10 ); // \u547c\u53eb Derived::memfcn d . memfcn (); // \u932f\u8aa4 : \u7121\u5f15\u6578\u7684 memfcn \u5df2\u88ab\u906e\u853d d . Base :: memfcn (); // \u6c92\u554f\u984c : \u547c\u53eb Base::memfcn \u91cd\u8981\u89c0\u5ff5: \u56de\u61b6\u4e00\u4e0b\uff0c\u5ba3\u544a\u65bc local \u4f5c\u7528\u57df\u7684\u51fd\u5f0f\uff0c\u4e26\u4e0d\u6703\u8207\u5b9a\u7fa9\u65bc global \u4f5c\u7528\u57df\u7684\u51fd\u5f0f\u5f62\u6210\u91cd\u8f09\u3002\u540c\u6a23\u9053\u7406\uff0c\u5b9a\u7fa9\u65bc derived class \u7684\u51fd\u5f0f\u4e0d\u6703\u8207 base \u5b9a\u7fa9\u7684\u51fd\u5f0f\u5f62\u6210\u91cd\u8f09\u3002","title":"\u4f5c\u7528\u57df (scope) \u8207\u6210\u54e1\u51fd\u5f0f"},{"location":"C%2B%2B/object_oriented_programming/#name-lookup","text":"\u4e86\u89e3 \"\u51fd\u5f0f\u547c\u53eb\u5982\u4f55\u88ab\u6c7a\u8b70\" \u5c0d\u65bc\u4e86\u89e3 C++ \u7e7c\u627f\u9ad4\u7cfb\u5341\u5206\u91cd\u8981\u3002\u6c7a\u8b70\u52d5\u4f5c\u4f9d\u4ee5\u4e0b\u56db\u6b65\u9a5f\u9032\u884c: 1. \u9996\u5148\u6c7a\u5b9a\u547c\u53eb\u8005 (object, reference \u6216 pointer) \u7684\u975c\u614b\u578b\u5225\u3002 2. \u5728\u4e0a\u8ff0 class \u5167\u641c\u5c0b\u8a72\u51fd\u5f0f\u3002\u5982\u679c\u6c92\u6709\u627e\u5230\uff0c\u5c31\u5f80\u6700\u63a5\u8fd1\u7684 (immediate) base class \u5c0b\u627e\uff0c\u5982\u6b64\u4e0a\u6714 classes \u7e7c\u627f\u93c8\uff0c\u76f4\u5230\u767c\u73fe\u8a72\u51fd\u5f0f\uff0c\u6216\u76f4\u81f3\u641c\u5c0b\u5230\u6700\u5f8c\u4e00\u500b class\u3002\u5982\u679c\u90fd\u6c92\u6709\u767c\u73fe\uff0c\u8868\u793a\u547c\u53eb\u6709\u8aa4\u3002 3. \u4e00\u65e6\u627e\u5230\u8a72\u540d\u7a31\uff0c\u5c31\u6839\u64da\u627e\u5230\u7684\u5b9a\u7fa9\u5f0f\u9032\u884c\u4e00\u822c\u7684\u578b\u5225\u6aa2\u9a57\uff0c\u6aa2\u67e5\u547c\u53eb\u52d5\u4f5c\u662f\u5426\u5408\u6cd5\u3002 4. \u82e5\u547c\u53eb\u5408\u6cd5\uff0c\u7de8\u8b6f\u5668\u8b8a\u7522\u51fa\u4e8c\u9032\u5236\u78bc\u3002\u5982\u679c\u51fd\u5f0f\u662f virtual\uff0c\u4e14\u4fc2\u900f\u904e reference \u6216 pointer \u88ab\u547c\u53eb\uff0c\u90a3\u9ebc\u7de8\u8b6f\u5668\u7522\u751f\u7684\u78bc\u6703\u6839\u64da\u7269\u4ef6\u7684\u52d5\u614b\u578b\u5225\u6c7a\u5b9a\u559a\u8d77\u54ea\u500b\u7248\u672c\u3002\u5426\u5247\u7de8\u8b6f\u5668\u7522\u751f\u7684\u78bc\u6703\u76f4\u63a5\u559a\u8d77\u8a72\u51fd\u5f0f\u3002","title":"\u95dc\u9375\u6982\u5ff5: \u540d\u7a31\u641c\u5c0b (Name Lookup) \u548c\u7e7c\u627f:"},{"location":"C%2B%2B/object_oriented_programming/#pure-virtual","text":"\u4e4b\u524d\u6240\u5beb\u7684 Disc_item class \u5448\u73fe\u4e00\u500b\u6709\u8da3\u7684\u554f\u984c: \u9019\u500b class \u5f9e Item_base \u7e7c\u627f\u5230 net_price() \uff0c\u4f46\u4e26\u672a\u91cd\u65b0\u5b9a\u7fa9\uff0c\u56e0\u70ba\u6c92\u5fc5\u8981\u3002\u9019\u500b class \u7684\u5b58\u5728\u53ea\u662f\u70ba\u4e86\u8b93\u5176\u4ed6 classes \u7e7c\u627f\u3002 class Disc_item : public Item_base { public : Disc_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Item_base ( book , sales_price ), quantity ( qty ), discount ( disc_rate ) { } protected : std :: size_t quantity ; // \u5f97\u4eab\u53d7\u6298\u6263\u7684\u81e8\u754c\u8cfc\u8cb7\u6578 double discount ; // \u6298\u6263\u7387 } class Bulk_item : public Disc_item { public : Bulk_item ( const std :: string & book = \"\" , double sales_price = 0.0 , std :: size_t qty = 0 , double disc_rate = 0.0 ) : Disc_item ( book , sales_price , qty , disc_rate ) { } // \u91cd\u65b0\u5b9a\u7fa9 base \u7248\u672c\uff0c\u4ee5\u5be6\u4f5c\u5927\u91cf\u63a1\u8cfc\u7684\u6298\u6263\u7b56\u7565 double net_price ( std :: size_t ) const ; }; \u6211\u5011\u4e0d\u5e0c\u671b\u7528\u6236\u5275\u5efa\u4efb\u4f55 Disc_item \u7269\u4ef6\u3002\u7136\u800c\u6211\u5011\u7121\u6cd5\u963b\u6b62\u7528\u6236\u5b9a\u7fa9\u4e00\u500b Disc_item \u7269\u4ef6\u3002\u5982\u679c\u7528\u6236\u771f\u7684\u5efa\u7acb\u4e00\u500b Disc_item \u7269\u4ef6\u4e26\u559a\u8d77 net_price() \uff0c\u6703\u8a08\u7b97\u51fa\u672a\u6253\u6298\u7684\u50f9\u683c\u3002 \u7d50\u8ad6\u662f\u6211\u5011\u6839\u672c\u4e0d\u5e0c\u671b\u7528\u6236\u5efa\u7acb\u9019\u7a2e\u7269\u4ef6\uff0c\u5982\u679c\u5c07 net_price() \u8a2d\u70ba pure virtual \u51fd\u5f0f\u5c31\u53ef\u4ee5\u9054\u5230\u76ee\u7684\u3002 class Disc_item : public Item_base { public : double net_price ( std :: size_t ) const = 0 ; }; \u9019\u88e1\u5c07 virtual \u51fd\u5f0f\u5b9a\u7fa9\u70ba pure virtual\uff0c\u610f\u5473\u6b64\u51fd\u5f0f\u63d0\u4f9b\u4e00\u500b\u4ecb\u9762\uff0c\u53ef\u8b93\u5f8c\u7e8c (\u884d\u751f) \u578b\u5225\u8986\u5beb\uff0c\u800c\u6b64 class \u5167\u7684\u7248\u672c\u6c38\u9060\u4e0d\u6703\u88ab\u559a\u8d77\u3002\u800c\u4e14\u7528\u6236\u7121\u6cd5\u5efa\u7acb Disc_item \u7269\u4ef6\u3002","title":"Pure Virtual (\u7d14\u865b\u64ec) \u51fd\u5f0f"},{"location":"C%2B%2B/object_oriented_programming/#_2","text":"\u5982\u679c class \u5167\u542b (\u6216\u7e7c\u627f) \u4e00\u500b\u4ee5\u4e0a\u7684 pure virtual \u51fd\u5f0f\uff0c\u4fbf\u7a31\u70ba\u6240\u8b02\u62bd\u8c61\u7684 (abstract) base class\u3002\u6211\u5011\u4e0d\u80fd\u70ba abstract \u578b\u5225\u5efa\u7acb\u4efb\u4f55\u7269\u4ef6\u3002 // Disc_item \u5167\u5ba3\u544a\u6709 pure virtual \u51fd\u5f0f Disc_item discounted ; // \u932f\u8aa4: \u4e0d\u80fd\u5b9a\u7fa9 (\u5efa\u7acb) Disc_item \u7269\u4ef6 Bulk_item bulk ; // \u6c92\u554f\u984c: Bulk_item \u5167\u542b Disc_item \u5b50\u7269\u4ef6","title":"\u91cd\u9ede:"},{"location":"C%2B%2B/q%26a/","text":"Q&A","title":"Q&A"},{"location":"C%2B%2B/q%26a/#qa","text":"","title":"Q&amp;A"},{"location":"C%2B%2B/smart_pointer/","text":"Smart Pointer In modern C++ programming, the Standard Library includes smart pointers, which are used to help ensure that programs are free of memory and resource leaks and are exception-safe. Uses for smart pointers Smart pointers are defined in the std namespace in the <memory> header file. They are crucial to the RAII or Resource Acquisition Is Initialization programming idiom. The main goal of this idiom is to ensure that resource acquisition occurs at the same time that the object is initialized, so that all resources for the object are created and made ready in one line of code. In practical terms, the main principle of RAII is to give ownership of any heap-allocated resource\u2014for example, dynamically-allocated memory or system object handles\u2014to a stack-allocated object whose destructor contains the code to delete or free the resource and also any associated cleanup code. In most cases, when you initialize a raw pointer or resource handle to point to an actual resource, pass the pointer to a smart pointer immediately. In modern C++, raw pointers are only used in small code blocks of limited scope, loops, or helper functions where performance is critical and there is no chance of confusion about ownership. The following example compares a raw pointer declaration to a smart pointer declaration. void UseRawPointer () { // Using a raw pointer -- not recommended. Song * pSong = new Song ( L \"Nothing on You\" , L \"Bruno Mars\" ); // Use pSong... // Don't forget to delete! delete pSong ; } void UseSmartPointer () { // Declare a smart pointer on stack and pass it the raw pointer. unique_ptr < Song > song2 ( new Song ( L \"Nothing on You\" , L \"Bruno Mars\" )); // Use song2... wstring s = song2 -> duration_ ; //... } // song2 is deleted automatically here. The C++ smart pointer idiom resembles object creation in languages such as C#: you create the object and then let the system take care of deleting it at the correct time. The difference is that no separate garbage collector runs in the background; memory is managed through the standard C++ scoping rules so that the runtime environment is faster and more efficient. class LargeObject { public : void DoSomething (){} }; void ProcessLargeObject ( const LargeObject & lo ){} void SmartPointerDemo () { // Create the object and pass it to a smart pointer std :: unique_ptr < LargeObject > pLarge ( new LargeObject ()); //Call a method on the object pLarge -> DoSomething (); // Pass a reference to a method. ProcessLargeObject ( * pLarge ); } //pLarge is deleted automatically when function block goes out of scope. Smart pointers have their own member functions, which are accessed by using \u201cdot\u201d notation. For example, some C++ Standard Library smart pointers have a reset member function that releases ownership of the pointer. This is useful when you want to free the memory owned by the smart pointer before the smart pointer goes out of scope, as shown in the following example. void SmartPointerDemo2 () { // Create the object and pass it to a smart pointer std :: unique_ptr < LargeObject > pLarge ( new LargeObject ()); //Call a method on the object pLarge -> DoSomething (); // Free the memory before we exit function block. pLarge . reset (); // Do some other work... } void SmartPointerDemo4 () { // Create the object and pass it to a smart pointer std :: unique_ptr < LargeObject > pLarge ( new LargeObject ()); //Call a method on the object pLarge -> DoSomething (); // Pass raw pointer to a legacy API LegacyLargeObjectFunction ( pLarge . get ()); } C++ Standard Library Smart Pointers unique_ptr : Allows exactly one owner of the underlying pointer. shared_ptr : Reference-counted smart pointer. Use when you want to assign one raw pointer to multiple owners. weak_ptr : Special-case smart pointer for use in conjunction with shared_ptr . A weak_ptr provides access to an object that is owned by one or more shared_ptr instances, but does not participate in reference counting. How to: Create and Use unique_ptr Instances A unique_ptr does not share its pointer. It cannot be copied to another unique_ptr , passed by value to a function, or used in any C++ Standard Library algorithm that requires copies to be made. A unique_ptr can only be moved. This means that the ownership of the memory resource is transferred to another unique_ptr and the original unique_ptr no longer owns it. The following example shows how to create unique_ptr instances and pass them between functions. unique_ptr < Song > SongFactory ( const std :: wstring & artist , const std :: wstring & title ) { // Implicit move operation into the variable that stores the result. return make_unique < Song > ( artist , title ); } void MakeSongs () { // Create a new unique_ptr with a new object. auto song = make_unique < Song > ( L \"Mr. Children\" , L \"Namonaki Uta\" ); // Use the unique_ptr. vector < wstring > titles = { song -> title }; // Move raw pointer from one unique_ptr to another. unique_ptr < Song > song2 = std :: move ( song ); // Obtain unique_ptr from function that returns by value. auto song3 = SongFactory ( L \"Michael Jackson\" , L \"Beat It\" ); } These examples demonstrate this basic characteristic of unique_ptr : it can be moved, but not copied. \"Moving\" transfers ownership to a new unique_ptr and resets the old unique_ptr . The following example shows how to create unique_ptr instances and use them in a vector. void SongVector () { vector < unique_ptr < Song >> songs ; // Create a few new unique_ptr<Song> instances // and add them to vector using implicit move semantics. songs . push_back ( make_unique < Song > ( L \"B'z\" , L \"Juice\" )); songs . push_back ( make_unique < Song > ( L \"Namie Amuro\" , L \"Funky Town\" )); songs . push_back ( make_unique < Song > ( L \"Kome Kome Club\" , L \"Kimi ga Iru Dake de\" )); songs . push_back ( make_unique < Song > ( L \"Ayumi Hamasaki\" , L \"Poker Face\" )); // Pass by const reference when possible to avoid copying. for ( const auto & song : songs ) { wcout << L \"Artist: \" << song -> artist << L \" Title: \" << song -> title << endl ; } } The following example shows how to initialize a unique_ptr that is a class member. class MyClass { private : // MyClass owns the unique_ptr. unique_ptr < ClassFactory > factory ; public : // Initialize by using make_unique with ClassFactory default constructor. MyClass () : factory ( make_unique < ClassFactory > ()) { } void MakeClass () { factory -> DoSomething (); } }; You can use make_unique to create a unique_ptr to an array, but you cannot use make_unique to initialize the array elements. // Create a unique_ptr to an array of 5 integers. auto p = make_unique < int [] > ( 5 ); // Initialize the array. for ( int i = 0 ; i < 5 ; ++ i ) { p [ i ] = i ; wcout << p [ i ] << endl ; } How to: Create and Use shared_ptr Instances The shared_ptr type is a smart pointer in the C++ standard library that is designed for scenarios in which more than one owner might have to manage the lifetime of the object in memory. After you initialize a shared_ptr you can copy it, pass it by value in function arguments, and assign it to other shared_ptr instances. All the instances point to the same object, and share access to one \"control block\" that increments and decrements the reference count whenever a new shared_ptr is added, goes out of scope, or is reset. When the reference count reaches zero, the control block deletes the memory resource and itself. Whenever possible, use the make_shared function to create a shared_ptr when the memory resource is created for the first time. make_shared is exception-safe. It uses the same call to allocate the memory for the control block and the resource, and thereby reduces the construction overhead. // Use make_shared function when possible. auto sp1 = make_shared < Song > ( L \"The Beatles\" , L \"Im Happy Just to Dance With You\" ); // Ok, but slightly less efficient. // Note: Using new expression as constructor argument // creates no named variable for other code to access. shared_ptr < Song > sp2 ( new Song ( L \"Lady Gaga\" , L \"Just Dance\" )); // When initialization must be separate from declaration, e.g. class members, // initialize with nullptr to make your programming intent explicit. shared_ptr < Song > sp5 ( nullptr ); //Equivalent to: shared_ptr<Song> sp5; //... sp5 = make_shared < Song > ( L \"Elton John\" , L \"I'm Still Standing\" ); The following example shows how to declare and initialize shared_ptr instances that take on shared ownership of an object that has already been allocated by another shared_ptr . Assume that sp2 is an initialized shared_ptr . //Initialize with copy constructor. Increments ref count. auto sp3 ( sp2 ); //Initialize via assignment. Increments ref count. auto sp4 = sp2 ; //Initialize with nullptr. sp7 is empty. shared_ptr < Song > sp7 ( nullptr ); // Initialize with another shared_ptr. sp1 and sp2 // swap pointers as well as ref counts. sp1 . swap ( sp2 ); shared_ptr is also helpful in C++ Standard Library containers when you are using algorithms that copy elements. You can wrap elements in a shared_ptr , and then copy it into other containers with the understanding that the underlying memory is valid as long as you need it, and no longer. The following example shows how to use the remove_copy_if algorithm on shared_ptr instances in a vector. vector < shared_ptr < Song >> v ; v . push_back ( make_shared < Song > ( L \"Bob Dylan\" , L \"The Times They Are A Changing\" )); v . push_back ( make_shared < Song > ( L \"Aretha Franklin\" , L \"Bridge Over Troubled Water\" )); v . push_back ( make_shared < Song > ( L \"Thala\" , L \"Entre El Mar y Una Estrella\" )); vector < shared_ptr < Song >> v2 ; remove_copy_if ( v . begin (), v . end (), back_inserter ( v2 ), [] ( shared_ptr < Song > s ) { return s -> artist . compare ( L \"Bob Dylan\" ) == 0 ; }); for ( const auto & s : v2 ) { wcout << s -> artist << L \":\" << s -> title << endl ; } output: Aretha Franklin:Bridge Over Troubled Water Thala:Entre El Mar y Una Estrella You can use dynamic_pointer_cast , static_pointer_cast , and const_pointer_cast to cast a shared_ptr . These functions resemble the dynamic_cast , static_cast , and const_cast operators. The following example shows how to test the derived type of each element in a vector of shared_ptr of base classes, and then copy the elements and display information about them. vector < shared_ptr < MediaAsset >> assets ; assets . push_back ( shared_ptr < Song > ( new Song ( L \"Himesh Reshammiya\" , L \"Tera Surroor\" ))); assets . push_back ( shared_ptr < Song > ( new Song ( L \"Penaz Masani\" , L \"Tu Dil De De\" ))); assets . push_back ( shared_ptr < Photo > ( new Photo ( L \"2011-04-06\" , L \"Redmond, WA\" , L \"Soccer field at Microsoft.\" ))); vector < shared_ptr < MediaAsset >> photos ; copy_if ( assets . begin (), assets . end (), back_inserter ( photos ), [] ( shared_ptr < MediaAsset > p ) -> bool { // Use dynamic_pointer_cast to test whether // element is a shared_ptr<Photo>. shared_ptr < Photo > temp = dynamic_pointer_cast < Photo > ( p ); return temp . get () != nullptr ; }); for ( const auto & p : photos ) { // We know that the photos vector contains only // shared_ptr<Photo> objects, so use static_cast. wcout << \"Photo location: \" << ( static_pointer_cast < Photo > ( p )) -> location_ << endl ; } output: Photo location: Soccer field at Microsoft. How to: Create and Use weak_ptr Instances Sometimes an object must store a way to access the underlying object of a shared_ptr without causing the reference count to be incremented. Typically, this situation occurs when you have cyclic references between shared_ptr instances. The following code example shows a case where weak_ptr is used to ensure proper deletion of objects that have circular dependencies. As you examine the example, assume that it was created only after alternative solutions were considered. The Controller objects represent some aspect of a machine process, and they operate independently. Each controller must be able to query the status of the other controllers at any time, and each one contains a private vector<weak_ptr<Controller>> for this purpose. Each vector contains a circular reference, and therefore, weak_ptr instances are used instead of shared_ptr . #include <iostream> #include <memory> #include <string> #include <vector> #include <algorithm> using namespace std ; class Controller { public : int Num ; wstring Status ; vector < weak_ptr < Controller >> others ; explicit Controller ( int i ) : Num ( i ) , Status ( L \"On\" ) { wcout << L \"Creating Controller\" << Num << endl ; } ~ Controller () { wcout << L \"Destroying Controller\" << Num << endl ; } // Demonstrates how to test whether the // pointed-to memory still exists or not. void CheckStatuses () const { for_each ( others . begin (), others . end (), [] ( weak_ptr < Controller > wp ) { try { auto p = wp . lock (); wcout << L \"Status of \" << p -> Num << \" = \" << p -> Status << endl ; } catch ( bad_weak_ptr b ) { wcout << L \"Null object\" << endl ; } }); } }; void RunTest () { vector < shared_ptr < Controller >> v ; v . push_back ( shared_ptr < Controller > ( new Controller ( 0 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 1 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 2 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 3 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 4 ))); // Each controller depends on all others not being deleted. // Give each controller a pointer to all the others. for ( int i = 0 ; i < v . size (); ++ i ) { for_each ( v . begin (), v . end (), [ v , i ] ( shared_ptr < Controller > p ) { if ( p -> Num != i ) { v [ i ] -> others . push_back ( weak_ptr < Controller > ( p )); wcout << L \"push_back to v[\" << i << \"]: \" << p -> Num << endl ; } }); } for_each ( v . begin (), v . end (), []( shared_ptr < Controller >& p ) { wcout << L \"use_count = \" << p . use_count () << endl ; p -> CheckStatuses (); }); } int main () { RunTest (); wcout << L \"Press any key\" << endl ; char ch ; cin . getline ( & ch , 1 ); } output: Creating Controller0 Creating Controller1 Creating Controller2 Creating Controller3 Creating Controller4 push_back to v[0]: 1 push_back to v[0]: 2 push_back to v[0]: 3 push_back to v[0]: 4 push_back to v[1]: 0 push_back to v[1]: 2 push_back to v[1]: 3 push_back to v[1]: 4 push_back to v[2]: 0 push_back to v[2]: 1 push_back to v[2]: 3 push_back to v[2]: 4 push_back to v[3]: 0 push_back to v[3]: 1 push_back to v[3]: 2 push_back to v[3]: 4 push_back to v[4]: 0 push_back to v[4]: 1 push_back to v[4]: 2 push_back to v[4]: 3 use_count = 1 Status of 1 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 1 Status of 0 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 1 Status of 0 = On Status of 1 = On Status of 3 = On Status of 4 = On use_count = 1 Status of 0 = O nStatus of 1 = On Status of 2 = On Status of 4 = On use_count = 1 Status of 0 = On Status of 1 = On Status of 2 = On Status of 3 = On Destroying Controller0 Destroying Controller1 Destroying Controller2 Destroying Controller3 Destroying Controller4 Press any key As an experiment, modify the vector others to be a vector<shared_ptr<Controller>> , and then in the output, notice that no destructors are invoked when TestRun returns. output: Creating Controller0 Creating Controller1 Creating Controller2 Creating Controller3 Creating Controller4 push_back to v[0]: 1 push_back to v[0]: 2 push_back to v[0]: 3 push_back to v[0]: 4 push_back to v[1]: 0 push_back to v[1]: 2 push_back to v[1]: 3 push_back to v[1]: 4 push_back to v[2]: 0 push_back to v[2]: 1 push_back to v[2]: 3 push_back to v[2]: 4 push_back to v[3]: 0 push_back to v[3]: 1 push_back to v[3]: 2 push_back to v[3]: 4 push_back to v[4]: 0 push_back to v[4]: 1 push_back to v[4]: 2 push_back to v[4]: 3 use_count = 5 Status of 1 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 1 = On Status of 3 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 1 = On Status of 2 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 1 = On Status of 2 = On Status of 3 = On Qt Smart Pointer Because Qt relies on a parent-child model to manage Qobject resources. It follows the composite + Chain-of-responsibility pattern, which is used from event management to memory management, drawing, file handling, etc.. Actually, trying to use a QObject in a shared\\unique pointer is overengineering... You have to supply a custom deleter which will call deleteLater Your qobject with parents already have a reference in the parent object. So you know that a object is not leaked as long as the parent exist. When you need to get rid of it, you can call deleteLater directly. Raw pointers to orphans However, when a QObject (or derived type) is created on the heap without a parent QObject things are very different. In that case you should not just hold a raw pointer, but a smart pointer. Smart pointers in Qt qt std QScopedPointer unique_ptr QSharedPointer shared_ptr QWeakPointer weak_ptr QPointer \u7e3d\u7d50 \u9996\u5148\u8003\u616e\u662f\u5426\u771f\u7684\u9700\u8981\u4f7f\u7528 pointer \u4f86\u5ba3\u544a\u9019\u500b\u8b8a\u6578 (\u975e\u5fc5\u8981\u7528 pointer, \u4f7f\u7528\u4e00\u822c\u8b8a\u6578\u5373\u53ef) \u5982\u679c\u771f\u7684\u9700\u8981\u4f7f\u7528 pointer \u4f55\u6642\u8a72\u4f7f\u7528 smart pointer \u9084\u662f\u8a72\u4f7f\u7528 raw pointer ? smart pointer: \u7576\u4f60\u7684\u7a0b\u5f0f\u78bc\u8a72\u638c\u63a7\u9019\u500b pointer \u7684\u64c1\u6709\u6b0a\u6642 (ownership)\uff0c new or delete \uff0c\u4f7f\u7528 smart pointer \u6703\u662f\u6bd4\u8f03\u597d\u7684\u505a\u6cd5\u3002 raw pointer: \u5728\u7a0b\u5f0f\u78bc\u88e1\u5f88\u591a\u5730\u65b9\u662f\u4e0d\u9700\u8981\u7406\u6703 pointer \u64c1\u6709\u6b0a (ownership)\uff0c \u5f88\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u5e38\u5e38\u5728 function \u88e1\u9762\uff0c\u4f60\u53ea\u6703\u53bb\u4f7f\u7528\u5230\u67d0\u500b\u50b3\u9032\u4f86\u7684 pointer\uff0c\u800c\u4e0d\u9700\u8981\u53bb new \u6216\u662f delete \u5b83\uff0c\u9019\u6642\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528 raw pointer\u3002 FAQ What's the difference between raw pointer and weak_ptr? What is Lambda expression?","title":"Smart Pointer"},{"location":"C%2B%2B/smart_pointer/#smart-pointer","text":"In modern C++ programming, the Standard Library includes smart pointers, which are used to help ensure that programs are free of memory and resource leaks and are exception-safe.","title":"Smart Pointer"},{"location":"C%2B%2B/smart_pointer/#uses-for-smart-pointers","text":"Smart pointers are defined in the std namespace in the <memory> header file. They are crucial to the RAII or Resource Acquisition Is Initialization programming idiom. The main goal of this idiom is to ensure that resource acquisition occurs at the same time that the object is initialized, so that all resources for the object are created and made ready in one line of code. In practical terms, the main principle of RAII is to give ownership of any heap-allocated resource\u2014for example, dynamically-allocated memory or system object handles\u2014to a stack-allocated object whose destructor contains the code to delete or free the resource and also any associated cleanup code. In most cases, when you initialize a raw pointer or resource handle to point to an actual resource, pass the pointer to a smart pointer immediately. In modern C++, raw pointers are only used in small code blocks of limited scope, loops, or helper functions where performance is critical and there is no chance of confusion about ownership. The following example compares a raw pointer declaration to a smart pointer declaration. void UseRawPointer () { // Using a raw pointer -- not recommended. Song * pSong = new Song ( L \"Nothing on You\" , L \"Bruno Mars\" ); // Use pSong... // Don't forget to delete! delete pSong ; } void UseSmartPointer () { // Declare a smart pointer on stack and pass it the raw pointer. unique_ptr < Song > song2 ( new Song ( L \"Nothing on You\" , L \"Bruno Mars\" )); // Use song2... wstring s = song2 -> duration_ ; //... } // song2 is deleted automatically here. The C++ smart pointer idiom resembles object creation in languages such as C#: you create the object and then let the system take care of deleting it at the correct time. The difference is that no separate garbage collector runs in the background; memory is managed through the standard C++ scoping rules so that the runtime environment is faster and more efficient. class LargeObject { public : void DoSomething (){} }; void ProcessLargeObject ( const LargeObject & lo ){} void SmartPointerDemo () { // Create the object and pass it to a smart pointer std :: unique_ptr < LargeObject > pLarge ( new LargeObject ()); //Call a method on the object pLarge -> DoSomething (); // Pass a reference to a method. ProcessLargeObject ( * pLarge ); } //pLarge is deleted automatically when function block goes out of scope. Smart pointers have their own member functions, which are accessed by using \u201cdot\u201d notation. For example, some C++ Standard Library smart pointers have a reset member function that releases ownership of the pointer. This is useful when you want to free the memory owned by the smart pointer before the smart pointer goes out of scope, as shown in the following example. void SmartPointerDemo2 () { // Create the object and pass it to a smart pointer std :: unique_ptr < LargeObject > pLarge ( new LargeObject ()); //Call a method on the object pLarge -> DoSomething (); // Free the memory before we exit function block. pLarge . reset (); // Do some other work... } void SmartPointerDemo4 () { // Create the object and pass it to a smart pointer std :: unique_ptr < LargeObject > pLarge ( new LargeObject ()); //Call a method on the object pLarge -> DoSomething (); // Pass raw pointer to a legacy API LegacyLargeObjectFunction ( pLarge . get ()); }","title":"Uses for smart pointers"},{"location":"C%2B%2B/smart_pointer/#c-standard-library-smart-pointers","text":"unique_ptr : Allows exactly one owner of the underlying pointer. shared_ptr : Reference-counted smart pointer. Use when you want to assign one raw pointer to multiple owners. weak_ptr : Special-case smart pointer for use in conjunction with shared_ptr . A weak_ptr provides access to an object that is owned by one or more shared_ptr instances, but does not participate in reference counting.","title":"C++ Standard Library Smart Pointers"},{"location":"C%2B%2B/smart_pointer/#how-to-create-and-use-unique_ptr-instances","text":"A unique_ptr does not share its pointer. It cannot be copied to another unique_ptr , passed by value to a function, or used in any C++ Standard Library algorithm that requires copies to be made. A unique_ptr can only be moved. This means that the ownership of the memory resource is transferred to another unique_ptr and the original unique_ptr no longer owns it. The following example shows how to create unique_ptr instances and pass them between functions. unique_ptr < Song > SongFactory ( const std :: wstring & artist , const std :: wstring & title ) { // Implicit move operation into the variable that stores the result. return make_unique < Song > ( artist , title ); } void MakeSongs () { // Create a new unique_ptr with a new object. auto song = make_unique < Song > ( L \"Mr. Children\" , L \"Namonaki Uta\" ); // Use the unique_ptr. vector < wstring > titles = { song -> title }; // Move raw pointer from one unique_ptr to another. unique_ptr < Song > song2 = std :: move ( song ); // Obtain unique_ptr from function that returns by value. auto song3 = SongFactory ( L \"Michael Jackson\" , L \"Beat It\" ); } These examples demonstrate this basic characteristic of unique_ptr : it can be moved, but not copied. \"Moving\" transfers ownership to a new unique_ptr and resets the old unique_ptr . The following example shows how to create unique_ptr instances and use them in a vector. void SongVector () { vector < unique_ptr < Song >> songs ; // Create a few new unique_ptr<Song> instances // and add them to vector using implicit move semantics. songs . push_back ( make_unique < Song > ( L \"B'z\" , L \"Juice\" )); songs . push_back ( make_unique < Song > ( L \"Namie Amuro\" , L \"Funky Town\" )); songs . push_back ( make_unique < Song > ( L \"Kome Kome Club\" , L \"Kimi ga Iru Dake de\" )); songs . push_back ( make_unique < Song > ( L \"Ayumi Hamasaki\" , L \"Poker Face\" )); // Pass by const reference when possible to avoid copying. for ( const auto & song : songs ) { wcout << L \"Artist: \" << song -> artist << L \" Title: \" << song -> title << endl ; } } The following example shows how to initialize a unique_ptr that is a class member. class MyClass { private : // MyClass owns the unique_ptr. unique_ptr < ClassFactory > factory ; public : // Initialize by using make_unique with ClassFactory default constructor. MyClass () : factory ( make_unique < ClassFactory > ()) { } void MakeClass () { factory -> DoSomething (); } }; You can use make_unique to create a unique_ptr to an array, but you cannot use make_unique to initialize the array elements. // Create a unique_ptr to an array of 5 integers. auto p = make_unique < int [] > ( 5 ); // Initialize the array. for ( int i = 0 ; i < 5 ; ++ i ) { p [ i ] = i ; wcout << p [ i ] << endl ; }","title":"How to: Create and Use unique_ptr Instances"},{"location":"C%2B%2B/smart_pointer/#how-to-create-and-use-shared_ptr-instances","text":"The shared_ptr type is a smart pointer in the C++ standard library that is designed for scenarios in which more than one owner might have to manage the lifetime of the object in memory. After you initialize a shared_ptr you can copy it, pass it by value in function arguments, and assign it to other shared_ptr instances. All the instances point to the same object, and share access to one \"control block\" that increments and decrements the reference count whenever a new shared_ptr is added, goes out of scope, or is reset. When the reference count reaches zero, the control block deletes the memory resource and itself. Whenever possible, use the make_shared function to create a shared_ptr when the memory resource is created for the first time. make_shared is exception-safe. It uses the same call to allocate the memory for the control block and the resource, and thereby reduces the construction overhead. // Use make_shared function when possible. auto sp1 = make_shared < Song > ( L \"The Beatles\" , L \"Im Happy Just to Dance With You\" ); // Ok, but slightly less efficient. // Note: Using new expression as constructor argument // creates no named variable for other code to access. shared_ptr < Song > sp2 ( new Song ( L \"Lady Gaga\" , L \"Just Dance\" )); // When initialization must be separate from declaration, e.g. class members, // initialize with nullptr to make your programming intent explicit. shared_ptr < Song > sp5 ( nullptr ); //Equivalent to: shared_ptr<Song> sp5; //... sp5 = make_shared < Song > ( L \"Elton John\" , L \"I'm Still Standing\" ); The following example shows how to declare and initialize shared_ptr instances that take on shared ownership of an object that has already been allocated by another shared_ptr . Assume that sp2 is an initialized shared_ptr . //Initialize with copy constructor. Increments ref count. auto sp3 ( sp2 ); //Initialize via assignment. Increments ref count. auto sp4 = sp2 ; //Initialize with nullptr. sp7 is empty. shared_ptr < Song > sp7 ( nullptr ); // Initialize with another shared_ptr. sp1 and sp2 // swap pointers as well as ref counts. sp1 . swap ( sp2 ); shared_ptr is also helpful in C++ Standard Library containers when you are using algorithms that copy elements. You can wrap elements in a shared_ptr , and then copy it into other containers with the understanding that the underlying memory is valid as long as you need it, and no longer. The following example shows how to use the remove_copy_if algorithm on shared_ptr instances in a vector. vector < shared_ptr < Song >> v ; v . push_back ( make_shared < Song > ( L \"Bob Dylan\" , L \"The Times They Are A Changing\" )); v . push_back ( make_shared < Song > ( L \"Aretha Franklin\" , L \"Bridge Over Troubled Water\" )); v . push_back ( make_shared < Song > ( L \"Thala\" , L \"Entre El Mar y Una Estrella\" )); vector < shared_ptr < Song >> v2 ; remove_copy_if ( v . begin (), v . end (), back_inserter ( v2 ), [] ( shared_ptr < Song > s ) { return s -> artist . compare ( L \"Bob Dylan\" ) == 0 ; }); for ( const auto & s : v2 ) { wcout << s -> artist << L \":\" << s -> title << endl ; } output: Aretha Franklin:Bridge Over Troubled Water Thala:Entre El Mar y Una Estrella You can use dynamic_pointer_cast , static_pointer_cast , and const_pointer_cast to cast a shared_ptr . These functions resemble the dynamic_cast , static_cast , and const_cast operators. The following example shows how to test the derived type of each element in a vector of shared_ptr of base classes, and then copy the elements and display information about them. vector < shared_ptr < MediaAsset >> assets ; assets . push_back ( shared_ptr < Song > ( new Song ( L \"Himesh Reshammiya\" , L \"Tera Surroor\" ))); assets . push_back ( shared_ptr < Song > ( new Song ( L \"Penaz Masani\" , L \"Tu Dil De De\" ))); assets . push_back ( shared_ptr < Photo > ( new Photo ( L \"2011-04-06\" , L \"Redmond, WA\" , L \"Soccer field at Microsoft.\" ))); vector < shared_ptr < MediaAsset >> photos ; copy_if ( assets . begin (), assets . end (), back_inserter ( photos ), [] ( shared_ptr < MediaAsset > p ) -> bool { // Use dynamic_pointer_cast to test whether // element is a shared_ptr<Photo>. shared_ptr < Photo > temp = dynamic_pointer_cast < Photo > ( p ); return temp . get () != nullptr ; }); for ( const auto & p : photos ) { // We know that the photos vector contains only // shared_ptr<Photo> objects, so use static_cast. wcout << \"Photo location: \" << ( static_pointer_cast < Photo > ( p )) -> location_ << endl ; } output: Photo location: Soccer field at Microsoft.","title":"How to: Create and Use shared_ptr Instances"},{"location":"C%2B%2B/smart_pointer/#how-to-create-and-use-weak_ptr-instances","text":"Sometimes an object must store a way to access the underlying object of a shared_ptr without causing the reference count to be incremented. Typically, this situation occurs when you have cyclic references between shared_ptr instances. The following code example shows a case where weak_ptr is used to ensure proper deletion of objects that have circular dependencies. As you examine the example, assume that it was created only after alternative solutions were considered. The Controller objects represent some aspect of a machine process, and they operate independently. Each controller must be able to query the status of the other controllers at any time, and each one contains a private vector<weak_ptr<Controller>> for this purpose. Each vector contains a circular reference, and therefore, weak_ptr instances are used instead of shared_ptr . #include <iostream> #include <memory> #include <string> #include <vector> #include <algorithm> using namespace std ; class Controller { public : int Num ; wstring Status ; vector < weak_ptr < Controller >> others ; explicit Controller ( int i ) : Num ( i ) , Status ( L \"On\" ) { wcout << L \"Creating Controller\" << Num << endl ; } ~ Controller () { wcout << L \"Destroying Controller\" << Num << endl ; } // Demonstrates how to test whether the // pointed-to memory still exists or not. void CheckStatuses () const { for_each ( others . begin (), others . end (), [] ( weak_ptr < Controller > wp ) { try { auto p = wp . lock (); wcout << L \"Status of \" << p -> Num << \" = \" << p -> Status << endl ; } catch ( bad_weak_ptr b ) { wcout << L \"Null object\" << endl ; } }); } }; void RunTest () { vector < shared_ptr < Controller >> v ; v . push_back ( shared_ptr < Controller > ( new Controller ( 0 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 1 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 2 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 3 ))); v . push_back ( shared_ptr < Controller > ( new Controller ( 4 ))); // Each controller depends on all others not being deleted. // Give each controller a pointer to all the others. for ( int i = 0 ; i < v . size (); ++ i ) { for_each ( v . begin (), v . end (), [ v , i ] ( shared_ptr < Controller > p ) { if ( p -> Num != i ) { v [ i ] -> others . push_back ( weak_ptr < Controller > ( p )); wcout << L \"push_back to v[\" << i << \"]: \" << p -> Num << endl ; } }); } for_each ( v . begin (), v . end (), []( shared_ptr < Controller >& p ) { wcout << L \"use_count = \" << p . use_count () << endl ; p -> CheckStatuses (); }); } int main () { RunTest (); wcout << L \"Press any key\" << endl ; char ch ; cin . getline ( & ch , 1 ); } output: Creating Controller0 Creating Controller1 Creating Controller2 Creating Controller3 Creating Controller4 push_back to v[0]: 1 push_back to v[0]: 2 push_back to v[0]: 3 push_back to v[0]: 4 push_back to v[1]: 0 push_back to v[1]: 2 push_back to v[1]: 3 push_back to v[1]: 4 push_back to v[2]: 0 push_back to v[2]: 1 push_back to v[2]: 3 push_back to v[2]: 4 push_back to v[3]: 0 push_back to v[3]: 1 push_back to v[3]: 2 push_back to v[3]: 4 push_back to v[4]: 0 push_back to v[4]: 1 push_back to v[4]: 2 push_back to v[4]: 3 use_count = 1 Status of 1 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 1 Status of 0 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 1 Status of 0 = On Status of 1 = On Status of 3 = On Status of 4 = On use_count = 1 Status of 0 = O nStatus of 1 = On Status of 2 = On Status of 4 = On use_count = 1 Status of 0 = On Status of 1 = On Status of 2 = On Status of 3 = On Destroying Controller0 Destroying Controller1 Destroying Controller2 Destroying Controller3 Destroying Controller4 Press any key As an experiment, modify the vector others to be a vector<shared_ptr<Controller>> , and then in the output, notice that no destructors are invoked when TestRun returns. output: Creating Controller0 Creating Controller1 Creating Controller2 Creating Controller3 Creating Controller4 push_back to v[0]: 1 push_back to v[0]: 2 push_back to v[0]: 3 push_back to v[0]: 4 push_back to v[1]: 0 push_back to v[1]: 2 push_back to v[1]: 3 push_back to v[1]: 4 push_back to v[2]: 0 push_back to v[2]: 1 push_back to v[2]: 3 push_back to v[2]: 4 push_back to v[3]: 0 push_back to v[3]: 1 push_back to v[3]: 2 push_back to v[3]: 4 push_back to v[4]: 0 push_back to v[4]: 1 push_back to v[4]: 2 push_back to v[4]: 3 use_count = 5 Status of 1 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 2 = On Status of 3 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 1 = On Status of 3 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 1 = On Status of 2 = On Status of 4 = On use_count = 5 Status of 0 = On Status of 1 = On Status of 2 = On Status of 3 = On","title":"How to: Create and Use weak_ptr Instances"},{"location":"C%2B%2B/smart_pointer/#qt-smart-pointer","text":"Because Qt relies on a parent-child model to manage Qobject resources. It follows the composite + Chain-of-responsibility pattern, which is used from event management to memory management, drawing, file handling, etc.. Actually, trying to use a QObject in a shared\\unique pointer is overengineering... You have to supply a custom deleter which will call deleteLater Your qobject with parents already have a reference in the parent object. So you know that a object is not leaked as long as the parent exist. When you need to get rid of it, you can call deleteLater directly.","title":"Qt Smart Pointer"},{"location":"C%2B%2B/smart_pointer/#raw-pointers-to-orphans","text":"However, when a QObject (or derived type) is created on the heap without a parent QObject things are very different. In that case you should not just hold a raw pointer, but a smart pointer.","title":"Raw pointers to orphans"},{"location":"C%2B%2B/smart_pointer/#smart-pointers-in-qt","text":"qt std QScopedPointer unique_ptr QSharedPointer shared_ptr QWeakPointer weak_ptr QPointer","title":"Smart pointers in Qt"},{"location":"C%2B%2B/smart_pointer/#_1","text":"\u9996\u5148\u8003\u616e\u662f\u5426\u771f\u7684\u9700\u8981\u4f7f\u7528 pointer \u4f86\u5ba3\u544a\u9019\u500b\u8b8a\u6578 (\u975e\u5fc5\u8981\u7528 pointer, \u4f7f\u7528\u4e00\u822c\u8b8a\u6578\u5373\u53ef) \u5982\u679c\u771f\u7684\u9700\u8981\u4f7f\u7528 pointer \u4f55\u6642\u8a72\u4f7f\u7528 smart pointer \u9084\u662f\u8a72\u4f7f\u7528 raw pointer ? smart pointer: \u7576\u4f60\u7684\u7a0b\u5f0f\u78bc\u8a72\u638c\u63a7\u9019\u500b pointer \u7684\u64c1\u6709\u6b0a\u6642 (ownership)\uff0c new or delete \uff0c\u4f7f\u7528 smart pointer \u6703\u662f\u6bd4\u8f03\u597d\u7684\u505a\u6cd5\u3002 raw pointer: \u5728\u7a0b\u5f0f\u78bc\u88e1\u5f88\u591a\u5730\u65b9\u662f\u4e0d\u9700\u8981\u7406\u6703 pointer \u64c1\u6709\u6b0a (ownership)\uff0c \u5f88\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u5e38\u5e38\u5728 function \u88e1\u9762\uff0c\u4f60\u53ea\u6703\u53bb\u4f7f\u7528\u5230\u67d0\u500b\u50b3\u9032\u4f86\u7684 pointer\uff0c\u800c\u4e0d\u9700\u8981\u53bb new \u6216\u662f delete \u5b83\uff0c\u9019\u6642\u5019\u5c31\u53ef\u4ee5\u4f7f\u7528 raw pointer\u3002","title":"\u7e3d\u7d50"},{"location":"C%2B%2B/smart_pointer/#faq","text":"What's the difference between raw pointer and weak_ptr? What is Lambda expression?","title":"FAQ"},{"location":"C%2B%2B/template/","text":"Template and Generic Programming \u6240\u8b02\u6cdb\u578b\u7de8\u7a0b (generic programming)\uff0c\u610f\u5473\u4ee5 \"\u7368\u7acb\u65bc\u4efb\u4f55\u7279\u5b9a\u76ee\u6a19\u578b\u5225\" \u7684\u65b9\u5f0f\u64b0\u5beb\u7a0b\u5f0f\u3002\u4f7f\u7528\u9019\u7a2e\u7a0b\u5f0f\u6642\u7528\u6236\u5fc5\u9808\u63d0\u4f9b\u6b32\u64cd\u4f5c\u7684\u76ee\u6a19\u578b\u6703\u76ee\u6a19\u503c\u3002 \u6cdb\u578b\u7de8\u7a0b (GP)\uff0c\u4e00\u5982\u7269\u4ef6\u5c0e\u5411\u7de8\u7a0b (OOP)\uff0c\u4ea6\u501a\u8cf4\u67d0\u7a2e\u5f62\u5f0f\u7684\u591a\u578b\u3002OOP \u7684\u591a\u578b\u4e43\u662f\u5728\u57f7\u884c\u671f\u65bd\u884c \"\u4ee5\u7e7c\u627f\u95dc\u4fc2\u76f8\u9023\u7684 classes\"\u3002\u6cdb\u578b\u7de8\u7a0b\u5247\u662f\u8b93\u6211\u5011\u6240\u5beb\u7684 classes \u548c functions \u5728\u7de8\u8b6f\u671f\u65bc\u5f7c\u6b64\u4e0d\u76f8\u5e72\u7684\u76ee\u6a19\u578b\u5225\u4e4b\u9593\u5c55\u73fe\u591a\u578b\u3002\u55ae\u4e00 class \u6216 function \u53ef\u7528\u4f86\u64cd\u63a7\u5404\u578b\u7269\u4ef6\u3002C++ \u6a19\u6e96\u5eab\u7684\u5bb9\u5668\uff0c\u758a\u4ee3\u5668\u548c\u6f14\u7b97\u6cd5\u90fd\u662f\u6cdb\u578b\u7de8\u7a0b\u7684\u6975\u4f73\u4f8b\u5b50\u3002 Template (\u6a21\u677f) \u662f\u6cdb\u578b\u7de8\u7a0b\u7684\u57fa\u77f3\u3002\u6240\u8b02 template \u662f \"\u5efa\u7acb class \u6216 function \u7684\u85cd\u5716\u6216\u65b9\u7a0b\u5f0f\"\u3002 \u4f8b\u5982 C++ \u6a19\u6e96\u5eab\u5b9a\u7fa9\u4e86\u4e00\u500b class template \u8868\u73fe\u51fa vector \u610f\u7fa9\uff0c\u9019\u500b template \u53ef\u88ab\u7528\u4f86\u7522\u751f\u4efb\u610f\u6578\u91cf\u7684 \"\u67d0\u76ee\u6a19\u578b\u5225\u5c08\u5c6c\" \u7684 vector classes\uff0c\u50cf\u662f vector<int> \u6216 vector<string> \u3002 Template \u53c3\u6578\u5217 template < typename T > int compare ( const T & v1 , const T & v2 ) { if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; } Template \u53c3\u6578\u4ee3\u8868 \"\u53ef\u5728 class \u6216 function \u5b9a\u7fa9\u5f0f\u4e2d\u4f7f\u7528\u7684\u578b\u5225\u6216\u662f\u6578\u503c\"\u3002\u4f8b\u5982\u6211\u5011\u7684 compare \u51fd\u5f0f\u5ba3\u544a\u4e86\u4e00\u500b T \u7684\u578b\u5225\u53c3\u6578\u3002 compare \u5b9a\u7fa9\u5f0f\u5167\u53ef\u4ee5\u4f7f\u7528 T \u6307\u7a31\u67d0\u500b\u578b\u5225\u3002\u81f3\u65bc T \u6240\u4ee3\u8868\u7684\u5be6\u969b\u578b\u5225\u7531\u7de8\u8b6f\u5668\u6839\u64da\u7528\u6236\u6307\u5b9a\u800c\u5b9a\u3002 Template \u53c3\u6578\u53ef\u4ee5\u662f\u4ee3\u8868\u578b\u5225\u7684\u6240\u8b02 type \u53c3\u6578 \uff0c\u6216\u662f\u4ee3\u8868\u5e38\u6578\u7b97\u5f0f\u7684\u6240\u8b02 nontype \u53c3\u6578 \u3002 \u4f7f\u7528 Function Template \u4f7f\u7528 function template \u6642\uff0c\u7de8\u8b6f\u5668\u6703\u63a8\u5c0e\u5c07\u5c1a\u672a\u78ba\u5b9a\u7684 template \u5f15\u6578 \u7d81\u5b9a\u65bc template \u53c3\u6578\u4e0a\u3002\u4e00\u65e6\u5224\u5225\u51fa template \u5f15\u6578\uff0c\u7de8\u8b6f\u5668\u5c31\u70ba\u6211\u5011\u5c07 function template \u5177\u73fe (instantiate) \u51fa\u4e00\u4efd\u5be6\u9ad4\u3002 \u63a8\u5c0e\u51fa\u5be6\u969b\u7684 templates \u5f15\u6578\u5f8c\uff0c\u7de8\u8b6f\u5668\u5c31\u5c07\u90a3\u4e9b\u5f15\u6578\u81f3\u65bc\u5c0d\u61c9\u7684 template \u53c3\u6578\u4f4d\u7f6e\u7136\u5f8c\u7522\u51fa\u8a72\u51fd\u5f0f\u7684\u4e00\u500b\u7248\u672c\u4e26\u7de8\u8b6f\u4e4b\u3002\u63db\u53e5\u8a71\u8aaa\u7de8\u8b6f\u5668\u63a5\u7ba1\u4e86 \"\u70ba\u6240\u7528\u7684\u6bcf\u4e00\u500b\u76ee\u6a19\u578b\u5225 (\u518d\u4e00\u6b21) \u64b0\u5beb\u51fd\u5f0f\" \u9019\u6a23\u7684\u4e4f\u5473\u5de5\u4f5c\u3002 int main () { // T \u662f int // \u7de8\u8b6f\u5668\u5177\u73fe\u51fa int compare(const int&, const int&) cout << compare ( 1 , 0 ) << endl ; string str_1 ( \"hi\" ); string str_2 ( \"world\" ); // T \u662f string // \u7de8\u8b6f\u5668\u5177\u73fe\u51fa int compare(const string&, const string&) cout << compare ( str_1 , str_2 ) << endl ; return 0 ; } \u4f7f\u7528 Class Template \u548c\u547c\u53eb function template \u4e0d\u540c\uff0c\u4f7f\u7528 class template \u6642\u6211\u5011\u5fc5\u9808\u660e\u78ba\u6307\u51fa template \u53c3\u6578\u7684\u5f15\u6578: Queue < int > q1 ; Queue < vector < double >> qc ; Queue < string > qs ; Template \u53c3\u6578 \u5c31\u50cf\u662f\u51fd\u5f0f\u53c3\u6578\u4e00\u6a23\uff0c\u7a0b\u5f0f\u54e1\u70ba template \u53c3\u6578\u6240\u9078\u7684\u540d\u7a31\u4e26\u7121\u672c\u8cea\u4e0a\u7684\u610f\u7fa9\u3002\u5148\u524d\u4f8b\u5b50\u4e2d\u6211\u5011\u5c07 compare() \u7684 template type \u53c3\u6578\u547d\u540d\u70ba T \uff0c\u4f46\u4e5f\u53ef\u4ee5\u53d6\u5176\u4ed6\u4efb\u4f55\u547d\u540d: template < typename Glorp > int compare ( const Glorp & v1 , const Glorp & v2 ) { if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; } \u9019\u6bb5\u7a0b\u5f0f\u78bc\u5b9a\u7fa9\u7684 compare template \u8207\u5148\u524d\u5b8c\u5168\u76f8\u540c\u3002 Template \u53c3\u6578\u7684\u4f5c\u7528\u57df (scope) Template \u53c3\u6578\u9075\u5faa\u4e00\u822c\u540d\u7a31\u7684\u906e\u853d\u898f\u5247\u3002\u5982\u679c\u5b83\u8207 global \u4f5c\u7528\u57df\u5167\u7684\u7269\u4ef6\uff0c\u51fd\u5f0f\uff0c\u6216\u578b\u5225\u7684\u540d\u7a31\u76f8\u540c\uff0c\u6703\u906e\u853d global \u4f5c\u7528\u57df\u5167\u7684\u540d\u7a31: typedef double T ; template < class T > T clac ( const T & a , const T & b ) { // tmp \u7684\u578b\u5225\u662f template \u53c3\u6578 T // \u800c\u975e global \u4f5c\u7528\u57df\u5167\u7684\u90a3\u500b typedef T tmp = a ; // ... return tmp ; } Template \u5ba3\u544a\u5f0f \u5982\u540c\u5176\u4ed6 class \u6216\u51fd\u5f0f\uff0c\u6211\u5011\u53ef\u4ee5\u5ba3\u544a\u4e00\u500b template\uff0c\u800c\u4e0d\u5b9a\u7fa9\u5b83\u3002 Template \u53c3\u6578\u7684\u540d\u7a31\u518d\u540c\u4e00\u500b template \u7684 (\u591a\u500b) \u5ba3\u544a\u5f0f\u548c\u5b9a\u7fa9\u5f0f\u4e4b\u9593\u4e0d\u9700\u76f8\u540c\u3002 template < class T > T calc ( const T & , const T & ); template < class U > U calc ( const U & , const U & ); template < class Type > Type calc ( const Type & a , const Type & b ) { /*...*/ } \u95dc\u9375\u5b57 typename \u548c class \u4e4b\u9593\u5340\u5225 \u95dc\u9375\u5b57 typename \u548c class \u7684\u610f\u7fa9\u76f8\u540c\uff0c\u53ef\u4e92\u63db\u4f7f\u7528\u3002 typename \u7684\u610f\u7fa9\u53ef\u80fd\u6bd4 class \u66f4\u76f4\u89ba\u4e00\u4e9b\uff0c\u4e0d\u904e\u9019\u500b\u95dc\u9375\u5b57\u76f4\u5230\u6a19\u6e96 C++ \u624d\u52a0\u5165\uff0c\u820a\u7a0b\u5f0f\u53ef\u80fd\u53ea\u6703\u4f7f\u7528\u95dc\u9375\u5b57 class \u3002 \u5728 Template \u5b9a\u7fa9\u5f0f\u4e2d\u8868\u660e\u578b\u5225 \u7576\u6211\u5011\u60f3\u5728 function template \u4e2d\u4f7f\u7528\u67d0\u7a2e\u578b\u5225\uff0c\u6211\u5011\u5fc5\u9808\u544a\u8a34\u7de8\u8b6f\u5668\u6211\u5011\u6240\u5beb\u7684\u540d\u7a31\u4ee3\u8868\u4e00\u500b\u578b\u5225\u3002\u56e0\u70ba\u7de8\u8b6f\u5668 (\u4ee5\u53ca\u95b1\u8b80\u7a0b\u5f0f\u78bc\u7684\u4eba) \u7121\u6cd5\u6aa2\u9a57 \"\u7531 type \u53c3\u6578\u6240\u5b9a\u7fa9\u7684\u540d\u7a31\" \u5f0f\u500b\u578b\u5225\u9084\u662f\u500b\u6578\u503c\u3002\u4f8b\u5982: template < class Parm , class U > Parm fcn ( Parm * array , U value ) { Parm :: size_type * p ; // \u5982\u679c Parm::size_type \u662f\u500b\u578b\u5225\uff0c\u9019\u5c31\u662f\u500b\u5ba3\u544a // \u5982\u679c Parm::size_type \u662f\u500b\u7269\u4ef6\uff0c\u9019\u5c31\u662f\u500b\u4e58\u6cd5\u904b\u7b97 } \u6211\u5011\u4e0d\u77e5\u9053 size_type \u662f\u500b\u578b\u5225\u540d\u7a31\u9084\u662f\u500b\u6210\u54e1\u8b8a\u6578\u3002\u9810\u8a2d\u60c5\u6cc1\u4e0b\u7de8\u8b6f\u5668\u6703\u5047\u8a2d\u4ed6\u662f\u500b\u6210\u54e1\u8b8a\u6578\u800c\u4e0d\u662f\u578b\u5225\u3002 \u5982\u679c\u6211\u5011\u60f3\u8b93\u7de8\u8b6f\u5668\u628a size_type \u8996\u70ba\u578b\u5225\uff0c\u5fc5\u9808\u660e\u78ba\u544a\u8a34\u7de8\u8b6f\u5668: template < class Parm , class U > Parm fcn ( Parm * array , U value ) { typename Parm :: size_type * p ; // OK: \u5c07 p \u5ba3\u544a\u70ba\u6307\u6a19 } \u5728\u6210\u54e1\u540d\u7a31\u4e4b\u524d\u52a0\u4e0a\u95dc\u9375\u5b57 typename \uff0c\u4fbf\u544a\u8a34\u7de8\u8b6f\u5668\u5c07\u8a72\u6210\u54e1\u8996\u70ba\u4e00\u500b\u578b\u5225\u3002 Template \u7684 non-type \u53c3\u6578 \u7576\u51fd\u5f0f\u88ab\u547c\u53eb\uff0c non-type \u53c3\u6578\u6703\u88ab\u6578\u503c\u66ff\u4ee3\u3002\u8a72\u6578\u503c\u7684\u578b\u5225\u88ab\u5177\u9ad4\u6307\u660e\u65bc template \u53c3\u6578\u5217\u3002\u4f8b\u5982\u4ee5\u4e0b\u7684 function template \u5ba3\u544a array_init() \u64c1\u6709\u4e00\u500b type \u53c3\u6578\u548c\u4e00\u500b non-type \u53c3\u6578\uff0c\u4e26\u63a5\u6536\u552f\u4e00\u53c3\u6578\uff0c\u662f\u500b reference to array: template < class T , size_t N > void array_init ( T ( & parm )[ N ]) { for ( size_t i = 0 ; i != N ; ++ i ) { parm [ i ] = 0 ; } } \u7de8\u5beb\u6cdb\u578b\u7a0b\u5f0f (Generic Programs) \u5982\u679c\u6211\u5011\u5728\u4e0d\u652f\u63f4 < \u904b\u7b97\u5b50\u7684\u7269\u4ef6\u8eab\u4e0a\u547c\u53eb compare() \uff0c\u547c\u53eb\u52d5\u4f5c\u5c31\u4e0d\u5408\u6cd5: Sales_item item1 , item2 ; // \u932f\u8aa4: Sales_item \u4e0d\u652f\u63f4 < cout << compare ( item1 , item2 ) << endl ; Sales_item \u672a\u5b9a\u7fa9 < \u904b\u7b97\u5b50\uff0c\u7a0b\u5f0f\u7121\u6cd5\u901a\u904e\u7de8\u8b6f\u3002 \"function template\" \u5167\u57f7\u884c\u90a3\u4e9b\u64cd\u4f5c\" \u6703\u9020\u6210\u76ee\u6a19\u578b\u5225\u7684\u7bc4\u570d\u53d7\u5230\u4fb7\u9650\uff0c\u7a0b\u5f0f\u54e1\u61c9\u8a72\u4fdd\u8b49\uff0c\u4f5c\u70ba\u76ee\u6a19\u578b\u5225\u7684\u90a3\u500b\u5f15\u6578\uff0c\u5176\u578b\u5225\u5fc5\u9808\u652f\u63f4 function template \u5167\u4f7f\u7528\u7684\u4efb\u4f55\u64cd\u4f5c\uff0c\u800c\u4e14\u9019\u4e9b\u64cd\u4f5c\u5728 (template \u5167\u7684) \u4f7f\u7528\u8a9e\u5883\u4e2d\u5747\u6709\u6b63\u5e38\u884c\u70ba\u3002 \u64b0\u5beb\u578b\u5225\u7368\u7acb\u78bc (type-independent code) \u64b0\u5beb\u512a\u79c0\u6cdb\u578b\u78bc\u7684\u6280\u8853\uff0c\u5df2\u7d93\u8d85\u51fa\u672c\u8ab2\u7a0b\u7684\u7bc4\u7587\u3002\u7136\u800c\u6709\u500b\u6574\u9ad4\u6027\u6e96\u5247\u503c\u5f97\u4e00\u63d0\u3002 \u6211\u5011\u7684 compare() \u96d6\u7136\u7c21\u55ae\uff0c\u537b\u4e5f\u5c55\u793a\u4e86\u6cdb\u578b\u78bc\u7684\u5169\u500b\u91cd\u8981\u7684\u64b0\u5beb\u539f\u5247: - \u9019\u500b function template \u7684\u53c3\u6578\u662f const reference\u3002 - \u4e3b\u9ad4\u5167\u7684\u6e2c\u8a66\u53ea\u4f7f\u7528 < \u9032\u884c\u5927\u5c0f\u6bd4\u8f03\u3002 \u6709\u4e9b\u8b80\u8005\u53ef\u80fd\u6703\u8a8d\u70ba\u5927\u5c0f\u6bd4\u8f03\u52d5\u4f5c\u5982\u679c\u4ee5 < \u548c > \u904b\u7b97\u5b50\u57f7\u884c\uff0c\u6703\u66f4\u81ea\u7136: if ( v1 < v2 ) return -1 ; if ( v1 > v2 ) return 1 ; return 0 ; \u7136\u800c\u82e5\u5beb\u6210\u9019\u6a23: if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; \u5c31\u662f\u6e1b\u5c11 \"\u5c0d\u5f15\u6578\u578b\u5225\u7684\u9700\u6c42\u91cf\"\u3002\u5728\u9019\uff0c\u5f15\u6578\u578b\u5225\u5fc5\u9808\u652f\u63f4 < \u4f46\u4e0d\u5fc5\u540c\u6642\u652f\u63f4 > \u3002 \u91cd\u9ede \u64b0\u5beb template \u7a0b\u5f0f\u78bc\u6642\uff0c\u82e5\u80fd\u76e1\u91cf\u6e1b\u5c11 \"\u5c0d\u5f15\u6578\u578b\u5225\u7684\u9700\u6c42\"\uff0c\u5c07\u6703\u5341\u5206\u6709\u5229\u3002 \u5177\u73fe\u5316 (Instantiation) Template \u662f\u4e00\u4efd\u85cd\u5716\uff0c\u4ed6\u672c\u8eab\u4e26\u975e class \u6216 function\u3002\u7de8\u8b6f\u5668\u6703\u6839\u64da template \u7522\u51fa\u5c0d\u61c9\u4e4b class \u6216 function \u7684\u7279\u5b9a\u7248\u672c\u3002\u70ba template \u7522\u51fa\u4e00\u4efd\u91dd\u5c0d\u7279\u5b9a\u76ee\u6a19\u578b\u5225\u7684\u5be6\u9ad4\uff0c\u9019\u500b\u904e\u7a0b\u4fbf\u662f\u6240\u8b02\u7684\u5177\u73fe\u5316 (instantiation)\u3002 Template \u5f15\u6578\u63a8\u5c0e (Argument Deduction) \u7b2c\u4e00\u500b\u547c\u53eb\u5f0f compare(1,0) \u7684\u5f15\u6578\u578b\u5225\u70ba int \uff0c\u7b2c\u4e8c\u500b\u547c\u53eb\u5f0f compare(3.14, 2.7) \u7684\u5f15\u6578\u578b\u5225\u70ba double \u3002\"\u4ee5\u51fd\u5f0f\u5f15\u6578\u6c7a\u5b9a template \u5f15\u6578\u7684\u578b\u5225\u548c\u503c\" \u7684\u904e\u7a0b\u7a31\u70ba template \u5f15\u6578\u63a8\u5c0e \"\u4ee5 type \u53c3\u6578\u70ba\u578b\u5225\" \u7684\u5f15\u6578\u8eab\u4e0a\u7684\u6709\u9650\u8f49\u63db short s1 , s2 ; int i1 , i2 ; compare ( i1 , i2 ); // \u6c92\u554f\u984c: \u5177\u73fe\u51fa compare(int, int) compare ( s1 , s2 ); // \u6c92\u554f\u984c: \u5177\u73fe\u51fa compare(short, short) \u5982\u679c compare(int, int) \u662f\u4e00\u500b\u4e00\u822c\u7684 non-template \u51fd\u5f0f\uff0c\u90a3\u9ebc\u80fd\u5920\u6eff\u8db3\u4e0a\u8ff0\u7b2c\u4e8c\u500b\u547c\u53eb\u5f0f\uff0c\u56e0\u70ba short \u5f15\u6578\u6703\u88ab\u6649\u5347\u70ba int \u3002\u4f46\u56e0\u70ba compare() \u662f\u500b template\uff0c\u6240\u4ee5\u4e0a\u8ff0\u7b2c\u4e8c\u500b\u547c\u53eb\u5f0f\u6703\u5177\u73fe\u51fa\u65b0\u51fd\u5f0f\uff0c\u5176 type \u53c3\u6578\u88ab\u7d81\u65bc short \u3002 \u4e00\u822c\u800c\u8a00\u51fd\u5f0f\u5f15\u6578\u4e26\u4e0d\u6703\u70ba\u4e86 \"\u8207\u67d0\u500b\u73fe\u6709\u5177\u73fe\u9ad4\u5951\u5408\" \u800c\u88ab\u8f49\u63db\u3002\u5be6\u969b\u767c\u751f\u7684\u662f\u53e6\u5916\u7522\u751f\u4e00\u500b\u65b0\u7684\u5177\u73fe\u9ad4\u3002\u53ea\u6709\u5169\u7a2e\u8f49\u63db\u6703\u8a98\u4f7f\u7de8\u8b6f\u5668\u57f7\u884c\u800c\u4e0d\u7522\u751f\u65b0\u5177\u73fe\u9ad4\u3002 - const \u8f49\u63db: - \u51fd\u5f0f\u5982\u679c\u63a5\u6536 reference to const \u6216 pointer to const\uff0c\u7528\u6236\u53ef\u4ee5\u7528 reference to non-const \u6216 pointer to non-const \u547c\u53eb\u4e4b\uff0c\u4e0d\u6703\u7522\u751f\u65b0\u5177\u73fe\u9ad4\u3002\u5982\u679c\u51fd\u5f0f\u63a5\u6536\u7684\u662f non-reference \u578b\u5225\uff0c\u90a3\u9ebc\u53c3\u6578\u578b\u5225\u548c\u5f15\u6578\u7684 const \u90fd\u6703\u88ab\u5ffd\u7565\u3002\u63db\u53e5\u8a71\u8aaa\u5982\u679c\u51fd\u5f0f\u88ab\u5b9a\u7fa9\u70ba\u63a5\u6536 non-reference\uff0c\u7121\u8ad6\u6211\u5011\u50b3\u5165 const \u6216 non-const \u7269\u4ef6\uff0c\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4efd\u5177\u73fe\u9ad4\u3002 - array(\u6216 function) \u5c0d pointer \u7684\u8f49\u63db: - \u5982\u679c template \u53c3\u6578\u4e0d\u662f reference \u578b\u5225\uff0c\u90a3\u9ebc \"\u4e00\u822c\u7684 pointer \u8f49\u63db\" \u6703\u65bd\u884c\u65bc \"array \u578b\u5225\u6216 function \u578b\u5225\" \u7684\u5f15\u6578\u8eab\u4e0a\u3002array \u5f15\u6578\u6703\u88ab\u8996\u70ba\u4e00\u500b pointer \u6307\u5411\u5176\u7b2c\u4e00\u5143\u7d20\uff0cfunction \u5f15\u6578\u5247\u88ab\u8996\u70ba\u4e00\u500b pointer \u6307\u5411\u8a72\u51fd\u5f0f\u3002 template < typename T > T fobj ( T , T ); // \u5f15\u6578\u6703\u88ab\u8907\u88fd template < typename T > T fref ( const T & , const T & ); // reference \u5f15\u6578 string s1 ( \"a value\" ); const string s2 ( \"another value\" ); fobj ( s1 , s2 ); // \u6c92\u554f\u984c: \u547c\u53eb f(string, string)\uff0cconst \u88ab\u5ffd\u7565 fref ( s1 , s2 ); // \u6c92\u554f\u984c: non-const \u7269\u4ef6 s1 \u88ab\u8f49\u63db\u70ba const reference int a [ 10 ], b [ 42 ]; fobj ( a , b ); // \u6c92\u554f\u984c: \u547c\u53eb f(int*, int*) fref ( a , b ); // \u932f\u8aa4: array\u578b\u5225\u672a\u5951\u5408\uff0c\u5f15\u6578\u672a\u88ab\u8f49\u63db\u70ba pointer Function-Template \u7684\u986f\u5f0f\u5f15\u6578 (Explicit Arguments) \u8003\u616e\u4ee5\u4e0b\u554f\u984c\uff0c\u6211\u5011\u60f3\u5b9a\u7fa9\u4e00\u500b\u540d\u70ba sum \u7684 function template\uff0c\u63a5\u6536\u5169\u500b\u4e0d\u540c\u578b\u5225\u7684\u5f15\u6578\u3002\u6211\u5011\u60f3\u8b93\u8fd4\u56de\u578b\u5225\u7684\u5927\u5c0f\u8db3\u5920\u5bb9\u7d0d \"\u4ee5\u4efb\u610f\u9806\u5e8f\u50b3\u5165\u7684\u4efb\u610f\u5169\u500b\u578b\u5225\u503c\u7684\u5408\"\u3002 // \u8fd4\u56de\u578b\u5225\u8a72\u5beb T \u9084\u662f U ? template < class T , class U > ??? sum ( T , U ); \u7b54\u6848\u662f: \u63a1\u7528\u5176\u4e2d\u4efb\u4f55\u4e00\u500b\uff0c\u90fd\u6703\u5728\u67d0\u4e9b\u6642\u5019\u51fa\u554f\u984c: sum ( 3 , 4L ); // \u7b2c\u4e8c\u500b\u578b\u5225\u6bd4\u8f03\u5927: \u6211\u5011\u5e0c\u671b\u5beb\u51fa U sum(T, U) sum ( 3L , 4 ); // \u7b2c\u4e00\u500b\u578b\u5225\u6bd4\u8f03\u5927: \u6211\u5011\u5e0c\u671b\u5beb\u51fa T sum(T, U) \u89e3\u6c7a\u65b9\u6cd5\u6709\u5169\u7a2e\uff0c\u7b2c\u4e00\u7a2e\u662f\u5f37\u8feb sum() \u7528\u6236\u5c07\u8f03\u5c0f\u7684\u578b\u5225\u5f37\u5236\u8f49\u578b\u81f3\u6211\u5011\u60f3\u8981\u7684\u7d50\u679c\u578b\u5225: int i , short s ; sum ( static_cast < int > ( s ), i ) // \u6c92\u554f\u984c: \u5177\u73fe\u5316 int sum(int, int) \u7b2c\u4e8c\u7a2e\u89e3\u6c7a\u65b9\u6cd5\u5f0f\u5f15\u9032\u7b2c\u4e09\u500b template \u53c3\u6578\uff0c\u6b64\u53c3\u6578\u5fc5\u9808\u7531\u547c\u53eb\u8005\u660e\u78ba\u6307\u5b9a: template < class T1 , class T2 , class T3 > T1 sum ( T2 , T3 ); \u9019\u552f\u4e00\u7684\u7f3a\u9ede\u662f: \u6c92\u6709\u4efb\u4f55\u51fd\u5f0f\u5f15\u6578\u53ef\u4ee5\u7528\u4f86\u63a8\u5c0e T1 \u578b\u5225\u3002\u56e0\u6b64\u7528\u6236\u6bcf\u6b21\u547c\u53eb sum \u6642\u90fd\u5fc5\u9808\u70ba T1 \u53c3\u6578\u660e\u78ba\u63d0\u4f9b\u5f15\u6578\u3002 long val3 = sum < long > ( i , lng ); // \u6c92\u554f\u984c: \u547c\u53eb\u7684\u662f long sum(int, long) \u986f\u5f0f\u5f15\u6578\u548c Pointer to Function Template template < typename T > int compare ( const T & , const T & ); // func \u91cd\u8f09\u7248\u672c: \u5404\u81ea\u63a5\u6536\u4e0d\u540c\u7684 function pointer \u578b\u5225 void func ( int ( * )( const string & , const string & )); void func ( int ( * )( const int & , const int & )); func ( compare < int > ); // \u6c92\u554f\u984c: \u660e\u78ba\u6307\u51fa\u8981\u54ea\u500b compare \u7248\u672c Template \u7684\u7de8\u8b6f\u6a21\u578b(Compilation Models) \u7576\u6211\u5011\u547c\u53eb\u51fd\u5f0f\u6642\uff0c\u7de8\u8b6f\u5668\u901a\u5e38\u53ea\u9700\u5728\u7576\u6642\u898b\u904e\u51fd\u5f0f\u5ba3\u544a\u5373\u53ef\u3002\u540c\u6a23\u9053\u7406\uff0c\u7576\u6211\u5011\u5b9a\u7fa9 class \u7269\u4ef6\u6642\uff0c\u8a72 class \u7684\u5b9a\u7fa9\u5f0f\u5fc5\u9808\u53ef\u898b\uff0c\u4f46\u5176\u6210\u54e1\u51fd\u5f0f\u7684\u5b9a\u7fa9\u5f0f\u4e0d\u9700\u5728\u5834\u3002\u56e0\u6b64\u6211\u5011\u628a class \u5b9a\u7fa9\u5f0f\u548c\u51fd\u5f0f\u5ba3\u544a\u653e\u5728\u6a19\u982d\u6a94\u5167\uff0c\u628a\u4e00\u822c\u51fd\u5f0f\u548c class \u6210\u54e1\u51fd\u5f0f\u7684\u5b9a\u7fa9\u653e\u5728\u6e90\u78bc\u6a94 (source files) \u5167\u3002 \u4f46\u662f template \u5c31\u4e0d\u540c\u4e86\uff0c\u6b32\u7522\u751f\u4e00\u500b\u5177\u73fe\u9ad4\uff0c\u7de8\u8b6f\u5668\u5fc5\u9808\u80fd\u5920\u53d6\u5f97 template \u7684\u6e90\u78bc\u3002\u7576\u6211\u5011\u547c\u53eb function template \u6216 \"class template \u7684\u6210\u54e1\u51fd\u5f0f\" \u6642\uff0c\u7de8\u8b6f\u5668\u9700\u8981\u90a3\u4e9b\u51fd\u5f0f\u7684\u5b9a\u7fa9\uff0c\u800c\u90a3\u4e9b\u5b9a\u7fa9\u5f0f\u4e00\u822c\u90fd\u88ab\u81f3\u65bc\u6e90\u78bc\u6a94\u3002 \u70ba\u4e86\u7de8\u8b6f template \u7a0b\u5f0f\u78bc\uff0c\u6709\u4ee5\u4e0b\u4e09\u7a2e\u65b9\u6cd5: 1. \u53ef\u5c07 class \u5b9a\u7fa9\u5f0f\u548c\u51fd\u5f0f\u5ba3\u544a\uff0c\u51fd\u5f0f\u548c\u6210\u54e1\u7684\u5b9a\u7fa9\u5168\u90e8\u90fd\u653e\u5230\u6a19\u982d\u6a94 2. \"\u7f6e\u5165\u5f0f\u7de8\u8b6f\u6a21\u578b\"(inclusion compilation model) 3. \"\u5206\u96e2\u5f0f\u7de8\u8b6f\u6a21\u578b\"(separate compilation model) 2, 3\u7a2e\u7a0b\u5f0f\u7684\u67b6\u69cb\u65b9\u5f0f\u5927\u9ad4\u76f8\u540c: class \u5b9a\u7fa9\u5f0f\u548c\u51fd\u5f0f\u5ba3\u544a\u5f0f\u81f3\u65bc\u6a19\u982d\u6a94\uff0c\u51fd\u5f0f\u548c\u6210\u54e1\u5b9a\u7fa9\u653e\u5728\u6e90\u78bc\u6a94\u3002\u5e7e\u4e4e\u6240\u6709\u7de8\u8b6f\u5668\u90fd\u652f\u63f4\u7b2c 2 \u7a2e\uff0c\u7b2c 3 \u7a2e\u53ea\u6709\u5c11\u6578\u7de8\u8b6f\u5668\u652f\u63f4\u3002 \u7f6e\u5165\u5f0f\u7de8\u8b6f\u6a21\u578b(Inclusion Compilation Model) // \u6a19\u982d\u6a94 utilities.h #ifndef UTILITIES_H // header guard #define UTILITIES_H template < class T > int compare ( const T & , const T & ); //... #include \"utilities.cpp\" // \u53d6\u5f97 compare \u548c\u5176\u4ed6\u51fd\u5f0f\u7684\u5b9a\u7fa9 #endif // \u5be6\u4f5c\u6a94 utilities.cpp template < class T > int compare ( const T & v1 , const T & v2 ) { if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; }","title":"Template and Generic Programming"},{"location":"C%2B%2B/template/#template-and-generic-programming","text":"\u6240\u8b02\u6cdb\u578b\u7de8\u7a0b (generic programming)\uff0c\u610f\u5473\u4ee5 \"\u7368\u7acb\u65bc\u4efb\u4f55\u7279\u5b9a\u76ee\u6a19\u578b\u5225\" \u7684\u65b9\u5f0f\u64b0\u5beb\u7a0b\u5f0f\u3002\u4f7f\u7528\u9019\u7a2e\u7a0b\u5f0f\u6642\u7528\u6236\u5fc5\u9808\u63d0\u4f9b\u6b32\u64cd\u4f5c\u7684\u76ee\u6a19\u578b\u6703\u76ee\u6a19\u503c\u3002 \u6cdb\u578b\u7de8\u7a0b (GP)\uff0c\u4e00\u5982\u7269\u4ef6\u5c0e\u5411\u7de8\u7a0b (OOP)\uff0c\u4ea6\u501a\u8cf4\u67d0\u7a2e\u5f62\u5f0f\u7684\u591a\u578b\u3002OOP \u7684\u591a\u578b\u4e43\u662f\u5728\u57f7\u884c\u671f\u65bd\u884c \"\u4ee5\u7e7c\u627f\u95dc\u4fc2\u76f8\u9023\u7684 classes\"\u3002\u6cdb\u578b\u7de8\u7a0b\u5247\u662f\u8b93\u6211\u5011\u6240\u5beb\u7684 classes \u548c functions \u5728\u7de8\u8b6f\u671f\u65bc\u5f7c\u6b64\u4e0d\u76f8\u5e72\u7684\u76ee\u6a19\u578b\u5225\u4e4b\u9593\u5c55\u73fe\u591a\u578b\u3002\u55ae\u4e00 class \u6216 function \u53ef\u7528\u4f86\u64cd\u63a7\u5404\u578b\u7269\u4ef6\u3002C++ \u6a19\u6e96\u5eab\u7684\u5bb9\u5668\uff0c\u758a\u4ee3\u5668\u548c\u6f14\u7b97\u6cd5\u90fd\u662f\u6cdb\u578b\u7de8\u7a0b\u7684\u6975\u4f73\u4f8b\u5b50\u3002 Template (\u6a21\u677f) \u662f\u6cdb\u578b\u7de8\u7a0b\u7684\u57fa\u77f3\u3002\u6240\u8b02 template \u662f \"\u5efa\u7acb class \u6216 function \u7684\u85cd\u5716\u6216\u65b9\u7a0b\u5f0f\"\u3002 \u4f8b\u5982 C++ \u6a19\u6e96\u5eab\u5b9a\u7fa9\u4e86\u4e00\u500b class template \u8868\u73fe\u51fa vector \u610f\u7fa9\uff0c\u9019\u500b template \u53ef\u88ab\u7528\u4f86\u7522\u751f\u4efb\u610f\u6578\u91cf\u7684 \"\u67d0\u76ee\u6a19\u578b\u5225\u5c08\u5c6c\" \u7684 vector classes\uff0c\u50cf\u662f vector<int> \u6216 vector<string> \u3002","title":"Template and Generic Programming"},{"location":"C%2B%2B/template/#template","text":"template < typename T > int compare ( const T & v1 , const T & v2 ) { if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; } Template \u53c3\u6578\u4ee3\u8868 \"\u53ef\u5728 class \u6216 function \u5b9a\u7fa9\u5f0f\u4e2d\u4f7f\u7528\u7684\u578b\u5225\u6216\u662f\u6578\u503c\"\u3002\u4f8b\u5982\u6211\u5011\u7684 compare \u51fd\u5f0f\u5ba3\u544a\u4e86\u4e00\u500b T \u7684\u578b\u5225\u53c3\u6578\u3002 compare \u5b9a\u7fa9\u5f0f\u5167\u53ef\u4ee5\u4f7f\u7528 T \u6307\u7a31\u67d0\u500b\u578b\u5225\u3002\u81f3\u65bc T \u6240\u4ee3\u8868\u7684\u5be6\u969b\u578b\u5225\u7531\u7de8\u8b6f\u5668\u6839\u64da\u7528\u6236\u6307\u5b9a\u800c\u5b9a\u3002 Template \u53c3\u6578\u53ef\u4ee5\u662f\u4ee3\u8868\u578b\u5225\u7684\u6240\u8b02 type \u53c3\u6578 \uff0c\u6216\u662f\u4ee3\u8868\u5e38\u6578\u7b97\u5f0f\u7684\u6240\u8b02 nontype \u53c3\u6578 \u3002","title":"Template \u53c3\u6578\u5217"},{"location":"C%2B%2B/template/#function-template","text":"\u4f7f\u7528 function template \u6642\uff0c\u7de8\u8b6f\u5668\u6703\u63a8\u5c0e\u5c07\u5c1a\u672a\u78ba\u5b9a\u7684 template \u5f15\u6578 \u7d81\u5b9a\u65bc template \u53c3\u6578\u4e0a\u3002\u4e00\u65e6\u5224\u5225\u51fa template \u5f15\u6578\uff0c\u7de8\u8b6f\u5668\u5c31\u70ba\u6211\u5011\u5c07 function template \u5177\u73fe (instantiate) \u51fa\u4e00\u4efd\u5be6\u9ad4\u3002 \u63a8\u5c0e\u51fa\u5be6\u969b\u7684 templates \u5f15\u6578\u5f8c\uff0c\u7de8\u8b6f\u5668\u5c31\u5c07\u90a3\u4e9b\u5f15\u6578\u81f3\u65bc\u5c0d\u61c9\u7684 template \u53c3\u6578\u4f4d\u7f6e\u7136\u5f8c\u7522\u51fa\u8a72\u51fd\u5f0f\u7684\u4e00\u500b\u7248\u672c\u4e26\u7de8\u8b6f\u4e4b\u3002\u63db\u53e5\u8a71\u8aaa\u7de8\u8b6f\u5668\u63a5\u7ba1\u4e86 \"\u70ba\u6240\u7528\u7684\u6bcf\u4e00\u500b\u76ee\u6a19\u578b\u5225 (\u518d\u4e00\u6b21) \u64b0\u5beb\u51fd\u5f0f\" \u9019\u6a23\u7684\u4e4f\u5473\u5de5\u4f5c\u3002 int main () { // T \u662f int // \u7de8\u8b6f\u5668\u5177\u73fe\u51fa int compare(const int&, const int&) cout << compare ( 1 , 0 ) << endl ; string str_1 ( \"hi\" ); string str_2 ( \"world\" ); // T \u662f string // \u7de8\u8b6f\u5668\u5177\u73fe\u51fa int compare(const string&, const string&) cout << compare ( str_1 , str_2 ) << endl ; return 0 ; }","title":"\u4f7f\u7528 Function Template"},{"location":"C%2B%2B/template/#class-template","text":"\u548c\u547c\u53eb function template \u4e0d\u540c\uff0c\u4f7f\u7528 class template \u6642\u6211\u5011\u5fc5\u9808\u660e\u78ba\u6307\u51fa template \u53c3\u6578\u7684\u5f15\u6578: Queue < int > q1 ; Queue < vector < double >> qc ; Queue < string > qs ;","title":"\u4f7f\u7528 Class Template"},{"location":"C%2B%2B/template/#template_1","text":"\u5c31\u50cf\u662f\u51fd\u5f0f\u53c3\u6578\u4e00\u6a23\uff0c\u7a0b\u5f0f\u54e1\u70ba template \u53c3\u6578\u6240\u9078\u7684\u540d\u7a31\u4e26\u7121\u672c\u8cea\u4e0a\u7684\u610f\u7fa9\u3002\u5148\u524d\u4f8b\u5b50\u4e2d\u6211\u5011\u5c07 compare() \u7684 template type \u53c3\u6578\u547d\u540d\u70ba T \uff0c\u4f46\u4e5f\u53ef\u4ee5\u53d6\u5176\u4ed6\u4efb\u4f55\u547d\u540d: template < typename Glorp > int compare ( const Glorp & v1 , const Glorp & v2 ) { if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; } \u9019\u6bb5\u7a0b\u5f0f\u78bc\u5b9a\u7fa9\u7684 compare template \u8207\u5148\u524d\u5b8c\u5168\u76f8\u540c\u3002","title":"Template \u53c3\u6578"},{"location":"C%2B%2B/template/#template-scope","text":"Template \u53c3\u6578\u9075\u5faa\u4e00\u822c\u540d\u7a31\u7684\u906e\u853d\u898f\u5247\u3002\u5982\u679c\u5b83\u8207 global \u4f5c\u7528\u57df\u5167\u7684\u7269\u4ef6\uff0c\u51fd\u5f0f\uff0c\u6216\u578b\u5225\u7684\u540d\u7a31\u76f8\u540c\uff0c\u6703\u906e\u853d global \u4f5c\u7528\u57df\u5167\u7684\u540d\u7a31: typedef double T ; template < class T > T clac ( const T & a , const T & b ) { // tmp \u7684\u578b\u5225\u662f template \u53c3\u6578 T // \u800c\u975e global \u4f5c\u7528\u57df\u5167\u7684\u90a3\u500b typedef T tmp = a ; // ... return tmp ; }","title":"Template \u53c3\u6578\u7684\u4f5c\u7528\u57df (scope)"},{"location":"C%2B%2B/template/#template_2","text":"\u5982\u540c\u5176\u4ed6 class \u6216\u51fd\u5f0f\uff0c\u6211\u5011\u53ef\u4ee5\u5ba3\u544a\u4e00\u500b template\uff0c\u800c\u4e0d\u5b9a\u7fa9\u5b83\u3002 Template \u53c3\u6578\u7684\u540d\u7a31\u518d\u540c\u4e00\u500b template \u7684 (\u591a\u500b) \u5ba3\u544a\u5f0f\u548c\u5b9a\u7fa9\u5f0f\u4e4b\u9593\u4e0d\u9700\u76f8\u540c\u3002 template < class T > T calc ( const T & , const T & ); template < class U > U calc ( const U & , const U & ); template < class Type > Type calc ( const Type & a , const Type & b ) { /*...*/ }","title":"Template \u5ba3\u544a\u5f0f"},{"location":"C%2B%2B/template/#typename-class","text":"\u95dc\u9375\u5b57 typename \u548c class \u7684\u610f\u7fa9\u76f8\u540c\uff0c\u53ef\u4e92\u63db\u4f7f\u7528\u3002 typename \u7684\u610f\u7fa9\u53ef\u80fd\u6bd4 class \u66f4\u76f4\u89ba\u4e00\u4e9b\uff0c\u4e0d\u904e\u9019\u500b\u95dc\u9375\u5b57\u76f4\u5230\u6a19\u6e96 C++ \u624d\u52a0\u5165\uff0c\u820a\u7a0b\u5f0f\u53ef\u80fd\u53ea\u6703\u4f7f\u7528\u95dc\u9375\u5b57 class \u3002","title":"\u95dc\u9375\u5b57 typename \u548c class \u4e4b\u9593\u5340\u5225"},{"location":"C%2B%2B/template/#template_3","text":"\u7576\u6211\u5011\u60f3\u5728 function template \u4e2d\u4f7f\u7528\u67d0\u7a2e\u578b\u5225\uff0c\u6211\u5011\u5fc5\u9808\u544a\u8a34\u7de8\u8b6f\u5668\u6211\u5011\u6240\u5beb\u7684\u540d\u7a31\u4ee3\u8868\u4e00\u500b\u578b\u5225\u3002\u56e0\u70ba\u7de8\u8b6f\u5668 (\u4ee5\u53ca\u95b1\u8b80\u7a0b\u5f0f\u78bc\u7684\u4eba) \u7121\u6cd5\u6aa2\u9a57 \"\u7531 type \u53c3\u6578\u6240\u5b9a\u7fa9\u7684\u540d\u7a31\" \u5f0f\u500b\u578b\u5225\u9084\u662f\u500b\u6578\u503c\u3002\u4f8b\u5982: template < class Parm , class U > Parm fcn ( Parm * array , U value ) { Parm :: size_type * p ; // \u5982\u679c Parm::size_type \u662f\u500b\u578b\u5225\uff0c\u9019\u5c31\u662f\u500b\u5ba3\u544a // \u5982\u679c Parm::size_type \u662f\u500b\u7269\u4ef6\uff0c\u9019\u5c31\u662f\u500b\u4e58\u6cd5\u904b\u7b97 } \u6211\u5011\u4e0d\u77e5\u9053 size_type \u662f\u500b\u578b\u5225\u540d\u7a31\u9084\u662f\u500b\u6210\u54e1\u8b8a\u6578\u3002\u9810\u8a2d\u60c5\u6cc1\u4e0b\u7de8\u8b6f\u5668\u6703\u5047\u8a2d\u4ed6\u662f\u500b\u6210\u54e1\u8b8a\u6578\u800c\u4e0d\u662f\u578b\u5225\u3002 \u5982\u679c\u6211\u5011\u60f3\u8b93\u7de8\u8b6f\u5668\u628a size_type \u8996\u70ba\u578b\u5225\uff0c\u5fc5\u9808\u660e\u78ba\u544a\u8a34\u7de8\u8b6f\u5668: template < class Parm , class U > Parm fcn ( Parm * array , U value ) { typename Parm :: size_type * p ; // OK: \u5c07 p \u5ba3\u544a\u70ba\u6307\u6a19 } \u5728\u6210\u54e1\u540d\u7a31\u4e4b\u524d\u52a0\u4e0a\u95dc\u9375\u5b57 typename \uff0c\u4fbf\u544a\u8a34\u7de8\u8b6f\u5668\u5c07\u8a72\u6210\u54e1\u8996\u70ba\u4e00\u500b\u578b\u5225\u3002","title":"\u5728 Template \u5b9a\u7fa9\u5f0f\u4e2d\u8868\u660e\u578b\u5225"},{"location":"C%2B%2B/template/#template-non-type","text":"\u7576\u51fd\u5f0f\u88ab\u547c\u53eb\uff0c non-type \u53c3\u6578\u6703\u88ab\u6578\u503c\u66ff\u4ee3\u3002\u8a72\u6578\u503c\u7684\u578b\u5225\u88ab\u5177\u9ad4\u6307\u660e\u65bc template \u53c3\u6578\u5217\u3002\u4f8b\u5982\u4ee5\u4e0b\u7684 function template \u5ba3\u544a array_init() \u64c1\u6709\u4e00\u500b type \u53c3\u6578\u548c\u4e00\u500b non-type \u53c3\u6578\uff0c\u4e26\u63a5\u6536\u552f\u4e00\u53c3\u6578\uff0c\u662f\u500b reference to array: template < class T , size_t N > void array_init ( T ( & parm )[ N ]) { for ( size_t i = 0 ; i != N ; ++ i ) { parm [ i ] = 0 ; } }","title":"Template \u7684 non-type \u53c3\u6578"},{"location":"C%2B%2B/template/#generic-programs","text":"\u5982\u679c\u6211\u5011\u5728\u4e0d\u652f\u63f4 < \u904b\u7b97\u5b50\u7684\u7269\u4ef6\u8eab\u4e0a\u547c\u53eb compare() \uff0c\u547c\u53eb\u52d5\u4f5c\u5c31\u4e0d\u5408\u6cd5: Sales_item item1 , item2 ; // \u932f\u8aa4: Sales_item \u4e0d\u652f\u63f4 < cout << compare ( item1 , item2 ) << endl ; Sales_item \u672a\u5b9a\u7fa9 < \u904b\u7b97\u5b50\uff0c\u7a0b\u5f0f\u7121\u6cd5\u901a\u904e\u7de8\u8b6f\u3002 \"function template\" \u5167\u57f7\u884c\u90a3\u4e9b\u64cd\u4f5c\" \u6703\u9020\u6210\u76ee\u6a19\u578b\u5225\u7684\u7bc4\u570d\u53d7\u5230\u4fb7\u9650\uff0c\u7a0b\u5f0f\u54e1\u61c9\u8a72\u4fdd\u8b49\uff0c\u4f5c\u70ba\u76ee\u6a19\u578b\u5225\u7684\u90a3\u500b\u5f15\u6578\uff0c\u5176\u578b\u5225\u5fc5\u9808\u652f\u63f4 function template \u5167\u4f7f\u7528\u7684\u4efb\u4f55\u64cd\u4f5c\uff0c\u800c\u4e14\u9019\u4e9b\u64cd\u4f5c\u5728 (template \u5167\u7684) \u4f7f\u7528\u8a9e\u5883\u4e2d\u5747\u6709\u6b63\u5e38\u884c\u70ba\u3002","title":"\u7de8\u5beb\u6cdb\u578b\u7a0b\u5f0f (Generic Programs)"},{"location":"C%2B%2B/template/#type-independent-code","text":"\u64b0\u5beb\u512a\u79c0\u6cdb\u578b\u78bc\u7684\u6280\u8853\uff0c\u5df2\u7d93\u8d85\u51fa\u672c\u8ab2\u7a0b\u7684\u7bc4\u7587\u3002\u7136\u800c\u6709\u500b\u6574\u9ad4\u6027\u6e96\u5247\u503c\u5f97\u4e00\u63d0\u3002 \u6211\u5011\u7684 compare() \u96d6\u7136\u7c21\u55ae\uff0c\u537b\u4e5f\u5c55\u793a\u4e86\u6cdb\u578b\u78bc\u7684\u5169\u500b\u91cd\u8981\u7684\u64b0\u5beb\u539f\u5247: - \u9019\u500b function template \u7684\u53c3\u6578\u662f const reference\u3002 - \u4e3b\u9ad4\u5167\u7684\u6e2c\u8a66\u53ea\u4f7f\u7528 < \u9032\u884c\u5927\u5c0f\u6bd4\u8f03\u3002 \u6709\u4e9b\u8b80\u8005\u53ef\u80fd\u6703\u8a8d\u70ba\u5927\u5c0f\u6bd4\u8f03\u52d5\u4f5c\u5982\u679c\u4ee5 < \u548c > \u904b\u7b97\u5b50\u57f7\u884c\uff0c\u6703\u66f4\u81ea\u7136: if ( v1 < v2 ) return -1 ; if ( v1 > v2 ) return 1 ; return 0 ; \u7136\u800c\u82e5\u5beb\u6210\u9019\u6a23: if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; \u5c31\u662f\u6e1b\u5c11 \"\u5c0d\u5f15\u6578\u578b\u5225\u7684\u9700\u6c42\u91cf\"\u3002\u5728\u9019\uff0c\u5f15\u6578\u578b\u5225\u5fc5\u9808\u652f\u63f4 < \u4f46\u4e0d\u5fc5\u540c\u6642\u652f\u63f4 > \u3002","title":"\u64b0\u5beb\u578b\u5225\u7368\u7acb\u78bc (type-independent code)"},{"location":"C%2B%2B/template/#_1","text":"\u64b0\u5beb template \u7a0b\u5f0f\u78bc\u6642\uff0c\u82e5\u80fd\u76e1\u91cf\u6e1b\u5c11 \"\u5c0d\u5f15\u6578\u578b\u5225\u7684\u9700\u6c42\"\uff0c\u5c07\u6703\u5341\u5206\u6709\u5229\u3002","title":"\u91cd\u9ede"},{"location":"C%2B%2B/template/#instantiation","text":"Template \u662f\u4e00\u4efd\u85cd\u5716\uff0c\u4ed6\u672c\u8eab\u4e26\u975e class \u6216 function\u3002\u7de8\u8b6f\u5668\u6703\u6839\u64da template \u7522\u51fa\u5c0d\u61c9\u4e4b class \u6216 function \u7684\u7279\u5b9a\u7248\u672c\u3002\u70ba template \u7522\u51fa\u4e00\u4efd\u91dd\u5c0d\u7279\u5b9a\u76ee\u6a19\u578b\u5225\u7684\u5be6\u9ad4\uff0c\u9019\u500b\u904e\u7a0b\u4fbf\u662f\u6240\u8b02\u7684\u5177\u73fe\u5316 (instantiation)\u3002","title":"\u5177\u73fe\u5316 (Instantiation)"},{"location":"C%2B%2B/template/#template-argument-deduction","text":"\u7b2c\u4e00\u500b\u547c\u53eb\u5f0f compare(1,0) \u7684\u5f15\u6578\u578b\u5225\u70ba int \uff0c\u7b2c\u4e8c\u500b\u547c\u53eb\u5f0f compare(3.14, 2.7) \u7684\u5f15\u6578\u578b\u5225\u70ba double \u3002\"\u4ee5\u51fd\u5f0f\u5f15\u6578\u6c7a\u5b9a template \u5f15\u6578\u7684\u578b\u5225\u548c\u503c\" \u7684\u904e\u7a0b\u7a31\u70ba template \u5f15\u6578\u63a8\u5c0e","title":"Template \u5f15\u6578\u63a8\u5c0e (Argument Deduction)"},{"location":"C%2B%2B/template/#type","text":"short s1 , s2 ; int i1 , i2 ; compare ( i1 , i2 ); // \u6c92\u554f\u984c: \u5177\u73fe\u51fa compare(int, int) compare ( s1 , s2 ); // \u6c92\u554f\u984c: \u5177\u73fe\u51fa compare(short, short) \u5982\u679c compare(int, int) \u662f\u4e00\u500b\u4e00\u822c\u7684 non-template \u51fd\u5f0f\uff0c\u90a3\u9ebc\u80fd\u5920\u6eff\u8db3\u4e0a\u8ff0\u7b2c\u4e8c\u500b\u547c\u53eb\u5f0f\uff0c\u56e0\u70ba short \u5f15\u6578\u6703\u88ab\u6649\u5347\u70ba int \u3002\u4f46\u56e0\u70ba compare() \u662f\u500b template\uff0c\u6240\u4ee5\u4e0a\u8ff0\u7b2c\u4e8c\u500b\u547c\u53eb\u5f0f\u6703\u5177\u73fe\u51fa\u65b0\u51fd\u5f0f\uff0c\u5176 type \u53c3\u6578\u88ab\u7d81\u65bc short \u3002 \u4e00\u822c\u800c\u8a00\u51fd\u5f0f\u5f15\u6578\u4e26\u4e0d\u6703\u70ba\u4e86 \"\u8207\u67d0\u500b\u73fe\u6709\u5177\u73fe\u9ad4\u5951\u5408\" \u800c\u88ab\u8f49\u63db\u3002\u5be6\u969b\u767c\u751f\u7684\u662f\u53e6\u5916\u7522\u751f\u4e00\u500b\u65b0\u7684\u5177\u73fe\u9ad4\u3002\u53ea\u6709\u5169\u7a2e\u8f49\u63db\u6703\u8a98\u4f7f\u7de8\u8b6f\u5668\u57f7\u884c\u800c\u4e0d\u7522\u751f\u65b0\u5177\u73fe\u9ad4\u3002 - const \u8f49\u63db: - \u51fd\u5f0f\u5982\u679c\u63a5\u6536 reference to const \u6216 pointer to const\uff0c\u7528\u6236\u53ef\u4ee5\u7528 reference to non-const \u6216 pointer to non-const \u547c\u53eb\u4e4b\uff0c\u4e0d\u6703\u7522\u751f\u65b0\u5177\u73fe\u9ad4\u3002\u5982\u679c\u51fd\u5f0f\u63a5\u6536\u7684\u662f non-reference \u578b\u5225\uff0c\u90a3\u9ebc\u53c3\u6578\u578b\u5225\u548c\u5f15\u6578\u7684 const \u90fd\u6703\u88ab\u5ffd\u7565\u3002\u63db\u53e5\u8a71\u8aaa\u5982\u679c\u51fd\u5f0f\u88ab\u5b9a\u7fa9\u70ba\u63a5\u6536 non-reference\uff0c\u7121\u8ad6\u6211\u5011\u50b3\u5165 const \u6216 non-const \u7269\u4ef6\uff0c\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4efd\u5177\u73fe\u9ad4\u3002 - array(\u6216 function) \u5c0d pointer \u7684\u8f49\u63db: - \u5982\u679c template \u53c3\u6578\u4e0d\u662f reference \u578b\u5225\uff0c\u90a3\u9ebc \"\u4e00\u822c\u7684 pointer \u8f49\u63db\" \u6703\u65bd\u884c\u65bc \"array \u578b\u5225\u6216 function \u578b\u5225\" \u7684\u5f15\u6578\u8eab\u4e0a\u3002array \u5f15\u6578\u6703\u88ab\u8996\u70ba\u4e00\u500b pointer \u6307\u5411\u5176\u7b2c\u4e00\u5143\u7d20\uff0cfunction \u5f15\u6578\u5247\u88ab\u8996\u70ba\u4e00\u500b pointer \u6307\u5411\u8a72\u51fd\u5f0f\u3002 template < typename T > T fobj ( T , T ); // \u5f15\u6578\u6703\u88ab\u8907\u88fd template < typename T > T fref ( const T & , const T & ); // reference \u5f15\u6578 string s1 ( \"a value\" ); const string s2 ( \"another value\" ); fobj ( s1 , s2 ); // \u6c92\u554f\u984c: \u547c\u53eb f(string, string)\uff0cconst \u88ab\u5ffd\u7565 fref ( s1 , s2 ); // \u6c92\u554f\u984c: non-const \u7269\u4ef6 s1 \u88ab\u8f49\u63db\u70ba const reference int a [ 10 ], b [ 42 ]; fobj ( a , b ); // \u6c92\u554f\u984c: \u547c\u53eb f(int*, int*) fref ( a , b ); // \u932f\u8aa4: array\u578b\u5225\u672a\u5951\u5408\uff0c\u5f15\u6578\u672a\u88ab\u8f49\u63db\u70ba pointer","title":"\"\u4ee5 type \u53c3\u6578\u70ba\u578b\u5225\" \u7684\u5f15\u6578\u8eab\u4e0a\u7684\u6709\u9650\u8f49\u63db"},{"location":"C%2B%2B/template/#function-template-explicit-arguments","text":"\u8003\u616e\u4ee5\u4e0b\u554f\u984c\uff0c\u6211\u5011\u60f3\u5b9a\u7fa9\u4e00\u500b\u540d\u70ba sum \u7684 function template\uff0c\u63a5\u6536\u5169\u500b\u4e0d\u540c\u578b\u5225\u7684\u5f15\u6578\u3002\u6211\u5011\u60f3\u8b93\u8fd4\u56de\u578b\u5225\u7684\u5927\u5c0f\u8db3\u5920\u5bb9\u7d0d \"\u4ee5\u4efb\u610f\u9806\u5e8f\u50b3\u5165\u7684\u4efb\u610f\u5169\u500b\u578b\u5225\u503c\u7684\u5408\"\u3002 // \u8fd4\u56de\u578b\u5225\u8a72\u5beb T \u9084\u662f U ? template < class T , class U > ??? sum ( T , U ); \u7b54\u6848\u662f: \u63a1\u7528\u5176\u4e2d\u4efb\u4f55\u4e00\u500b\uff0c\u90fd\u6703\u5728\u67d0\u4e9b\u6642\u5019\u51fa\u554f\u984c: sum ( 3 , 4L ); // \u7b2c\u4e8c\u500b\u578b\u5225\u6bd4\u8f03\u5927: \u6211\u5011\u5e0c\u671b\u5beb\u51fa U sum(T, U) sum ( 3L , 4 ); // \u7b2c\u4e00\u500b\u578b\u5225\u6bd4\u8f03\u5927: \u6211\u5011\u5e0c\u671b\u5beb\u51fa T sum(T, U) \u89e3\u6c7a\u65b9\u6cd5\u6709\u5169\u7a2e\uff0c\u7b2c\u4e00\u7a2e\u662f\u5f37\u8feb sum() \u7528\u6236\u5c07\u8f03\u5c0f\u7684\u578b\u5225\u5f37\u5236\u8f49\u578b\u81f3\u6211\u5011\u60f3\u8981\u7684\u7d50\u679c\u578b\u5225: int i , short s ; sum ( static_cast < int > ( s ), i ) // \u6c92\u554f\u984c: \u5177\u73fe\u5316 int sum(int, int) \u7b2c\u4e8c\u7a2e\u89e3\u6c7a\u65b9\u6cd5\u5f0f\u5f15\u9032\u7b2c\u4e09\u500b template \u53c3\u6578\uff0c\u6b64\u53c3\u6578\u5fc5\u9808\u7531\u547c\u53eb\u8005\u660e\u78ba\u6307\u5b9a: template < class T1 , class T2 , class T3 > T1 sum ( T2 , T3 ); \u9019\u552f\u4e00\u7684\u7f3a\u9ede\u662f: \u6c92\u6709\u4efb\u4f55\u51fd\u5f0f\u5f15\u6578\u53ef\u4ee5\u7528\u4f86\u63a8\u5c0e T1 \u578b\u5225\u3002\u56e0\u6b64\u7528\u6236\u6bcf\u6b21\u547c\u53eb sum \u6642\u90fd\u5fc5\u9808\u70ba T1 \u53c3\u6578\u660e\u78ba\u63d0\u4f9b\u5f15\u6578\u3002 long val3 = sum < long > ( i , lng ); // \u6c92\u554f\u984c: \u547c\u53eb\u7684\u662f long sum(int, long)","title":"Function-Template \u7684\u986f\u5f0f\u5f15\u6578 (Explicit Arguments)"},{"location":"C%2B%2B/template/#pointer-to-function-template","text":"template < typename T > int compare ( const T & , const T & ); // func \u91cd\u8f09\u7248\u672c: \u5404\u81ea\u63a5\u6536\u4e0d\u540c\u7684 function pointer \u578b\u5225 void func ( int ( * )( const string & , const string & )); void func ( int ( * )( const int & , const int & )); func ( compare < int > ); // \u6c92\u554f\u984c: \u660e\u78ba\u6307\u51fa\u8981\u54ea\u500b compare \u7248\u672c","title":"\u986f\u5f0f\u5f15\u6578\u548c Pointer to Function Template"},{"location":"C%2B%2B/template/#template-compilation-models","text":"\u7576\u6211\u5011\u547c\u53eb\u51fd\u5f0f\u6642\uff0c\u7de8\u8b6f\u5668\u901a\u5e38\u53ea\u9700\u5728\u7576\u6642\u898b\u904e\u51fd\u5f0f\u5ba3\u544a\u5373\u53ef\u3002\u540c\u6a23\u9053\u7406\uff0c\u7576\u6211\u5011\u5b9a\u7fa9 class \u7269\u4ef6\u6642\uff0c\u8a72 class \u7684\u5b9a\u7fa9\u5f0f\u5fc5\u9808\u53ef\u898b\uff0c\u4f46\u5176\u6210\u54e1\u51fd\u5f0f\u7684\u5b9a\u7fa9\u5f0f\u4e0d\u9700\u5728\u5834\u3002\u56e0\u6b64\u6211\u5011\u628a class \u5b9a\u7fa9\u5f0f\u548c\u51fd\u5f0f\u5ba3\u544a\u653e\u5728\u6a19\u982d\u6a94\u5167\uff0c\u628a\u4e00\u822c\u51fd\u5f0f\u548c class \u6210\u54e1\u51fd\u5f0f\u7684\u5b9a\u7fa9\u653e\u5728\u6e90\u78bc\u6a94 (source files) \u5167\u3002 \u4f46\u662f template \u5c31\u4e0d\u540c\u4e86\uff0c\u6b32\u7522\u751f\u4e00\u500b\u5177\u73fe\u9ad4\uff0c\u7de8\u8b6f\u5668\u5fc5\u9808\u80fd\u5920\u53d6\u5f97 template \u7684\u6e90\u78bc\u3002\u7576\u6211\u5011\u547c\u53eb function template \u6216 \"class template \u7684\u6210\u54e1\u51fd\u5f0f\" \u6642\uff0c\u7de8\u8b6f\u5668\u9700\u8981\u90a3\u4e9b\u51fd\u5f0f\u7684\u5b9a\u7fa9\uff0c\u800c\u90a3\u4e9b\u5b9a\u7fa9\u5f0f\u4e00\u822c\u90fd\u88ab\u81f3\u65bc\u6e90\u78bc\u6a94\u3002 \u70ba\u4e86\u7de8\u8b6f template \u7a0b\u5f0f\u78bc\uff0c\u6709\u4ee5\u4e0b\u4e09\u7a2e\u65b9\u6cd5: 1. \u53ef\u5c07 class \u5b9a\u7fa9\u5f0f\u548c\u51fd\u5f0f\u5ba3\u544a\uff0c\u51fd\u5f0f\u548c\u6210\u54e1\u7684\u5b9a\u7fa9\u5168\u90e8\u90fd\u653e\u5230\u6a19\u982d\u6a94 2. \"\u7f6e\u5165\u5f0f\u7de8\u8b6f\u6a21\u578b\"(inclusion compilation model) 3. \"\u5206\u96e2\u5f0f\u7de8\u8b6f\u6a21\u578b\"(separate compilation model) 2, 3\u7a2e\u7a0b\u5f0f\u7684\u67b6\u69cb\u65b9\u5f0f\u5927\u9ad4\u76f8\u540c: class \u5b9a\u7fa9\u5f0f\u548c\u51fd\u5f0f\u5ba3\u544a\u5f0f\u81f3\u65bc\u6a19\u982d\u6a94\uff0c\u51fd\u5f0f\u548c\u6210\u54e1\u5b9a\u7fa9\u653e\u5728\u6e90\u78bc\u6a94\u3002\u5e7e\u4e4e\u6240\u6709\u7de8\u8b6f\u5668\u90fd\u652f\u63f4\u7b2c 2 \u7a2e\uff0c\u7b2c 3 \u7a2e\u53ea\u6709\u5c11\u6578\u7de8\u8b6f\u5668\u652f\u63f4\u3002","title":"Template \u7684\u7de8\u8b6f\u6a21\u578b(Compilation Models)"},{"location":"C%2B%2B/template/#inclusion-compilation-model","text":"// \u6a19\u982d\u6a94 utilities.h #ifndef UTILITIES_H // header guard #define UTILITIES_H template < class T > int compare ( const T & , const T & ); //... #include \"utilities.cpp\" // \u53d6\u5f97 compare \u548c\u5176\u4ed6\u51fd\u5f0f\u7684\u5b9a\u7fa9 #endif // \u5be6\u4f5c\u6a94 utilities.cpp template < class T > int compare ( const T & v1 , const T & v2 ) { if ( v1 < v2 ) return -1 ; if ( v2 < v1 ) return 1 ; return 0 ; }","title":"\u7f6e\u5165\u5f0f\u7de8\u8b6f\u6a21\u578b(Inclusion Compilation Model)"},{"location":"Concurrency/","text":"Concurrency \u8981\u5beb\u51fa Concurrency(\u4e26\u884c) \u7684\u7a0b\u5f0f\u6709\u5f88\u591a\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u5be6\u73fe, \u672c\u5c08\u6848\u4ecb\u7d39\u5169\u7a2e\u6700\u5178\u578b\u7684\u65b9\u5f0f: Thread, Event-loop. \u5728 Concurrency \u4e2d\u6703\u5148\u63d0\u5230\u6709\u95dc thread \u7684\u4ecb\u7d39\u4ee5\u53ca\u4e00\u4e9b\u6709\u95dc threading \u7684\u57fa\u790e\u7406\u8ad6\u77e5\u8b58 \u5728 qt_threading_event \u4e2d\u6703\u5148\u63d0\u5230 Qt event loop \u7684\u6838\u5fc3\u904b\u4f5c\u539f\u7406\u4ee5\u53ca\u4e00\u4e9b\u91cd\u8981\u89c0\u5ff5, \u518d\u4f86\u6703\u63d0\u5230\u5728 Qt threading \u5982\u4f55\u5be6\u4f5c\u8207\u61c9\u7528 Example Code Repository on Git Qt Multi-Thread Signal-Slots example","title":"Concurrency"},{"location":"Concurrency/#concurrency","text":"\u8981\u5beb\u51fa Concurrency(\u4e26\u884c) \u7684\u7a0b\u5f0f\u6709\u5f88\u591a\u7a2e\u65b9\u6cd5\u53ef\u4ee5\u5be6\u73fe, \u672c\u5c08\u6848\u4ecb\u7d39\u5169\u7a2e\u6700\u5178\u578b\u7684\u65b9\u5f0f: Thread, Event-loop. \u5728 Concurrency \u4e2d\u6703\u5148\u63d0\u5230\u6709\u95dc thread \u7684\u4ecb\u7d39\u4ee5\u53ca\u4e00\u4e9b\u6709\u95dc threading \u7684\u57fa\u790e\u7406\u8ad6\u77e5\u8b58 \u5728 qt_threading_event \u4e2d\u6703\u5148\u63d0\u5230 Qt event loop \u7684\u6838\u5fc3\u904b\u4f5c\u539f\u7406\u4ee5\u53ca\u4e00\u4e9b\u91cd\u8981\u89c0\u5ff5, \u518d\u4f86\u6703\u63d0\u5230\u5728 Qt threading \u5982\u4f55\u5be6\u4f5c\u8207\u61c9\u7528","title":"Concurrency"},{"location":"Concurrency/#example-code-repository-on-git","text":"Qt Multi-Thread Signal-Slots example","title":"Example Code Repository on Git"},{"location":"Concurrency/Concurrency/","text":"Concurrency Introduction In this note, we introduce a new abstraction for a single running process: that of a thread. Instead of our classic view of a single point of execution within a program (i.e., a single PC where instructions are being fetched fromand executed), a multi-threaded program has more than one point of execution (i.e., multiple PCs, each of which is being fetched and executed from). Perhaps another way to think of this is that each thread is very much like a separate process, except for one difference: they share the same address space and thus can access the same data. In this \ufb01gure, you can see two stacks spread throughout the address space of the process. Thus, any stack-allocated variables, parameters, return values, and other things that we put on the stack will be placed in what is sometimes called thread-local storage , i.e., the stack of the relevant thread. Why Use Threads? There are basically two use cases for threads: - Make processing faster by making use of multicore processors. - Keep the GUI thread or other time critical threads responsive by offloading long lasting processing or blocking calls to other threads. An Example: Thread Creation Why It Gets Worse: Shared Data we can nowlook at what each worker is trying to do: add a number to the shared variable counter, and do so 10 million times (1e7) in a loop. Thus, the desired \ufb01nal result is: 20,000,000. We now compile and run the program, to see how it behaves. Sometimes, everything works how we might expect: Unfortunately, when we run this code, even on a single processor, we don\u2019t necessarily get the desired result. Sometimes, we get: Try one more time, we get: The Heart Of The Problem: Uncontrolled Scheduling To understand why this happens, we must understand the code sequence that the compiler generates for the update to counter. In this case, we wish to simply add a number (1) to counter. Thus, the code sequence for doing so might look something like this (in x86); This example assumes that the variable counter is located at address 0x8049a1c. In this three-instruction sequence, the x86 mov instruction is used \ufb01rst to get the memory value at the address and put it into register eax. Then, the add is performed, adding 1 (0x1) to the contents of the eax register, and \ufb01nally, the contents of eax are stored back into memory at the same address. What we have demonstrated here is called a race condition (or, more speci\ufb01cally, a data race ): the results depend on the timing execution of the code. With some bad luck (i.e., context switches that occur at untimely points in the execution), we get the wrong result. Because multiple threads executing this code can result in a race condition, we call this code a critical section . A critical section is a piece of code that accesses a shared variable (or more generally, a shared resource) and must not be concurrently executed by more than one thread. What we really want for this code is what we call mutual exclusion . This property guarantees that if one thread is executing within the critical section, the others will be prevented fromdoing so. Locks The name that the POSIX library uses for a lock is a mutex, as it is used to provide mutual exclusion between threads, i.e., if one thread is in the critical section, it excludes the others fromentering until it has completed the section. Condition variables In particular, there are many cases where a thread wishes to check whether a condition is true before continuing its execution. For example, a parent thread might wish to check whether a child thread has completed before continuing (this is often called a join()); howshould such a wait be implemented? Let\u2019s look at Figure 30.1. What we would like to see here is the following output: We could try using a shared variable, as you see in Figure 30.2. This solution will generally work, but it is hugely inef\ufb01cient as the parent spins and wastes CPU time. What we would like here instead is some way to put the parent to sleep until the condition we are waiting for (e.g., the child is done executing) comes true. Definition and Routines To wait for a condition to become true, a thread can make use of what is known as a condition variable . A condition variable is an explicit queue that threads can put themselves on when some state of execution (i.e., some condition) is not as desired (by waiting on the condition); some other thread, when it changes said state, can then wake one (or more) of those waiting threads and thus allow them to continue (by signaling on the condition). We will often refer to these as wait() and signal() for simplicity. One thing you might notice about the wait() call is that it also takes a mutex as a parameter; it assumes that this mutex is locked when wait() is called. The responsibility of wait() is to release the lock and put the calling thread to sleep (atomically); when the thread wakes up (after some other thread has signaled it), it must re-acquire the lock before returning to the caller. The Producer/Consumer (Bounded Buffer) Problem Producer-consumer problem on wiki... Imagine one or more producer threads and one or more consumer threads. Producers generate data items and place them in a buffer; consumers grab said items from the buffer and consume themin some way. This arrangement occurs in many real systems. For example, in a multi-threaded web server, a producer puts HTTP requests into a work queue (i.e., the bounded buffer); consumer threads take requests out of this queue and process them. The \ufb01rst thing we need is a shared buffer, into which a producer puts data, and out of which a consumer takes data. Let\u2019s just use a single integer for simplicity (you can certainly imagine placing a pointer to a data structure into this slot instead), and the two inner routines to put a value into the shared buffer, and to get a value out of the buffer. See Figure 30.4 for details. But if we write the synchronization code such that a producer puts data into a full buffer, or a consumer gets data from an empty one, we have done something wrong (and in this code, an assertion will \ufb01re). A Broken Solution With just a single producer and a single consumer, the code in Figure 30.6 works. However, if we have more than one of these threads (e.g., two consumers), the solution has two critical problems. What are they? pause and thinking... Fortunately, this \ufb01x is easy (Figure 30.8): change the if to a while. Better, But Still Broken However, this code still has a bug, the second of two problems mentioned above. Can you see it? It has something to do with the fact that there is only one condition variable. The Single Buffer Producer/Consumer Solution The Correct Producer/Consumer Solution We now have a working producer/consumer solution, albeit not a fully general one. The last change we make is to enable more concurrency and ef\ufb01ciency; speci\ufb01cally, we add more buffer slots, so that multiple values can be produced before sleeping, and similarly multiple values can be consumed before sleeping. \u5f85\u7e8c... \u53c3\u8003\u8cc7\u6599 STL threading: https://kheresy.wordpress.com/2012/07/06/multi-thread-programming-in-c-thread-p1/ operating system book: http://pages.cs.wisc.edu/~remzi/OSTEP/ event loop: http://www.ruanyifeng.com/blog/2013/10/event_loop.html","title":"Concurrency"},{"location":"Concurrency/Concurrency/#concurrency","text":"","title":"Concurrency"},{"location":"Concurrency/Concurrency/#introduction","text":"In this note, we introduce a new abstraction for a single running process: that of a thread. Instead of our classic view of a single point of execution within a program (i.e., a single PC where instructions are being fetched fromand executed), a multi-threaded program has more than one point of execution (i.e., multiple PCs, each of which is being fetched and executed from). Perhaps another way to think of this is that each thread is very much like a separate process, except for one difference: they share the same address space and thus can access the same data. In this \ufb01gure, you can see two stacks spread throughout the address space of the process. Thus, any stack-allocated variables, parameters, return values, and other things that we put on the stack will be placed in what is sometimes called thread-local storage , i.e., the stack of the relevant thread.","title":"Introduction"},{"location":"Concurrency/Concurrency/#why-use-threads","text":"There are basically two use cases for threads: - Make processing faster by making use of multicore processors. - Keep the GUI thread or other time critical threads responsive by offloading long lasting processing or blocking calls to other threads.","title":"Why Use Threads?"},{"location":"Concurrency/Concurrency/#an-example-thread-creation","text":"","title":"An Example: Thread Creation"},{"location":"Concurrency/Concurrency/#why-it-gets-worse-shared-data","text":"we can nowlook at what each worker is trying to do: add a number to the shared variable counter, and do so 10 million times (1e7) in a loop. Thus, the desired \ufb01nal result is: 20,000,000. We now compile and run the program, to see how it behaves. Sometimes, everything works how we might expect: Unfortunately, when we run this code, even on a single processor, we don\u2019t necessarily get the desired result. Sometimes, we get: Try one more time, we get:","title":"Why It Gets Worse: Shared Data"},{"location":"Concurrency/Concurrency/#the-heart-of-the-problem-uncontrolled-scheduling","text":"To understand why this happens, we must understand the code sequence that the compiler generates for the update to counter. In this case, we wish to simply add a number (1) to counter. Thus, the code sequence for doing so might look something like this (in x86); This example assumes that the variable counter is located at address 0x8049a1c. In this three-instruction sequence, the x86 mov instruction is used \ufb01rst to get the memory value at the address and put it into register eax. Then, the add is performed, adding 1 (0x1) to the contents of the eax register, and \ufb01nally, the contents of eax are stored back into memory at the same address. What we have demonstrated here is called a race condition (or, more speci\ufb01cally, a data race ): the results depend on the timing execution of the code. With some bad luck (i.e., context switches that occur at untimely points in the execution), we get the wrong result. Because multiple threads executing this code can result in a race condition, we call this code a critical section . A critical section is a piece of code that accesses a shared variable (or more generally, a shared resource) and must not be concurrently executed by more than one thread. What we really want for this code is what we call mutual exclusion . This property guarantees that if one thread is executing within the critical section, the others will be prevented fromdoing so.","title":"The Heart Of The Problem: Uncontrolled Scheduling"},{"location":"Concurrency/Concurrency/#locks","text":"The name that the POSIX library uses for a lock is a mutex, as it is used to provide mutual exclusion between threads, i.e., if one thread is in the critical section, it excludes the others fromentering until it has completed the section.","title":"Locks"},{"location":"Concurrency/Concurrency/#condition-variables","text":"In particular, there are many cases where a thread wishes to check whether a condition is true before continuing its execution. For example, a parent thread might wish to check whether a child thread has completed before continuing (this is often called a join()); howshould such a wait be implemented? Let\u2019s look at Figure 30.1. What we would like to see here is the following output: We could try using a shared variable, as you see in Figure 30.2. This solution will generally work, but it is hugely inef\ufb01cient as the parent spins and wastes CPU time. What we would like here instead is some way to put the parent to sleep until the condition we are waiting for (e.g., the child is done executing) comes true.","title":"Condition variables"},{"location":"Concurrency/Concurrency/#definition-and-routines","text":"To wait for a condition to become true, a thread can make use of what is known as a condition variable . A condition variable is an explicit queue that threads can put themselves on when some state of execution (i.e., some condition) is not as desired (by waiting on the condition); some other thread, when it changes said state, can then wake one (or more) of those waiting threads and thus allow them to continue (by signaling on the condition). We will often refer to these as wait() and signal() for simplicity. One thing you might notice about the wait() call is that it also takes a mutex as a parameter; it assumes that this mutex is locked when wait() is called. The responsibility of wait() is to release the lock and put the calling thread to sleep (atomically); when the thread wakes up (after some other thread has signaled it), it must re-acquire the lock before returning to the caller.","title":"Definition and Routines"},{"location":"Concurrency/Concurrency/#the-producerconsumer-bounded-buffer-problem","text":"Producer-consumer problem on wiki... Imagine one or more producer threads and one or more consumer threads. Producers generate data items and place them in a buffer; consumers grab said items from the buffer and consume themin some way. This arrangement occurs in many real systems. For example, in a multi-threaded web server, a producer puts HTTP requests into a work queue (i.e., the bounded buffer); consumer threads take requests out of this queue and process them. The \ufb01rst thing we need is a shared buffer, into which a producer puts data, and out of which a consumer takes data. Let\u2019s just use a single integer for simplicity (you can certainly imagine placing a pointer to a data structure into this slot instead), and the two inner routines to put a value into the shared buffer, and to get a value out of the buffer. See Figure 30.4 for details. But if we write the synchronization code such that a producer puts data into a full buffer, or a consumer gets data from an empty one, we have done something wrong (and in this code, an assertion will \ufb01re).","title":"The Producer/Consumer (Bounded Buffer) Problem"},{"location":"Concurrency/Concurrency/#a-broken-solution","text":"With just a single producer and a single consumer, the code in Figure 30.6 works. However, if we have more than one of these threads (e.g., two consumers), the solution has two critical problems. What are they? pause and thinking... Fortunately, this \ufb01x is easy (Figure 30.8): change the if to a while.","title":"A Broken Solution"},{"location":"Concurrency/Concurrency/#better-but-still-broken","text":"However, this code still has a bug, the second of two problems mentioned above. Can you see it? It has something to do with the fact that there is only one condition variable.","title":"Better, But Still Broken"},{"location":"Concurrency/Concurrency/#the-single-buffer-producerconsumer-solution","text":"","title":"The Single Buffer Producer/Consumer Solution"},{"location":"Concurrency/Concurrency/#the-correct-producerconsumer-solution","text":"We now have a working producer/consumer solution, albeit not a fully general one. The last change we make is to enable more concurrency and ef\ufb01ciency; speci\ufb01cally, we add more buffer slots, so that multiple values can be produced before sleeping, and similarly multiple values can be consumed before sleeping. \u5f85\u7e8c...","title":"The Correct Producer/Consumer Solution"},{"location":"Concurrency/Concurrency/#_1","text":"STL threading: https://kheresy.wordpress.com/2012/07/06/multi-thread-programming-in-c-thread-p1/ operating system book: http://pages.cs.wisc.edu/~remzi/OSTEP/ event loop: http://www.ruanyifeng.com/blog/2013/10/event_loop.html","title":"\u53c3\u8003\u8cc7\u6599"},{"location":"Concurrency/qt_threading_event/","text":"Qt Threading and Event Loop Events and the event loop An event in Qt is an object which represents something interesting that happened; the main difference between an event and a signal is that events are targeted to a specific object in our application (which decides what to do with that event), while signals are emitted \"in the wild\". From a code point of view, all events are instances of some subclass of QEvent , and all QObject-derived classes can override the QObject::event() virtual method in order to handle events targeted to their instances. Events can be generated from both inside and outside the application; for instance: - QKeyEvent and QMouseEvent objects represent some kind of keyboard and mouse interaction, and they come from the window manager; - QTimerEvent objects are sent to a QObject when one of its timers fires, and they (usually) come from the operating system; - QChildEvent objects are sent to a QObject when a child is added or removed, and they come from inside your Qt application. The important thing about events is that they're not delivered as soon as they're generated; they're instead queued up in an event queue and sent sometime later. The dispatcher itself loops around the event queue and sends queued events to their target objects, and therefore it is called the event loop. Conceptually, this is how an event loop looks while ( is_active ) { while ( ! event_queue_is_empty ) dispatch_next_event (); wait_for_more_events (); } event loop by running QCoreApplication::exec() ; call blocks until QCoreApplication::exit() or QCoreApplication::quit() are called, terminating the loop. The wait_for_more_events() function blocks (that is, it's not a busy wait) until some event is generated. for example, the event loop can be woken up by: - window manager activity (key/mouse presses, interaction with the windows, etc.); - sockets activity (there's some data available to read, or a socket is writable without blocking, there's a new incoming connection, etc.); - timers (i.e. a timer fired); - events posted from other threads (see later). What requires a running event loop ? Widgets painting and interaction : QWidget::paintEvent() will be called when delivering QPaintEvent objects, which are generated both by calling QWidget::update () (i.e. internally) or by the window manager (for instance, because a hidden window was shown). The same thing holds for all kinds of interaction (keyboard, mouse, etc.) Timers : Networking : all low-level Qt networking classes ( QTcpSocket , QUdpSocket , QTcpServer , etc.) are asynchronous by design. When you call read() , they just return already available data; when you call write() , they schedule the writing for later. Notice that they do offer synchronous methods (not recommended, it will block event-loop) Blocking the event loop You should never ever block the event loop , Suppose you have a Button widget which emits a signal when clicked; connected to this signal there's a slot of our Worker object, like this: main(int, char ) QApplication::exec() ... QWidget::event(QEvent) Button::mousePressEvent(QMouseEvent) Button::clicked() ... Worker::doWork() While the worker is busy working, what's the event loop doing? You should've guessed it: nothing! It dispatched the mouse press event and it's blocked waiting for the event handler to return. We managed to block the event loop , which means that no event is sent any more, until we return from the doWork() slot, up the stack, to the event loop, and let it process pending events. Moreover, many window managers will detect that your application is not handling events any more and tell the user that your application isn't responding. That's why is so important to quickly react to events and return to the event loop as soon as possible! Forcing event dispatching So, what do we do if we have a long task to run and don't want to block the event loop? - We move the task into another thread (In the next section). - We manually force the event loop to run, by (repeatedly) calling QCoreApplication::processEvents() inside our blocking task. QCoreApplication::processEvents() will process all the events in the event queue and return to the caller. QNetworkAccessManager qnam ; QNetworkReply * reply = qnam . get ( QNetworkRequest ( QUrl ( \u2026 ))); QEventLoop loop ; QObject :: connect ( reply , SIGNAL ( finished ()), & loop , SLOT ( quit ())); loop . exec (); /* reply has finished, use it */ Be very careful when reentering the event loop \"by other paths\": it can lead to unwanted recursions! Let's go back to the Button example. main(int, char) QApplication::exec() [\u2026] QWidget::event(QEvent ) Button::mousePressEvent(QMouseEvent) Button::clicked() [\u2026] Worker::doWork() // first, inner invocation QCoreApplication::processEvents() // we manually dispatch events and\u2026 [\u2026] QWidget::event(QEvent * ) // another mouse click is sent to the Button\u2026 Button::mousePressEvent(QMouseEvent *) Button::clicked() // which emits clicked() again\u2026 [\u2026] Worker::doWork() // DANG! we've recursed into our slot. A quick and easy workaround for this is passing QEventLoop::ExcludeUserInputEvents() to QCoreApplication::processEvents() about deletion: QObject * object = new QObject ; object -> deleteLater (); QDialog dialog ; dialog . exec (); Thread and QObject Qt naming convention Reentrant: A class is reentrant if it's safe to use its instances from more than one thread, provided that at most one thread is accessing the same instance at the same time. A function is reentrant if it's safe to invoke it from more than one thread at the same, provided that each invocation references unique data. In other words, this means that users of that class/function must serialize all accesses to instances/shared data by means of some external locking mechanism . Thread-safe: A class is thread-safe if it's safe to use its instances from more than one thread at the same time. A function is thread-safe if it's safe to invoke it from more than one thread at the same time even if the invocations reference shared data. see more... Per-thread event loop So far we've always talked about \"the event loop\", taking somehow per granted that there's only one event loop in a Qt application. Therefore, we say that the main event loop is the one created by the thread which invoked main() , and started with QCoreApplication::exec() (which must be called from that thread). This is also called the GUI thread , because it's the only thread in which GUI-related operations are allowed. A QThread local event loop can be started instead by calling QThread::exec() (inside its run() method): class Thread : public QThread { protected : void run () { /* \u2026 initialize \u2026 */ exec (); } }; since Qt 4.4 QThread::run() is no longer a pure virtual method; instead, it calls QThread::exec() . Exactly like QCoreApplication, QThread has also the QThread::quit() and QThread::exit() methods to stop the event loop. A thread event loop delivers events for all QObjects that are living in that thread; this includes, by default, all objects that are created into that thread, or that were moved to that thread (more info about this later). We also say that the thread affinity of a QObject is a certain thread, meaning that the object is living in that thread. This applies to objects which are built in the constructor of a QThread object: class MyThread : public QThread { public : MyThread () { otherObj = new QObject ; } private : QObject obj ; QObject * otherObj ; QScopedPointer < QObject > yetAnotherObj ; }; What's the thread affinity of obj , otherObj , yetAnotherObj after we create a MyThread object? We must look at the thread that created them: it's the thread that ran the MyThread constructor. Therefore, all three objects are not living in the MyThread thread, but in the thread that created the MyThread instance (which, by the way, is where the instance is living as well). It is very important to understand that QObject and all of its subclasses are not thread-safe (although they can be reentrant); therefore, you can not access a QObject from more than one thread at the same time, unless you serialize all accesses to the object's internal data (for instance, by protecting it with a mutex). Remember that the object may be handling events dispatched by the event loop of the thread it is living in while you're accessing it from another thread! For the same reason, you can't delete a QObject from another thread, but you must use QObject::deleteLater() , which will post an event that will ultimately cause its deletion by the thread the object is living in. Moreover, QWidget and all of its subclasses, along with other GUI-related classes (even not QObject-based, like QPixmap) are not reentrant either: they can be used exclusively from the GUI thread. We can change a QObject's affinity by calling QObject::moveToThread() ; this will change the affinity of the object and of its children. Since QObject is not thread-safe, we must use it from the thread the object is living in; that is, you can only push objects from the thread they're living in to other threads, and not pull them or move them around from other threads. Moreover, Qt requires that the child of a QObject must live in the same thread where the parent is living. This implies that: you can't use QObject::moveToThread() on a object which has a parent; you must not create objects in a QThread using the QThread object itself as their parent: class Thread : public QThread { void run () { QObject * obj = new QObject ( this ); // WRONG!!!!!!! } }; This is because the QThread object is living in another thread , namely, the one in which it was created. Signals and slots across threads When we connect a signal to a slot, the fifth argument of QObject::connect is used to specify the connection type: - a direct connection means that the slot is always invoked directly by the thread the signal is emitted from; - a queued connection means that an event is posted in the event queue of the thread the receiver is living in, which will be picked up by the event loop and will cause the slot invocation sometime later; - a blocking queued connection is like a queued connection, but the sender thread blocks until the event is picked up by the event loop of the thread the receiver is living in, the slot is invoked, and it returns; - an automatic connection ( the default ) means that if the thread the receiver is living in is the same as the current thread, a direct connection is used; otherwise, a queued connection is used. In every case, keep in mind the thread the emitting object is living in has no importance at all! For instance: class Thread : public QThread { Q_OBJECT signals : void aSignal (); protected : void run () { emit aSignal (); } }; /* \u2026 */ Thread thread ; Object obj ; QObject :: connect ( & thread , SIGNAL ( aSignal ()), & obj , SLOT ( aSlot ())); thread . start (); The signal aSignal() will be emitted by the new thread; since it is not the thread the Object object is living in, a queued connection will be used. Another common pitfall is the following one: class Thread : public QThread { Q_OBJECT slots : void aSlot () { /* \u2026 */ } protected : void run () { /* \u2026 */ } }; /* \u2026 */ Thread thread ; Object obj ; QObject :: connect ( & obj , SIGNAL ( aSignal ()), & thread , SLOT ( aSlot ())); thread . start (); obj . emitSignal (); When obj emits its aSignal() signal, which kind of connection will be used? You should've guessed it: a direct connection . That's because the Thread object is living in the thread that emits the signal. In the aSlot() slot we could then access some Thread's member variable while they're being accessed by the run() method, which is running concurrently: this is the perfect recipe for disaster. Yet another example, probably the most important one: class Thread : public QThread { Q_OBJECT slots : void aSlot () { /* \u2026 */ } protected : void run () { QObject * obj = new Object ; connect ( obj , SIGNAL ( aSignal ()), this , SLOT ( aSlot ())); /* \u2026 */ } }; In this case a queued connection is used, therefore you're required to run an event loop in the thread the Thread object is living in. A solution you'll often found in forums, blog posts etc. is to add a moveToThread(this) to the Thread constructor class Thread : public QThread { Q_OBJECT public : Thread () { moveToThread ( this ); // WRONG } /* \u2026 */ }; which indeed will work (because now the affinity of the Thread object changed), but it's a very bad design. What's wrong here is that we're misunderstanding the purpose of a thread object (the QThread subclass): QThread objects are not threads; they're control objects around a thread, therefore meant to be used from another thread (usually, the one they're living in). A good way to achieve the same result is splitting the \"working\" part from the \"controller\" part, that is, writing a QObject subclass and using QObject::moveToThread() to change its affinity: class Worker : public QObject { Q_OBJECT public slots : void doWork () { /* \u2026 */ } }; /* \u2026 */ QThread * thread = new QThread ; Worker * worker = new Worker ; connect ( obj , SIGNAL ( workReady ()), worker , SLOT ( doWork ())); worker -> moveToThread ( thread ); thread -> start (); DOs and DON'Ts You can: - add signals to a QThread subclass. It's perfectly safe and they'll do the \"right thing\" (see above; the sender's thread affinity does not matter). You shouldn't: - use moveToThread(this) . - force the connection type: this usually means that you're doing something wrong, like mixing the control interface of QThread with the program logic (which should stay in a separate object which lives in that thread). - add slots to a QThread subclass: they'll be invoked from the \"wrong\" thread, that is, not the one the QThread object is managing, but the one that object is living in, forcing you to specify a direct connection and/or to use moveToThread(this). - use QThread::terminate. You must no: - quit your program when threads are still running. Use QThread::wait to wait for their termination. - destroy a QThread while the thread that it's managing is still running. If you want some kind of \"self-destruction\", you can connect the finished() signal with the deleteLater() slot. When shouldn't I use threads? Timer Networking/State mechines Jobs splittable in chunks , like this: class Worker : public QObject { Q_OBJECT public slots : void startProcessing () { processItem ( 0 ); } void processItem ( int index ) { /* process items[index] \u2026 */ if ( index < numberOfItems ) QMetaObject :: invokeMethod ( this , \"processItem\" , Qt :: QueuedConnection , Q_ARG ( int , index + 1 )); } }; Thread Support in Qt The Threading Classes Multithreading Technologies in Qt Synchronizing Threads \u53c3\u8003\u8cc7\u6599 qt event and thread: https://wiki.qt.io/Threads_Events_QObjects qt thread basic: https://doc.qt.io/qt-5/thread-basics.html qt threading :https://doc.qt.io/qt-5/threads.html","title":"Qt Threading and Event Loop"},{"location":"Concurrency/qt_threading_event/#qt-threading-and-event-loop","text":"","title":"Qt Threading and Event Loop"},{"location":"Concurrency/qt_threading_event/#events-and-the-event-loop","text":"An event in Qt is an object which represents something interesting that happened; the main difference between an event and a signal is that events are targeted to a specific object in our application (which decides what to do with that event), while signals are emitted \"in the wild\". From a code point of view, all events are instances of some subclass of QEvent , and all QObject-derived classes can override the QObject::event() virtual method in order to handle events targeted to their instances. Events can be generated from both inside and outside the application; for instance: - QKeyEvent and QMouseEvent objects represent some kind of keyboard and mouse interaction, and they come from the window manager; - QTimerEvent objects are sent to a QObject when one of its timers fires, and they (usually) come from the operating system; - QChildEvent objects are sent to a QObject when a child is added or removed, and they come from inside your Qt application. The important thing about events is that they're not delivered as soon as they're generated; they're instead queued up in an event queue and sent sometime later. The dispatcher itself loops around the event queue and sends queued events to their target objects, and therefore it is called the event loop. Conceptually, this is how an event loop looks while ( is_active ) { while ( ! event_queue_is_empty ) dispatch_next_event (); wait_for_more_events (); } event loop by running QCoreApplication::exec() ; call blocks until QCoreApplication::exit() or QCoreApplication::quit() are called, terminating the loop. The wait_for_more_events() function blocks (that is, it's not a busy wait) until some event is generated. for example, the event loop can be woken up by: - window manager activity (key/mouse presses, interaction with the windows, etc.); - sockets activity (there's some data available to read, or a socket is writable without blocking, there's a new incoming connection, etc.); - timers (i.e. a timer fired); - events posted from other threads (see later).","title":"Events and the event loop"},{"location":"Concurrency/qt_threading_event/#what-requires-a-running-event-loop","text":"Widgets painting and interaction : QWidget::paintEvent() will be called when delivering QPaintEvent objects, which are generated both by calling QWidget::update () (i.e. internally) or by the window manager (for instance, because a hidden window was shown). The same thing holds for all kinds of interaction (keyboard, mouse, etc.) Timers : Networking : all low-level Qt networking classes ( QTcpSocket , QUdpSocket , QTcpServer , etc.) are asynchronous by design. When you call read() , they just return already available data; when you call write() , they schedule the writing for later. Notice that they do offer synchronous methods (not recommended, it will block event-loop)","title":"What requires a running event loop ?"},{"location":"Concurrency/qt_threading_event/#blocking-the-event-loop","text":"You should never ever block the event loop , Suppose you have a Button widget which emits a signal when clicked; connected to this signal there's a slot of our Worker object, like this: main(int, char ) QApplication::exec() ... QWidget::event(QEvent) Button::mousePressEvent(QMouseEvent) Button::clicked() ... Worker::doWork() While the worker is busy working, what's the event loop doing? You should've guessed it: nothing! It dispatched the mouse press event and it's blocked waiting for the event handler to return. We managed to block the event loop , which means that no event is sent any more, until we return from the doWork() slot, up the stack, to the event loop, and let it process pending events. Moreover, many window managers will detect that your application is not handling events any more and tell the user that your application isn't responding. That's why is so important to quickly react to events and return to the event loop as soon as possible!","title":"Blocking the event loop"},{"location":"Concurrency/qt_threading_event/#forcing-event-dispatching","text":"So, what do we do if we have a long task to run and don't want to block the event loop? - We move the task into another thread (In the next section). - We manually force the event loop to run, by (repeatedly) calling QCoreApplication::processEvents() inside our blocking task. QCoreApplication::processEvents() will process all the events in the event queue and return to the caller. QNetworkAccessManager qnam ; QNetworkReply * reply = qnam . get ( QNetworkRequest ( QUrl ( \u2026 ))); QEventLoop loop ; QObject :: connect ( reply , SIGNAL ( finished ()), & loop , SLOT ( quit ())); loop . exec (); /* reply has finished, use it */ Be very careful when reentering the event loop \"by other paths\": it can lead to unwanted recursions! Let's go back to the Button example. main(int, char) QApplication::exec() [\u2026] QWidget::event(QEvent ) Button::mousePressEvent(QMouseEvent) Button::clicked() [\u2026] Worker::doWork() // first, inner invocation QCoreApplication::processEvents() // we manually dispatch events and\u2026 [\u2026] QWidget::event(QEvent * ) // another mouse click is sent to the Button\u2026 Button::mousePressEvent(QMouseEvent *) Button::clicked() // which emits clicked() again\u2026 [\u2026] Worker::doWork() // DANG! we've recursed into our slot. A quick and easy workaround for this is passing QEventLoop::ExcludeUserInputEvents() to QCoreApplication::processEvents() about deletion: QObject * object = new QObject ; object -> deleteLater (); QDialog dialog ; dialog . exec ();","title":"Forcing event dispatching"},{"location":"Concurrency/qt_threading_event/#thread-and-qobject","text":"","title":"Thread and QObject"},{"location":"Concurrency/qt_threading_event/#qt-naming-convention","text":"Reentrant: A class is reentrant if it's safe to use its instances from more than one thread, provided that at most one thread is accessing the same instance at the same time. A function is reentrant if it's safe to invoke it from more than one thread at the same, provided that each invocation references unique data. In other words, this means that users of that class/function must serialize all accesses to instances/shared data by means of some external locking mechanism . Thread-safe: A class is thread-safe if it's safe to use its instances from more than one thread at the same time. A function is thread-safe if it's safe to invoke it from more than one thread at the same time even if the invocations reference shared data. see more...","title":"Qt naming convention"},{"location":"Concurrency/qt_threading_event/#per-thread-event-loop","text":"So far we've always talked about \"the event loop\", taking somehow per granted that there's only one event loop in a Qt application. Therefore, we say that the main event loop is the one created by the thread which invoked main() , and started with QCoreApplication::exec() (which must be called from that thread). This is also called the GUI thread , because it's the only thread in which GUI-related operations are allowed. A QThread local event loop can be started instead by calling QThread::exec() (inside its run() method): class Thread : public QThread { protected : void run () { /* \u2026 initialize \u2026 */ exec (); } }; since Qt 4.4 QThread::run() is no longer a pure virtual method; instead, it calls QThread::exec() . Exactly like QCoreApplication, QThread has also the QThread::quit() and QThread::exit() methods to stop the event loop. A thread event loop delivers events for all QObjects that are living in that thread; this includes, by default, all objects that are created into that thread, or that were moved to that thread (more info about this later). We also say that the thread affinity of a QObject is a certain thread, meaning that the object is living in that thread. This applies to objects which are built in the constructor of a QThread object: class MyThread : public QThread { public : MyThread () { otherObj = new QObject ; } private : QObject obj ; QObject * otherObj ; QScopedPointer < QObject > yetAnotherObj ; }; What's the thread affinity of obj , otherObj , yetAnotherObj after we create a MyThread object? We must look at the thread that created them: it's the thread that ran the MyThread constructor. Therefore, all three objects are not living in the MyThread thread, but in the thread that created the MyThread instance (which, by the way, is where the instance is living as well). It is very important to understand that QObject and all of its subclasses are not thread-safe (although they can be reentrant); therefore, you can not access a QObject from more than one thread at the same time, unless you serialize all accesses to the object's internal data (for instance, by protecting it with a mutex). Remember that the object may be handling events dispatched by the event loop of the thread it is living in while you're accessing it from another thread! For the same reason, you can't delete a QObject from another thread, but you must use QObject::deleteLater() , which will post an event that will ultimately cause its deletion by the thread the object is living in. Moreover, QWidget and all of its subclasses, along with other GUI-related classes (even not QObject-based, like QPixmap) are not reentrant either: they can be used exclusively from the GUI thread. We can change a QObject's affinity by calling QObject::moveToThread() ; this will change the affinity of the object and of its children. Since QObject is not thread-safe, we must use it from the thread the object is living in; that is, you can only push objects from the thread they're living in to other threads, and not pull them or move them around from other threads. Moreover, Qt requires that the child of a QObject must live in the same thread where the parent is living. This implies that: you can't use QObject::moveToThread() on a object which has a parent; you must not create objects in a QThread using the QThread object itself as their parent: class Thread : public QThread { void run () { QObject * obj = new QObject ( this ); // WRONG!!!!!!! } }; This is because the QThread object is living in another thread , namely, the one in which it was created.","title":"Per-thread event loop"},{"location":"Concurrency/qt_threading_event/#signals-and-slots-across-threads","text":"When we connect a signal to a slot, the fifth argument of QObject::connect is used to specify the connection type: - a direct connection means that the slot is always invoked directly by the thread the signal is emitted from; - a queued connection means that an event is posted in the event queue of the thread the receiver is living in, which will be picked up by the event loop and will cause the slot invocation sometime later; - a blocking queued connection is like a queued connection, but the sender thread blocks until the event is picked up by the event loop of the thread the receiver is living in, the slot is invoked, and it returns; - an automatic connection ( the default ) means that if the thread the receiver is living in is the same as the current thread, a direct connection is used; otherwise, a queued connection is used. In every case, keep in mind the thread the emitting object is living in has no importance at all! For instance: class Thread : public QThread { Q_OBJECT signals : void aSignal (); protected : void run () { emit aSignal (); } }; /* \u2026 */ Thread thread ; Object obj ; QObject :: connect ( & thread , SIGNAL ( aSignal ()), & obj , SLOT ( aSlot ())); thread . start (); The signal aSignal() will be emitted by the new thread; since it is not the thread the Object object is living in, a queued connection will be used. Another common pitfall is the following one: class Thread : public QThread { Q_OBJECT slots : void aSlot () { /* \u2026 */ } protected : void run () { /* \u2026 */ } }; /* \u2026 */ Thread thread ; Object obj ; QObject :: connect ( & obj , SIGNAL ( aSignal ()), & thread , SLOT ( aSlot ())); thread . start (); obj . emitSignal (); When obj emits its aSignal() signal, which kind of connection will be used? You should've guessed it: a direct connection . That's because the Thread object is living in the thread that emits the signal. In the aSlot() slot we could then access some Thread's member variable while they're being accessed by the run() method, which is running concurrently: this is the perfect recipe for disaster. Yet another example, probably the most important one: class Thread : public QThread { Q_OBJECT slots : void aSlot () { /* \u2026 */ } protected : void run () { QObject * obj = new Object ; connect ( obj , SIGNAL ( aSignal ()), this , SLOT ( aSlot ())); /* \u2026 */ } }; In this case a queued connection is used, therefore you're required to run an event loop in the thread the Thread object is living in. A solution you'll often found in forums, blog posts etc. is to add a moveToThread(this) to the Thread constructor class Thread : public QThread { Q_OBJECT public : Thread () { moveToThread ( this ); // WRONG } /* \u2026 */ }; which indeed will work (because now the affinity of the Thread object changed), but it's a very bad design. What's wrong here is that we're misunderstanding the purpose of a thread object (the QThread subclass): QThread objects are not threads; they're control objects around a thread, therefore meant to be used from another thread (usually, the one they're living in). A good way to achieve the same result is splitting the \"working\" part from the \"controller\" part, that is, writing a QObject subclass and using QObject::moveToThread() to change its affinity: class Worker : public QObject { Q_OBJECT public slots : void doWork () { /* \u2026 */ } }; /* \u2026 */ QThread * thread = new QThread ; Worker * worker = new Worker ; connect ( obj , SIGNAL ( workReady ()), worker , SLOT ( doWork ())); worker -> moveToThread ( thread ); thread -> start ();","title":"Signals and slots across threads"},{"location":"Concurrency/qt_threading_event/#dos-and-donts","text":"You can: - add signals to a QThread subclass. It's perfectly safe and they'll do the \"right thing\" (see above; the sender's thread affinity does not matter). You shouldn't: - use moveToThread(this) . - force the connection type: this usually means that you're doing something wrong, like mixing the control interface of QThread with the program logic (which should stay in a separate object which lives in that thread). - add slots to a QThread subclass: they'll be invoked from the \"wrong\" thread, that is, not the one the QThread object is managing, but the one that object is living in, forcing you to specify a direct connection and/or to use moveToThread(this). - use QThread::terminate. You must no: - quit your program when threads are still running. Use QThread::wait to wait for their termination. - destroy a QThread while the thread that it's managing is still running. If you want some kind of \"self-destruction\", you can connect the finished() signal with the deleteLater() slot.","title":"DOs and DON'Ts"},{"location":"Concurrency/qt_threading_event/#when-shouldnt-i-use-threads","text":"Timer Networking/State mechines Jobs splittable in chunks , like this: class Worker : public QObject { Q_OBJECT public slots : void startProcessing () { processItem ( 0 ); } void processItem ( int index ) { /* process items[index] \u2026 */ if ( index < numberOfItems ) QMetaObject :: invokeMethod ( this , \"processItem\" , Qt :: QueuedConnection , Q_ARG ( int , index + 1 )); } };","title":"When shouldn't I use threads?"},{"location":"Concurrency/qt_threading_event/#thread-support-in-qt","text":"The Threading Classes Multithreading Technologies in Qt Synchronizing Threads","title":"Thread Support in Qt"},{"location":"Concurrency/qt_threading_event/#_1","text":"qt event and thread: https://wiki.qt.io/Threads_Events_QObjects qt thread basic: https://doc.qt.io/qt-5/thread-basics.html qt threading :https://doc.qt.io/qt-5/threads.html","title":"\u53c3\u8003\u8cc7\u6599"},{"location":"Design%20pattern/","text":"Design Pattern \u7ae0\u7bc0 Welcome to Design Pattern (Strategy pattern) Observer pattern Decorator pattern Factory pattern Singleton pattern Command pattern Example Code Repository on Git design_pattern","title":"Design Pattern"},{"location":"Design%20pattern/#design-pattern","text":"","title":"Design Pattern"},{"location":"Design%20pattern/#_1","text":"Welcome to Design Pattern (Strategy pattern) Observer pattern Decorator pattern Factory pattern Singleton pattern Command pattern","title":"\u7ae0\u7bc0"},{"location":"Design%20pattern/#example-code-repository-on-git","text":"design_pattern","title":"Example Code Repository on Git"},{"location":"Design%20pattern/command/","text":"Command pattern (\u547d\u4ee4\u6a21\u5f0f) \u6211\u5011\u60f3\u8a2d\u8a08\u4e00\u500b API\uff0c\u4f9b\u5bb6\u96fb\u81ea\u52d5\u5316\u7684\u9059\u63a7\u5668\u4f7f\u7528\u3002\u9019\u500b\u9059\u63a7\u5668\u5177\u6709\u4e03\u500b\u53ef\u7de8\u7a0b\u7684\u63d2\u69fd (\u6bcf\u500b\u90fd\u53ef\u4ee5\u6307\u5b9a\u5230\u4e00\u500b\u4e0d\u540c\u7684\u5bb6\u96fb\u88dd\u7f6e)\uff0c\u6bcf\u500b\u63d2\u69fd\u90fd\u6709\u5c0d\u61c9\u7684\u958b\u95dc\u3002\u9019\u500b\u9059\u63a7\u5668\u9084\u5177\u5099\u4e00\u500b\u6574\u9ad4\u7684\u5fa9\u539f\u6309\u9215\u3002 \u8b93\u6211\u5011\u4f86\u770b\u770b\u9019\u500b\u9059\u63a7\u5668 \u770b\u4e00\u4e0b\u5ee0\u5546\u7684\u985e\u5225 \u8a0e\u8ad6\u5982\u4f55\u8a2d\u8a08\u9019\u500b\u9059\u63a7\u5668 A: \u6211\u8a8d\u70ba\u5fc5\u9808\u628a\u5b83\u5207\u5272\u958b: \u9059\u63a7\u5668\u61c9\u8a72\u77e5\u9053\u5982\u4f55\u89e3\u8b80\u6309\u9215\u88ab\u6309\u4e0b\u7684\u52d5\u4f5c\uff0c\u7136\u5f8c\u767c\u51fa\u6b63\u78ba\u7684\u8acb\u6c42\uff0c\u4f46\u662f\u9059\u63a7\u5668\u4e0d\u9700\u77e5\u9053\u9019\u4e9b\u5bb6\u96fb\u81ea\u52d5\u5316\u7684\u7d30\u7bc0\uff0c\u6216\u8005\u5982\u4f55\u6253\u958b\u71b1\u6c34\u5668\u3002 B: \u6709\u4e00\u500b\u6a21\u5f0f\u53eb\u505a \"\u547d\u4ee4\u6a21\u5f0f\"\uff0c\u4ed6\u53ef\u4ee5\u5c07 \"\u52d5\u4f5c\u7684\u8981\u6c42\u8005\" \u5f9e \"\u52d5\u4f5c\u7684\u57f7\u884c\u8005\" \u7269\u4ef6\u4e2d\u9b06\u7d81\u3002\u5728\u4f60\u5011\u7684\u4f8b\u5b50\u4e2d\uff0c\u8981\u6c42\u8005\u53ef\u4ee5\u662f\u9059\u63a7\u5668\uff0c\u800c\u57f7\u884c\u8005\u7269\u4ef6\u5c31\u662f\u5ee0\u5546\u985e\u5225\u5176\u4e2d\u4e4b\u4e00\u7684\u5be6\u9ad4\u3002 \u56de\u5230\u547d\u4ee4\u6a21\u5f0f\u7684\u7c21\u55ae\u4ecb\u7d39 \u6211\u5011\u53ef\u4ee5\u5229\u7528\u9910\u5ef3\uff0c\u85c9\u7531\u7814\u7a76\u5ba2\u6236\uff0c\u670d\u52d9\u751f\uff0c\u8a02\u55ae\uff0c\u4ee5\u53ca\u5eda\u5e2b\u4e4b\u9593\u7684\u4e92\u52d5\u3002\u85c9\u7531\u9019\u6a23\u7684\u4e92\u52d5\uff0c\u53ef\u4ee5\u9ad4\u6703\u5230\u547d\u4ee4\u6a21\u5f0f\u6240\u727d\u6d89\u5230\u7684\u7269\u4ef6\uff0c\u4e5f\u6703\u77e5\u9053\u5b83\u5011\u4e4b\u9593\u662f\u5982\u4f55\u88ab\u9b06\u7d81\u3002 \u5927\u5bb6\u53ef\u4ee5\u770b\u5230\uff0c\u9019\u9593\u9910\u5ef3\u7684\u670d\u52d9\u751f\u85c9\u7531\u8a02\u55ae\u800c\u548c\u5eda\u5e2b\u4e4b\u9593\u9b06\u7d81\u3002 \u5f9e\u9910\u5ef3\u56de\u5230\u547d\u4ee4\u6a21\u5f0f \u7b2c\u4e00\u500b\u547d\u4ee4\u7269\u4ef6 \u5b9a\u7fa9\u547d\u4ee4\u6a21\u5f0f \u547d\u4ee4\u6a21\u5f0f\u5c07 \"\u8acb\u6c42\" \u5c01\u88dd\u6210\u7269\u4ef6\uff0c\u4ee5\u4fbf\u4f7f\u7528\u4e0d\u540c\u7684\u8acb\u6c42\uff0c\u4f47\u5217\uff0c\u6216\u662f\u65e5\u8a8c\uff0c\u53c3\u6578\u5316\u5176\u4ed6\u7269\u4ef6\u3002\u547d\u4ee4\u6a21\u5f0f\u4e5f\u652f\u63f4\u53ef\u5fa9\u539f\u7684\u4f5c\u696d\u3002 \u5c07\u547d\u4ee4\u6307\u5b9a\u5230\u63d2\u69fd \u5be6\u8e10\u9059\u63a7\u5668 \u5be6\u8e10\u547d\u4ee4 \u9010\u6b65\u6e2c\u8a66\u9059\u63a7\u5668 \u7b49\u7b49\uff0c\u600e\u9ebc\u6703\u6709 NoCommand\uff0c\u9019\u662f\u600e\u9ebc\u56de\u4e8b? \u6211\u5011\u7684\u78ba\u7701\u7565\u4e86\u4e00\u4e9b\u6771\u897f\u3002\u5728\u9059\u63a7\u5668\u4e2d\uff0c\u6211\u5011\u4e0d\u60f3\u6aa2\u67e5\u6bcf\u6b21\u662f\u5426\u67d0\u500b\u63d2\u69fd\u90fd\u5177\u6709\u547d\u4ee4\u3002\u6bd4\u65b9\u8aaa\uff0c\u5728\u9019\u500b onButtonWasPushed() \u65b9\u6cd5\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u9019\u6a23\u7684\u7a0b\u5f0f\u78bc: \u6240\u4ee5\u5982\u4f55\u907f\u514d\u4e0a\u9762\u7684\u4f5c\u6cd5? \u6211\u5011\u53ef\u4ee5\u5be6\u8e10\u51fa\u4e00\u500b\u4e0d\u505a\u4e8b\u60c5\u7684\u547d\u4ee4 \u9019\u9ebc\u4e00\u4f86\uff0c\u5728 RemoteControl \u5efa\u69cb\u5f0f\u4e2d\uff0c\u5c07\u6bcf\u500b\u63d2\u69fd\u90fd\u9810\u5148\u6307\u5b9a\u6210 NoCommand \u7269\u4ef6\uff0c\u4ee5\u4fbf\u78ba\u5b9a\u6bcf\u500b\u63d2\u69fd\u6c38\u9060\u90fd\u6709\u547d\u4ee4\u7269\u4ef6\u3002 \u52a0\u5165 Undo \u529f\u80fd \u6e2c\u8a66 Undo \u529f\u80fd \u6bcf\u500b\u9059\u63a7\u5668\u61c9\u8a72\u5177\u5099 \"\u5de8\u96c6\" \u5f62\u5f0f! \u6211\u5011\u5e0c\u671b\u9059\u63a7\u5668\u53ef\u4ee5\u53ea\u6309\u4e00\u500b\u6309\u9375\uff0c\u5c31\u540c\u6642\u5f04\u6697\u71c8\u5149\uff0c\u6253\u958b\u97f3\u97ff\u548c\u96fb\u8996\uff0c\u8a2d\u5b9a\u597d DVD\u3002 \u4f7f\u7528\u5de8\u96c6\u547d\u4ee4 \u547d\u4ee4\u6a21\u5f0f\u7684\u66f4\u591a\u7528\u9014: \u4f47\u5217\u8acb\u6c42 \u547d\u4ee4\u53ef\u4ee5\u5c07\u904b\u7b97\u5305\u88dd\u8d77\u4f86 (\u4e00\u500b\u63a5\u6536\u8005\u548c\u4e00\u7d44\u52d5\u4f5c)\uff0c\u7136\u5f8c\u5c07\u5b83\u50b3\u4f86\u50b3\u53bb\uff0c\u5c31\u50cf\u4e00\u822c\u7684\u7269\u4ef6\u4e00\u6a23\u3002\u4e8b\u5be6\u4e0a\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u4e0d\u540c\u57f7\u884c\u7dd2\u4e2d\u88ab\u8abf\u7528\u3002\u6211\u5011\u53ef\u4ee5\u5229\u7528\u9019\u6a23\u7684\u7279\u6027\u884d\u751f\u51fa\u4e00\u4e9b\u61c9\u7528\u3002 \u4f8b\u5982: \u6392\u7a0b\u5668\uff0c\u57f7\u884c\u7dd2\u6c60\uff0c\u4ee5\u53ca\u5de5\u4f5c\u4f47\u5217\u7b49... \u60f3\u50cf\u4e00\u500b\u5de5\u4f5c\u4f47\u5217\uff0c\u5728\u67d0\u4e00\u7aef\u52a0\u5165\u65b0\u7684\u547d\u4ee4\uff0c\u7136\u5f8c\u518d\u53e6\u4e00\u7aef\u5247\u662f\u57f7\u884c\u7dd2\uff0c\u57f7\u884c\u7dd2\u5f9e\u4f47\u5217\u4e2d\u53d6\u51fa\u4e00\u500b\u547d\u4ee4\uff0c execute() \u5b8c\u5f8c\u4e1f\u68c4\u3002 \u5229\u7528\u547d\u4ee4\u6a21\u5f0f\uff0c\u5de5\u4f5c\u4f47\u5217\u985e\u5225\u548c\u9032\u884c\u8a08\u7b97\u7684\u7269\u4ef6\u4e4b\u9593\u5b8c\u5168\u662f\u9b06\u7d81\u7684\u3002\u6b64\u523b\u57f7\u884c\u7dd2\u53ef\u80fd\u5728\u9032\u884c\u8ca1\u52d9\u904b\u7b97\uff0c\u4e0b\u4e00\u523b\u537b\u5728\u8b80\u53d6\u7db2\u8def\u8cc7\u6599\u3002\u5de5\u4f5c\u4f47\u5217\u7269\u4ef6\u4e0d\u5728\u4e4e\u5230\u5e95\u505a\u4e9b\u4ec0\u9ebc\uff0c\u53ea\u77e5\u9053\u53d6\u51fa\u547d\u4ee4\u7269\u4ef6\uff0c\u7136\u5f8c\u57f7\u884c execute() \u3002 \u547d\u4ee4\u6a21\u5f0f\u7684\u66f4\u591a\u7528\u9014: \u65e5\u8a8c\u8acb\u6c42 \u67d0\u4e00\u4e9b\u61c9\u7528\u9700\u8981\u6211\u5011\u5c07\u6240\u6709\u7684\u52d5\u4f5c\u90fd\u8a18\u9304\u5728\u65e5\u8a8c\u4e2d\uff0c\u4e26\u80fd\u5728\u7cfb\u7d71\u7576\u6a5f\u4e4b\u5f8c\uff0c\u91cd\u65b0\u8abf\u7528\u9019\u4e9b\u52d5\u4f5c\u56de\u5fa9\u5230\u4e4b\u524d\u7684\u72c0\u614b\u3002\u85c9\u7531\u65b0\u589e\u5169\u500b\u65b9\u6cd5 ( store() \uff0c load() )\uff0c\u547d\u4ee4\u6a21\u5f0f\u5c31\u80fd\u652f\u63f4\u9019\u4e00\u9ede\u3002 \u8981\u600e\u9ebc\u505a\u5462? \u7576\u6211\u5011\u57f7\u884c\u547d\u4ee4\u7684\u6642\u5019\uff0c\u5c07\u6b77\u53f2\u7d00\u9304\u5132\u5b58\u5728\u78c1\u789f\u4e2d\u3002\u4e00\u65e6\u7cfb\u7d71\u7576\u6a5f\uff0c\u5c31\u53ef\u4ee5\u5c07\u547d\u4ee4\u7269\u4ef6\u91cd\u65b0\u8f09\u5165\uff0c\u4e26\u4e00\u53e3\u6c23\u4f9d\u5e8f\u8abf\u7528\u9019\u4e9b\u7269\u4ef6\u7684 execute() \u65b9\u6cd5\u3002 \u9019\u7a2e\u65e5\u8a8c\u65b9\u5f0f\u5c0d\u65bc\u9059\u63a7\u5668\u4f86\u8aaa\u4e0d\u5177\u6709\u610f\u7fa9\uff0c\u7136\u800c\uff0c\u6709\u8a31\u591a\u61c9\u7528\u6703\u8abf\u7528\u5927\u578b\u8cc7\u6599\u7d50\u69cb\u7684\u52d5\u4f5c\uff0c\u7121\u6cd5\u88ab\u5feb\u901f\u7684\u5132\u5b58\u3002\u85c9\u7531\u4f7f\u7528\u7d00\u9304\u65e5\u8a8c\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u4e0a\u6b21\u67e5\u6838\u9ede (check point) \u4e4b\u5f8c\u7684\u6240\u6709\u64cd\u4f5c\u7d00\u9304\u4e0b\u4f86\uff0c\u5982\u679c\u7cfb\u7d71\u51fa\u72c0\u6cc1\uff0c\u5f9e\u67e5\u6838\u9ede\u958b\u59cb\u63a1\u7528\u9019\u4e9b\u64cd\u4f5c\u3002\u5c0d\u66f4\u9ad8\u968e\u7684\u61c9\u7528\u800c\u8a00\uff0c\u9019\u4e9b\u6280\u8853\u53ef\u4ee5\u88ab\u64f4\u5145\u63a1\u7528\u4ea4\u6613\u6a5f\u5236 (transection)\uff0c\u4e5f\u5c31\u662f\u8aaa\uff0c\u4e00\u6574\u7fa4\u64cd\u4f5c\u5fc5\u9808\u5168\u90e8\u9032\u884c\u5b8c\u6210\uff0c\u6216\u8005\u6c92\u6709\u9032\u884c\u4efb\u4f55\u64cd\u4f5c\u3002","title":"Command pattern (\u547d\u4ee4\u6a21\u5f0f)"},{"location":"Design%20pattern/command/#command-pattern","text":"\u6211\u5011\u60f3\u8a2d\u8a08\u4e00\u500b API\uff0c\u4f9b\u5bb6\u96fb\u81ea\u52d5\u5316\u7684\u9059\u63a7\u5668\u4f7f\u7528\u3002\u9019\u500b\u9059\u63a7\u5668\u5177\u6709\u4e03\u500b\u53ef\u7de8\u7a0b\u7684\u63d2\u69fd (\u6bcf\u500b\u90fd\u53ef\u4ee5\u6307\u5b9a\u5230\u4e00\u500b\u4e0d\u540c\u7684\u5bb6\u96fb\u88dd\u7f6e)\uff0c\u6bcf\u500b\u63d2\u69fd\u90fd\u6709\u5c0d\u61c9\u7684\u958b\u95dc\u3002\u9019\u500b\u9059\u63a7\u5668\u9084\u5177\u5099\u4e00\u500b\u6574\u9ad4\u7684\u5fa9\u539f\u6309\u9215\u3002","title":"Command pattern (\u547d\u4ee4\u6a21\u5f0f)"},{"location":"Design%20pattern/command/#_1","text":"","title":"\u8b93\u6211\u5011\u4f86\u770b\u770b\u9019\u500b\u9059\u63a7\u5668"},{"location":"Design%20pattern/command/#_2","text":"","title":"\u770b\u4e00\u4e0b\u5ee0\u5546\u7684\u985e\u5225"},{"location":"Design%20pattern/command/#_3","text":"A: \u6211\u8a8d\u70ba\u5fc5\u9808\u628a\u5b83\u5207\u5272\u958b: \u9059\u63a7\u5668\u61c9\u8a72\u77e5\u9053\u5982\u4f55\u89e3\u8b80\u6309\u9215\u88ab\u6309\u4e0b\u7684\u52d5\u4f5c\uff0c\u7136\u5f8c\u767c\u51fa\u6b63\u78ba\u7684\u8acb\u6c42\uff0c\u4f46\u662f\u9059\u63a7\u5668\u4e0d\u9700\u77e5\u9053\u9019\u4e9b\u5bb6\u96fb\u81ea\u52d5\u5316\u7684\u7d30\u7bc0\uff0c\u6216\u8005\u5982\u4f55\u6253\u958b\u71b1\u6c34\u5668\u3002 B: \u6709\u4e00\u500b\u6a21\u5f0f\u53eb\u505a \"\u547d\u4ee4\u6a21\u5f0f\"\uff0c\u4ed6\u53ef\u4ee5\u5c07 \"\u52d5\u4f5c\u7684\u8981\u6c42\u8005\" \u5f9e \"\u52d5\u4f5c\u7684\u57f7\u884c\u8005\" \u7269\u4ef6\u4e2d\u9b06\u7d81\u3002\u5728\u4f60\u5011\u7684\u4f8b\u5b50\u4e2d\uff0c\u8981\u6c42\u8005\u53ef\u4ee5\u662f\u9059\u63a7\u5668\uff0c\u800c\u57f7\u884c\u8005\u7269\u4ef6\u5c31\u662f\u5ee0\u5546\u985e\u5225\u5176\u4e2d\u4e4b\u4e00\u7684\u5be6\u9ad4\u3002","title":"\u8a0e\u8ad6\u5982\u4f55\u8a2d\u8a08\u9019\u500b\u9059\u63a7\u5668"},{"location":"Design%20pattern/command/#_4","text":"\u6211\u5011\u53ef\u4ee5\u5229\u7528\u9910\u5ef3\uff0c\u85c9\u7531\u7814\u7a76\u5ba2\u6236\uff0c\u670d\u52d9\u751f\uff0c\u8a02\u55ae\uff0c\u4ee5\u53ca\u5eda\u5e2b\u4e4b\u9593\u7684\u4e92\u52d5\u3002\u85c9\u7531\u9019\u6a23\u7684\u4e92\u52d5\uff0c\u53ef\u4ee5\u9ad4\u6703\u5230\u547d\u4ee4\u6a21\u5f0f\u6240\u727d\u6d89\u5230\u7684\u7269\u4ef6\uff0c\u4e5f\u6703\u77e5\u9053\u5b83\u5011\u4e4b\u9593\u662f\u5982\u4f55\u88ab\u9b06\u7d81\u3002 \u5927\u5bb6\u53ef\u4ee5\u770b\u5230\uff0c\u9019\u9593\u9910\u5ef3\u7684\u670d\u52d9\u751f\u85c9\u7531\u8a02\u55ae\u800c\u548c\u5eda\u5e2b\u4e4b\u9593\u9b06\u7d81\u3002","title":"\u56de\u5230\u547d\u4ee4\u6a21\u5f0f\u7684\u7c21\u55ae\u4ecb\u7d39"},{"location":"Design%20pattern/command/#_5","text":"","title":"\u5f9e\u9910\u5ef3\u56de\u5230\u547d\u4ee4\u6a21\u5f0f"},{"location":"Design%20pattern/command/#_6","text":"","title":"\u7b2c\u4e00\u500b\u547d\u4ee4\u7269\u4ef6"},{"location":"Design%20pattern/command/#_7","text":"\u547d\u4ee4\u6a21\u5f0f\u5c07 \"\u8acb\u6c42\" \u5c01\u88dd\u6210\u7269\u4ef6\uff0c\u4ee5\u4fbf\u4f7f\u7528\u4e0d\u540c\u7684\u8acb\u6c42\uff0c\u4f47\u5217\uff0c\u6216\u662f\u65e5\u8a8c\uff0c\u53c3\u6578\u5316\u5176\u4ed6\u7269\u4ef6\u3002\u547d\u4ee4\u6a21\u5f0f\u4e5f\u652f\u63f4\u53ef\u5fa9\u539f\u7684\u4f5c\u696d\u3002","title":"\u5b9a\u7fa9\u547d\u4ee4\u6a21\u5f0f"},{"location":"Design%20pattern/command/#_8","text":"","title":"\u5c07\u547d\u4ee4\u6307\u5b9a\u5230\u63d2\u69fd"},{"location":"Design%20pattern/command/#_9","text":"","title":"\u5be6\u8e10\u9059\u63a7\u5668"},{"location":"Design%20pattern/command/#_10","text":"","title":"\u5be6\u8e10\u547d\u4ee4"},{"location":"Design%20pattern/command/#_11","text":"\u7b49\u7b49\uff0c\u600e\u9ebc\u6703\u6709 NoCommand\uff0c\u9019\u662f\u600e\u9ebc\u56de\u4e8b? \u6211\u5011\u7684\u78ba\u7701\u7565\u4e86\u4e00\u4e9b\u6771\u897f\u3002\u5728\u9059\u63a7\u5668\u4e2d\uff0c\u6211\u5011\u4e0d\u60f3\u6aa2\u67e5\u6bcf\u6b21\u662f\u5426\u67d0\u500b\u63d2\u69fd\u90fd\u5177\u6709\u547d\u4ee4\u3002\u6bd4\u65b9\u8aaa\uff0c\u5728\u9019\u500b onButtonWasPushed() \u65b9\u6cd5\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u9019\u6a23\u7684\u7a0b\u5f0f\u78bc: \u6240\u4ee5\u5982\u4f55\u907f\u514d\u4e0a\u9762\u7684\u4f5c\u6cd5? \u6211\u5011\u53ef\u4ee5\u5be6\u8e10\u51fa\u4e00\u500b\u4e0d\u505a\u4e8b\u60c5\u7684\u547d\u4ee4 \u9019\u9ebc\u4e00\u4f86\uff0c\u5728 RemoteControl \u5efa\u69cb\u5f0f\u4e2d\uff0c\u5c07\u6bcf\u500b\u63d2\u69fd\u90fd\u9810\u5148\u6307\u5b9a\u6210 NoCommand \u7269\u4ef6\uff0c\u4ee5\u4fbf\u78ba\u5b9a\u6bcf\u500b\u63d2\u69fd\u6c38\u9060\u90fd\u6709\u547d\u4ee4\u7269\u4ef6\u3002","title":"\u9010\u6b65\u6e2c\u8a66\u9059\u63a7\u5668"},{"location":"Design%20pattern/command/#undo","text":"","title":"\u52a0\u5165 Undo \u529f\u80fd"},{"location":"Design%20pattern/command/#undo_1","text":"","title":"\u6e2c\u8a66 Undo \u529f\u80fd"},{"location":"Design%20pattern/command/#_12","text":"\u6211\u5011\u5e0c\u671b\u9059\u63a7\u5668\u53ef\u4ee5\u53ea\u6309\u4e00\u500b\u6309\u9375\uff0c\u5c31\u540c\u6642\u5f04\u6697\u71c8\u5149\uff0c\u6253\u958b\u97f3\u97ff\u548c\u96fb\u8996\uff0c\u8a2d\u5b9a\u597d DVD\u3002","title":"\u6bcf\u500b\u9059\u63a7\u5668\u61c9\u8a72\u5177\u5099 \"\u5de8\u96c6\" \u5f62\u5f0f!"},{"location":"Design%20pattern/command/#_13","text":"","title":"\u4f7f\u7528\u5de8\u96c6\u547d\u4ee4"},{"location":"Design%20pattern/command/#_14","text":"\u547d\u4ee4\u53ef\u4ee5\u5c07\u904b\u7b97\u5305\u88dd\u8d77\u4f86 (\u4e00\u500b\u63a5\u6536\u8005\u548c\u4e00\u7d44\u52d5\u4f5c)\uff0c\u7136\u5f8c\u5c07\u5b83\u50b3\u4f86\u50b3\u53bb\uff0c\u5c31\u50cf\u4e00\u822c\u7684\u7269\u4ef6\u4e00\u6a23\u3002\u4e8b\u5be6\u4e0a\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u4e0d\u540c\u57f7\u884c\u7dd2\u4e2d\u88ab\u8abf\u7528\u3002\u6211\u5011\u53ef\u4ee5\u5229\u7528\u9019\u6a23\u7684\u7279\u6027\u884d\u751f\u51fa\u4e00\u4e9b\u61c9\u7528\u3002 \u4f8b\u5982: \u6392\u7a0b\u5668\uff0c\u57f7\u884c\u7dd2\u6c60\uff0c\u4ee5\u53ca\u5de5\u4f5c\u4f47\u5217\u7b49... \u60f3\u50cf\u4e00\u500b\u5de5\u4f5c\u4f47\u5217\uff0c\u5728\u67d0\u4e00\u7aef\u52a0\u5165\u65b0\u7684\u547d\u4ee4\uff0c\u7136\u5f8c\u518d\u53e6\u4e00\u7aef\u5247\u662f\u57f7\u884c\u7dd2\uff0c\u57f7\u884c\u7dd2\u5f9e\u4f47\u5217\u4e2d\u53d6\u51fa\u4e00\u500b\u547d\u4ee4\uff0c execute() \u5b8c\u5f8c\u4e1f\u68c4\u3002 \u5229\u7528\u547d\u4ee4\u6a21\u5f0f\uff0c\u5de5\u4f5c\u4f47\u5217\u985e\u5225\u548c\u9032\u884c\u8a08\u7b97\u7684\u7269\u4ef6\u4e4b\u9593\u5b8c\u5168\u662f\u9b06\u7d81\u7684\u3002\u6b64\u523b\u57f7\u884c\u7dd2\u53ef\u80fd\u5728\u9032\u884c\u8ca1\u52d9\u904b\u7b97\uff0c\u4e0b\u4e00\u523b\u537b\u5728\u8b80\u53d6\u7db2\u8def\u8cc7\u6599\u3002\u5de5\u4f5c\u4f47\u5217\u7269\u4ef6\u4e0d\u5728\u4e4e\u5230\u5e95\u505a\u4e9b\u4ec0\u9ebc\uff0c\u53ea\u77e5\u9053\u53d6\u51fa\u547d\u4ee4\u7269\u4ef6\uff0c\u7136\u5f8c\u57f7\u884c execute() \u3002","title":"\u547d\u4ee4\u6a21\u5f0f\u7684\u66f4\u591a\u7528\u9014: \u4f47\u5217\u8acb\u6c42"},{"location":"Design%20pattern/command/#_15","text":"\u67d0\u4e00\u4e9b\u61c9\u7528\u9700\u8981\u6211\u5011\u5c07\u6240\u6709\u7684\u52d5\u4f5c\u90fd\u8a18\u9304\u5728\u65e5\u8a8c\u4e2d\uff0c\u4e26\u80fd\u5728\u7cfb\u7d71\u7576\u6a5f\u4e4b\u5f8c\uff0c\u91cd\u65b0\u8abf\u7528\u9019\u4e9b\u52d5\u4f5c\u56de\u5fa9\u5230\u4e4b\u524d\u7684\u72c0\u614b\u3002\u85c9\u7531\u65b0\u589e\u5169\u500b\u65b9\u6cd5 ( store() \uff0c load() )\uff0c\u547d\u4ee4\u6a21\u5f0f\u5c31\u80fd\u652f\u63f4\u9019\u4e00\u9ede\u3002 \u8981\u600e\u9ebc\u505a\u5462? \u7576\u6211\u5011\u57f7\u884c\u547d\u4ee4\u7684\u6642\u5019\uff0c\u5c07\u6b77\u53f2\u7d00\u9304\u5132\u5b58\u5728\u78c1\u789f\u4e2d\u3002\u4e00\u65e6\u7cfb\u7d71\u7576\u6a5f\uff0c\u5c31\u53ef\u4ee5\u5c07\u547d\u4ee4\u7269\u4ef6\u91cd\u65b0\u8f09\u5165\uff0c\u4e26\u4e00\u53e3\u6c23\u4f9d\u5e8f\u8abf\u7528\u9019\u4e9b\u7269\u4ef6\u7684 execute() \u65b9\u6cd5\u3002 \u9019\u7a2e\u65e5\u8a8c\u65b9\u5f0f\u5c0d\u65bc\u9059\u63a7\u5668\u4f86\u8aaa\u4e0d\u5177\u6709\u610f\u7fa9\uff0c\u7136\u800c\uff0c\u6709\u8a31\u591a\u61c9\u7528\u6703\u8abf\u7528\u5927\u578b\u8cc7\u6599\u7d50\u69cb\u7684\u52d5\u4f5c\uff0c\u7121\u6cd5\u88ab\u5feb\u901f\u7684\u5132\u5b58\u3002\u85c9\u7531\u4f7f\u7528\u7d00\u9304\u65e5\u8a8c\uff0c\u6211\u5011\u53ef\u4ee5\u5c07\u4e0a\u6b21\u67e5\u6838\u9ede (check point) \u4e4b\u5f8c\u7684\u6240\u6709\u64cd\u4f5c\u7d00\u9304\u4e0b\u4f86\uff0c\u5982\u679c\u7cfb\u7d71\u51fa\u72c0\u6cc1\uff0c\u5f9e\u67e5\u6838\u9ede\u958b\u59cb\u63a1\u7528\u9019\u4e9b\u64cd\u4f5c\u3002\u5c0d\u66f4\u9ad8\u968e\u7684\u61c9\u7528\u800c\u8a00\uff0c\u9019\u4e9b\u6280\u8853\u53ef\u4ee5\u88ab\u64f4\u5145\u63a1\u7528\u4ea4\u6613\u6a5f\u5236 (transection)\uff0c\u4e5f\u5c31\u662f\u8aaa\uff0c\u4e00\u6574\u7fa4\u64cd\u4f5c\u5fc5\u9808\u5168\u90e8\u9032\u884c\u5b8c\u6210\uff0c\u6216\u8005\u6c92\u6709\u9032\u884c\u4efb\u4f55\u64cd\u4f5c\u3002","title":"\u547d\u4ee4\u6a21\u5f0f\u7684\u66f4\u591a\u7528\u9014: \u65e5\u8a8c\u8acb\u6c42"},{"location":"Design%20pattern/decorator/","text":"\u88dd\u98fe\u8005\u6a21\u5f0f (Decorator pattern) \u661f\u5df4\u514b\u5496\u5561 \u6211\u5011\u8a2d\u8a08\u4e00\u500b\u8a02\u55ae\u7cfb\u7d71\uff0c\u539f\u5148\u7684\u8a2d\u8a08\u662f\u9019\u6a23\u7684: \u8cfc\u8cb7\u5496\u5561\u6642\uff0c\u4e5f\u53ef\u4ee5\u8981\u6c42\u5404\u7a2e\u52a0\u6599\uff0c\u4f8b\u5982:\u725b\u5976 (steamed milk), \u8c46\u6f3f (soy), \u6469\u5361 (mocha)\u3002\u661f\u5df4\u514b\u6703\u6839\u64da\u52a0\u6599\u659f\u914c\u6536\u8cbb\uff0c\u6240\u4ee5\u8a02\u55ae\u7cfb\u7d71\u8a2d\u8a08\u4e0a\u5fc5\u9808\u8003\u616e\u52a0\u6599\u7684\u90e8\u5206\u3002 \u9019\u662f\u6211\u5011\u5617\u8a66\u7684\u7b2c\u4e00\u500b\u7248\u672c: \u9019\u8a2d\u8a08\u986f\u7136\u662f\u7b28\u900f\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u5be6\u9ad4\u8b8a\u6578\u8ddf\u7e7c\u627f\uff0c\u5c31\u53ef\u4ee5\u8ffd\u8e64\u9019\u4e9b\u914d\u6599\u4e86: \u9019\u6a23\u4ecd\u7136\u6709\u4e00\u4e9b\u8a2d\u8a08\u4e0a\u7684\u554f\u984c: \u914d\u6599\u50f9\u683c\u6539\u8b8a\u6703\u4f7f\u5f97\u6211\u5011\u9700\u8981\u66f4\u6539\u7a0b\u5f0f\u78bc\u3002 \u4e00\u65e6\u51fa\u73fe\u65b0\u7684\u914d\u6599\uff0c\u5c31\u9700\u8981\u52a0\u5165\u65b0\u65b9\u6cd5\uff0c\u4e26\u6539\u8b8a\u8d85\u985e\u5225\u4e2d cost() \u5c0d\u65bc\u914d\u6599\u50f9\u683c\u7684\u8a08\u7b97\u3002 \u67d0\u4e9b\u53e3\u5473\u5c0d\u67d0\u4e9b\u98f2\u6599\u800c\u8a00 (\u4f8b\u5982:\u51b0\u8336)\uff0c\u914d\u6599\u53ef\u80fd\u4e0d\u9069\u5408\uff0c\u4f46\u662f Tea (\u8336) \u6b21\u985e\u5225\u4ecd\u5c07\u7e7c\u627f\u67d0\u4e9b\u4e0d\u5408\u9069\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982: hasWhip() (\u8981\u52a0\u5976\u6ce1\u55ce)\u3002 \u842c\u4e00\u9867\u5ba2\u60f3\u8981\u96d9\u500d\u6469\u5361 (\u5de7\u514b\u529b\u52a0\u5169\u500d) \u5496\u5561\uff0c\u90a3\u600e\u9ebc\u8fa6? \u8a2d\u8a08\u5b88\u5247 \u985e\u5225\u61c9\u8a72\u5c0d\u64f4\u5145\u958b\u653e; \u61c9\u8a72\u5c0d\u4fee\u6539\u5c01\u9589\u3002 \u6211\u5011\u7684\u76ee\u6a19\u662f\u5141\u8a31\u985e\u5225\u5bb9\u6613\u64f4\u5145\uff0c\u5728\u4e0d\u4fee\u6539\u65e2\u6709\u7a0b\u5f0f\u78bc\u7684\u60c5\u6cc1\u4e0b\uff0c\u5c31\u53ef\u4ee5\u642d\u914d\u65b0\u7684\u884c\u70ba\u3002\u9019\u6a23\u7684\u8a2d\u8a08\u5177\u6709\u5f48\u6027\u53ef\u4ee5\u56e0\u61c9\u6539\u8b8a\uff0c\u53ef\u4ee5\u63a5\u53d7\u65b0\u7684\u529f\u80fd\u5df2\u9054\u5230\u6539\u8b8a\u9700\u6c42\u7684\u76ee\u7684\u3002 \u8a8d\u8b58\u88dd\u98fe\u8005\u6a21\u5f0f (Decorator pattern) \u5728\u9019\u88e1\u6211\u5011\u8981\u63a1\u7528\u4e0d\u4e00\u6a23\u7684\u4f5c\u6cd5:\u6211\u5011\u8981\u4ee5\u98f2\u6599\u70ba\u4e3b\u9ad4\uff0c\u7136\u5f8c\u5728\u57f7\u884c\u671f\u4ee5\u914d\u6599 \"\u88dd\u98fe\" (decorate) \u98f2\u6599\u3002\u6bd4\u65b9\u8aaa\uff0c\u5982\u679c\u9867\u5ba2\u60f3\u8981\u6469\u5361\u8207\u5976\u6ce1\u7684\u6df1\u5ea6\u70d8\u57f9\u5496\u5561: \u62ff\u4e00\u500b\u6df1\u5ea6\u70d8\u57f9\u5496\u5561 (DarkRoast) \u7269\u4ef6\u3002 \u4ee5\u6469\u5361 (Mocha) \u7269\u4ef6\u88dd\u98fe\u3002 \u4ee5\u5976\u6ce1 (Whip) \u7269\u4ef6\u88dd\u98fe\u3002 \u547c\u53eb cost() \u65b9\u6cd5\uff0c\u5c07\u4f9d\u8cf4\u59d4\u6d3e (delegate) \u5c07\u914d\u6599\u7684\u50f9\u683c\u52a0\u4e0a\u53bb\u3002 \u76ee\u524d\u5f97\u77e5\u7684\u7d50\u8ad6 \u88dd\u98fe\u8005\u8207\u88ab\u88dd\u98fe\u8005\u6709\u76f8\u540c\u7684\u8d85\u578b\u614b\u3002 \u4f60\u53ef\u4ee5\u5229\u7528\u4e00\u500b\u6216\u591a\u500b\u88dd\u98fe\u8005\u5305\u88dd\u4e00\u500b\u7269\u4ef6\u3002 \u88dd\u98fe\u8005\u8207\u88ab\u88dd\u98fe\u8005\u6709\u76f8\u540c\u7684\u8d85\u578b\u614b\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5728\u4efb\u4f55\u9700\u8981\u50b3\u905e\u539f\u59cb\u7684 (\u88ab\u5305\u88dd\u7684) \u7269\u4ef6\u7684\u5834\u5408\uff0c\u6539\u4ee5\u50b3\u905e\u88dd\u98fe\u5f8c (\u5305\u88dd\u7684) \u7684\u7269\u4ef6\u3002 \u88dd\u98fe\u8005\u53ef\u4ee5\u5728\u6240\u59d4\u6d3e\u88ab\u88dd\u98fe\u8005\u7684\u884c\u70ba\uff0c\u4e4b\u524d\u6216\u4e4b\u5f8c\u52a0\u4e0a\u81ea\u5df1\u7684\u884c\u70ba\uff0c\u9054\u5230\u7279\u5b9a\u76ee\u7684\u3002 \u7269\u4ef6\u53ef\u4ee5\u5728\u4efb\u4f55\u6642\u5019\u88ab\u88dd\u98fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u57f7\u884c\u671f\u52d5\u614b\u5730\u7528\u4efb\u4f55\u9069\u5408\u7684\u88dd\u98fe\u8005\uff0c\u4f86\u88dd\u98fe\u7269\u4ef6\u3002 \u5b9a\u7fa9\u88dd\u98fe\u8005\u6a21\u5f0f \u88dd\u98fe\u8005\u6a21\u5f0f\u52d5\u614b\u5730\u5c07\u8cac\u4efb\u52a0\u8af8\u65bc\u7269\u4ef6\u4e0a\u3002\u82e5\u8981\u64f4\u5145\u529f\u80fd\uff0c\u88dd\u98fe\u8005\u63d0\u4f9b\u4e86\u6bd4\u7e7c\u627f\u66f4\u6709\u5f48\u6027\u7684\u9078\u64c7\u3002 \u88dd\u98fe\u98f2\u6599 \u5728\u7e7c\u627f\u548c\u5408\u6210\u4e4b\u9593\uff0c\u89c0\u5ff5\u6709\u4e9b\u6df7\u6dc6\uff0c\u8a0e\u8ad6\u89e3\u6c7a\u554f\u984c A: \u6211\u539f\u672c\u4ee5\u70ba\u5728\u6b64\u6a21\u5f0f\u4e2d\u4e0d\u6703\u4f7f\u7528\u5230\u7e7c\u627f\uff0c\u800c\u662f\u8981\u5229\u7528\u5408\u6210\u53d6\u4ee3\u7e7c\u627f\u3002 B: \u7684\u78ba\u662f\u5982\u6b64\uff0c\u4f46\u6211\u8a8d\u70ba\uff0c\u9019\u9ebc\u505a\u7684\u91cd\u9ede\u662f\u5728\u65bc\uff0c\u88dd\u98fe\u8005\u548c\u88ab\u88dd\u98fe\u8005\u5fc5\u9808\u662f\u4e00\u6a23\u7684\u578b\u614b\uff0c\u4e5f\u5c31\u662f\u6709\u5171\u540c\u7684\u8d85\u985e\u5225\u3002\u5728\u9019\u88e1\uff0c\u6211\u5011\u5229\u7528\u7e7c\u627f\u9054\u5230 \"\u578b\u614b\u76f8\u7b26\"\uff0c\u800c\u975e\u5229\u7528\u7e7c\u627f\u53d6\u5f97\u76f8\u540c\u7684 \"\u884c\u70ba\"\u3002 A: \u6211\u77e5\u9053\u70ba\u4f55\u88dd\u98fe\u8005\u9700\u8981\u548c\u88ab\u88dd\u98fe\u8005\u6709\u76f8\u540c\u7684\u4ecb\u9762\uff0c\u56e0\u70ba\u88dd\u98fe\u8005\u5fc5\u9808\u80fd\u53d6\u4ee3\u88ab\u88dd\u98fe\u8005\u3002\u4f46\u662f\u884c\u70ba\u53c8\u662f\u4f55\u5f9e\u800c\u4f86 ? B: \u7576\u6211\u5011\u5c07\u88dd\u98fe\u8005\u8207\u5143\u4ef6\u5408\u6210\u6642\uff0c\u5c31\u662f\u52a0\u5165\u65b0\u884c\u70ba\u3002\u6240\u5f97\u5230\u7684\u65b0\u884c\u70ba\uff0c\u4e26\u975e\u7e7c\u627f\u81ea\u8d85\u985e\u5225\uff0c\u800c\u662f\u7531\u5408\u6210\u7269\u4ef6\u5f97\u4f86\u7684\u3002 \u5beb\u4e0b\u7a0b\u5f0f\u78bc Coding beverages Coding condiments Test result \u771f\u5be6\u4e16\u754c\u7684\u88dd\u98fe\u8005: Java I/O \u4f60\u5df2\u7d93\u5230\u88dd\u98fe\u8005\u6a21\u5f0f\u4e86\uff0c\u9019\u4e9b I/O \u7684\u76f8\u95dc\u985e\u5225\uff0c\u5c0d\u4f60\u4f86\u8aaa\u61c9\u8a72\u6bd4\u8f03\u6709\u610f\u7fa9\u4e86\uff0c\u56e0\u70ba\u5176\u4e2d\u8a31\u591a\u985e\u5225\u90fd\u662f\u88dd\u98fe\u8005\u3002\u4e0b\u9762\u662f\u4e00\u500b\u5178\u578b\u7684\u7269\u4ef6\u96c6\u5408\uff0c\u900f\u904e\u88dd\u98fe\u8005\u4f86\u5c07\u529f\u80fd\u7d50\u5408\u8d77\u4f86\uff0c\u4ee5\u8b80\u53d6\u6a94\u6848\u3002","title":"\u88dd\u98fe\u8005\u6a21\u5f0f (Decorator pattern)"},{"location":"Design%20pattern/decorator/#decorator-pattern","text":"","title":"\u88dd\u98fe\u8005\u6a21\u5f0f (Decorator pattern)"},{"location":"Design%20pattern/decorator/#_1","text":"\u6211\u5011\u8a2d\u8a08\u4e00\u500b\u8a02\u55ae\u7cfb\u7d71\uff0c\u539f\u5148\u7684\u8a2d\u8a08\u662f\u9019\u6a23\u7684: \u8cfc\u8cb7\u5496\u5561\u6642\uff0c\u4e5f\u53ef\u4ee5\u8981\u6c42\u5404\u7a2e\u52a0\u6599\uff0c\u4f8b\u5982:\u725b\u5976 (steamed milk), \u8c46\u6f3f (soy), \u6469\u5361 (mocha)\u3002\u661f\u5df4\u514b\u6703\u6839\u64da\u52a0\u6599\u659f\u914c\u6536\u8cbb\uff0c\u6240\u4ee5\u8a02\u55ae\u7cfb\u7d71\u8a2d\u8a08\u4e0a\u5fc5\u9808\u8003\u616e\u52a0\u6599\u7684\u90e8\u5206\u3002 \u9019\u662f\u6211\u5011\u5617\u8a66\u7684\u7b2c\u4e00\u500b\u7248\u672c: \u9019\u8a2d\u8a08\u986f\u7136\u662f\u7b28\u900f\u4e86\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u5be6\u9ad4\u8b8a\u6578\u8ddf\u7e7c\u627f\uff0c\u5c31\u53ef\u4ee5\u8ffd\u8e64\u9019\u4e9b\u914d\u6599\u4e86: \u9019\u6a23\u4ecd\u7136\u6709\u4e00\u4e9b\u8a2d\u8a08\u4e0a\u7684\u554f\u984c: \u914d\u6599\u50f9\u683c\u6539\u8b8a\u6703\u4f7f\u5f97\u6211\u5011\u9700\u8981\u66f4\u6539\u7a0b\u5f0f\u78bc\u3002 \u4e00\u65e6\u51fa\u73fe\u65b0\u7684\u914d\u6599\uff0c\u5c31\u9700\u8981\u52a0\u5165\u65b0\u65b9\u6cd5\uff0c\u4e26\u6539\u8b8a\u8d85\u985e\u5225\u4e2d cost() \u5c0d\u65bc\u914d\u6599\u50f9\u683c\u7684\u8a08\u7b97\u3002 \u67d0\u4e9b\u53e3\u5473\u5c0d\u67d0\u4e9b\u98f2\u6599\u800c\u8a00 (\u4f8b\u5982:\u51b0\u8336)\uff0c\u914d\u6599\u53ef\u80fd\u4e0d\u9069\u5408\uff0c\u4f46\u662f Tea (\u8336) \u6b21\u985e\u5225\u4ecd\u5c07\u7e7c\u627f\u67d0\u4e9b\u4e0d\u5408\u9069\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982: hasWhip() (\u8981\u52a0\u5976\u6ce1\u55ce)\u3002 \u842c\u4e00\u9867\u5ba2\u60f3\u8981\u96d9\u500d\u6469\u5361 (\u5de7\u514b\u529b\u52a0\u5169\u500d) \u5496\u5561\uff0c\u90a3\u600e\u9ebc\u8fa6?","title":"\u661f\u5df4\u514b\u5496\u5561"},{"location":"Design%20pattern/decorator/#_2","text":"\u985e\u5225\u61c9\u8a72\u5c0d\u64f4\u5145\u958b\u653e; \u61c9\u8a72\u5c0d\u4fee\u6539\u5c01\u9589\u3002 \u6211\u5011\u7684\u76ee\u6a19\u662f\u5141\u8a31\u985e\u5225\u5bb9\u6613\u64f4\u5145\uff0c\u5728\u4e0d\u4fee\u6539\u65e2\u6709\u7a0b\u5f0f\u78bc\u7684\u60c5\u6cc1\u4e0b\uff0c\u5c31\u53ef\u4ee5\u642d\u914d\u65b0\u7684\u884c\u70ba\u3002\u9019\u6a23\u7684\u8a2d\u8a08\u5177\u6709\u5f48\u6027\u53ef\u4ee5\u56e0\u61c9\u6539\u8b8a\uff0c\u53ef\u4ee5\u63a5\u53d7\u65b0\u7684\u529f\u80fd\u5df2\u9054\u5230\u6539\u8b8a\u9700\u6c42\u7684\u76ee\u7684\u3002","title":"\u8a2d\u8a08\u5b88\u5247"},{"location":"Design%20pattern/decorator/#decorator-pattern_1","text":"\u5728\u9019\u88e1\u6211\u5011\u8981\u63a1\u7528\u4e0d\u4e00\u6a23\u7684\u4f5c\u6cd5:\u6211\u5011\u8981\u4ee5\u98f2\u6599\u70ba\u4e3b\u9ad4\uff0c\u7136\u5f8c\u5728\u57f7\u884c\u671f\u4ee5\u914d\u6599 \"\u88dd\u98fe\" (decorate) \u98f2\u6599\u3002\u6bd4\u65b9\u8aaa\uff0c\u5982\u679c\u9867\u5ba2\u60f3\u8981\u6469\u5361\u8207\u5976\u6ce1\u7684\u6df1\u5ea6\u70d8\u57f9\u5496\u5561: \u62ff\u4e00\u500b\u6df1\u5ea6\u70d8\u57f9\u5496\u5561 (DarkRoast) \u7269\u4ef6\u3002 \u4ee5\u6469\u5361 (Mocha) \u7269\u4ef6\u88dd\u98fe\u3002 \u4ee5\u5976\u6ce1 (Whip) \u7269\u4ef6\u88dd\u98fe\u3002 \u547c\u53eb cost() \u65b9\u6cd5\uff0c\u5c07\u4f9d\u8cf4\u59d4\u6d3e (delegate) \u5c07\u914d\u6599\u7684\u50f9\u683c\u52a0\u4e0a\u53bb\u3002","title":"\u8a8d\u8b58\u88dd\u98fe\u8005\u6a21\u5f0f (Decorator pattern)"},{"location":"Design%20pattern/decorator/#_3","text":"\u88dd\u98fe\u8005\u8207\u88ab\u88dd\u98fe\u8005\u6709\u76f8\u540c\u7684\u8d85\u578b\u614b\u3002 \u4f60\u53ef\u4ee5\u5229\u7528\u4e00\u500b\u6216\u591a\u500b\u88dd\u98fe\u8005\u5305\u88dd\u4e00\u500b\u7269\u4ef6\u3002 \u88dd\u98fe\u8005\u8207\u88ab\u88dd\u98fe\u8005\u6709\u76f8\u540c\u7684\u8d85\u578b\u614b\uff0c\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5728\u4efb\u4f55\u9700\u8981\u50b3\u905e\u539f\u59cb\u7684 (\u88ab\u5305\u88dd\u7684) \u7269\u4ef6\u7684\u5834\u5408\uff0c\u6539\u4ee5\u50b3\u905e\u88dd\u98fe\u5f8c (\u5305\u88dd\u7684) \u7684\u7269\u4ef6\u3002 \u88dd\u98fe\u8005\u53ef\u4ee5\u5728\u6240\u59d4\u6d3e\u88ab\u88dd\u98fe\u8005\u7684\u884c\u70ba\uff0c\u4e4b\u524d\u6216\u4e4b\u5f8c\u52a0\u4e0a\u81ea\u5df1\u7684\u884c\u70ba\uff0c\u9054\u5230\u7279\u5b9a\u76ee\u7684\u3002 \u7269\u4ef6\u53ef\u4ee5\u5728\u4efb\u4f55\u6642\u5019\u88ab\u88dd\u98fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u57f7\u884c\u671f\u52d5\u614b\u5730\u7528\u4efb\u4f55\u9069\u5408\u7684\u88dd\u98fe\u8005\uff0c\u4f86\u88dd\u98fe\u7269\u4ef6\u3002","title":"\u76ee\u524d\u5f97\u77e5\u7684\u7d50\u8ad6"},{"location":"Design%20pattern/decorator/#_4","text":"\u88dd\u98fe\u8005\u6a21\u5f0f\u52d5\u614b\u5730\u5c07\u8cac\u4efb\u52a0\u8af8\u65bc\u7269\u4ef6\u4e0a\u3002\u82e5\u8981\u64f4\u5145\u529f\u80fd\uff0c\u88dd\u98fe\u8005\u63d0\u4f9b\u4e86\u6bd4\u7e7c\u627f\u66f4\u6709\u5f48\u6027\u7684\u9078\u64c7\u3002","title":"\u5b9a\u7fa9\u88dd\u98fe\u8005\u6a21\u5f0f"},{"location":"Design%20pattern/decorator/#_5","text":"","title":"\u88dd\u98fe\u98f2\u6599"},{"location":"Design%20pattern/decorator/#_6","text":"A: \u6211\u539f\u672c\u4ee5\u70ba\u5728\u6b64\u6a21\u5f0f\u4e2d\u4e0d\u6703\u4f7f\u7528\u5230\u7e7c\u627f\uff0c\u800c\u662f\u8981\u5229\u7528\u5408\u6210\u53d6\u4ee3\u7e7c\u627f\u3002 B: \u7684\u78ba\u662f\u5982\u6b64\uff0c\u4f46\u6211\u8a8d\u70ba\uff0c\u9019\u9ebc\u505a\u7684\u91cd\u9ede\u662f\u5728\u65bc\uff0c\u88dd\u98fe\u8005\u548c\u88ab\u88dd\u98fe\u8005\u5fc5\u9808\u662f\u4e00\u6a23\u7684\u578b\u614b\uff0c\u4e5f\u5c31\u662f\u6709\u5171\u540c\u7684\u8d85\u985e\u5225\u3002\u5728\u9019\u88e1\uff0c\u6211\u5011\u5229\u7528\u7e7c\u627f\u9054\u5230 \"\u578b\u614b\u76f8\u7b26\"\uff0c\u800c\u975e\u5229\u7528\u7e7c\u627f\u53d6\u5f97\u76f8\u540c\u7684 \"\u884c\u70ba\"\u3002 A: \u6211\u77e5\u9053\u70ba\u4f55\u88dd\u98fe\u8005\u9700\u8981\u548c\u88ab\u88dd\u98fe\u8005\u6709\u76f8\u540c\u7684\u4ecb\u9762\uff0c\u56e0\u70ba\u88dd\u98fe\u8005\u5fc5\u9808\u80fd\u53d6\u4ee3\u88ab\u88dd\u98fe\u8005\u3002\u4f46\u662f\u884c\u70ba\u53c8\u662f\u4f55\u5f9e\u800c\u4f86 ? B: \u7576\u6211\u5011\u5c07\u88dd\u98fe\u8005\u8207\u5143\u4ef6\u5408\u6210\u6642\uff0c\u5c31\u662f\u52a0\u5165\u65b0\u884c\u70ba\u3002\u6240\u5f97\u5230\u7684\u65b0\u884c\u70ba\uff0c\u4e26\u975e\u7e7c\u627f\u81ea\u8d85\u985e\u5225\uff0c\u800c\u662f\u7531\u5408\u6210\u7269\u4ef6\u5f97\u4f86\u7684\u3002","title":"\u5728\u7e7c\u627f\u548c\u5408\u6210\u4e4b\u9593\uff0c\u89c0\u5ff5\u6709\u4e9b\u6df7\u6dc6\uff0c\u8a0e\u8ad6\u89e3\u6c7a\u554f\u984c"},{"location":"Design%20pattern/decorator/#_7","text":"","title":"\u5beb\u4e0b\u7a0b\u5f0f\u78bc"},{"location":"Design%20pattern/decorator/#coding-beverages","text":"","title":"Coding beverages"},{"location":"Design%20pattern/decorator/#coding-condiments","text":"","title":"Coding condiments"},{"location":"Design%20pattern/decorator/#test-result","text":"","title":"Test result"},{"location":"Design%20pattern/decorator/#java-io","text":"\u4f60\u5df2\u7d93\u5230\u88dd\u98fe\u8005\u6a21\u5f0f\u4e86\uff0c\u9019\u4e9b I/O \u7684\u76f8\u95dc\u985e\u5225\uff0c\u5c0d\u4f60\u4f86\u8aaa\u61c9\u8a72\u6bd4\u8f03\u6709\u610f\u7fa9\u4e86\uff0c\u56e0\u70ba\u5176\u4e2d\u8a31\u591a\u985e\u5225\u90fd\u662f\u88dd\u98fe\u8005\u3002\u4e0b\u9762\u662f\u4e00\u500b\u5178\u578b\u7684\u7269\u4ef6\u96c6\u5408\uff0c\u900f\u904e\u88dd\u98fe\u8005\u4f86\u5c07\u529f\u80fd\u7d50\u5408\u8d77\u4f86\uff0c\u4ee5\u8b80\u53d6\u6a94\u6848\u3002","title":"\u771f\u5be6\u4e16\u754c\u7684\u88dd\u98fe\u8005: Java I/O"},{"location":"Design%20pattern/factory/","text":"\u5de5\u5ee0\u6a21\u5f0f (Factory pattern) \u6bd4\u85a9\u5e97 \u5047\u8a2d\u6211\u5011\u6709\u4e00\u9593\u6bd4\u85a9\u5e97: \u4f46\u662f\u4f60\u53ef\u4ee5\u9700\u8981\u66f4\u591a\u7a2e\u53e3\u5473 \u82e5\u60f3\u8981\u65b0\u589e\u6216\u662f\u6e1b\u5c11\u53e3\u5473\uff0c\u5c31\u9700\u8981\u6539\u52d5\u5230 orderPizza() \u5167\u7684\u7a0b\u5f0f\u78bc\u3002\u5f88\u660e\u986f\u7684\uff0c\u5982\u679c\u5177\u8c61\u5316\u67d0\u4e9b\u5177\u8c61\u985e\u5225 (\u800c\u4e0d\u662f\u62bd\u8c61\u985e\u5225)\uff0c\u5c07\u6703\u7121\u6cd5\u8b93 orderPizza() \u5c0d\u4fee\u6539\u5c01\u9589\u3002 \u5c01\u88dd\u5efa\u7acb\u7269\u4ef6\u7684\u7a0b\u5f0f\u78bc \u6211\u5011\u7a31\u9019\u500b\u65b0\u7269\u4ef6\u70ba \"\u5de5\u5ee0\" \u5de5\u5ee0 (factory) \u8ca0\u8cac\u5efa\u7acb\u7269\u4ef6\u7684\u7d30\u7bc0\u3002\u4e00\u65e6\u6709\u4e86 SimplePizzaFactory \uff0c orderPizza() \u5c31\u8b8a\u6210\u6b64\u7269\u4ef6\u7684\u5ba2\u6236\u3002 \u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u6bd4\u85a9\u5de5\u5ee0 FAQ \u554f: \u9019\u500b\u505a\u6709\u4ec0\u9ebc\u597d\u8655? \u4f3c\u4e4e\u53ea\u662f\u628a\u554f\u984c\u642c\u5230\u53e6\u4e00\u500b\u7269\u4ef6\u7f77\u4e86\uff0c\u554f\u984c\u4f9d\u7136\u5b58\u5728\u3002 \u7b54: SimplePizzaFactory \u53ef\u4ee5\u6709\u5f88\u591a\u5ba2\u6236\u3002\u96d6\u7136\u76ee\u524d\u53ea\u6709 orderPizza() \uff0c\u7136\u800c\uff0c\u53ef\u80fd\u9084\u6709 PizzaShopMenu \u985e\u5225\uff0c\u6703\u5229\u7528\u9019\u500b\u5de5\u5ee0\u53d6\u5f97\u6bd4\u85a9\u7684\u50f9\u683c\u8ddf\u63cf\u8ff0\u3002\u53ef\u80fd\u9084\u6709 HomeDelivery \u985e\u5225\uff0c\u6703\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u4f86\u8655\u7406\u6bd4\u85a9\u3002\u6240\u4ee5\uff0c\u628a\u6bd4\u85a9\u7684\u7a0b\u5f0f\u78bc\u5c01\u88dd\u5230\u4e00\u500b\u985e\u5225\uff0c\u7576\u4ee5\u5f8c\u5be6\u8e10\u6539\u8b8a\u6642\uff0c\u53ea\u9700\u8981\u4fee\u6539\u9019\u500b\u985e\u5225\u5c31\u5373\u53ef\u3002 \u4fee\u6539 PizzaStore \u985e\u5225 \u5b9a\u7fa9\u7c21\u55ae\u5de5\u5ee0 \u7c21\u55ae\u5de5\u5ee0\u5176\u5be6\u4e0d\u662f\u8a2d\u8a08\u6a21\u5f0f\uff0c\u53cd\u800c\u6bd4\u8f03\u50cf\u662f\u4e00\u7a2e\u7de8\u7a0b\u7fd2\u6163\uff0c\u7684\u78ba\u4e5f\u6709\u4e0d\u5c11\u958b\u767c\u8005\u628a\u5b83\u8aa4\u8a8d\u70ba \"\u5de5\u5ee0\u6a21\u5f0f\" (factory pattern)\uff0c\u5225\u4ee5\u70ba\u5b83\u4e0d\u662f\u500b\u6a21\u5f0f\u5c31\u5ffd\u7565\u5b83\u7684\u7528\u6cd5\u3002\u8b93\u6211\u5011\u4f86\u770b\u770b\u65b0\u7248\u7684\u6bd4\u85a9\u5e97\u985e\u5225\u5716\u3002 \u52a0\u76df\u6bd4\u85a9\u5e97 \u6211\u5011\u5df2\u7d93\u6709\u500b\u4f5c\u6cd5 \u6211\u5011\u5229\u7528 SimplePizzaFactory \uff0c\u5beb\u51fa\u4e09\u7a2e\u4e0d\u540c\u7684\u5de5\u5ee0\uff0c\u5206\u5225\u662f NYPizzaFactory \uff0c ChicagoPizzaFactory \uff0c CaliforniaPizzaFactory \uff0c\u90a3\u9ebc\u5404\u5730\u52a0\u76df\u5e97\u90fd\u53ef\u4ee5\u6709\u9069\u5408\u7684\u5de5\u5ee0\u53ef\u4ee5\u7528\u3002 \u4f46\u662f\u4f60\u60f3\u8981\u591a\u4e00\u4e9b\u54c1\u8cea\u63a7\u5236 \u5728\u63a8\u5ee3 SimpleFactory \u6642\uff0c\u4f60\u767c\u73fe\u52a0\u76df\u5e97\u7684\u78ba\u662f\u4f7f\u7528\u4f60\u7684\u5de5\u5ee0\u88fd\u9020\u7684\u6bd4\u85a9\uff0c\u4f46\u662f\u5176\u4ed6\u90e8\u5206\uff0c\u537b\u958b\u59cb\u63a1\u7528\u81ea\u5275\u7684\u6d41\u7a0b: \u70d8\u57f9\u7684\u505a\u6cd5\u6709\u4e9b\u5dee\u7570\uff0c\u5fd8\u8a18\u5207\u7247\uff0c\u4f7f\u7528\u5176\u4ed6\u5ee0\u5546\u7684\u76d2\u5b50\u3002 \u518d\u60f3\u60f3\u9019\u500b\u554f\u984c\uff0c\u4f60\u771f\u7684\u5e0c\u671b\u80fd\u5920\u5efa\u7acb\u4e00\u500b\u6846\u67b6\uff0c\u628a\u52a0\u76df\u5e97\u548c\u88fd\u9020\u6bd4\u85a9\u7d91\u7d81\u5728\u4e00\u8d77\uff0c\u537b\u53c8\u4e0d\u5931\u5f48\u6027\u3002 \u7d66\u6bd4\u85a9\u5e97\u4f7f\u7528\u7684\u6846\u67b6 \u6709\u500b\u505a\u6cd5\u53ef\u4ee5\u9054\u5230\u9019\u500b\u6548\u679c\uff0c\u6240\u8981\u505a\u7684\u4e8b\uff0c\u5c31\u662f\u628a createPizza() \u65b9\u6cd5\u653e\u56de PizzaStore \u4e4b\u4e2d\uff0c\u4e0d\u904e\u8981\u628a\u5b83\u8a2d\u70ba \"\u62bd\u8c61\u65b9\u6cd5\"\uff0c\u7136\u5f8c\u70ba\u6bcf\u500b\u5340\u57df\u53e3\u5473\uff0c\u64b0\u5beb\u4e00\u500b PizzaStore \u7684\u6b21\u985e\u5225\u3002 \u9996\u5148\uff0c\u5148\u4f86\u770b\u770b PizzaStore \u7684\u6539\u8b8a: \u5141\u8a31\u6b21\u985e\u5225\u505a\u6c7a\u5b9a \u8b93\u6211\u5011\u4f86\u958b\u4e00\u5bb6\u6bd4\u85a9\u5e97\u5427 \u5be6\u8e10\u6bd4\u85a9 \u4f86\u5b9a\u7fa9\u7d10\u7d04\u548c\u829d\u52a0\u54e5\u98a8\u5473\u7684\u8d77\u53f8\u6bd4\u85a9 \u6e2c\u8a66\u6210\u679c \u6703\u898b\u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f\u7684\u6642\u523b\u7d42\u65bc\u5230\u4e86 \u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f (Factory Method Pattern) \u8b93\u6b21\u985e\u5225\u6c7a\u5b9a\u8a72\u5efa\u7acb\u7684\u7269\u4ef6\u70ba\u4f55\uff0c\u64da\u6b64\u9054\u5230\u5c07\u7269\u4ef6\u5efa\u7acb\u7684\u904e\u7a0b\u5c01\u88dd\u7684\u76ee\u7684\u3002 \u5b9a\u7fa9\u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f \"\u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f\" \u5b9a\u7fa9\u4e86\u4e00\u500b\u5efa\u7acb\u7269\u4ef6\u7684\u4ecb\u9762\uff0c\u4f46\u7531\u6b21\u985e\u5225\u6c7a\u5b9a\u8981\u5be6\u9ad4\u5316\u7684\u985e\u5225\u70ba\u4f55\u3002\u5de5\u5ee0\u65b9\u6cd5\u8b93\u985e\u5225\u628a\u5be6\u9ad4\u5316\u7684\u52d5\u4f5c\uff0c\u4ea4\u7531\u6b21\u985e\u5225\u9032\u884c\u3002 \u770b\u770b\u7269\u4ef6\u7684\u76f8\u4f9d\u6027 \u7576\u76f4\u63a5\u5be6\u9ad4\u5316\u4e00\u500b\u7269\u4ef6\uff0c\u5c31\u662f\u5728\u4f9d\u8cf4\u5b83\u7684\u5177\u8c61\u985e\u5225\u3002\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u662f\u7531\u6bd4\u85a9\u5e97\u985e\u5225\u5be6\u9ad4\u5316\u6240\u6709\u6bd4\u85a9\u7269\u4ef6\uff0c\u800c\u4e0d\u662f\u59d4\u7531\u5de5\u5ee0\u88fd\u9020\u3002 \u4f9d\u8cf4\u53cd\u8f49\u5b88\u5247 (DIP) \u8a2d\u8a08\u5b88\u5247 \u4f9d\u8cf4\u62bd\u8c61\u985e\u5225\uff0c\u4e0d\u8981\u4f9d\u8cf4\u5177\u8c61\u985e\u5225\u3002 \u5b88\u5247\u7684\u904b\u7528 \u96d6\u7136\u5df2\u7d93\u5efa\u7acb\u4e86\u4e00\u500b\u62bd\u8c61\u985e\u5225 (Pizza)\uff0c\u4f46\u6211\u5011\u672a\u66fe\u5728\u7a0b\u5f0f\u78bc\u4e2d\u61c9\u7528\u5230\uff0c\u6240\u4ee5\u9019\u500b\u62bd\u8c61\u985e\u5225\u6c92\u6709\u5f71\u97ff\u529b\u3002 \u5982\u4f55\u5728 orderPizza() \u65b9\u6cd5\u4e2d\uff0c\u5c07\u9019\u4e9b\u5be6\u9ad4\u5316\u7684\u7a0b\u5f0f\u78bc\u7368\u7acb\u958b\u4f86? \u6211\u5011\u90fd\u77e5\u9053\uff0c\u5de5\u5ee0\u65b9\u6cd5\u525b\u597d\u80fd\u6d3e\u4e0a\u7528\u5834\u3002 \u50cf\u662f\u9019\u6a23\u5b50: FAQ \u554f: \u4f9d\u8cf4\u53cd\u8f49\u5b88\u5247\uff0c\u7a76\u7adf\u53cd\u8f49\u5728\u54ea\u88e1? \u7b54: \u770b\u770b\u524d\u4e00\u5f35\u5716\uff0c\u6ce8\u610f\u5230\u4f4e\u968e\u5143\u4ef6\uff0c\u73fe\u5728\u7adf\u7136\u4e5f\u4f9d\u8cf4\u9ad8\u968e\u7684\u62bd\u8c61\u3002\u540c\u6a23\u7684\uff0c\u9ad8\u968e\u5143\u4ef6\u73fe\u5728\u4e5f\u4f9d\u8cf4\u76f8\u540c\u7684\u62bd\u8c61\u3002\u524d\u5e7e\u9801\u6240\u7e6a\u88fd\u7684\u76f8\u4f9d\u662f\u7531\u4e0a\u800c\u4e0b\u7684\uff0c\u73fe\u5728\u537b\u5012\u904e\u4f86\u4e86\uff0c\u800c\u4e14\u9ad8\u968e\u8207\u4f4e\u968e\u6a21\u7d44\u73fe\u5728\u90fd\u4f9d\u8cf4\u9019\u500b\u62bd\u8c61\u3002 \u518d\u56de\u5230\u6bd4\u85a9\u5e97 \u8981\u5982\u4f55\u78ba\u4fdd\u6bcf\u5bb6\u52a0\u76df\u5e97\u4f7f\u7528\u9ad8\u54c1\u8cea\u7684\u539f\u6599? \u4f60\u6253\u7b97\u5efa\u9020\u4e00\u5bb6\u751f\u7522\u539f\u6599\u7684\u5de5\u5ee0\uff0c\u4e26\u5c07\u539f\u6599\u904b\u9001\u5230\u5404\u5bb6\u52a0\u76df\u5e97\u3002 \u5c0d\u65bc\u9019\u500b\u505a\u6cd5\uff0c\u9084\u5269\u4e0b\u4e00\u500b\u554f\u984c\u672a\u89e3\u6c7a: \u52a0\u76df\u5e97\u5750\u843d\u5728\u4e0d\u540c\u7684\u5340\u57df\uff0c\u7d10\u7d04\u7684\u7d05\u91ac\u6599\u8ddf\u829d\u52a0\u54e5\u7684\u7d05\u91ac\u6599\u662f\u4e0d\u4e00\u6a23\u7684\u3002\u6240\u4ee5\u5c0d\u65bc\u7d10\u7d04\u548c\u829d\u52a0\u54e5\uff0c\u4f60\u6e96\u5099\u5169\u7d44\u4e0d\u540c\u7684\u539f\u6599: \u539f\u6599\u5bb6\u65cf \u7d10\u7d04\u548c\u829d\u52a0\u54e5\u4f7f\u7528\u4e0d\u540c\u7d44\u539f\u6599\u3002\u53ef\u80fd\u4e0d\u4e45\u4e4b\u5f8c\u52a0\u5dde\u5c31\u8981\u6709\u52a0\u76df\u5e97\uff0c\u5230\u6642\u5019\u53c8\u9700\u8981\u53e6\u4e00\u7d44\u5340\u57df\u7684\u539f\u6599\u3002\u6211\u5011\u60f3\u6e05\u695a\u5982\u4f55\u8655\u88e1\u539f\u6599\u7684\u5bb6\u65cf\u3002 \u5efa\u7acb\u539f\u6599\u5de5\u5ee0 \u5148\u958b\u59cb\u5b9a\u7fa9\u4e00\u500b\u4ecb\u9762\uff0c\u9019\u500b\u4ecb\u9762\u8ca0\u8cac\u5efa\u7acb\u6240\u6709\u7684\u539f\u6599: \u5efa\u7acb\u7d10\u7d04\u539f\u6599\u5de5\u5ee0 \u4fee\u6539\u6bd4\u85a9 \u518d\u56de\u5230\u6bd4\u85a9\u5e97 \u6211\u5011\u505a\u4e86\u4e9b\u4ec0\u9ebc\u4e8b? \u6211\u5011\u5728\u6b64\u5c0e\u5165\u65b0\u578b\u614b\u7684\u5de5\u5ee0\uff0c\u4e5f\u5c31\u662f\u6240\u8b02\u7684\u62bd\u8c61\u5de5\u5ee0\uff0c\u7528\u4f86\u5efa\u7acb\u6bd4\u85a9\u539f\u6599\u5bb6\u65cf\u3002 \u900f\u904e\u62bd\u8c61\u5de5\u5ee0\u6240\u63d0\u4f9b\u51fa\u4f86\u7684\u4ecb\u9762\uff0c\u53ef\u4ee5\u5efa\u7acb\u7522\u54c1\u7684\u5bb6\u65cf\uff0c\u5229\u7528\u9019\u4e9b\u4ecb\u9762\uff0c\u628a\u5be6\u969b\u88fd\u9020\u7522\u54c1\u7684\u5de5\u5ee0\u9b06\u7d81\uff0c\u4ee5\u4fbf\u5be6\u8e10\u5404\u5f0f\u5404\u6a23\u7684\u5de5\u5ee0\uff0c\u88fd\u9020\u51fa\u5404\u7a2e\u4e0d\u540c\u7684\u7522\u54c1\u3002 \u5b9a\u7fa9\u62bd\u8c61\u5de5\u5ee0\u6a21\u5f0f \u62bd\u8c61\u5de5\u5ee0\u6a21\u5f0f\u63d0\u4f9b\u51fa\u4f86\u4e86\u4e00\u500b\u4ecb\u9762\uff0c\u5efa\u7acb\u76f8\u95dc\u6216\u76f8\u4f9d\u7269\u4ef6\u4e4b\u5bb6\u65cf\uff0c\u800c\u4e0d\u9700\u8981\u660e\u78ba\u6307\u5b9a\u5177\u8c61\u985e\u5225\u3002 \u8b93\u6211\u5011\u5f9e PizzaStore \u7684\u89c0\u9ede\u770b\u5b83 \u6bd4\u8f03\u5de5\u5ee0\u65b9\u6cd5\u4ee5\u53ca\u62bd\u8c61\u5de5\u5ee0","title":"\u5de5\u5ee0\u6a21\u5f0f (Factory pattern)"},{"location":"Design%20pattern/factory/#factory-pattern","text":"","title":"\u5de5\u5ee0\u6a21\u5f0f (Factory pattern)"},{"location":"Design%20pattern/factory/#_1","text":"\u5047\u8a2d\u6211\u5011\u6709\u4e00\u9593\u6bd4\u85a9\u5e97:","title":"\u6bd4\u85a9\u5e97"},{"location":"Design%20pattern/factory/#_2","text":"\u82e5\u60f3\u8981\u65b0\u589e\u6216\u662f\u6e1b\u5c11\u53e3\u5473\uff0c\u5c31\u9700\u8981\u6539\u52d5\u5230 orderPizza() \u5167\u7684\u7a0b\u5f0f\u78bc\u3002\u5f88\u660e\u986f\u7684\uff0c\u5982\u679c\u5177\u8c61\u5316\u67d0\u4e9b\u5177\u8c61\u985e\u5225 (\u800c\u4e0d\u662f\u62bd\u8c61\u985e\u5225)\uff0c\u5c07\u6703\u7121\u6cd5\u8b93 orderPizza() \u5c0d\u4fee\u6539\u5c01\u9589\u3002","title":"\u4f46\u662f\u4f60\u53ef\u4ee5\u9700\u8981\u66f4\u591a\u7a2e\u53e3\u5473"},{"location":"Design%20pattern/factory/#_3","text":"","title":"\u5c01\u88dd\u5efa\u7acb\u7269\u4ef6\u7684\u7a0b\u5f0f\u78bc"},{"location":"Design%20pattern/factory/#_4","text":"\u5de5\u5ee0 (factory) \u8ca0\u8cac\u5efa\u7acb\u7269\u4ef6\u7684\u7d30\u7bc0\u3002\u4e00\u65e6\u6709\u4e86 SimplePizzaFactory \uff0c orderPizza() \u5c31\u8b8a\u6210\u6b64\u7269\u4ef6\u7684\u5ba2\u6236\u3002","title":"\u6211\u5011\u7a31\u9019\u500b\u65b0\u7269\u4ef6\u70ba \"\u5de5\u5ee0\""},{"location":"Design%20pattern/factory/#_5","text":"","title":"\u5efa\u7acb\u4e00\u500b\u7c21\u55ae\u7684\u6bd4\u85a9\u5de5\u5ee0"},{"location":"Design%20pattern/factory/#faq","text":"\u554f: \u9019\u500b\u505a\u6709\u4ec0\u9ebc\u597d\u8655? \u4f3c\u4e4e\u53ea\u662f\u628a\u554f\u984c\u642c\u5230\u53e6\u4e00\u500b\u7269\u4ef6\u7f77\u4e86\uff0c\u554f\u984c\u4f9d\u7136\u5b58\u5728\u3002 \u7b54: SimplePizzaFactory \u53ef\u4ee5\u6709\u5f88\u591a\u5ba2\u6236\u3002\u96d6\u7136\u76ee\u524d\u53ea\u6709 orderPizza() \uff0c\u7136\u800c\uff0c\u53ef\u80fd\u9084\u6709 PizzaShopMenu \u985e\u5225\uff0c\u6703\u5229\u7528\u9019\u500b\u5de5\u5ee0\u53d6\u5f97\u6bd4\u85a9\u7684\u50f9\u683c\u8ddf\u63cf\u8ff0\u3002\u53ef\u80fd\u9084\u6709 HomeDelivery \u985e\u5225\uff0c\u6703\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u4f86\u8655\u7406\u6bd4\u85a9\u3002\u6240\u4ee5\uff0c\u628a\u6bd4\u85a9\u7684\u7a0b\u5f0f\u78bc\u5c01\u88dd\u5230\u4e00\u500b\u985e\u5225\uff0c\u7576\u4ee5\u5f8c\u5be6\u8e10\u6539\u8b8a\u6642\uff0c\u53ea\u9700\u8981\u4fee\u6539\u9019\u500b\u985e\u5225\u5c31\u5373\u53ef\u3002","title":"FAQ"},{"location":"Design%20pattern/factory/#pizzastore","text":"","title":"\u4fee\u6539 PizzaStore \u985e\u5225"},{"location":"Design%20pattern/factory/#_6","text":"\u7c21\u55ae\u5de5\u5ee0\u5176\u5be6\u4e0d\u662f\u8a2d\u8a08\u6a21\u5f0f\uff0c\u53cd\u800c\u6bd4\u8f03\u50cf\u662f\u4e00\u7a2e\u7de8\u7a0b\u7fd2\u6163\uff0c\u7684\u78ba\u4e5f\u6709\u4e0d\u5c11\u958b\u767c\u8005\u628a\u5b83\u8aa4\u8a8d\u70ba \"\u5de5\u5ee0\u6a21\u5f0f\" (factory pattern)\uff0c\u5225\u4ee5\u70ba\u5b83\u4e0d\u662f\u500b\u6a21\u5f0f\u5c31\u5ffd\u7565\u5b83\u7684\u7528\u6cd5\u3002\u8b93\u6211\u5011\u4f86\u770b\u770b\u65b0\u7248\u7684\u6bd4\u85a9\u5e97\u985e\u5225\u5716\u3002","title":"\u5b9a\u7fa9\u7c21\u55ae\u5de5\u5ee0"},{"location":"Design%20pattern/factory/#_7","text":"","title":"\u52a0\u76df\u6bd4\u85a9\u5e97"},{"location":"Design%20pattern/factory/#_8","text":"\u6211\u5011\u5229\u7528 SimplePizzaFactory \uff0c\u5beb\u51fa\u4e09\u7a2e\u4e0d\u540c\u7684\u5de5\u5ee0\uff0c\u5206\u5225\u662f NYPizzaFactory \uff0c ChicagoPizzaFactory \uff0c CaliforniaPizzaFactory \uff0c\u90a3\u9ebc\u5404\u5730\u52a0\u76df\u5e97\u90fd\u53ef\u4ee5\u6709\u9069\u5408\u7684\u5de5\u5ee0\u53ef\u4ee5\u7528\u3002","title":"\u6211\u5011\u5df2\u7d93\u6709\u500b\u4f5c\u6cd5"},{"location":"Design%20pattern/factory/#_9","text":"\u5728\u63a8\u5ee3 SimpleFactory \u6642\uff0c\u4f60\u767c\u73fe\u52a0\u76df\u5e97\u7684\u78ba\u662f\u4f7f\u7528\u4f60\u7684\u5de5\u5ee0\u88fd\u9020\u7684\u6bd4\u85a9\uff0c\u4f46\u662f\u5176\u4ed6\u90e8\u5206\uff0c\u537b\u958b\u59cb\u63a1\u7528\u81ea\u5275\u7684\u6d41\u7a0b: \u70d8\u57f9\u7684\u505a\u6cd5\u6709\u4e9b\u5dee\u7570\uff0c\u5fd8\u8a18\u5207\u7247\uff0c\u4f7f\u7528\u5176\u4ed6\u5ee0\u5546\u7684\u76d2\u5b50\u3002 \u518d\u60f3\u60f3\u9019\u500b\u554f\u984c\uff0c\u4f60\u771f\u7684\u5e0c\u671b\u80fd\u5920\u5efa\u7acb\u4e00\u500b\u6846\u67b6\uff0c\u628a\u52a0\u76df\u5e97\u548c\u88fd\u9020\u6bd4\u85a9\u7d91\u7d81\u5728\u4e00\u8d77\uff0c\u537b\u53c8\u4e0d\u5931\u5f48\u6027\u3002","title":"\u4f46\u662f\u4f60\u60f3\u8981\u591a\u4e00\u4e9b\u54c1\u8cea\u63a7\u5236"},{"location":"Design%20pattern/factory/#_10","text":"\u6709\u500b\u505a\u6cd5\u53ef\u4ee5\u9054\u5230\u9019\u500b\u6548\u679c\uff0c\u6240\u8981\u505a\u7684\u4e8b\uff0c\u5c31\u662f\u628a createPizza() \u65b9\u6cd5\u653e\u56de PizzaStore \u4e4b\u4e2d\uff0c\u4e0d\u904e\u8981\u628a\u5b83\u8a2d\u70ba \"\u62bd\u8c61\u65b9\u6cd5\"\uff0c\u7136\u5f8c\u70ba\u6bcf\u500b\u5340\u57df\u53e3\u5473\uff0c\u64b0\u5beb\u4e00\u500b PizzaStore \u7684\u6b21\u985e\u5225\u3002 \u9996\u5148\uff0c\u5148\u4f86\u770b\u770b PizzaStore \u7684\u6539\u8b8a:","title":"\u7d66\u6bd4\u85a9\u5e97\u4f7f\u7528\u7684\u6846\u67b6"},{"location":"Design%20pattern/factory/#_11","text":"","title":"\u5141\u8a31\u6b21\u985e\u5225\u505a\u6c7a\u5b9a"},{"location":"Design%20pattern/factory/#_12","text":"","title":"\u8b93\u6211\u5011\u4f86\u958b\u4e00\u5bb6\u6bd4\u85a9\u5e97\u5427"},{"location":"Design%20pattern/factory/#_13","text":"","title":"\u5be6\u8e10\u6bd4\u85a9"},{"location":"Design%20pattern/factory/#_14","text":"","title":"\u4f86\u5b9a\u7fa9\u7d10\u7d04\u548c\u829d\u52a0\u54e5\u98a8\u5473\u7684\u8d77\u53f8\u6bd4\u85a9"},{"location":"Design%20pattern/factory/#_15","text":"","title":"\u6e2c\u8a66\u6210\u679c"},{"location":"Design%20pattern/factory/#_16","text":"\u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f (Factory Method Pattern) \u8b93\u6b21\u985e\u5225\u6c7a\u5b9a\u8a72\u5efa\u7acb\u7684\u7269\u4ef6\u70ba\u4f55\uff0c\u64da\u6b64\u9054\u5230\u5c07\u7269\u4ef6\u5efa\u7acb\u7684\u904e\u7a0b\u5c01\u88dd\u7684\u76ee\u7684\u3002","title":"\u6703\u898b\u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f\u7684\u6642\u523b\u7d42\u65bc\u5230\u4e86"},{"location":"Design%20pattern/factory/#_17","text":"\"\u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f\" \u5b9a\u7fa9\u4e86\u4e00\u500b\u5efa\u7acb\u7269\u4ef6\u7684\u4ecb\u9762\uff0c\u4f46\u7531\u6b21\u985e\u5225\u6c7a\u5b9a\u8981\u5be6\u9ad4\u5316\u7684\u985e\u5225\u70ba\u4f55\u3002\u5de5\u5ee0\u65b9\u6cd5\u8b93\u985e\u5225\u628a\u5be6\u9ad4\u5316\u7684\u52d5\u4f5c\uff0c\u4ea4\u7531\u6b21\u985e\u5225\u9032\u884c\u3002","title":"\u5b9a\u7fa9\u5de5\u5ee0\u65b9\u6cd5\u6a21\u5f0f"},{"location":"Design%20pattern/factory/#_18","text":"\u7576\u76f4\u63a5\u5be6\u9ad4\u5316\u4e00\u500b\u7269\u4ef6\uff0c\u5c31\u662f\u5728\u4f9d\u8cf4\u5b83\u7684\u5177\u8c61\u985e\u5225\u3002\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5b83\u662f\u7531\u6bd4\u85a9\u5e97\u985e\u5225\u5be6\u9ad4\u5316\u6240\u6709\u6bd4\u85a9\u7269\u4ef6\uff0c\u800c\u4e0d\u662f\u59d4\u7531\u5de5\u5ee0\u88fd\u9020\u3002","title":"\u770b\u770b\u7269\u4ef6\u7684\u76f8\u4f9d\u6027"},{"location":"Design%20pattern/factory/#dip","text":"","title":"\u4f9d\u8cf4\u53cd\u8f49\u5b88\u5247 (DIP)"},{"location":"Design%20pattern/factory/#_19","text":"\u4f9d\u8cf4\u62bd\u8c61\u985e\u5225\uff0c\u4e0d\u8981\u4f9d\u8cf4\u5177\u8c61\u985e\u5225\u3002","title":"\u8a2d\u8a08\u5b88\u5247"},{"location":"Design%20pattern/factory/#_20","text":"\u96d6\u7136\u5df2\u7d93\u5efa\u7acb\u4e86\u4e00\u500b\u62bd\u8c61\u985e\u5225 (Pizza)\uff0c\u4f46\u6211\u5011\u672a\u66fe\u5728\u7a0b\u5f0f\u78bc\u4e2d\u61c9\u7528\u5230\uff0c\u6240\u4ee5\u9019\u500b\u62bd\u8c61\u985e\u5225\u6c92\u6709\u5f71\u97ff\u529b\u3002 \u5982\u4f55\u5728 orderPizza() \u65b9\u6cd5\u4e2d\uff0c\u5c07\u9019\u4e9b\u5be6\u9ad4\u5316\u7684\u7a0b\u5f0f\u78bc\u7368\u7acb\u958b\u4f86? \u6211\u5011\u90fd\u77e5\u9053\uff0c\u5de5\u5ee0\u65b9\u6cd5\u525b\u597d\u80fd\u6d3e\u4e0a\u7528\u5834\u3002 \u50cf\u662f\u9019\u6a23\u5b50:","title":"\u5b88\u5247\u7684\u904b\u7528"},{"location":"Design%20pattern/factory/#faq_1","text":"\u554f: \u4f9d\u8cf4\u53cd\u8f49\u5b88\u5247\uff0c\u7a76\u7adf\u53cd\u8f49\u5728\u54ea\u88e1? \u7b54: \u770b\u770b\u524d\u4e00\u5f35\u5716\uff0c\u6ce8\u610f\u5230\u4f4e\u968e\u5143\u4ef6\uff0c\u73fe\u5728\u7adf\u7136\u4e5f\u4f9d\u8cf4\u9ad8\u968e\u7684\u62bd\u8c61\u3002\u540c\u6a23\u7684\uff0c\u9ad8\u968e\u5143\u4ef6\u73fe\u5728\u4e5f\u4f9d\u8cf4\u76f8\u540c\u7684\u62bd\u8c61\u3002\u524d\u5e7e\u9801\u6240\u7e6a\u88fd\u7684\u76f8\u4f9d\u662f\u7531\u4e0a\u800c\u4e0b\u7684\uff0c\u73fe\u5728\u537b\u5012\u904e\u4f86\u4e86\uff0c\u800c\u4e14\u9ad8\u968e\u8207\u4f4e\u968e\u6a21\u7d44\u73fe\u5728\u90fd\u4f9d\u8cf4\u9019\u500b\u62bd\u8c61\u3002","title":"FAQ"},{"location":"Design%20pattern/factory/#_21","text":"\u8981\u5982\u4f55\u78ba\u4fdd\u6bcf\u5bb6\u52a0\u76df\u5e97\u4f7f\u7528\u9ad8\u54c1\u8cea\u7684\u539f\u6599? \u4f60\u6253\u7b97\u5efa\u9020\u4e00\u5bb6\u751f\u7522\u539f\u6599\u7684\u5de5\u5ee0\uff0c\u4e26\u5c07\u539f\u6599\u904b\u9001\u5230\u5404\u5bb6\u52a0\u76df\u5e97\u3002 \u5c0d\u65bc\u9019\u500b\u505a\u6cd5\uff0c\u9084\u5269\u4e0b\u4e00\u500b\u554f\u984c\u672a\u89e3\u6c7a: \u52a0\u76df\u5e97\u5750\u843d\u5728\u4e0d\u540c\u7684\u5340\u57df\uff0c\u7d10\u7d04\u7684\u7d05\u91ac\u6599\u8ddf\u829d\u52a0\u54e5\u7684\u7d05\u91ac\u6599\u662f\u4e0d\u4e00\u6a23\u7684\u3002\u6240\u4ee5\u5c0d\u65bc\u7d10\u7d04\u548c\u829d\u52a0\u54e5\uff0c\u4f60\u6e96\u5099\u5169\u7d44\u4e0d\u540c\u7684\u539f\u6599:","title":"\u518d\u56de\u5230\u6bd4\u85a9\u5e97"},{"location":"Design%20pattern/factory/#_22","text":"\u7d10\u7d04\u548c\u829d\u52a0\u54e5\u4f7f\u7528\u4e0d\u540c\u7d44\u539f\u6599\u3002\u53ef\u80fd\u4e0d\u4e45\u4e4b\u5f8c\u52a0\u5dde\u5c31\u8981\u6709\u52a0\u76df\u5e97\uff0c\u5230\u6642\u5019\u53c8\u9700\u8981\u53e6\u4e00\u7d44\u5340\u57df\u7684\u539f\u6599\u3002\u6211\u5011\u60f3\u6e05\u695a\u5982\u4f55\u8655\u88e1\u539f\u6599\u7684\u5bb6\u65cf\u3002","title":"\u539f\u6599\u5bb6\u65cf"},{"location":"Design%20pattern/factory/#_23","text":"\u5148\u958b\u59cb\u5b9a\u7fa9\u4e00\u500b\u4ecb\u9762\uff0c\u9019\u500b\u4ecb\u9762\u8ca0\u8cac\u5efa\u7acb\u6240\u6709\u7684\u539f\u6599:","title":"\u5efa\u7acb\u539f\u6599\u5de5\u5ee0"},{"location":"Design%20pattern/factory/#_24","text":"","title":"\u5efa\u7acb\u7d10\u7d04\u539f\u6599\u5de5\u5ee0"},{"location":"Design%20pattern/factory/#_25","text":"","title":"\u4fee\u6539\u6bd4\u85a9"},{"location":"Design%20pattern/factory/#_26","text":"","title":"\u518d\u56de\u5230\u6bd4\u85a9\u5e97"},{"location":"Design%20pattern/factory/#_27","text":"\u6211\u5011\u5728\u6b64\u5c0e\u5165\u65b0\u578b\u614b\u7684\u5de5\u5ee0\uff0c\u4e5f\u5c31\u662f\u6240\u8b02\u7684\u62bd\u8c61\u5de5\u5ee0\uff0c\u7528\u4f86\u5efa\u7acb\u6bd4\u85a9\u539f\u6599\u5bb6\u65cf\u3002 \u900f\u904e\u62bd\u8c61\u5de5\u5ee0\u6240\u63d0\u4f9b\u51fa\u4f86\u7684\u4ecb\u9762\uff0c\u53ef\u4ee5\u5efa\u7acb\u7522\u54c1\u7684\u5bb6\u65cf\uff0c\u5229\u7528\u9019\u4e9b\u4ecb\u9762\uff0c\u628a\u5be6\u969b\u88fd\u9020\u7522\u54c1\u7684\u5de5\u5ee0\u9b06\u7d81\uff0c\u4ee5\u4fbf\u5be6\u8e10\u5404\u5f0f\u5404\u6a23\u7684\u5de5\u5ee0\uff0c\u88fd\u9020\u51fa\u5404\u7a2e\u4e0d\u540c\u7684\u7522\u54c1\u3002","title":"\u6211\u5011\u505a\u4e86\u4e9b\u4ec0\u9ebc\u4e8b?"},{"location":"Design%20pattern/factory/#_28","text":"\u62bd\u8c61\u5de5\u5ee0\u6a21\u5f0f\u63d0\u4f9b\u51fa\u4f86\u4e86\u4e00\u500b\u4ecb\u9762\uff0c\u5efa\u7acb\u76f8\u95dc\u6216\u76f8\u4f9d\u7269\u4ef6\u4e4b\u5bb6\u65cf\uff0c\u800c\u4e0d\u9700\u8981\u660e\u78ba\u6307\u5b9a\u5177\u8c61\u985e\u5225\u3002","title":"\u5b9a\u7fa9\u62bd\u8c61\u5de5\u5ee0\u6a21\u5f0f"},{"location":"Design%20pattern/factory/#pizzastore_1","text":"","title":"\u8b93\u6211\u5011\u5f9e PizzaStore \u7684\u89c0\u9ede\u770b\u5b83"},{"location":"Design%20pattern/factory/#_29","text":"","title":"\u6bd4\u8f03\u5de5\u5ee0\u65b9\u6cd5\u4ee5\u53ca\u62bd\u8c61\u5de5\u5ee0"},{"location":"Design%20pattern/observer/","text":"\u89c0\u5bdf\u8005\u6a21\u5f0f (Observer pattern) \u6c23\u8c61\u76e3\u6e2c\u7cfb\u7d71 \u5047\u8a2d\u6211\u5011\u60f3\u505a\u4e00\u500b\u7db2\u8def\u6c23\u8c61\u7ad9\uff0c\u7136\u5f8c\u5fc5\u9808\u5efa\u7acb\u5728\u5ba2\u6236\u63d0\u4f9b\u7684 WeatherData \u7269\u4ef6\u4e0a\uff0c\u4ed6\u8ca0\u8cac\u8ffd\u8e64\u76ee\u524d\u7684\u5929\u6c23\u72c0\u6cc1\u3002\u63a5\u8457\u6211\u5011\u5e0c\u671b\u5efa\u7acb\u4e00\u500b\u7cfb\u7d71\uff0c\u6709\u4e09\u500b\u4f48\u544a\u6b04\uff0c\u5206\u5225\u986f\u793a\u76ee\u524d\u72c0\u6cc1\uff0c\u6c23\u8c61\u7d71\u8a08\uff0c\u4ee5\u53ca\u7c21\u55ae\u7684\u9810\u5831\u3002\u7576 WeatherObject \u7269\u4ef6\u5411\u8a72\u7cfb\u7d71\u8981\u6c42\u6700\u65b0\u6578\u64da\u6642\uff0c\u8cc7\u6599\u5fc5\u9808\u5373\u6642\u66f4\u65b0\u3002 \u800c\u4e14\u9019\u662f\u4e00\u500b\u53ef\u64f4\u5145\u7684\u6c23\u8c61\u7ad9\uff0c\u6c23\u8c61\u7ad9\u53ef\u516c\u4f48\u4e00\u7d44 API\uff0c\u597d\u8b93\u5176\u4ed6\u7a0b\u5f0f\u54e1\u53ef\u4ee5\u5beb\u51fa\u81ea\u5df1\u7684\u6c23\u8c61\u4f48\u544a\u6b04\uff0c\u4e26\u63d2\u5165\u6b64\u7cfb\u7d71\u4e2d\u3002 \u6c23\u8c61\u76e3\u6e2c\u7cfb\u7d71\u7684\u6982\u6cc1 \u6b64\u7cfb\u7d71\u4e2d\u7684\u4e09\u500b\u4efd\u5b50\u662f\u6c23\u8c61\u7ad9\uff0cWeatherData \u7269\u4ef6 (\u8ffd\u8e64\u4f86\u81ea\u6c23\u8c61\u7ad9\u7684\u8cc7\u6599\uff0c\u4e26\u986f\u793a\u5728\u4f48\u544a\u6b04\u4e0a)\uff0c\u4ee5\u53ca\u4f48\u544a\u6b04\u3002 \u6211\u5011\u7684\u5de5\u4f5c\u5c31\u662f\u5efa\u7acb\u4e00\u500b\u7cfb\u7d71\uff0c\u5229\u7528 WeatherData \u7269\u4ef6\uff0c\u53d6\u5f97\u8cc7\u6599\uff0c\u4e26\u66f4\u65b0\u4e09\u500b\u986f\u793a\u4f48\u544a\u6b04: \u76ee\u524d\u72c0\u6cc1\uff0c\u6c23\u8c61\u7d71\u8a08\uff0c\u5929\u6c23\u9810\u5831\u3002 \u77a7\u4e00\u77a7\u9001\u5230\u7684 WeatherData \u985e\u5225 \u6211\u5011\u7684\u5de5\u4f5c\u5c31\u662f\u5be6\u8e10 measurementsChanged() \uff0c\u597d\u8b93\u4ed6\u66f4\u65b0\u76ee\u524d\u72c0\u6cc1\uff0c\u6c23\u8c61\u7d71\u8a08\uff0c\u5929\u6c23\u9810\u5831\u7684\u986f\u793a\u4f48\u544a\u6b04\u3002 \u5148\u770b\u4e00\u500b\u932f\u8aa4\u7684\u793a\u7bc4 \u6211\u5011\u7684\u5be6\u8e10\u6709\u4ec0\u9ebc\u4e0d\u5c0d? \u6211\u73fe\u5728\u5c31\u4f86\u770b\u770b\u89c0\u5bdf\u8005\u6a21\u5f0f\uff0c\u7136\u5f8c\u518d\u56de\u4f86\u770b\u770b\u5982\u4f55\u5c07\u6b64\u6a21\u5f0f\u61c9\u7528\u5230\u6c23\u8c61\u89c0\u6e2c\u7ad9\u3002 \u8a8d\u8b58\u89c0\u5bdf\u8005\u6a21\u5f0f \u51fa\u7248\u8005 + \u8a02\u95b1\u8005 = \u89c0\u5bdf\u8005\u6a21\u5f0f \u5982\u679c\u4f60\u4e86\u89e3\u5831\u7d19\u7684\u8a02\u95b1\u662f\u600e\u9ebc\u4e00\u56de\u4e8b\uff0c\u5176\u5be6\u5c31\u77e5\u9053\u89c0\u5bdf\u8005\u6a21\u5f0f\u662f\u600e\u9ebc\u4e00\u56de\u4e8b\uff0c\u53ea\u662f\u540d\u7a31\u4e0d\u592a\u4e00\u6a23: \u51fa\u7248\u8005\u6539\u7a31\u70ba \"\u4e3b\u984c\" (Subject)\uff0c\u8a02\u95b1\u8005\u6539\u7a31\u70ba\u89c0\u5bdf\u8005 (Observer)\u3002 \u89c0\u5bdf\u8005\u6a21\u5f0f\u904b\u884c\u7bc4\u4f8b \u5b9a\u7fa9\u89c0\u5bdf\u8005\u6a21\u5f0f \u89c0\u5bdf\u8005\u6a21\u5f0f\u5b9a\u7fa9\u4e86\u7269\u4ef6\u4e4b\u9593\u7684\u4e00\u5c0d\u591a\u95dc\u4fc2\uff0c\u5982\u6b64\u4e00\u4f86\uff0c\u7576\u4e00\u500b\u7269\u4ef6\u6539\u8b8a\u72c0\u614b\uff0c\u5176\u4ed6\u76f8\u4f9d\u8005\u90fd\u6703\u6536\u5230\u901a\u77e5\u4e26\u81ea\u52d5\u66f4\u65b0\u3002 \u89c0\u5bdf\u8005\u6a21\u5f0f\u985e\u5225\u5716 \u9b06\u7d81\u7684\u5a01\u529b \u89c0\u5bdf\u8005\u63d0\u4f9b\u4e86\u4e00\u7a2e\u65b9\u5f0f\uff0c\u8b93\u4e3b\u984c\u548c\u89c0\u5bdf\u8005\u4e4b\u9593\u9b06\u7d81\u3002 \u7576\u5169\u500b\u7269\u4ef6\u4e4b\u9593\u88ab\u9b06\u7d81\uff0c\u5b83\u5011\u4f9d\u7136\u53ef\u4ee5\u4e92\u52d5\uff0c\u4f46\u662f\u4e0d\u592a\u6e05\u695a\u5f7c\u6b64\u7684\u7d30\u7bc0\u3002 \u95dc\u65bc\u89c0\u5bdf\u8005\u7684\u4e00\u5207\uff0c\u4e3b\u984c\u53ea\u77e5\u9053\u89c0\u5bdf\u8005\u6709\u5be6\u8e10\u7279\u5b9a\u4ecb\u9762 (\u4e5f\u5c31\u662f Observer \u4ecb\u9762)\u3002 \u4e3b\u984c\u4e0d\u9700\u8981\u77e5\u9053\u89c0\u5bdf\u8005\u7684\u5177\u9ad4\u985e\u5225\u70ba\u4f55\uff0c\u505a\u4e86\u4e9b\u4ec0\u9ebc\uff0c\u9084\u6709\u5176\u4ed6\u7d30\u7bc0\u3002 \u4efb\u4f55\u6642\u5019\u90fd\u53ef\u4ee5\u52a0\u5165\u65b0\u7684\u89c0\u5bdf\u8005\u3002 \u4e8b\u5be6\u4e0a\uff0c\u5728\u57f7\u884c\u671f\u6211\u5011\u53ef\u4ee5\u7528\u65b0\u7684\u89c0\u5bdf\u8005\u53d6\u4ee3\u65e2\u6709\u7684\u89c0\u5bdf\u8005\uff0c\u4e3b\u984c\u6703\u8b93\u9019\u4e00\u5207\u9806\u66a2\u904b\u884c\u3002\u540c\u6a23\u7684\uff0c\u53ef\u4ee5\u5728\u57f7\u884c\u671f\u52d5\u614b\u5730\u79fb\u9664\u89c0\u5bdf\u8005\u3002 \u6709\u65b0\u578b\u614b\u7684\u89c0\u5bdf\u8005\u51fa\u73fe\u6642\uff0c\u4e3b\u984c\u7684\u7a0b\u5f0f\u78bc\u7121\u9808\u4fee\u6539\u3002 \u82e5\u6709\u65b0\u578b\u614b\u7684\u89c0\u5bdf\u8005\u51fa\u73fe\u6642\uff0c\u53ea\u9808\u8b93\u65b0\u7684\u89c0\u5bdf\u8005\u5be6\u8e10\u6b64\u89c0\u5bdf\u8005\u4ecb\u9762\uff0c\u7136\u5f8c\u5411\u4e3b\u984c\u8a3b\u518a\u65b0\u89c0\u5bdf\u8005\u5373\u53ef\u3002\u4e3b\u984c\u4e0d\u5728\u4e4e\u89c0\u5bdf\u8005\u5be6\u969b\u7684\u985e\u5225\u70ba\u4f55\uff0c\u53ea\u5728\u4e4e\u6709\u6c92\u6709\u5be6\u8e10\u89c0\u5bdf\u8005\u4ecb\u9762\u3002 \u6211\u5011\u53ef\u4ee5\u5728\u5176\u4ed6\u5730\u65b9\u904b\u7528\u4e3b\u984c\u6216\u89c0\u5bdf\u8005\uff0c\u4e0d\u5fc5\u5c07\u5169\u8457\u7d81\u5728\u4e00\u8d77\u3002 \u7247\u9762\u5730\u6539\u8b8a\u4e3b\u984c\u6216\u89c0\u5bdf\u8005\uff0c\u4e26\u4e0d\u6703\u5f71\u97ff\u53e6\u4e00\u65b9\u3002 \u8a2d\u8a08\u5b88\u5247 \u8a2d\u8a08\u6642\uff0c\u76e1\u91cf\u8b93\u9700\u8981\u4e92\u52d5\u7684\u7269\u4ef6\u4e4b\u9593\u95dc\u4fc2\u9b06\u7d81\u3002 \u56de\u5230\u8a2d\u8a08\u6c23\u8c61\u7ad9 \u4e09\u500b\u4f48\u544a\u6b04\u7684\u985e\u5225\u61c9\u8a72\u6709\u4e00\u500b\u6307\u5411 WeatherData \u7684 subject \u6307\u6a19\uff0c\u53ea\u662f\u9019\u88e1\u6c92\u756b\u4e0a\u53bb\uff0c\u56e0\u70ba\u6703\u592a\u4e82\u3002 \u5be6\u8e10\u6c23\u8c61\u7ad9 \u5728 WeatherData \u4e2d\u5be6\u8e10\u6b64\u4e3b\u984c\u4ecb\u9762 \u5efa\u7acb\u4f48\u544a\u6b04 \u6e2c\u8a66\u6c23\u8c61\u7ad9 \u57f7\u884c\u7a0b\u5f0f \u4f7f\u7528 Java \u5167\u5efa\u7684\u89c0\u5bdf\u8005\u6a21\u5f0f Java \u5167\u5efa\u7684\u89c0\u5bdf\u8005\u6a21\u5f0f\u5982\u4f55\u904b\u4f5c \u5982\u4f55\u628a\u7269\u4ef6\u8b8a\u6210\u89c0\u5bdf\u8005 \u4f7f\u7528 deleteObserver() \u548c addObserver() \u65b9\u6cd5 \u89c0\u5bdf\u8005\u8981\u5982\u4f55\u9001\u51fa\u901a\u77e5 \u5148\u547c\u53eb setChanged() \u65b9\u6cd5\uff0c\u6a19\u8a18\u72c0\u614b\u5df2\u6539\u8b8a\u7684\u4e8b\u5be6\u3002 \u7136\u5f8c\u547c\u53eb notifyObservers() \u6216\u662f notifyObservers(Object arg) \u3002 \u89c0\u5bdf\u8005\u5982\u4f55\u6536\u5230\u901a\u77e5 \u8ddf\u4ee5\u524d\u4e00\u6a23\uff0c\u53ea\u662f\u65b9\u6cd5\u7684\u53c3\u6578\u4e0d\u592a\u4e00\u6a23: update(Observerable o, Object arg) \u3002 setChanged() \u662f\u600e\u9ebc\u4e00\u56de\u4e8b? setChanged() \u7528\u4f86\u6a19\u793a\u72c0\u614b\u5df2\u7d93\u6539\u8b8a\u7684\u4e8b\u5be6\uff0c\u597d\u8b93 notifyObservers() \u77e5\u9053\u61c9\u8a72\u66f4\u65b0\u89c0\u5bdf\u8005\u3002\u82e5\u547c\u53eb notifyObservers() \u4e4b\u524d\u6c92\u6709\u5148\u547c\u53eb setChanged() \uff0c\u89c0\u5bdf\u8005\u5c31 \"\u4e0d\u6703\" \u88ab\u901a\u77e5\uff0c\u8b93\u6211\u5011\u4f86\u770b\u770b Observerable \u5167\u90e8\uff0c\u4ee5\u4e86\u89e3\u9019\u4e00\u5207: setChanged() \u53ef\u4ee5\u8b93\u4f60\u5728\u66f4\u65b0\u89c0\u5bdf\u8005\u6642\uff0c\u6709\u66f4\u591a\u7684\u5f48\u6027\u3002\u6bd4\u65b9\u8aaa\uff0c\u5982\u679c\u6c92\u6709 setChanged() \u65b9\u6cd5\uff0c\u7531\u65bc\u6c23\u8c61\u7ad9\u91cf\u6e2c\u5f88\u6e96\u78ba\uff0c\u4ee5\u81f3\u65bc\u6eab\u5ea6\u8a08\u6bcf\u5341\u5206\u4e4b\u4e00\u5ea6\u5c31\u6703\u66f4\u65b0\uff0c\u9019\u6703\u9020\u6210 WeatherData \u904e\u5ea6\u983b\u7e41\u66f4\u65b0\u89c0\u5bdf\u8005\uff0c\u6211\u5011\u4e0d\u5e0c\u671b\u9019\u6a23\u7684\u4e8b\u60c5\u767c\u751f\u3002\u5982\u679c\u6211\u5011\u5e0c\u671b\u5dee\u8ddd\u5728\u534a\u5ea6\u624d\u66f4\u65b0\uff0c\u5c31\u53ef\u4ee5\u5728\u6eab\u5ea6\u5dee\u8ddd\u9054\u5230\u534a\u5ea6\u6642\uff0c\u547c\u53eb setChanged() \uff0c\u9020\u6210\u6709\u6548\u7684\u66f4\u65b0\u3002 \u5229\u7528\u5167\u5efa\u7684\u652f\u63f4\u66f4\u6539\u6c23\u8c61\u7ad9\u7684\u7a0b\u5f0f \u6539\u7248 CurrentConditionsDisplay C++ \u5167\u5efa\u652f\u63f4\u89c0\u5bdf\u8005\u6a21\u5f0f\u55ce? \u4e0d\u652f\u63f4\uff0c\u4f46\u662f\u6709\u4e9b C++ \u51fd\u5f0f\u5eab\u5229\u7528\u89c0\u5bdf\u8005\u6a21\u5f0f\u5be6\u4f5c\u51fa\u6240\u8b02 signal / slot \u7684\u6a5f\u5236: Qt Signal/Slot Boost.Signals2","title":"\u89c0\u5bdf\u8005\u6a21\u5f0f (Observer pattern)"},{"location":"Design%20pattern/observer/#observer-pattern","text":"","title":"\u89c0\u5bdf\u8005\u6a21\u5f0f (Observer pattern)"},{"location":"Design%20pattern/observer/#_1","text":"\u5047\u8a2d\u6211\u5011\u60f3\u505a\u4e00\u500b\u7db2\u8def\u6c23\u8c61\u7ad9\uff0c\u7136\u5f8c\u5fc5\u9808\u5efa\u7acb\u5728\u5ba2\u6236\u63d0\u4f9b\u7684 WeatherData \u7269\u4ef6\u4e0a\uff0c\u4ed6\u8ca0\u8cac\u8ffd\u8e64\u76ee\u524d\u7684\u5929\u6c23\u72c0\u6cc1\u3002\u63a5\u8457\u6211\u5011\u5e0c\u671b\u5efa\u7acb\u4e00\u500b\u7cfb\u7d71\uff0c\u6709\u4e09\u500b\u4f48\u544a\u6b04\uff0c\u5206\u5225\u986f\u793a\u76ee\u524d\u72c0\u6cc1\uff0c\u6c23\u8c61\u7d71\u8a08\uff0c\u4ee5\u53ca\u7c21\u55ae\u7684\u9810\u5831\u3002\u7576 WeatherObject \u7269\u4ef6\u5411\u8a72\u7cfb\u7d71\u8981\u6c42\u6700\u65b0\u6578\u64da\u6642\uff0c\u8cc7\u6599\u5fc5\u9808\u5373\u6642\u66f4\u65b0\u3002 \u800c\u4e14\u9019\u662f\u4e00\u500b\u53ef\u64f4\u5145\u7684\u6c23\u8c61\u7ad9\uff0c\u6c23\u8c61\u7ad9\u53ef\u516c\u4f48\u4e00\u7d44 API\uff0c\u597d\u8b93\u5176\u4ed6\u7a0b\u5f0f\u54e1\u53ef\u4ee5\u5beb\u51fa\u81ea\u5df1\u7684\u6c23\u8c61\u4f48\u544a\u6b04\uff0c\u4e26\u63d2\u5165\u6b64\u7cfb\u7d71\u4e2d\u3002","title":"\u6c23\u8c61\u76e3\u6e2c\u7cfb\u7d71"},{"location":"Design%20pattern/observer/#_2","text":"\u6b64\u7cfb\u7d71\u4e2d\u7684\u4e09\u500b\u4efd\u5b50\u662f\u6c23\u8c61\u7ad9\uff0cWeatherData \u7269\u4ef6 (\u8ffd\u8e64\u4f86\u81ea\u6c23\u8c61\u7ad9\u7684\u8cc7\u6599\uff0c\u4e26\u986f\u793a\u5728\u4f48\u544a\u6b04\u4e0a)\uff0c\u4ee5\u53ca\u4f48\u544a\u6b04\u3002 \u6211\u5011\u7684\u5de5\u4f5c\u5c31\u662f\u5efa\u7acb\u4e00\u500b\u7cfb\u7d71\uff0c\u5229\u7528 WeatherData \u7269\u4ef6\uff0c\u53d6\u5f97\u8cc7\u6599\uff0c\u4e26\u66f4\u65b0\u4e09\u500b\u986f\u793a\u4f48\u544a\u6b04: \u76ee\u524d\u72c0\u6cc1\uff0c\u6c23\u8c61\u7d71\u8a08\uff0c\u5929\u6c23\u9810\u5831\u3002","title":"\u6c23\u8c61\u76e3\u6e2c\u7cfb\u7d71\u7684\u6982\u6cc1"},{"location":"Design%20pattern/observer/#weatherdata","text":"\u6211\u5011\u7684\u5de5\u4f5c\u5c31\u662f\u5be6\u8e10 measurementsChanged() \uff0c\u597d\u8b93\u4ed6\u66f4\u65b0\u76ee\u524d\u72c0\u6cc1\uff0c\u6c23\u8c61\u7d71\u8a08\uff0c\u5929\u6c23\u9810\u5831\u7684\u986f\u793a\u4f48\u544a\u6b04\u3002","title":"\u77a7\u4e00\u77a7\u9001\u5230\u7684 WeatherData \u985e\u5225"},{"location":"Design%20pattern/observer/#_3","text":"","title":"\u5148\u770b\u4e00\u500b\u932f\u8aa4\u7684\u793a\u7bc4"},{"location":"Design%20pattern/observer/#_4","text":"\u6211\u73fe\u5728\u5c31\u4f86\u770b\u770b\u89c0\u5bdf\u8005\u6a21\u5f0f\uff0c\u7136\u5f8c\u518d\u56de\u4f86\u770b\u770b\u5982\u4f55\u5c07\u6b64\u6a21\u5f0f\u61c9\u7528\u5230\u6c23\u8c61\u89c0\u6e2c\u7ad9\u3002","title":"\u6211\u5011\u7684\u5be6\u8e10\u6709\u4ec0\u9ebc\u4e0d\u5c0d?"},{"location":"Design%20pattern/observer/#_5","text":"\u51fa\u7248\u8005 + \u8a02\u95b1\u8005 = \u89c0\u5bdf\u8005\u6a21\u5f0f \u5982\u679c\u4f60\u4e86\u89e3\u5831\u7d19\u7684\u8a02\u95b1\u662f\u600e\u9ebc\u4e00\u56de\u4e8b\uff0c\u5176\u5be6\u5c31\u77e5\u9053\u89c0\u5bdf\u8005\u6a21\u5f0f\u662f\u600e\u9ebc\u4e00\u56de\u4e8b\uff0c\u53ea\u662f\u540d\u7a31\u4e0d\u592a\u4e00\u6a23: \u51fa\u7248\u8005\u6539\u7a31\u70ba \"\u4e3b\u984c\" (Subject)\uff0c\u8a02\u95b1\u8005\u6539\u7a31\u70ba\u89c0\u5bdf\u8005 (Observer)\u3002","title":"\u8a8d\u8b58\u89c0\u5bdf\u8005\u6a21\u5f0f"},{"location":"Design%20pattern/observer/#_6","text":"","title":"\u89c0\u5bdf\u8005\u6a21\u5f0f\u904b\u884c\u7bc4\u4f8b"},{"location":"Design%20pattern/observer/#_7","text":"\u89c0\u5bdf\u8005\u6a21\u5f0f\u5b9a\u7fa9\u4e86\u7269\u4ef6\u4e4b\u9593\u7684\u4e00\u5c0d\u591a\u95dc\u4fc2\uff0c\u5982\u6b64\u4e00\u4f86\uff0c\u7576\u4e00\u500b\u7269\u4ef6\u6539\u8b8a\u72c0\u614b\uff0c\u5176\u4ed6\u76f8\u4f9d\u8005\u90fd\u6703\u6536\u5230\u901a\u77e5\u4e26\u81ea\u52d5\u66f4\u65b0\u3002","title":"\u5b9a\u7fa9\u89c0\u5bdf\u8005\u6a21\u5f0f"},{"location":"Design%20pattern/observer/#_8","text":"","title":"\u89c0\u5bdf\u8005\u6a21\u5f0f\u985e\u5225\u5716"},{"location":"Design%20pattern/observer/#_9","text":"\u89c0\u5bdf\u8005\u63d0\u4f9b\u4e86\u4e00\u7a2e\u65b9\u5f0f\uff0c\u8b93\u4e3b\u984c\u548c\u89c0\u5bdf\u8005\u4e4b\u9593\u9b06\u7d81\u3002 \u7576\u5169\u500b\u7269\u4ef6\u4e4b\u9593\u88ab\u9b06\u7d81\uff0c\u5b83\u5011\u4f9d\u7136\u53ef\u4ee5\u4e92\u52d5\uff0c\u4f46\u662f\u4e0d\u592a\u6e05\u695a\u5f7c\u6b64\u7684\u7d30\u7bc0\u3002 \u95dc\u65bc\u89c0\u5bdf\u8005\u7684\u4e00\u5207\uff0c\u4e3b\u984c\u53ea\u77e5\u9053\u89c0\u5bdf\u8005\u6709\u5be6\u8e10\u7279\u5b9a\u4ecb\u9762 (\u4e5f\u5c31\u662f Observer \u4ecb\u9762)\u3002 \u4e3b\u984c\u4e0d\u9700\u8981\u77e5\u9053\u89c0\u5bdf\u8005\u7684\u5177\u9ad4\u985e\u5225\u70ba\u4f55\uff0c\u505a\u4e86\u4e9b\u4ec0\u9ebc\uff0c\u9084\u6709\u5176\u4ed6\u7d30\u7bc0\u3002 \u4efb\u4f55\u6642\u5019\u90fd\u53ef\u4ee5\u52a0\u5165\u65b0\u7684\u89c0\u5bdf\u8005\u3002 \u4e8b\u5be6\u4e0a\uff0c\u5728\u57f7\u884c\u671f\u6211\u5011\u53ef\u4ee5\u7528\u65b0\u7684\u89c0\u5bdf\u8005\u53d6\u4ee3\u65e2\u6709\u7684\u89c0\u5bdf\u8005\uff0c\u4e3b\u984c\u6703\u8b93\u9019\u4e00\u5207\u9806\u66a2\u904b\u884c\u3002\u540c\u6a23\u7684\uff0c\u53ef\u4ee5\u5728\u57f7\u884c\u671f\u52d5\u614b\u5730\u79fb\u9664\u89c0\u5bdf\u8005\u3002 \u6709\u65b0\u578b\u614b\u7684\u89c0\u5bdf\u8005\u51fa\u73fe\u6642\uff0c\u4e3b\u984c\u7684\u7a0b\u5f0f\u78bc\u7121\u9808\u4fee\u6539\u3002 \u82e5\u6709\u65b0\u578b\u614b\u7684\u89c0\u5bdf\u8005\u51fa\u73fe\u6642\uff0c\u53ea\u9808\u8b93\u65b0\u7684\u89c0\u5bdf\u8005\u5be6\u8e10\u6b64\u89c0\u5bdf\u8005\u4ecb\u9762\uff0c\u7136\u5f8c\u5411\u4e3b\u984c\u8a3b\u518a\u65b0\u89c0\u5bdf\u8005\u5373\u53ef\u3002\u4e3b\u984c\u4e0d\u5728\u4e4e\u89c0\u5bdf\u8005\u5be6\u969b\u7684\u985e\u5225\u70ba\u4f55\uff0c\u53ea\u5728\u4e4e\u6709\u6c92\u6709\u5be6\u8e10\u89c0\u5bdf\u8005\u4ecb\u9762\u3002 \u6211\u5011\u53ef\u4ee5\u5728\u5176\u4ed6\u5730\u65b9\u904b\u7528\u4e3b\u984c\u6216\u89c0\u5bdf\u8005\uff0c\u4e0d\u5fc5\u5c07\u5169\u8457\u7d81\u5728\u4e00\u8d77\u3002 \u7247\u9762\u5730\u6539\u8b8a\u4e3b\u984c\u6216\u89c0\u5bdf\u8005\uff0c\u4e26\u4e0d\u6703\u5f71\u97ff\u53e6\u4e00\u65b9\u3002","title":"\u9b06\u7d81\u7684\u5a01\u529b"},{"location":"Design%20pattern/observer/#_10","text":"\u8a2d\u8a08\u6642\uff0c\u76e1\u91cf\u8b93\u9700\u8981\u4e92\u52d5\u7684\u7269\u4ef6\u4e4b\u9593\u95dc\u4fc2\u9b06\u7d81\u3002","title":"\u8a2d\u8a08\u5b88\u5247"},{"location":"Design%20pattern/observer/#_11","text":"\u4e09\u500b\u4f48\u544a\u6b04\u7684\u985e\u5225\u61c9\u8a72\u6709\u4e00\u500b\u6307\u5411 WeatherData \u7684 subject \u6307\u6a19\uff0c\u53ea\u662f\u9019\u88e1\u6c92\u756b\u4e0a\u53bb\uff0c\u56e0\u70ba\u6703\u592a\u4e82\u3002","title":"\u56de\u5230\u8a2d\u8a08\u6c23\u8c61\u7ad9"},{"location":"Design%20pattern/observer/#_12","text":"","title":"\u5be6\u8e10\u6c23\u8c61\u7ad9"},{"location":"Design%20pattern/observer/#weatherdata_1","text":"","title":"\u5728 WeatherData \u4e2d\u5be6\u8e10\u6b64\u4e3b\u984c\u4ecb\u9762"},{"location":"Design%20pattern/observer/#_13","text":"","title":"\u5efa\u7acb\u4f48\u544a\u6b04"},{"location":"Design%20pattern/observer/#_14","text":"","title":"\u6e2c\u8a66\u6c23\u8c61\u7ad9"},{"location":"Design%20pattern/observer/#_15","text":"","title":"\u57f7\u884c\u7a0b\u5f0f"},{"location":"Design%20pattern/observer/#java","text":"","title":"\u4f7f\u7528 Java \u5167\u5efa\u7684\u89c0\u5bdf\u8005\u6a21\u5f0f"},{"location":"Design%20pattern/observer/#java_1","text":"\u5982\u4f55\u628a\u7269\u4ef6\u8b8a\u6210\u89c0\u5bdf\u8005 \u4f7f\u7528 deleteObserver() \u548c addObserver() \u65b9\u6cd5 \u89c0\u5bdf\u8005\u8981\u5982\u4f55\u9001\u51fa\u901a\u77e5 \u5148\u547c\u53eb setChanged() \u65b9\u6cd5\uff0c\u6a19\u8a18\u72c0\u614b\u5df2\u6539\u8b8a\u7684\u4e8b\u5be6\u3002 \u7136\u5f8c\u547c\u53eb notifyObservers() \u6216\u662f notifyObservers(Object arg) \u3002 \u89c0\u5bdf\u8005\u5982\u4f55\u6536\u5230\u901a\u77e5 \u8ddf\u4ee5\u524d\u4e00\u6a23\uff0c\u53ea\u662f\u65b9\u6cd5\u7684\u53c3\u6578\u4e0d\u592a\u4e00\u6a23: update(Observerable o, Object arg) \u3002","title":"Java \u5167\u5efa\u7684\u89c0\u5bdf\u8005\u6a21\u5f0f\u5982\u4f55\u904b\u4f5c"},{"location":"Design%20pattern/observer/#setchanged","text":"setChanged() \u7528\u4f86\u6a19\u793a\u72c0\u614b\u5df2\u7d93\u6539\u8b8a\u7684\u4e8b\u5be6\uff0c\u597d\u8b93 notifyObservers() \u77e5\u9053\u61c9\u8a72\u66f4\u65b0\u89c0\u5bdf\u8005\u3002\u82e5\u547c\u53eb notifyObservers() \u4e4b\u524d\u6c92\u6709\u5148\u547c\u53eb setChanged() \uff0c\u89c0\u5bdf\u8005\u5c31 \"\u4e0d\u6703\" \u88ab\u901a\u77e5\uff0c\u8b93\u6211\u5011\u4f86\u770b\u770b Observerable \u5167\u90e8\uff0c\u4ee5\u4e86\u89e3\u9019\u4e00\u5207: setChanged() \u53ef\u4ee5\u8b93\u4f60\u5728\u66f4\u65b0\u89c0\u5bdf\u8005\u6642\uff0c\u6709\u66f4\u591a\u7684\u5f48\u6027\u3002\u6bd4\u65b9\u8aaa\uff0c\u5982\u679c\u6c92\u6709 setChanged() \u65b9\u6cd5\uff0c\u7531\u65bc\u6c23\u8c61\u7ad9\u91cf\u6e2c\u5f88\u6e96\u78ba\uff0c\u4ee5\u81f3\u65bc\u6eab\u5ea6\u8a08\u6bcf\u5341\u5206\u4e4b\u4e00\u5ea6\u5c31\u6703\u66f4\u65b0\uff0c\u9019\u6703\u9020\u6210 WeatherData \u904e\u5ea6\u983b\u7e41\u66f4\u65b0\u89c0\u5bdf\u8005\uff0c\u6211\u5011\u4e0d\u5e0c\u671b\u9019\u6a23\u7684\u4e8b\u60c5\u767c\u751f\u3002\u5982\u679c\u6211\u5011\u5e0c\u671b\u5dee\u8ddd\u5728\u534a\u5ea6\u624d\u66f4\u65b0\uff0c\u5c31\u53ef\u4ee5\u5728\u6eab\u5ea6\u5dee\u8ddd\u9054\u5230\u534a\u5ea6\u6642\uff0c\u547c\u53eb setChanged() \uff0c\u9020\u6210\u6709\u6548\u7684\u66f4\u65b0\u3002","title":"setChanged() \u662f\u600e\u9ebc\u4e00\u56de\u4e8b?"},{"location":"Design%20pattern/observer/#_16","text":"","title":"\u5229\u7528\u5167\u5efa\u7684\u652f\u63f4\u66f4\u6539\u6c23\u8c61\u7ad9\u7684\u7a0b\u5f0f"},{"location":"Design%20pattern/observer/#currentconditionsdisplay","text":"","title":"\u6539\u7248 CurrentConditionsDisplay"},{"location":"Design%20pattern/observer/#c","text":"\u4e0d\u652f\u63f4\uff0c\u4f46\u662f\u6709\u4e9b C++ \u51fd\u5f0f\u5eab\u5229\u7528\u89c0\u5bdf\u8005\u6a21\u5f0f\u5be6\u4f5c\u51fa\u6240\u8b02 signal / slot \u7684\u6a5f\u5236: Qt Signal/Slot Boost.Signals2","title":"C++ \u5167\u5efa\u652f\u63f4\u89c0\u5bdf\u8005\u6a21\u5f0f\u55ce?"},{"location":"Design%20pattern/singleton/","text":"\u7368\u9ad4 (\u55ae\u4f8b) \u6a21\u5f0f (Singleton Pattern) \u7368\u9ad4\u6a21\u5f0f\uff0c\u7528\u4f86\u5efa\u7acb\u7368\u4e00\u7121\u4e8c\u7684\u7269\u4ef6\uff0c\u53ea\u80fd\u6709\u4e00\u500b\u5be6\u9ad4\u7684\u7269\u4ef6\u3002 FAQ A: \u9019\u6709\u4ec0\u9ebc\u7528\u8655? B: \u6709\u4e00\u4e9b\u7269\u4ef6\u53ea\u9700\u8981\u4e00\u500b\u5be6\u9ad4\uff0c\u6bd4\u65b9\u8aaa:\u57f7\u884c\u7dd2\u6c60 (thread pool)\uff0c\u5feb\u53d6\u5340 (cache)\uff0c\u5c0d\u8a71\u76d2\uff0c\u8655\u7406\u504f\u597d\u8a2d\u5b9a\u548c\u767b\u9304 (registry) \u7684\u7269\u4ef6\uff0c\u767b\u5165\u7cfb\u7d71\u7684\u7269\u4ef6\uff0c\u548c\u9a45\u52d5\u7a0b\u5f0f\u6e9d\u901a\u7684\u7269\u4ef6\u3002\u4e8b\u5be6\u4e0a\uff0c\u9019\u4e9b\u7269\u4ef6\u90fd\u53ea\u80fd\u6709\u4e00\u500b\u5be6\u9ad4\uff0c\u5982\u679c\u88fd\u9020\u51fa\u591a\u500b\u5be6\u9ad4\uff0c\u5c31\u6703\u5c0e\u81f4\u8a31\u591a\u554f\u984c\u7522\u751f\uff0c\u4f8b\u5982: \u7a0b\u5f0f\u7684\u884c\u70ba\u7570\u5e38\uff0c\u8cc7\u6e90\u4f7f\u7528\u904e\u91cf\uff0c\u6216\u662f\u4e0d\u4e00\u81f4\u7684\u7d50\u679c\u3002 A: \u4f46\u662f\u9019\u9700\u8981\u82b1\u6574\u500b\u7ae0\u7bc0\u4f86\u4ecb\u7d39\u55ce? \u96e3\u9053\u4e0d\u80fd\u9760\u7a0b\u5f0f\u54e1\u4e4b\u9593\u7684\u7d04\u5b9a\uff0c\u6216\u662f\u5229\u7528\u5168\u57df\u8b8a\u6578\uff0c\u975c\u614b\u8b8a\u6578\u5c31\u53ef\u4ee5\u505a\u5230\u4e86\u3002 B: \u7684\u78ba\u900f\u904e\u7a0b\u5f0f\u54e1\u4e4b\u9593\u7684\u7d04\u5b9a\u5c31\u53ef\u4ee5\u9054\u6210\u3002\u4f46\u662f\u7368\u9ad4\u6a21\u5f0f\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u5b58\u53d6\u9019\u500b\u5be6\u9ad4\uff0c\u6709\u5982\u540c\u5168\u57df\u8b8a\u6578\u822c\u7684\u65b9\u4fbf\uff0c\u537b\u6c92\u6709\u5168\u57df\u8b8a\u6578\u7684\u7f3a\u9ede\u3002 A: \u4ec0\u9ebc\u7f3a\u9ede? B: \u8209\u4f8b\u4f86\u8aaa: \u5982\u679c\u5c07\u7269\u4ef6\u6307\u5b9a\u5230\u4e00\u500b\u5168\u57df\u8b8a\u6578\uff0c\u90a3\u9ebc\u5fc5\u9808\u5728\u7a0b\u5f0f\u4e00\u958b\u59cb\u5c31\u5efa\u7acb\u597d\u7269\u4ef6\uff0c\u842c\u4e00\u9019\u500b\u7269\u4ef6\u975e\u5e38\u8017\u8cbb\u8cc7\u6e90\uff0c\u800c\u7a0b\u5f0f\u5728\u9019\u6b21\u57f7\u884c\u7576\u4e2d\uff0c\u4e00\u76f4\u6c92\u6709\u7528\u5230\u9019\u500b\u7269\u4ef6\uff0c\u4e0d\u5c31\u5f62\u6210\u4e00\u7a2e\u6d6a\u8cbb? \u7368\u9ad4\u6a21\u5f0f\u53ef\u4ee5\u5728\u9700\u8981\u6642\u624d\u5efa\u7acb\u3002 \u5256\u6790\u7368\u9ad4\u6a21\u5f0f\u8a2d\u8a08 \u5de7\u514b\u529b\u5de5\u5ee0 \u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u73fe\u4ee3\u5316\u7684\u5de7\u514b\u529b\u5de5\u5ee0\u5177\u5099\u96fb\u8166\u63a7\u5236\u7684\u5de7\u514b\u529b\u934b\u7210\u3002 \u9019\u88e1\u6709\u4e00\u500b\u91cf\u7522\u7528\u7684\u5de7\u514b\u529b\u934b\u7210\u3002\u770b\u770b\u5b83\u7684\u7a0b\u5f0f\uff0c\u5c07\u767c\u73fe\u7a0b\u5f0f\u5beb\u7684\u76f8\u7576\u5c0f\u5fc3\uff0c\u52aa\u529b\u9632\u6b62\u4e0d\u597d\u7684\u4e8b\u60c5\u767c\u751f\u3002\u4f8b\u5982: \u6392\u51fa 500 \u52a0\u4f96\u7684\u672a\u716e\u6cb8\u6df7\u5408\u7269\uff0c\u6216\u8005\u934b\u7210\u5df2\u7d93\u6eff\u4e86\u9084\u7e7c\u7e8c\u653e\u9032\u539f\u6599\uff0c\u6216\u8005\u934b\u7210\u5167\u6c92\u653e\u539f\u6599\u5c31\u958b\u59cb\u7a7a\u71d2\u3002 \u4f60\u53ef\u80fd\u6703\u64d4\u5fc3\uff0c\u842c\u4e00\u540c\u6642\u6709\u5169\u500b ChocolateBoiler (\u5de7\u514b\u529b\u934b\u7210) \u5be6\u9ad4\uff0c\u53ef\u80fd\u5c07\u767c\u751f\u5f88\u7cdf\u7cd5\u7684\u4e8b\u60c5\u3002 \u5b9a\u7fa9\u7368\u9ad4\u6a21\u5f0f \u7368\u9ad4\u6a21\u5f0f\u78ba\u4fdd\u4e00\u500b\u985e\u5225\u53ea\u6709\u4e00\u500b\u5be6\u9ad4\uff0c\u4e26\u7d66\u5b83\u4e00\u500b\u5b58\u53d6\u7684\u5168\u57df\u9ede (global point)\u3002","title":"\u7368\u9ad4 (\u55ae\u4f8b) \u6a21\u5f0f (Singleton Pattern)"},{"location":"Design%20pattern/singleton/#singleton-pattern","text":"\u7368\u9ad4\u6a21\u5f0f\uff0c\u7528\u4f86\u5efa\u7acb\u7368\u4e00\u7121\u4e8c\u7684\u7269\u4ef6\uff0c\u53ea\u80fd\u6709\u4e00\u500b\u5be6\u9ad4\u7684\u7269\u4ef6\u3002","title":"\u7368\u9ad4 (\u55ae\u4f8b) \u6a21\u5f0f (Singleton Pattern)"},{"location":"Design%20pattern/singleton/#faq","text":"A: \u9019\u6709\u4ec0\u9ebc\u7528\u8655? B: \u6709\u4e00\u4e9b\u7269\u4ef6\u53ea\u9700\u8981\u4e00\u500b\u5be6\u9ad4\uff0c\u6bd4\u65b9\u8aaa:\u57f7\u884c\u7dd2\u6c60 (thread pool)\uff0c\u5feb\u53d6\u5340 (cache)\uff0c\u5c0d\u8a71\u76d2\uff0c\u8655\u7406\u504f\u597d\u8a2d\u5b9a\u548c\u767b\u9304 (registry) \u7684\u7269\u4ef6\uff0c\u767b\u5165\u7cfb\u7d71\u7684\u7269\u4ef6\uff0c\u548c\u9a45\u52d5\u7a0b\u5f0f\u6e9d\u901a\u7684\u7269\u4ef6\u3002\u4e8b\u5be6\u4e0a\uff0c\u9019\u4e9b\u7269\u4ef6\u90fd\u53ea\u80fd\u6709\u4e00\u500b\u5be6\u9ad4\uff0c\u5982\u679c\u88fd\u9020\u51fa\u591a\u500b\u5be6\u9ad4\uff0c\u5c31\u6703\u5c0e\u81f4\u8a31\u591a\u554f\u984c\u7522\u751f\uff0c\u4f8b\u5982: \u7a0b\u5f0f\u7684\u884c\u70ba\u7570\u5e38\uff0c\u8cc7\u6e90\u4f7f\u7528\u904e\u91cf\uff0c\u6216\u662f\u4e0d\u4e00\u81f4\u7684\u7d50\u679c\u3002 A: \u4f46\u662f\u9019\u9700\u8981\u82b1\u6574\u500b\u7ae0\u7bc0\u4f86\u4ecb\u7d39\u55ce? \u96e3\u9053\u4e0d\u80fd\u9760\u7a0b\u5f0f\u54e1\u4e4b\u9593\u7684\u7d04\u5b9a\uff0c\u6216\u662f\u5229\u7528\u5168\u57df\u8b8a\u6578\uff0c\u975c\u614b\u8b8a\u6578\u5c31\u53ef\u4ee5\u505a\u5230\u4e86\u3002 B: \u7684\u78ba\u900f\u904e\u7a0b\u5f0f\u54e1\u4e4b\u9593\u7684\u7d04\u5b9a\u5c31\u53ef\u4ee5\u9054\u6210\u3002\u4f46\u662f\u7368\u9ad4\u6a21\u5f0f\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u5b58\u53d6\u9019\u500b\u5be6\u9ad4\uff0c\u6709\u5982\u540c\u5168\u57df\u8b8a\u6578\u822c\u7684\u65b9\u4fbf\uff0c\u537b\u6c92\u6709\u5168\u57df\u8b8a\u6578\u7684\u7f3a\u9ede\u3002 A: \u4ec0\u9ebc\u7f3a\u9ede? B: \u8209\u4f8b\u4f86\u8aaa: \u5982\u679c\u5c07\u7269\u4ef6\u6307\u5b9a\u5230\u4e00\u500b\u5168\u57df\u8b8a\u6578\uff0c\u90a3\u9ebc\u5fc5\u9808\u5728\u7a0b\u5f0f\u4e00\u958b\u59cb\u5c31\u5efa\u7acb\u597d\u7269\u4ef6\uff0c\u842c\u4e00\u9019\u500b\u7269\u4ef6\u975e\u5e38\u8017\u8cbb\u8cc7\u6e90\uff0c\u800c\u7a0b\u5f0f\u5728\u9019\u6b21\u57f7\u884c\u7576\u4e2d\uff0c\u4e00\u76f4\u6c92\u6709\u7528\u5230\u9019\u500b\u7269\u4ef6\uff0c\u4e0d\u5c31\u5f62\u6210\u4e00\u7a2e\u6d6a\u8cbb? \u7368\u9ad4\u6a21\u5f0f\u53ef\u4ee5\u5728\u9700\u8981\u6642\u624d\u5efa\u7acb\u3002","title":"FAQ"},{"location":"Design%20pattern/singleton/#_1","text":"","title":"\u5256\u6790\u7368\u9ad4\u6a21\u5f0f\u8a2d\u8a08"},{"location":"Design%20pattern/singleton/#_2","text":"\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u73fe\u4ee3\u5316\u7684\u5de7\u514b\u529b\u5de5\u5ee0\u5177\u5099\u96fb\u8166\u63a7\u5236\u7684\u5de7\u514b\u529b\u934b\u7210\u3002 \u9019\u88e1\u6709\u4e00\u500b\u91cf\u7522\u7528\u7684\u5de7\u514b\u529b\u934b\u7210\u3002\u770b\u770b\u5b83\u7684\u7a0b\u5f0f\uff0c\u5c07\u767c\u73fe\u7a0b\u5f0f\u5beb\u7684\u76f8\u7576\u5c0f\u5fc3\uff0c\u52aa\u529b\u9632\u6b62\u4e0d\u597d\u7684\u4e8b\u60c5\u767c\u751f\u3002\u4f8b\u5982: \u6392\u51fa 500 \u52a0\u4f96\u7684\u672a\u716e\u6cb8\u6df7\u5408\u7269\uff0c\u6216\u8005\u934b\u7210\u5df2\u7d93\u6eff\u4e86\u9084\u7e7c\u7e8c\u653e\u9032\u539f\u6599\uff0c\u6216\u8005\u934b\u7210\u5167\u6c92\u653e\u539f\u6599\u5c31\u958b\u59cb\u7a7a\u71d2\u3002 \u4f60\u53ef\u80fd\u6703\u64d4\u5fc3\uff0c\u842c\u4e00\u540c\u6642\u6709\u5169\u500b ChocolateBoiler (\u5de7\u514b\u529b\u934b\u7210) \u5be6\u9ad4\uff0c\u53ef\u80fd\u5c07\u767c\u751f\u5f88\u7cdf\u7cd5\u7684\u4e8b\u60c5\u3002","title":"\u5de7\u514b\u529b\u5de5\u5ee0"},{"location":"Design%20pattern/singleton/#_3","text":"\u7368\u9ad4\u6a21\u5f0f\u78ba\u4fdd\u4e00\u500b\u985e\u5225\u53ea\u6709\u4e00\u500b\u5be6\u9ad4\uff0c\u4e26\u7d66\u5b83\u4e00\u500b\u5b58\u53d6\u7684\u5168\u57df\u9ede (global point)\u3002","title":"\u5b9a\u7fa9\u7368\u9ad4\u6a21\u5f0f"},{"location":"Design%20pattern/welcome_strategy/","text":"Welcome to Design Pattern (\u8a2d\u8a08\u6a21\u5f0f) \u6709\u4e9b\u4eba\u5df2\u7d93\u89e3\u6c7a\u4f60\u7684\u554f\u984c\u4e86 \uff0c\u5728\u672c\u7ae0\uff0c\u4f60\u5c07\u5b78\u7fd2\u5230\u5982\u4f55\u5229\u7528\u5176\u4ed6\u958b\u767c\u8005\u7684\u7d93\u9a57\u8207\u667a\u6167\u3002\u4ed6\u5011\u906d\u9047\u904e\u76f8\u540c\u7684\u554f\u984c\uff0c\u4e5f\u9806\u5229\u7684\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\u3002 \u4f7f\u7528\u6a21\u5f0f\u6700\u597d\u7684\u65b9\u5f0f\u662f: \u628a\u6a21\u5f0f\u8a18\u5728\u8166\u5b50\u88e1\uff0c\u7136\u5f8c\u4f60\u5728\u8a2d\u8a08\u6216\u7dad\u8b77\u7a0b\u5f0f\u4e2d\uff0c\u5c0b\u627e\u4f55\u8655\u53ef\u4ee5\u4f7f\u7528\u9019\u4e9b\u6a21\u5f0f\u3002 \u5148\u5f9e\u7c21\u55ae\u7684\u6a21\u64ec\u9d28\u5b50\u7248\u672c\u958b\u59cb Joe \u7684\u516c\u53f8\u505a\u4e86\u4e00\u5957\u6a21\u64ec\u9d28\u5b50\u904a\u6232 SimUDuck \u3002 \u73fe\u5728\u6211\u5011\u9700\u8981\u8b93\u9d28\u5b50\u80fd\u98db \u4e3b\u7ba1\u8a8d\u70ba\uff0c\u6b64\u6a21\u64ec\u7a0b\u5f0f\u9700\u8981\u6703\u98db\u7684\u9d28\u5b50\uff0c\u624d\u53ef\u4ee5\u8d0f\u904e\u7af6\u722d\u8005\u3002 \u4f46\u662f\uff0c\u53ef\u6015\u7684\u4e8b\u767c\u751f\u4e86 Joe \u5ffd\u7565\u4e00\u4ef6\u4e8b\uff0c\u4e26\u975e\u6240\u6709 Duck \u5b50\u985e\u90fd\u6703\u98db\uff0c\u9019\u6703\u4f7f\u5f97\u67d0\u4e9b\u5b50\u985e\u5225\u4e5f\u5177\u6709\u4e0d\u6070\u7576\u7684\u884c\u70ba\u3002 Joe \u60f3\u5230\u65b9\u6cd5 Joe: \u6211\u53ef\u4ee5\u628a RubberDuck \u985e\u5225\u4e2d\u7684 fly() \u65b9\u6cd5 override\uff0c\u5c31\u50cf override quack() \u7684\u505a\u6cd5\u4e00\u6a23\u3002 \u53ef\u662f\uff0c\u5982\u679c\u4ee5\u5f8c\u6211\u52a0\u5165 Decoy Duck \u53c8\u6703\u5982\u4f55 ? Decoy Duck \u662f\u5047\u9d28\uff0c\u4e0d\u6703\u98db\u4e5f\u4e0d\u6703\u53eb\u3002 \u5229\u7528\u4ecb\u9762\u5982\u4f55? Joe \u767c\u73fe\u7e7c\u627f\u4e0d\u662f\u4e00\u500b\u5f88\u597d\u7684\u89e3\u6c7a\u65b9\u6cd5\uff0c\u56e0\u70ba\u4ed6\u77e5\u9053\u4e4b\u5f8c\u6bcf\u516d\u500b\u6708\u90fd\u6703\u66f4\u65b0\u65b0\u7522\u54c1\uff0c\u898f\u683c\u6703\u5e38\u5e38\u6539\u8b8a\uff0c\u6bcf\u7576\u6709\u65b0\u7684\u9d28\u5b50\u5b50\u985e\u5225\u51fa\u73fe\uff0c\u4ed6\u5c31\u8981\u88ab\u8feb\u6aa2\u8996\u4e26\u53ef\u80fd\u8981 override fly() \u548c quark() ... \u9019\u7c21\u76f4\u662f\u7121\u7aae\u7121\u76e1\u7684\u60e1\u5922\u3002 \u6240\u4ee5\uff0c\u4ed6\u9700\u8981\u4e00\u500b\u66f4\u6e05\u6670\u7684\u65b9\u6cd5\uff0c\u8b93 \"\u67d0\u4e9b\" \u9d28\u5b50\u578b\u614b\u53ef\u98db\u6216\u53ef\u53eb\u3002 \u9019\u986f\u7136\u662f\u500b\u4e0d\u597d\u7684\u4e3b\u610f\uff0c\u91cd\u8907\u7684\u7a0b\u5f0f\u78bc\u6703\u8b8a\u591a\u3002\u60f3\u50cf\u4e00\u4e0b\u5047\u8a2d\u4f60\u6709 50 \u500b Duck \u5b50\u985e\uff0c\u4eca\u5929\u4f60\u8981\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\u98db\u884c\u7684\u884c\u70ba\uff0c\u90a3\u4e0d\u5c31\u8981\u4fee\u6539\u5f88\u591a\u6b21\u3002 \u96d6\u7136 Flyable \u8207 Quackable \u53ef\u4ee5\u89e3\u6c7a\u4e00\u90e8\u5206\u7684\u554f\u984c (\u4e0d\u6703\u518d\u6709\u6703\u98db\u7684\u6a61\u76ae\u9d28)\uff0c\u4f46\u662f\u537b\u9020\u6210\u7a0b\u5f0f\u78bc\u7121\u6cd5\u518d\u5229\u7528\uff0c\u9019\u53ea\u80fd\u7b97\u662f\u5f9e\u4e00\u500b\u60e1\u5922\u8df3\u5230\u53e6\u4e00\u500b\u60e1\u5922\u3002 \u8edf\u9ad4\u958b\u767c\u7684\u4e00\u500b\u4e0d\u8b8a\u771f\u7406 \u4e0d\u7ba1\u7576\u521d\u8edf\u9ad4\u8a2d\u8a08\u7684\u591a\u597d\uff0c\u7e3d\u662f\u9700\u8981\u6210\u9577\u8207\u6539\u8b8a\u3002\u5426\u5247\u8edf\u9ad4\u5c31\u6703 \"\u6b7b\u4ea1\" \u3002 \u628a\u554f\u984c\u6b78\u96f6 \u73fe\u5728\u6211\u5011\u77e5\u9053\u4f7f\u7528\u7e7c\u627f\u6709\u4e00\u4e9b\u7f3a\u5931\uff0c\u56e0\u70ba\u6539\u8b8a\u9d28\u5b50\u7684\u884c\u70ba\u6703\u5f71\u97ff\u6240\u6709\u7a2e\u985e\u7684\u9d28\u5b50\uff0c\u800c\u9019\u4e26\u4e0d\u6070\u7576\u3002\u5e78\u904b\u7684\u662f\u6709\u500b\u8a2d\u8a08\u5b88\u5247\uff0c\u6b63\u5f0f\u9069\u7528\u65bc\u6b64\u72c0\u6cc1\u3002 \u8a2d\u8a08\u5b88\u5247 \u627e\u51fa\u7a0b\u5f0f\u4e2d\u53ef\u80fd\u9700\u8981\u66f4\u52d5\u4e4b\u8655\uff0c\u628a\u5b83\u5011\u7368\u7acb\u51fa\u4f86\uff0c\u4e0d\u8981\u548c\u90a3\u4e9b\u4e0d\u9700\u8981\u66f4\u52d5\u7684\u7a0b\u5f0f\u78bc\u6df7\u5728\u4e00\u8d77\u3002(\u8207SRP\u76f8\u4f3c) \u63db\u500b\u89d2\u5ea6\u8aaa: \"\u628a\u6703\u8b8a\u52d5\u7684\u90e8\u5206\u53d6\u51fa\u4e26\u5c01\u88dd\u8d77\u4f86\uff0c\u4ee5\u4fbf\u4ee5\u5f8c\u53ef\u4ee5\u8f15\u6613\u5730\u64f4\u5145\u6b64\u90e8\u5206\uff0c\u800c\u4e0d\u5f71\u97ff\u4e0d\u9700\u8981\u66f4\u52d5\u7684\u5176\u4ed6\u90e8\u5206\"\u3002(\u8207OCP\u76f8\u4f3c) \u5206\u958b\u8b8a\u52d5\u548c\u4e0d\u6703\u8b8a\u52d5\u7684\u90e8\u5206 \u6211\u5011\u77e5\u9053 Duck \u985e\u5225\u5167\u7684 fly() \u548c quack() \u6703\u96a8\u8457\u9d28\u5b50\u4e0d\u540c\u800c\u6539\u8b8a\u3002 \u70ba\u4e86\u8981\u628a\u9019\u5169\u500b\u884c\u70ba\u5f9e\u9d28\u5b50\u4e2d\u5206\u958b\uff0c\u6211\u5011\u5c07\u628a\u5b83\u5011\u81ea\u9d28\u5b50\u4e2d\u53d6\u51fa\uff0c\u5efa\u7acb\u4e00\u7d44\u65b0\u985e\u5225\u4ee3\u8868\u6bcf\u500b\u884c\u70ba\u3002 \u8a2d\u8a08\u9d28\u5b50\u7684\u884c\u70ba \u6211\u5011\u5e0c\u671b\u4e00\u5207\u6709\u5f48\u6027\uff0c\u6211\u5011\u61c9\u8a72\u5728\u9d28\u5b50\u985e\u5225\u4e2d\u5305\u542b\u8a2d\u5b9a\u884c\u70ba\u7684\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5728 \"\u57f7\u884c\u671f\" \u52d5\u614b\u5730 \"\u6539\u8b8a\" \u9d28\u5b50\u7684\u98db\u884c\u884c\u70ba\u3002 \u6709\u4e86\u9019\u4e9b\u76ee\u6a19\uff0c\u63a5\u8457\u770b\u770b\u7b2c\u4e8c\u500b\u8a2d\u8a08\u539f\u5247: \u8a2d\u8a08\u539f\u5247 \u5beb\u7a0b\u5f0f\u662f\u91dd\u5c0d\u4ecb\u9762\u800c\u5beb\uff0c\u800c\u4e0d\u662f\u91dd\u5c0d\u5be6\u8e10\u65b9\u5f0f\u800c\u5beb\u3002 (\u8207DIP\u76f8\u4f3c) \u6211\u5011\u5229\u7528\u4ecb\u9762\u4ee3\u8868\u6bcf\u500b\u884c\u70ba\uff0c\u4f8b\u5982\uff0cFlyBehavior \u8207 QuackBehavior\u3002 \u9019\u6a23\u7684\u8a2d\u8a08\uff0c\u53ef\u4ee5\u8b93\u98db\u884c\u548c\u53eb\u8072\u7684\u52d5\u4f5c\u88ab\u5176\u4ed6\u7684\u7269\u4ef6\u518d\u4e09\u5229\u7528\uff0c\u56e0\u70ba\u9019\u4e9b\u884c\u70ba\u5df2\u7d93\u8207\u9d28\u5b50\u985e\u5225\u7121\u95dc\u4e86\u3002 \u800c\u6211\u5011\u53ef\u4ee5\u65b0\u589e\u4e00\u4e9b\u884c\u70ba\uff0c\u4e0d\u6703\u5f71\u97ff\u5230\u65e2\u6709\u7684\u884c\u70ba\uff0c\u4e5f\u4e0d\u6703\u5f71\u97ff\u6709 \"\u4f7f\u7528\" \u5230\u98db\u884c\u884c\u70ba\u7684\u9d28\u5b50\u985e\u5225\u3002 \u6574\u5408\u9d28\u5b50\u7684\u884c\u70ba \u5be6\u8e10 performQuack() : \u5982\u4f55\u8a2d\u5b9a flyBehavior \u8207 quackBehavior : \u52d5\u614b\u5730\u8a2d\u5b9a\u884c\u70ba \u5728\u9d28\u5b50\u985e\u5225\u88e1\u5efa\u7acb\u4e86\u4e00\u5806\u52d5\u614b\u7684\u529f\u80fd\u6c92\u6709\u7528\u5230\uff0c\u5c31\u592a\u53ef\u60dc\u4e86! \u5047\u8a2d\u6211\u5011\u60f3\u5728\u9d28\u5b50\u5b50\u985e\u5225\u900f\u904e \"setter method\" \u8a2d\u5b9a\u9d28\u5b50\u884c\u70ba\uff0c\u800c\u4e0d\u662f\u5728\u9d28\u5b50\u7684\u5efa\u69cb\u5f0f\u5167\u4f7f\u7528\u9d28\u5b50\u7684\u884c\u70ba\u3002 \u5728\u57f7\u884c\u671f\u60f3\u6539\u8b8a\u9d28\u5b50\u7684\u884c\u70ba\uff0c\u53ea\u8981\u547c\u53eb\u9d28\u5b50\u7684 setter \u65b9\u6cd5\u5c31\u53ef\u4ee5\u3002 \u884c\u70ba\u5c01\u88dd\u7684\u5927\u5c40\u89c0 \u4e0b\u9762\u662f\u6574\u500b\u91cd\u65b0\u8a2d\u8a08\u5f8c\u7684\u985e\u5225\u67b6\u69cb\uff0c\u4e5f\u8acb\u6ce8\u610f\uff0c\u6211\u5011\u6558\u8ff0\u4e8b\u60c5\u7684\u65b9\u5f0f\u4e5f\u7a0d\u6709\u6539\u8b8a\u3002\u4e0d\u518d\u628a\u9d28\u5b50\u7684\u884c\u70ba\u8aaa\u6210 \"\u4e00\u7d44\u884c\u70ba\"\uff0c\u6211\u5011\u958b\u59cb\u628a\u884c\u70ba\u60f3\u6210\u662f \"\u4e00\u7fa4\u6f14\u7b97\u6cd5\"\u3002\u60f3\u60f3\u770b\uff0c\u5728 SimUDuck \u7684\u8a2d\u8a08\u4e2d\uff0c\u6f14\u7b97\u6cd5\u4ee3\u8868\u9d28\u5b50\u80fd\u505a\u7684\u4e8b\uff0c\u9019\u6a23\u7684\u505a\u6cd5\uff0c\u4f3c\u4e4e\u4e5f\u80fd\u5957\u7528\u5728\u5225\u8655\u3002\u4f8b\u5982: \u7528\u4e00\u7fa4\u5be6\u8e10\u76f8\u540c\u4ecb\u9762\u7684\u985e\u5225\uff0c\u6bcf\u500b\u985e\u5225\u5be6\u8e10\u4e0d\u540c\u7684\u71df\u696d\u7a05\u8a08\u7b97\u516c\u5f0f\uff0c\u5c31\u53ef\u4ee5\u7b97\u51fa\u4e0d\u540c\u7684\u7a05\u91d1\u3002 \"\u6709\u4e00\u500b (Has a)\" \u53ef\u80fd\u6bd4 \"\u662f\u4e00\u500b (Is a)\" \u66f4\u597d \"\u6709\u4e00\u500b\" \u95dc\u4fc2\u76f8\u7576\u6709\u8da3: \u6bcf\u500b\u9d28\u5b50\u90fd\u6709\u4e00\u500b FlyBehavior \u4e14\u6709\u4e00\u500b QuackBehavior \uff0c\u8b93\u9d28\u5b50\u5c07\u98db\u884c\u548c\u53eb\u8072\u59d4\u8a17\u5b83\u5011\u4ee3\u70ba\u8655\u7406\u3002 \u7576\u4f60\u5c07\u5169\u500b\u985e\u5225\u7d50\u5408\u8d77\u4f86\u4f7f\u7528\uff0c\u5982\u540c\u672c\u4f8b\u4e00\u822c\uff0c\u9019\u5c31\u662f\u5408\u6210\u7269 (composition)\u3002\u9019\u7a2e\u4f5c\u6cd5\u548c \"\u7e7c\u627f\" \u4e0d\u540c\u7684\u5730\u65b9\u5728\u65bc\uff0c\u9d28\u5b50\u7684\u884c\u70ba\u4e0d\u662f\u7e7c\u627f\u800c\u4f86\uff0c\u800c\u662f\u548c\u9069\u7576\u7684\u884c\u70ba\u7269\u4ef6 \"\u5408\u6210\" \u800c\u4f86\u3002 \u9019\u662f\u4e00\u500b\u5f88\u91cd\u8981\u7684\u8a2d\u8a08\u539f\u5247\u3002 \u8a2d\u8a08\u539f\u5247 \u591a\u7528\u5408\u6210\uff0c\u5c11\u7528\u7e7c\u627f\u3002 \u5982\u4f60\u6240\u898b\uff0c\u5408\u6210\u5efa\u7acb\u7cfb\u7d71\u6709\u5f88\u5927\u7684\u5f48\u6027\uff0c\u4e0d\u50c5\u53ef\u4ee5\u5c07\u6f14\u7b97\u6cd5\u5c01\u88dd\u6210\u985e\u5225\uff0c\u66f4\u53ef\u4ee5 \"\u5728\u57f7\u884c\u671f\u9593\u52d5\u614b\u5730\u6539\u8b8a\u884c\u70ba\"\u3002 \u8b1b\u5230\u8a2d\u8a08\u6a21\u5f0f \u6211\u5011\u525b\u525b\u7528\u4e86\u7b2c\u4e00\u500b\u8a2d\u8a08\u6a21\u5f0f: \u4e5f\u5c31\u662f\u7b56\u7565\u6a21\u5f0f (Strategy Pattern) \u7b56\u7565\u6a21\u5f0f\u6b63\u5f0f\u5b9a\u7fa9: \u5b9a\u7fa9\u4e86\u6f14\u7b97\u6cd5\u5bb6\u65cf\uff0c\u500b\u5225\u5c01\u88dd\u8d77\u4f86\uff0c\u8b93\u4ed6\u5011\u4e4b\u9593\u53ef\u4ee5\u4e92\u76f8\u66ff\u63db\uff0c\u6b64\u6a21\u5f0f\u8b93\u6f14\u7b97\u6cd5\u7684\u8b8a\u52d5\uff0c\u4e0d\u6703\u5f71\u97ff\u5230\u4f7f\u7528\u6f14\u7b97\u6cd5\u7684\u7a0b\u5f0f\u3002 \u8a2d\u8a08\u6a21\u5f0f\u7684\u7528\u8655 \u8a2d\u8a08\u6a21\u5f0f\u8b93\u4f60\u548c\u5176\u4ed6\u7684\u7a0b\u5f0f\u54e1\u4e4b\u9593\u6709\u5171\u901a\u7684\u8a9e\u8a00\uff0c\u4e00\u65e6\u61c2\u9019\u4e9b\u8a5e\u5f59\uff0c\u548c\u5176\u4ed6\u7a0b\u5f0f\u54e1\u4e4b\u9593\u6e9d\u901a\u9019\u4e9b\u89c0\u5ff5\u5c31\u5f88\u5bb9\u6613\u3002\u8a2d\u8a08\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u5e6b\u52a9\u4f60\u63d0\u5347\u601d\u8003\u67b6\u69cb\u7684\u5c64\u6b21\u5230\u6a21\u5f0f\u5c64\u9762\uff0c\u800c\u4e0d\u662f\u505c\u7559\u5728\u7463\u788e\u7684\u7269\u4ef6\u4e0a\u3002","title":"Welcome to Design Pattern (\u8a2d\u8a08\u6a21\u5f0f)"},{"location":"Design%20pattern/welcome_strategy/#welcome-to-design-pattern","text":"\u6709\u4e9b\u4eba\u5df2\u7d93\u89e3\u6c7a\u4f60\u7684\u554f\u984c\u4e86 \uff0c\u5728\u672c\u7ae0\uff0c\u4f60\u5c07\u5b78\u7fd2\u5230\u5982\u4f55\u5229\u7528\u5176\u4ed6\u958b\u767c\u8005\u7684\u7d93\u9a57\u8207\u667a\u6167\u3002\u4ed6\u5011\u906d\u9047\u904e\u76f8\u540c\u7684\u554f\u984c\uff0c\u4e5f\u9806\u5229\u7684\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\u3002 \u4f7f\u7528\u6a21\u5f0f\u6700\u597d\u7684\u65b9\u5f0f\u662f: \u628a\u6a21\u5f0f\u8a18\u5728\u8166\u5b50\u88e1\uff0c\u7136\u5f8c\u4f60\u5728\u8a2d\u8a08\u6216\u7dad\u8b77\u7a0b\u5f0f\u4e2d\uff0c\u5c0b\u627e\u4f55\u8655\u53ef\u4ee5\u4f7f\u7528\u9019\u4e9b\u6a21\u5f0f\u3002","title":"Welcome to Design Pattern (\u8a2d\u8a08\u6a21\u5f0f)"},{"location":"Design%20pattern/welcome_strategy/#_1","text":"Joe \u7684\u516c\u53f8\u505a\u4e86\u4e00\u5957\u6a21\u64ec\u9d28\u5b50\u904a\u6232 SimUDuck \u3002","title":"\u5148\u5f9e\u7c21\u55ae\u7684\u6a21\u64ec\u9d28\u5b50\u7248\u672c\u958b\u59cb"},{"location":"Design%20pattern/welcome_strategy/#_2","text":"\u4e3b\u7ba1\u8a8d\u70ba\uff0c\u6b64\u6a21\u64ec\u7a0b\u5f0f\u9700\u8981\u6703\u98db\u7684\u9d28\u5b50\uff0c\u624d\u53ef\u4ee5\u8d0f\u904e\u7af6\u722d\u8005\u3002","title":"\u73fe\u5728\u6211\u5011\u9700\u8981\u8b93\u9d28\u5b50\u80fd\u98db"},{"location":"Design%20pattern/welcome_strategy/#_3","text":"Joe \u5ffd\u7565\u4e00\u4ef6\u4e8b\uff0c\u4e26\u975e\u6240\u6709 Duck \u5b50\u985e\u90fd\u6703\u98db\uff0c\u9019\u6703\u4f7f\u5f97\u67d0\u4e9b\u5b50\u985e\u5225\u4e5f\u5177\u6709\u4e0d\u6070\u7576\u7684\u884c\u70ba\u3002","title":"\u4f46\u662f\uff0c\u53ef\u6015\u7684\u4e8b\u767c\u751f\u4e86"},{"location":"Design%20pattern/welcome_strategy/#joe","text":"Joe: \u6211\u53ef\u4ee5\u628a RubberDuck \u985e\u5225\u4e2d\u7684 fly() \u65b9\u6cd5 override\uff0c\u5c31\u50cf override quack() \u7684\u505a\u6cd5\u4e00\u6a23\u3002 \u53ef\u662f\uff0c\u5982\u679c\u4ee5\u5f8c\u6211\u52a0\u5165 Decoy Duck \u53c8\u6703\u5982\u4f55 ? Decoy Duck \u662f\u5047\u9d28\uff0c\u4e0d\u6703\u98db\u4e5f\u4e0d\u6703\u53eb\u3002","title":"Joe \u60f3\u5230\u65b9\u6cd5"},{"location":"Design%20pattern/welcome_strategy/#_4","text":"Joe \u767c\u73fe\u7e7c\u627f\u4e0d\u662f\u4e00\u500b\u5f88\u597d\u7684\u89e3\u6c7a\u65b9\u6cd5\uff0c\u56e0\u70ba\u4ed6\u77e5\u9053\u4e4b\u5f8c\u6bcf\u516d\u500b\u6708\u90fd\u6703\u66f4\u65b0\u65b0\u7522\u54c1\uff0c\u898f\u683c\u6703\u5e38\u5e38\u6539\u8b8a\uff0c\u6bcf\u7576\u6709\u65b0\u7684\u9d28\u5b50\u5b50\u985e\u5225\u51fa\u73fe\uff0c\u4ed6\u5c31\u8981\u88ab\u8feb\u6aa2\u8996\u4e26\u53ef\u80fd\u8981 override fly() \u548c quark() ... \u9019\u7c21\u76f4\u662f\u7121\u7aae\u7121\u76e1\u7684\u60e1\u5922\u3002 \u6240\u4ee5\uff0c\u4ed6\u9700\u8981\u4e00\u500b\u66f4\u6e05\u6670\u7684\u65b9\u6cd5\uff0c\u8b93 \"\u67d0\u4e9b\" \u9d28\u5b50\u578b\u614b\u53ef\u98db\u6216\u53ef\u53eb\u3002 \u9019\u986f\u7136\u662f\u500b\u4e0d\u597d\u7684\u4e3b\u610f\uff0c\u91cd\u8907\u7684\u7a0b\u5f0f\u78bc\u6703\u8b8a\u591a\u3002\u60f3\u50cf\u4e00\u4e0b\u5047\u8a2d\u4f60\u6709 50 \u500b Duck \u5b50\u985e\uff0c\u4eca\u5929\u4f60\u8981\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\u98db\u884c\u7684\u884c\u70ba\uff0c\u90a3\u4e0d\u5c31\u8981\u4fee\u6539\u5f88\u591a\u6b21\u3002 \u96d6\u7136 Flyable \u8207 Quackable \u53ef\u4ee5\u89e3\u6c7a\u4e00\u90e8\u5206\u7684\u554f\u984c (\u4e0d\u6703\u518d\u6709\u6703\u98db\u7684\u6a61\u76ae\u9d28)\uff0c\u4f46\u662f\u537b\u9020\u6210\u7a0b\u5f0f\u78bc\u7121\u6cd5\u518d\u5229\u7528\uff0c\u9019\u53ea\u80fd\u7b97\u662f\u5f9e\u4e00\u500b\u60e1\u5922\u8df3\u5230\u53e6\u4e00\u500b\u60e1\u5922\u3002","title":"\u5229\u7528\u4ecb\u9762\u5982\u4f55?"},{"location":"Design%20pattern/welcome_strategy/#_5","text":"\u4e0d\u7ba1\u7576\u521d\u8edf\u9ad4\u8a2d\u8a08\u7684\u591a\u597d\uff0c\u7e3d\u662f\u9700\u8981\u6210\u9577\u8207\u6539\u8b8a\u3002\u5426\u5247\u8edf\u9ad4\u5c31\u6703 \"\u6b7b\u4ea1\" \u3002","title":"\u8edf\u9ad4\u958b\u767c\u7684\u4e00\u500b\u4e0d\u8b8a\u771f\u7406"},{"location":"Design%20pattern/welcome_strategy/#_6","text":"\u73fe\u5728\u6211\u5011\u77e5\u9053\u4f7f\u7528\u7e7c\u627f\u6709\u4e00\u4e9b\u7f3a\u5931\uff0c\u56e0\u70ba\u6539\u8b8a\u9d28\u5b50\u7684\u884c\u70ba\u6703\u5f71\u97ff\u6240\u6709\u7a2e\u985e\u7684\u9d28\u5b50\uff0c\u800c\u9019\u4e26\u4e0d\u6070\u7576\u3002\u5e78\u904b\u7684\u662f\u6709\u500b\u8a2d\u8a08\u5b88\u5247\uff0c\u6b63\u5f0f\u9069\u7528\u65bc\u6b64\u72c0\u6cc1\u3002","title":"\u628a\u554f\u984c\u6b78\u96f6"},{"location":"Design%20pattern/welcome_strategy/#_7","text":"\u627e\u51fa\u7a0b\u5f0f\u4e2d\u53ef\u80fd\u9700\u8981\u66f4\u52d5\u4e4b\u8655\uff0c\u628a\u5b83\u5011\u7368\u7acb\u51fa\u4f86\uff0c\u4e0d\u8981\u548c\u90a3\u4e9b\u4e0d\u9700\u8981\u66f4\u52d5\u7684\u7a0b\u5f0f\u78bc\u6df7\u5728\u4e00\u8d77\u3002(\u8207SRP\u76f8\u4f3c) \u63db\u500b\u89d2\u5ea6\u8aaa: \"\u628a\u6703\u8b8a\u52d5\u7684\u90e8\u5206\u53d6\u51fa\u4e26\u5c01\u88dd\u8d77\u4f86\uff0c\u4ee5\u4fbf\u4ee5\u5f8c\u53ef\u4ee5\u8f15\u6613\u5730\u64f4\u5145\u6b64\u90e8\u5206\uff0c\u800c\u4e0d\u5f71\u97ff\u4e0d\u9700\u8981\u66f4\u52d5\u7684\u5176\u4ed6\u90e8\u5206\"\u3002(\u8207OCP\u76f8\u4f3c)","title":"\u8a2d\u8a08\u5b88\u5247"},{"location":"Design%20pattern/welcome_strategy/#_8","text":"\u6211\u5011\u77e5\u9053 Duck \u985e\u5225\u5167\u7684 fly() \u548c quack() \u6703\u96a8\u8457\u9d28\u5b50\u4e0d\u540c\u800c\u6539\u8b8a\u3002 \u70ba\u4e86\u8981\u628a\u9019\u5169\u500b\u884c\u70ba\u5f9e\u9d28\u5b50\u4e2d\u5206\u958b\uff0c\u6211\u5011\u5c07\u628a\u5b83\u5011\u81ea\u9d28\u5b50\u4e2d\u53d6\u51fa\uff0c\u5efa\u7acb\u4e00\u7d44\u65b0\u985e\u5225\u4ee3\u8868\u6bcf\u500b\u884c\u70ba\u3002","title":"\u5206\u958b\u8b8a\u52d5\u548c\u4e0d\u6703\u8b8a\u52d5\u7684\u90e8\u5206"},{"location":"Design%20pattern/welcome_strategy/#_9","text":"\u6211\u5011\u5e0c\u671b\u4e00\u5207\u6709\u5f48\u6027\uff0c\u6211\u5011\u61c9\u8a72\u5728\u9d28\u5b50\u985e\u5225\u4e2d\u5305\u542b\u8a2d\u5b9a\u884c\u70ba\u7684\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5728 \"\u57f7\u884c\u671f\" \u52d5\u614b\u5730 \"\u6539\u8b8a\" \u9d28\u5b50\u7684\u98db\u884c\u884c\u70ba\u3002 \u6709\u4e86\u9019\u4e9b\u76ee\u6a19\uff0c\u63a5\u8457\u770b\u770b\u7b2c\u4e8c\u500b\u8a2d\u8a08\u539f\u5247:","title":"\u8a2d\u8a08\u9d28\u5b50\u7684\u884c\u70ba"},{"location":"Design%20pattern/welcome_strategy/#_10","text":"\u5beb\u7a0b\u5f0f\u662f\u91dd\u5c0d\u4ecb\u9762\u800c\u5beb\uff0c\u800c\u4e0d\u662f\u91dd\u5c0d\u5be6\u8e10\u65b9\u5f0f\u800c\u5beb\u3002 (\u8207DIP\u76f8\u4f3c) \u6211\u5011\u5229\u7528\u4ecb\u9762\u4ee3\u8868\u6bcf\u500b\u884c\u70ba\uff0c\u4f8b\u5982\uff0cFlyBehavior \u8207 QuackBehavior\u3002 \u9019\u6a23\u7684\u8a2d\u8a08\uff0c\u53ef\u4ee5\u8b93\u98db\u884c\u548c\u53eb\u8072\u7684\u52d5\u4f5c\u88ab\u5176\u4ed6\u7684\u7269\u4ef6\u518d\u4e09\u5229\u7528\uff0c\u56e0\u70ba\u9019\u4e9b\u884c\u70ba\u5df2\u7d93\u8207\u9d28\u5b50\u985e\u5225\u7121\u95dc\u4e86\u3002 \u800c\u6211\u5011\u53ef\u4ee5\u65b0\u589e\u4e00\u4e9b\u884c\u70ba\uff0c\u4e0d\u6703\u5f71\u97ff\u5230\u65e2\u6709\u7684\u884c\u70ba\uff0c\u4e5f\u4e0d\u6703\u5f71\u97ff\u6709 \"\u4f7f\u7528\" \u5230\u98db\u884c\u884c\u70ba\u7684\u9d28\u5b50\u985e\u5225\u3002","title":"\u8a2d\u8a08\u539f\u5247"},{"location":"Design%20pattern/welcome_strategy/#_11","text":"\u5be6\u8e10 performQuack() : \u5982\u4f55\u8a2d\u5b9a flyBehavior \u8207 quackBehavior :","title":"\u6574\u5408\u9d28\u5b50\u7684\u884c\u70ba"},{"location":"Design%20pattern/welcome_strategy/#_12","text":"\u5728\u9d28\u5b50\u985e\u5225\u88e1\u5efa\u7acb\u4e86\u4e00\u5806\u52d5\u614b\u7684\u529f\u80fd\u6c92\u6709\u7528\u5230\uff0c\u5c31\u592a\u53ef\u60dc\u4e86! \u5047\u8a2d\u6211\u5011\u60f3\u5728\u9d28\u5b50\u5b50\u985e\u5225\u900f\u904e \"setter method\" \u8a2d\u5b9a\u9d28\u5b50\u884c\u70ba\uff0c\u800c\u4e0d\u662f\u5728\u9d28\u5b50\u7684\u5efa\u69cb\u5f0f\u5167\u4f7f\u7528\u9d28\u5b50\u7684\u884c\u70ba\u3002 \u5728\u57f7\u884c\u671f\u60f3\u6539\u8b8a\u9d28\u5b50\u7684\u884c\u70ba\uff0c\u53ea\u8981\u547c\u53eb\u9d28\u5b50\u7684 setter \u65b9\u6cd5\u5c31\u53ef\u4ee5\u3002","title":"\u52d5\u614b\u5730\u8a2d\u5b9a\u884c\u70ba"},{"location":"Design%20pattern/welcome_strategy/#_13","text":"\u4e0b\u9762\u662f\u6574\u500b\u91cd\u65b0\u8a2d\u8a08\u5f8c\u7684\u985e\u5225\u67b6\u69cb\uff0c\u4e5f\u8acb\u6ce8\u610f\uff0c\u6211\u5011\u6558\u8ff0\u4e8b\u60c5\u7684\u65b9\u5f0f\u4e5f\u7a0d\u6709\u6539\u8b8a\u3002\u4e0d\u518d\u628a\u9d28\u5b50\u7684\u884c\u70ba\u8aaa\u6210 \"\u4e00\u7d44\u884c\u70ba\"\uff0c\u6211\u5011\u958b\u59cb\u628a\u884c\u70ba\u60f3\u6210\u662f \"\u4e00\u7fa4\u6f14\u7b97\u6cd5\"\u3002\u60f3\u60f3\u770b\uff0c\u5728 SimUDuck \u7684\u8a2d\u8a08\u4e2d\uff0c\u6f14\u7b97\u6cd5\u4ee3\u8868\u9d28\u5b50\u80fd\u505a\u7684\u4e8b\uff0c\u9019\u6a23\u7684\u505a\u6cd5\uff0c\u4f3c\u4e4e\u4e5f\u80fd\u5957\u7528\u5728\u5225\u8655\u3002\u4f8b\u5982: \u7528\u4e00\u7fa4\u5be6\u8e10\u76f8\u540c\u4ecb\u9762\u7684\u985e\u5225\uff0c\u6bcf\u500b\u985e\u5225\u5be6\u8e10\u4e0d\u540c\u7684\u71df\u696d\u7a05\u8a08\u7b97\u516c\u5f0f\uff0c\u5c31\u53ef\u4ee5\u7b97\u51fa\u4e0d\u540c\u7684\u7a05\u91d1\u3002","title":"\u884c\u70ba\u5c01\u88dd\u7684\u5927\u5c40\u89c0"},{"location":"Design%20pattern/welcome_strategy/#has-a-is-a","text":"\"\u6709\u4e00\u500b\" \u95dc\u4fc2\u76f8\u7576\u6709\u8da3: \u6bcf\u500b\u9d28\u5b50\u90fd\u6709\u4e00\u500b FlyBehavior \u4e14\u6709\u4e00\u500b QuackBehavior \uff0c\u8b93\u9d28\u5b50\u5c07\u98db\u884c\u548c\u53eb\u8072\u59d4\u8a17\u5b83\u5011\u4ee3\u70ba\u8655\u7406\u3002 \u7576\u4f60\u5c07\u5169\u500b\u985e\u5225\u7d50\u5408\u8d77\u4f86\u4f7f\u7528\uff0c\u5982\u540c\u672c\u4f8b\u4e00\u822c\uff0c\u9019\u5c31\u662f\u5408\u6210\u7269 (composition)\u3002\u9019\u7a2e\u4f5c\u6cd5\u548c \"\u7e7c\u627f\" \u4e0d\u540c\u7684\u5730\u65b9\u5728\u65bc\uff0c\u9d28\u5b50\u7684\u884c\u70ba\u4e0d\u662f\u7e7c\u627f\u800c\u4f86\uff0c\u800c\u662f\u548c\u9069\u7576\u7684\u884c\u70ba\u7269\u4ef6 \"\u5408\u6210\" \u800c\u4f86\u3002 \u9019\u662f\u4e00\u500b\u5f88\u91cd\u8981\u7684\u8a2d\u8a08\u539f\u5247\u3002","title":"\"\u6709\u4e00\u500b (Has a)\" \u53ef\u80fd\u6bd4 \"\u662f\u4e00\u500b (Is a)\" \u66f4\u597d"},{"location":"Design%20pattern/welcome_strategy/#_14","text":"\u591a\u7528\u5408\u6210\uff0c\u5c11\u7528\u7e7c\u627f\u3002 \u5982\u4f60\u6240\u898b\uff0c\u5408\u6210\u5efa\u7acb\u7cfb\u7d71\u6709\u5f88\u5927\u7684\u5f48\u6027\uff0c\u4e0d\u50c5\u53ef\u4ee5\u5c07\u6f14\u7b97\u6cd5\u5c01\u88dd\u6210\u985e\u5225\uff0c\u66f4\u53ef\u4ee5 \"\u5728\u57f7\u884c\u671f\u9593\u52d5\u614b\u5730\u6539\u8b8a\u884c\u70ba\"\u3002","title":"\u8a2d\u8a08\u539f\u5247"},{"location":"Design%20pattern/welcome_strategy/#_15","text":"\u6211\u5011\u525b\u525b\u7528\u4e86\u7b2c\u4e00\u500b\u8a2d\u8a08\u6a21\u5f0f: \u4e5f\u5c31\u662f\u7b56\u7565\u6a21\u5f0f (Strategy Pattern)","title":"\u8b1b\u5230\u8a2d\u8a08\u6a21\u5f0f"},{"location":"Design%20pattern/welcome_strategy/#_16","text":"\u5b9a\u7fa9\u4e86\u6f14\u7b97\u6cd5\u5bb6\u65cf\uff0c\u500b\u5225\u5c01\u88dd\u8d77\u4f86\uff0c\u8b93\u4ed6\u5011\u4e4b\u9593\u53ef\u4ee5\u4e92\u76f8\u66ff\u63db\uff0c\u6b64\u6a21\u5f0f\u8b93\u6f14\u7b97\u6cd5\u7684\u8b8a\u52d5\uff0c\u4e0d\u6703\u5f71\u97ff\u5230\u4f7f\u7528\u6f14\u7b97\u6cd5\u7684\u7a0b\u5f0f\u3002","title":"\u7b56\u7565\u6a21\u5f0f\u6b63\u5f0f\u5b9a\u7fa9:"},{"location":"Design%20pattern/welcome_strategy/#_17","text":"\u8a2d\u8a08\u6a21\u5f0f\u8b93\u4f60\u548c\u5176\u4ed6\u7684\u7a0b\u5f0f\u54e1\u4e4b\u9593\u6709\u5171\u901a\u7684\u8a9e\u8a00\uff0c\u4e00\u65e6\u61c2\u9019\u4e9b\u8a5e\u5f59\uff0c\u548c\u5176\u4ed6\u7a0b\u5f0f\u54e1\u4e4b\u9593\u6e9d\u901a\u9019\u4e9b\u89c0\u5ff5\u5c31\u5f88\u5bb9\u6613\u3002\u8a2d\u8a08\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u5e6b\u52a9\u4f60\u63d0\u5347\u601d\u8003\u67b6\u69cb\u7684\u5c64\u6b21\u5230\u6a21\u5f0f\u5c64\u9762\uff0c\u800c\u4e0d\u662f\u505c\u7559\u5728\u7463\u788e\u7684\u7269\u4ef6\u4e0a\u3002","title":"\u8a2d\u8a08\u6a21\u5f0f\u7684\u7528\u8655"},{"location":"Git/","text":"Git Academy \u7ae0\u7bc0 Getting Started Git Basics Clone and Recording Changes to the Repository Viewing the Commit History and Undoing Things Working with Remotes Tagging and Git Aliases Git Branching Branches in a Nutshell Basic Branching and Merging Branch Management and Remote Rebasing Git Internal Git Object Git Reference and Packfiles The Refspec Maintenance and Data Recovery Q&A Reference Pro Git book","title":"Git Academy"},{"location":"Git/#git-academy","text":"","title":"Git Academy"},{"location":"Git/#_1","text":"Getting Started Git Basics Clone and Recording Changes to the Repository Viewing the Commit History and Undoing Things Working with Remotes Tagging and Git Aliases Git Branching Branches in a Nutshell Basic Branching and Merging Branch Management and Remote Rebasing Git Internal Git Object Git Reference and Packfiles The Refspec Maintenance and Data Recovery Q&A","title":"\u7ae0\u7bc0"},{"location":"Git/#reference","text":"Pro Git book","title":"Reference"},{"location":"Git/branch_mang_remote/","text":"\u5206\u652f\u7ba1\u7406 git branch \u547d\u4ee4\u4e0d\u50c5\u80fd\u5efa\u7acb\u548c\u522a\u9664\u5206\u652f\uff0c \u5982\u679c\u4e0d\u52a0\u4efb\u4f55\u53c3\u6578\uff0c\u4f60\u5c07\u6703\u5f97\u5230\u6240\u6709\u5206\u652f\u7684\u7c21\u6613\u6e05\u55ae\uff1a $ git branch iss53 * master testing \u6ce8\u610f master \u5206\u652f\u524d\u9762\u7684 * \u5b57\u5143\uff0c\u5b83\u8868\u793a\u76ee\u524d\u6240\u6aa2\u51fa\uff08 checkout \uff09\u7684\u5206\u652f\uff08\u63db\u53e5\u8a71\u8aaa\uff0c HEAD \u6307\u5411\u9019\u500b\u5206\u652f\uff09\uff1b \u9019\u610f\u5473\u8457\u5982\u679c\u4f60\u73fe\u5728\u63d0\u4ea4\uff0c master \u5206\u652f\u5c07\u96a8\u4e4b\u5411\u524d\u79fb\u52d5\u3002 \u82e5\u8981\u67e5\u770b\u5404\u500b\u5206\u652f\u6700\u5f8c\u4e00\u500b\u63d0\u4ea4\uff0c\u57f7\u884c git branch -v \uff1a $ git branch -v iss53 93b412c fix javascript issue * master 7a98805 Merge branch 'iss53' testing 782fd34 add scott to the author list in the readmes --merged \u548c --no-merged \u9019\u5169\u500b\u6709\u7528\u7684\u9078\u9805\uff0c\u53ef\u4ee5\u5f9e\u8a72\u6e05\u55ae\u4e2d\u7be9\u9078\u51fa\u5df2\u7d93\u5408\u4f75\u6216\u5c1a\u672a\u5408\u4f75\u5230\u76ee\u524d\u5206\u652f\u7684\u5206\u652f\u3002 \u4f7f\u7528 git branch --merged \u4f86\u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5df2\u88ab\u5408\u4f75\u5230\u76ee\u524d\u5206\u652f\uff1a $ git branch --merged iss53 * master \u67e5\u770b\u6240\u6709\u5305\u542b\u672a\u5408\u4f75\u5de5\u4f5c\u7684\u5206\u652f\uff0c\u53ef\u4ee5\u904b\u884c git branch --no-merged \uff1a $ git branch --no-merged testing \u9019\u986f\u793a\u4e86\u4f60\u5176\u5b83\u7684\u5206\u652f\uff1b \u7531\u65bc\u5b83\u5305\u542b\u4e86\u9084\u672a\u5408\u4f75\u7684\u5de5\u4f5c\uff0c\u5617\u8a66\u4f7f\u7528 git branch -d \u522a\u9664\u8a72\u5206\u652f\u5c07\u6703\u5931\u6557 $ git branch -d testing error: The branch 'testing' is not fully merged. If you are sure you want to delete it, run 'git branch -D testing'. \u53ef\u4ee5\u7528 -D \u9078\u9805\u4f86\u5f37\u5236\u57f7\u884c\u3002 \u5206\u652f\u5de5\u4f5c\u6d41\u7a0b You can keep doing this for several levels of stability. Some larger projects also have a proposed or pu (proposed updates) branch that has integrated branches that may not be ready to go into the next or master branch. The idea is that your branches are at various levels of stability; when they reach a more stable level, they\u2019re merged into the branch above them. Again, having multiple long-running branches isn\u2019t necessary, but it\u2019s often helpful, especially when you\u2019re dealing with very large or complex projects. \u9060\u7aef\u5206\u652f Remote-tracking branches are references to the state of remote branches. They\u2019re local references that you can\u2019t move; they\u2019re moved automatically for you whenever you do any network communication. Remote-tracking branches act as bookmarks to remind you where the branches in your remote repositories were the last time you connected to them. Let\u2019s look at an example. Let\u2019s say you have a Git server on your network at git.ourcompany.com . If you clone from this, Git\u2019s clone command automatically names it origin for you, pulls down all its data, creates a pointer to where its master branch is, and names it origin/master locally. Git also gives you your own local master branch starting at the same place as origin\u2019s master branch, so you have something to work from. If you do some work on your local master branch, and, in the meantime, someone else pushes to git.ourcompany.com and updates its master branch, then your histories move forward differently. Also, as long as you stay out of contact with your origin server, your origin/master pointer doesn\u2019t move. To synchronize your work, you run a git fetch origin command. This command looks up which server \u201corigin\u201d is (in this case, it\u2019s git.ourcompany.com ), fetches any data from it that you don\u2019t yet have, and updates your local database, moving your origin/master pointer to its new, more up-to-date position. To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let\u2019s assume you have another internal Git server that is used only for development by one of your sprint teams. This server is at git.team1.ourcompany.com . You can add it as a new remote reference to the project you\u2019re currently working on by running the git remote add command as we covered in Git \u57fa\u790e. Name this remote teamone , which will be your shortname for that whole URL. Now, you can run git fetch teamone to fetch everything the remote teamone server has that you don\u2019t have yet. Because that server has a subset of the data your origin server has right now, Git fetches no data but sets a remote-tracking branch called teamone/master to point to the commit that teamone has as its master branch. Pushing When you want to share a branch with the world, you need to push it up to a remote that you have write access to. Your local branches aren\u2019t automatically synchronized to the remotes you write to \u2013 you have to explicitly push the branches you want to share. That way, you can use private branches for work you don\u2019t want to share, and push up only the topic branches you want to collaborate on. If you have a branch named serverfix that you want to work on with others, you can push it up the same way you pushed your first branch. Run git push <remote> <branch> : $ git push origin serverfix Counting objects: 24, done. Delta compression using up to 8 threads. Compressing objects: 100% (15/15), done. Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done. Total 24 (delta 2), reused 0 (delta 0) To https://github.com/schacon/simplegit * [new branch] serverfix -> serverfix You can also do git push origin serverfix:serverfix , which does the same thing \u2013 it says, \u201cTake my serverfix and make it the remote\u2019s serverfix.\u201d You can use this format to push a local branch into a remote branch that is named differently. If you didn\u2019t want it to be called serverfix on the remote, you could instead run git push origin serverfix:awesomebranch to push your local serverfix branch to the awesomebranch branch on the remote project. The next time one of your collaborators fetches from the server, they will get a reference to where the server\u2019s version of serverfix is under the remote branch origin/serverfix : $ git fetch origin remote: Counting objects: 7, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 3 (delta 0) Unpacking objects: 100% (3/3), done. From https://github.com/schacon/simplegit * [new branch] serverfix -> origin/serverfix It\u2019s important to note that when you do a fetch that brings down new remote-tracking branches, you don\u2019t automatically have local, editable copies of them. In other words, in this case, you don\u2019t have a new serverfix branch \u2013 you only have an origin/serverfix pointer that you can\u2019t modify. To merge this work into your current working branch, you can run git merge origin/serverfix . If you want your own serverfix branch that you can work on, you can base it off your remote-tracking branch: $ git checkout -b serverfix origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix' Tracking Branches Checking out a local branch from a remote-tracking branch automatically creates what is called a \u201ctracking branch\u201d (and the branch it tracks is called an \u201cupstream branch\u201d). Tracking branches are local branches that have a direct relationship to a remote branch. If you\u2019re on a tracking branch and type git pull , Git automatically knows which server to fetch from and branch to merge into. When you clone a repository, it generally automatically creates a master branch that tracks origin/master . However, you can set up other tracking branches if you wish \u2013 ones that track branches on other remotes, or don\u2019t track the master branch. The simple case is the example you just saw, running git checkout -b [branch] [remotename]/[branch] . This is a common enough operation that git provides the --track shorthand: $ git checkout --track origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix' In fact, this is so common that there\u2019s even a shortcut for that shortcut. If the branch name you\u2019re trying to checkout (a) doesn\u2019t exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you: $ git checkout serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix' To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name: $ git checkout -b sf origin/serverfix Branch sf set up to track remote branch serverfix from origin. Switched to a new branch 'sf' Now, your local branch sf will automatically pull from origin/serverfix . If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you\u2019re tracking, you can use the -u or --set-upstream-to option to git branch to explicitly set it at any time. $ git branch -u origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. If you want to see what tracking branches you have set up, you can use the -vv option to git branch . This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both. $ git branch -vv iss53 7e424c3 [origin/iss53: ahead 2] forgot the brackets master 1ae2a45 [origin/master] deploying index fix * serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it testing 5ea463a trying something new So here we can see that our iss53 branch is tracking origin/iss53 and is \u201cahead\u201d by two, meaning that we have two commits locally that are not pushed to the server. Next we can see that our serverfix branch is tracking the server-fix-good branch on our teamone server and is ahead by three and behind by one, meaning that there is one commit on the server we haven\u2019t merged in yet and three commits locally that we haven\u2019t pushed. If you want totally up to date ahead and behind numbers, you\u2019ll need to fetch from all your remotes right before running this. You could do that like this: git fetch --all ; git branch -vv ### Pulling While the git fetch command will fetch down all the changes on the server that you don\u2019t have yet, it will not modify your working directory at all. It will simply get the data for you and let you merge it yourself. However, there is a command called git pull which is essentially a git fetch immediately followed by a git merge in most cases. Generally it\u2019s better to simply use the fetch and merge commands explicitly as the magic of git pull can often be confusing. \u522a\u9664\u9060\u7aef\u5206\u652f Suppose you\u2019re done with a remote branch \u2013 say you and your collaborators are finished with a feature and have merged it into your remote\u2019s master branch (or whatever branch your stable codeline is in). You can delete a remote branch using the --delete option to git push . If you want to delete your serverfix branch from the server, you run the following: $ git push origin --delete serverfix To https://github.com/schacon/simplegit - [deleted] serverfix","title":"Branch mang remote"},{"location":"Git/branch_mang_remote/#_1","text":"git branch \u547d\u4ee4\u4e0d\u50c5\u80fd\u5efa\u7acb\u548c\u522a\u9664\u5206\u652f\uff0c \u5982\u679c\u4e0d\u52a0\u4efb\u4f55\u53c3\u6578\uff0c\u4f60\u5c07\u6703\u5f97\u5230\u6240\u6709\u5206\u652f\u7684\u7c21\u6613\u6e05\u55ae\uff1a $ git branch iss53 * master testing \u6ce8\u610f master \u5206\u652f\u524d\u9762\u7684 * \u5b57\u5143\uff0c\u5b83\u8868\u793a\u76ee\u524d\u6240\u6aa2\u51fa\uff08 checkout \uff09\u7684\u5206\u652f\uff08\u63db\u53e5\u8a71\u8aaa\uff0c HEAD \u6307\u5411\u9019\u500b\u5206\u652f\uff09\uff1b \u9019\u610f\u5473\u8457\u5982\u679c\u4f60\u73fe\u5728\u63d0\u4ea4\uff0c master \u5206\u652f\u5c07\u96a8\u4e4b\u5411\u524d\u79fb\u52d5\u3002 \u82e5\u8981\u67e5\u770b\u5404\u500b\u5206\u652f\u6700\u5f8c\u4e00\u500b\u63d0\u4ea4\uff0c\u57f7\u884c git branch -v \uff1a $ git branch -v iss53 93b412c fix javascript issue * master 7a98805 Merge branch 'iss53' testing 782fd34 add scott to the author list in the readmes --merged \u548c --no-merged \u9019\u5169\u500b\u6709\u7528\u7684\u9078\u9805\uff0c\u53ef\u4ee5\u5f9e\u8a72\u6e05\u55ae\u4e2d\u7be9\u9078\u51fa\u5df2\u7d93\u5408\u4f75\u6216\u5c1a\u672a\u5408\u4f75\u5230\u76ee\u524d\u5206\u652f\u7684\u5206\u652f\u3002 \u4f7f\u7528 git branch --merged \u4f86\u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5df2\u88ab\u5408\u4f75\u5230\u76ee\u524d\u5206\u652f\uff1a $ git branch --merged iss53 * master \u67e5\u770b\u6240\u6709\u5305\u542b\u672a\u5408\u4f75\u5de5\u4f5c\u7684\u5206\u652f\uff0c\u53ef\u4ee5\u904b\u884c git branch --no-merged \uff1a $ git branch --no-merged testing \u9019\u986f\u793a\u4e86\u4f60\u5176\u5b83\u7684\u5206\u652f\uff1b \u7531\u65bc\u5b83\u5305\u542b\u4e86\u9084\u672a\u5408\u4f75\u7684\u5de5\u4f5c\uff0c\u5617\u8a66\u4f7f\u7528 git branch -d \u522a\u9664\u8a72\u5206\u652f\u5c07\u6703\u5931\u6557 $ git branch -d testing error: The branch 'testing' is not fully merged. If you are sure you want to delete it, run 'git branch -D testing'. \u53ef\u4ee5\u7528 -D \u9078\u9805\u4f86\u5f37\u5236\u57f7\u884c\u3002","title":"\u5206\u652f\u7ba1\u7406"},{"location":"Git/branch_mang_remote/#_2","text":"You can keep doing this for several levels of stability. Some larger projects also have a proposed or pu (proposed updates) branch that has integrated branches that may not be ready to go into the next or master branch. The idea is that your branches are at various levels of stability; when they reach a more stable level, they\u2019re merged into the branch above them. Again, having multiple long-running branches isn\u2019t necessary, but it\u2019s often helpful, especially when you\u2019re dealing with very large or complex projects.","title":"\u5206\u652f\u5de5\u4f5c\u6d41\u7a0b"},{"location":"Git/branch_mang_remote/#_3","text":"Remote-tracking branches are references to the state of remote branches. They\u2019re local references that you can\u2019t move; they\u2019re moved automatically for you whenever you do any network communication. Remote-tracking branches act as bookmarks to remind you where the branches in your remote repositories were the last time you connected to them. Let\u2019s look at an example. Let\u2019s say you have a Git server on your network at git.ourcompany.com . If you clone from this, Git\u2019s clone command automatically names it origin for you, pulls down all its data, creates a pointer to where its master branch is, and names it origin/master locally. Git also gives you your own local master branch starting at the same place as origin\u2019s master branch, so you have something to work from. If you do some work on your local master branch, and, in the meantime, someone else pushes to git.ourcompany.com and updates its master branch, then your histories move forward differently. Also, as long as you stay out of contact with your origin server, your origin/master pointer doesn\u2019t move. To synchronize your work, you run a git fetch origin command. This command looks up which server \u201corigin\u201d is (in this case, it\u2019s git.ourcompany.com ), fetches any data from it that you don\u2019t yet have, and updates your local database, moving your origin/master pointer to its new, more up-to-date position. To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let\u2019s assume you have another internal Git server that is used only for development by one of your sprint teams. This server is at git.team1.ourcompany.com . You can add it as a new remote reference to the project you\u2019re currently working on by running the git remote add command as we covered in Git \u57fa\u790e. Name this remote teamone , which will be your shortname for that whole URL. Now, you can run git fetch teamone to fetch everything the remote teamone server has that you don\u2019t have yet. Because that server has a subset of the data your origin server has right now, Git fetches no data but sets a remote-tracking branch called teamone/master to point to the commit that teamone has as its master branch.","title":"\u9060\u7aef\u5206\u652f"},{"location":"Git/branch_mang_remote/#pushing","text":"When you want to share a branch with the world, you need to push it up to a remote that you have write access to. Your local branches aren\u2019t automatically synchronized to the remotes you write to \u2013 you have to explicitly push the branches you want to share. That way, you can use private branches for work you don\u2019t want to share, and push up only the topic branches you want to collaborate on. If you have a branch named serverfix that you want to work on with others, you can push it up the same way you pushed your first branch. Run git push <remote> <branch> : $ git push origin serverfix Counting objects: 24, done. Delta compression using up to 8 threads. Compressing objects: 100% (15/15), done. Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done. Total 24 (delta 2), reused 0 (delta 0) To https://github.com/schacon/simplegit * [new branch] serverfix -> serverfix You can also do git push origin serverfix:serverfix , which does the same thing \u2013 it says, \u201cTake my serverfix and make it the remote\u2019s serverfix.\u201d You can use this format to push a local branch into a remote branch that is named differently. If you didn\u2019t want it to be called serverfix on the remote, you could instead run git push origin serverfix:awesomebranch to push your local serverfix branch to the awesomebranch branch on the remote project. The next time one of your collaborators fetches from the server, they will get a reference to where the server\u2019s version of serverfix is under the remote branch origin/serverfix : $ git fetch origin remote: Counting objects: 7, done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 3 (delta 0) Unpacking objects: 100% (3/3), done. From https://github.com/schacon/simplegit * [new branch] serverfix -> origin/serverfix It\u2019s important to note that when you do a fetch that brings down new remote-tracking branches, you don\u2019t automatically have local, editable copies of them. In other words, in this case, you don\u2019t have a new serverfix branch \u2013 you only have an origin/serverfix pointer that you can\u2019t modify. To merge this work into your current working branch, you can run git merge origin/serverfix . If you want your own serverfix branch that you can work on, you can base it off your remote-tracking branch: $ git checkout -b serverfix origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix'","title":"Pushing"},{"location":"Git/branch_mang_remote/#tracking-branches","text":"Checking out a local branch from a remote-tracking branch automatically creates what is called a \u201ctracking branch\u201d (and the branch it tracks is called an \u201cupstream branch\u201d). Tracking branches are local branches that have a direct relationship to a remote branch. If you\u2019re on a tracking branch and type git pull , Git automatically knows which server to fetch from and branch to merge into. When you clone a repository, it generally automatically creates a master branch that tracks origin/master . However, you can set up other tracking branches if you wish \u2013 ones that track branches on other remotes, or don\u2019t track the master branch. The simple case is the example you just saw, running git checkout -b [branch] [remotename]/[branch] . This is a common enough operation that git provides the --track shorthand: $ git checkout --track origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix' In fact, this is so common that there\u2019s even a shortcut for that shortcut. If the branch name you\u2019re trying to checkout (a) doesn\u2019t exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you: $ git checkout serverfix Branch serverfix set up to track remote branch serverfix from origin. Switched to a new branch 'serverfix' To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name: $ git checkout -b sf origin/serverfix Branch sf set up to track remote branch serverfix from origin. Switched to a new branch 'sf' Now, your local branch sf will automatically pull from origin/serverfix . If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you\u2019re tracking, you can use the -u or --set-upstream-to option to git branch to explicitly set it at any time. $ git branch -u origin/serverfix Branch serverfix set up to track remote branch serverfix from origin. If you want to see what tracking branches you have set up, you can use the -vv option to git branch . This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both. $ git branch -vv iss53 7e424c3 [origin/iss53: ahead 2] forgot the brackets master 1ae2a45 [origin/master] deploying index fix * serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it testing 5ea463a trying something new So here we can see that our iss53 branch is tracking origin/iss53 and is \u201cahead\u201d by two, meaning that we have two commits locally that are not pushed to the server. Next we can see that our serverfix branch is tracking the server-fix-good branch on our teamone server and is ahead by three and behind by one, meaning that there is one commit on the server we haven\u2019t merged in yet and three commits locally that we haven\u2019t pushed. If you want totally up to date ahead and behind numbers, you\u2019ll need to fetch from all your remotes right before running this. You could do that like this: git fetch --all ; git branch -vv ### Pulling While the git fetch command will fetch down all the changes on the server that you don\u2019t have yet, it will not modify your working directory at all. It will simply get the data for you and let you merge it yourself. However, there is a command called git pull which is essentially a git fetch immediately followed by a git merge in most cases. Generally it\u2019s better to simply use the fetch and merge commands explicitly as the magic of git pull can often be confusing.","title":"Tracking Branches"},{"location":"Git/branch_mang_remote/#_4","text":"Suppose you\u2019re done with a remote branch \u2013 say you and your collaborators are finished with a feature and have merged it into your remote\u2019s master branch (or whatever branch your stable codeline is in). You can delete a remote branch using the --delete option to git push . If you want to delete your serverfix branch from the server, you run the following: $ git push origin --delete serverfix To https://github.com/schacon/simplegit - [deleted] serverfix","title":"\u522a\u9664\u9060\u7aef\u5206\u652f"},{"location":"Git/branching_merging/","text":"\u5206\u652f\u548c\u5408\u4f75\u7684\u57fa\u672c\u7528\u6cd5 \u8b93\u6211\u5011\u4f86\u770b\u4e00\u500b\u4f60\u5728\u73fe\u5be6\u751f\u6d3b\u4e2d\uff0c\u6709\u53ef\u80fd\u6703\u7528\u5230\u7684\u5206\u652f\uff08branch\uff09\u8207\u5408\u4f75\uff08merge\uff09\u5de5\u4f5c\u6d41\u7a0b\u7684\u7c21\u55ae\u7bc4\u4f8b\uff0c \u4f60\u505a\u4e86\u4ee5\u4e0b\u52d5\u4f5c\uff1a \u958b\u767c\u4e00\u500b\u7db2\u7ad9\u3002 \u5efa\u7acb\u4e00\u500b\u5206\u652f\u4ee5\u5be6\u73fe\u4e00\u500b\u65b0\u6545\u4e8b\u3002 \u5728\u9019\u500b\u5206\u652f\u4e0a\u9032\u884c\u958b\u767c\u3002 \u6b64\u6642\u4f60\u63a5\u5230\u4e00\u500b\u96fb\u8a71\uff0c\u6709\u500b\u5f88\u5371\u6025\u7684\u554f\u984c\u9700\u8981\u7dca\u6025\u4fee\u6b63\uff08hotfix\uff09\uff0c \u4f60\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u8655\u7406\uff1a \u5207\u63db\u5230\u767c\u4f48\u7522\u54c1\u7528\u7684\u5206\u652f\u3002 \u5728\u540c\u4e00\u500b\u63d0\u4ea4\u4e0a\u5efa\u7acb\u4e00\u500b\u65b0\u5206\u652f\uff0c\u5728\u9019\u500b\u5206\u652f\u4e0a\u4fee\u6b63\u554f\u984c\u3002 \u901a\u904e\u6e2c\u8a66\u5f8c\uff0c\u5207\u56de\u767c\u4f48\u7522\u54c1\u7528\u7684\u5206\u652f\uff0c\u5c07\u4fee\u6b63\u7528\u7684\u5206\u652f\u5408\u4f75\u9032\u4f86\uff0c\u7136\u5f8c\u518d\u63a8\u9001\uff08push\uff09\u51fa\u53bb\u4ee5\u767c\u4f48\u7522\u54c1\u3002 \u5207\u63db\u5230\u4e4b\u524d\u5be6\u73fe\u65b0\u9700\u6c42\u7684\u5206\u652f\u4ee5\u7e7c\u7e8c\u5de5\u4f5c\u3002 \u5206\u652f\u57fa\u672c\u7528\u6cd5 \u9996\u5148\uff0c\u6211\u5011\u5047\u8a2d\u4f60\u6b63\u5728\u958b\u767c\u4f60\u7684\u5c08\u6848\uff0c\u4e26\u4e14\u5df2\u7d93\u6709\u4e00\u4e9b\u63d0\u4ea4\uff08commit\uff09\u4e86\u3002 \u7121\u8ad6\u4f60\u7684\u516c\u53f8\u4f7f\u7528\u7684\u8b70\u984c\u8ffd\u8e64\u7cfb\u7d71\uff08issue-tracking system\uff09\u662f\u54ea\u4e00\u5957\uff0c\u4f60\u6c7a\u5b9a\u8981\u4fee\u6b63\u5176\u4e2d\u7684\u8b70\u984c #53\uff1b \u8981\u540c\u6642\u65b0\u5efa\u4e26\u5207\u63db\u5230\u65b0\u5206\u652f\uff0c\u4f60\u53ef\u4ee5\u5728\u57f7\u884c git checkout \u6642\u52a0\u4e0a -b \u9078\u9805\uff1a $ git checkout -b iss53 Switched to a new branch \"iss53\" \u5b83\u76f8\u7576\u65bc\u4e0b\u9762\u9019\u5169\u689d\u547d\u4ee4\uff1a $ git branch iss53 $ git checkout iss53 \u4f60\u958b\u59cb\u958b\u767c\u7db2\u7ad9\uff0c\u4e26\u505a\u4e86\u4e00\u4e9b\u63d0\u4ea4\uff1b \u56e0\u70ba\u4f60\u6aa2\u51fa\uff08checkout\uff09\u4e86\u9019\u500b\u5206\u652f\uff08\u4e5f\u5c31\u662f HEAD \u6307\u6a19\u6b63\u6307\u5411\u5b83\uff09\uff0c iss53 \u5206\u652f\u4e5f\u96a8\u4e4b\u5411\u524d\u63a8\u9032\uff1a $ vim index.html $ git commit -a -m 'added a new footer [issue 53]' \u73fe\u5728\u4f60\u63a5\u5230\u96fb\u8a71\uff0c\u90a3\u500b\u7db2\u7ad9\u6709\u4e00\u500b\u554f\u984c\u9700\u8981\u7acb\u5373\u4fee\u6b63\uff1b \u6709\u4e86 Git \uff0c\u4f60\u5c31\u4e0d\u7528\u628a\u4f60\u7684\u7dca\u6025\u4fee\u6b63\u9023\u540c iss53 \u5c1a\u672a\u5b8c\u6210\u7684\u5167\u5bb9\u4e00\u8d77\u90e8\u7f72\uff08deploy\uff09\u5230\u6b63\u5f0f\u74b0\u5883\uff1b\u4f60\u4e5f\u4e0d\u7528\u70ba\u4e86\u6b63\u78ba\u5730\u5957\u7528\u4fee\u6b63\u800c\u5148\u82b1\u4e00\u5927\u5806\u529f\u592b\u56de\u5fa9\u4e4b\u524d iss53 \u7684\u4fee\u6539\uff1b \u552f\u4e00\u9700\u8981\u505a\u7684\u53ea\u662f\u5207\u63db\u56de\u767c\u4f48\u7522\u54c1\u7528\u7684 master \u5206\u652f\u3002 $ git checkout master Switched to branch 'master' \u6b64\u6642\u5de5\u4f5c\u76ee\u9304\u4e2d\u7684\u5167\u5bb9\u548c\u4f60\u5728\u89e3\u6c7a\u554f\u984c #53 \u4e4b\u524d\u7684\u5167\u5bb9\u4e00\u6a21\u4e00\u6a23\uff0c\u4f60\u53ef\u4ee5\u96c6\u4e2d\u7cbe\u529b\u9032\u884c\u7dca\u6025\u4fee\u6b63\u4e86\uff1b \u8b93\u6211\u5011\u5efa\u7acb\u4e00\u500b\u7dca\u6025\u4fee\u6b63\u7528\u7684\u5206\u652f\u4f86\u9032\u884c\u5de5\u4f5c\uff0c\u76f4\u5230\u5b8c\u6210\u5b83\uff1a $ git checkout -b hotfix Switched to a new branch 'hotfix' $ vim index.html $ git commit -a -m 'fixed the broken email address' [hotfix 1fb7853] fixed the broken email address 1 file changed, 2 insertions(+) \u4f60\u53ef\u4ee5\u8dd1\u4e00\u4e9b\u6e2c\u8a66\u4ee5\u78ba\u4fdd\u8a72\u4fee\u6b63\u662f\u4f60\u60f3\u8981\u7684\uff0c\u7136\u5f8c\u5207\u56de master \u5206\u652f\u4e26\u628a\u5b83\u5408\u4f75\u9032\u4f86\uff0c\u518d\u90e8\u7f72\u5230\u7522\u54c1\u4e0a\uff1b \u7528 git merge \u547d\u4ee4\u4f86\u9032\u884c\u5408\u4f75\uff1a $ git checkout master $ git merge hotfix Updating f42c576..3a0874c Fast-forward index.html | 2 ++ 1 file changed, 2 insertions(+) \u6ce8\u610f\u5408\u4f75\u6642\u6709\u4e00\u500b\u300cFast-forward\u300d\u5b57\u773c\uff1b \u7531\u65bc\u4f60\u8981\u5408\u4f75\u7684\u5206\u652f hotfix \u6240\u6307\u5411\u7684\u63d0\u4ea4 C4 \u76f4\u63a5\u8d85\u524d\u4e86\u63d0\u4ea4 C2 \uff0cGit \u65bc\u662f\u7c21\u55ae\u5730\u628a\u5206\u652f\u6307\u6a19\u5411\u524d\u63a8\u9032\uff1b \u63db\u53e5\u8a71\u8aaa\uff0c\u5982\u679c\u60f3\u8981\u5408\u4f75\u7684\u63d0\u4ea4\u53ef\u4ee5\u76f4\u63a5\u5f80\u56de\u8ffd\u6eaf\u6b77\u53f2\u5230\u76ee\u524d\u6240\u5728\u7684\u63d0\u4ea4\uff0cGit \u6703\u56e0\u70ba\u6c92\u6709\u9700\u8981\u5408\u4f75\u7684\u5de5\u4f5c\u800c\u7c21\u55ae\u5730\u628a\u6307\u6a19\u5411\u524d\u63a8\u9032\u2014\u2014\u9019\u5c31\u662f\u6240\u8b02\u7684\u300c\u5feb\u9032\uff08fast-forward\uff09\u300d\u3002 \u5728\u90a3\u500b\u8d85\u7d1a\u91cd\u8981\u7684\u4fee\u6b63\u88ab\u90e8\u7f72\u4ee5\u5f8c\uff0c\u4f60\u6e96\u5099\u8981\u5207\u56de\u5230\u4e4b\u524d\u88ab\u4e2d\u65b7\u800c\u6b63\u5728\u505a\u7684\u5de5\u4f5c\uff1b \u7136\u800c\u5728\u90a3\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5148\u522a\u9664 hotfix \uff0c\u56e0\u70ba\u4f60\u4e0d\u518d\u9700\u8981\u5b83\u4e86\u2014\u2014 master \u4e5f\u6307\u5411\u76f8\u540c\u7684\u63d0\u4ea4\uff1b \u4f7f\u7528 git branch \u7684 -d \u9078\u9805\u57f7\u884c\u522a\u9664\u64cd\u4f5c\uff1a $ git branch -d hotfix Deleted branch hotfix (3a0874c). \u73fe\u5728\u4f60\u53ef\u4ee5\u5207\u56de\u5230\u4e4b\u524d\u7528\u4f86\u89e3\u6c7a\u8b70\u984c #53 \u4e14\u4ecd\u5728\u9032\u5c55\u4e2d\u7684\u5206\u652f\u4ee5\u7e7c\u7e8c\u5de5\u4f5c\uff1a $ git checkout iss53 Switched to branch \"iss53\" $ vim index.html $ git commit -a -m 'finished the new footer [issue 53]' [iss53 ad82d7a] finished the new footer [issue 53] 1 file changed, 1 insertion(+) \u5408\u4f75\u57fa\u672c\u7528\u6cd5 \u4f60\u5df2\u7d93\u5b8c\u6210\u4e86\u8b70\u984c #53 \u7684\u5de5\u4f5c\uff0c\u4e26\u6e96\u5099\u597d\u5c07\u5b83\u5408\u4f75\u5230 master \u5206\u652f\uff1b \u8981\u5b8c\u6210\u9019\u4ef6\u4e8b\uff0c\u4f60\u9700\u8981\u5c07 iss53 \u5206\u652f\u5408\u4f75\u5230 master \u5206\u652f\uff0c\u5be6\u969b\u64cd\u4f5c\u548c\u4e4b\u524d\u5408\u4f75 hotfix \u5206\u652f\u6642\u5dee\u4e0d\u591a\uff0c \u53ea\u9700\u5207\u56de\u5408\u4f75\u76ee\u7684\u5730\u7684 master \u5206\u652f\uff0c\u7136\u5f8c\u57f7\u884c git merge \u547d\u4ee4: $ git checkout master Switched to branch 'master' $ git merge iss53 Merge made by the 'recursive' strategy. index.html | 1 + 1 file changed, 1 insertion(+) \u9019\u6b21\u7684\u5408\u4f75\u548c\u4e4b\u524d\u5408\u4f75 hotfix \u7684\u60c5\u6cc1\u770b\u8d77\u4f86\u6709\u9ede\u4e0d\u4e00\u6a23\uff1b \u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u4f60\u7684\u958b\u767c\u6b77\u53f2\u662f\u5f9e\u4e00\u500b\u8f03\u65e9\u7684\u9ede\u4fbf\u958b\u59cb\u5206\u96e2\u958b\u4f86\uff0c \u7531\u65bc\u76ee\u524d\u6240\u5728\u7684\u63d0\u4ea4\uff08\u8b6f\u8a3b\uff1aC4\uff09\u4e26\u4e0d\u662f\u88ab\u5408\u4f75\u7684\u5206\u652f\uff08\u8b6f\u8a3b\uff1a iss53 \uff0c\u5b83\u6307\u5411 C5\uff09\u7684\u76f4\u63a5\u7956\u5148\uff0cGit \u5fc5\u9700\u9032\u884c\u4e00\u4e9b\u8655\u7406\uff1b \u5c31\u6b64\u4f8b\u800c\u8a00\uff0cGit \u6703\u7528\u5169\u500b\u5206\u652f\u672b\u7aef\u7684\u5feb\u7167\uff08\u8b6f\u8a3b\uff1aC4\u3001C5\uff09\u4ee5\u53ca\u5b83\u5011\u7684\u5171\u540c\u7956\u5148\uff08\u8b6f\u8a3b\uff1aC2\uff09\u9032\u884c\u4e00\u6b21\u7c21\u55ae\u7684\u4e09\u65b9\u5408\u4f75\uff08three-way merge\uff09\u3002 \u4e0d\u540c\u65bc\u5c07\u5206\u652f\u6307\u6a19\u5411\u524d\u63a8\u9032\uff0cGit \u6703\u5c0d\u4e09\u65b9\u5408\u4f75\u5f8c\u7684\u7d50\u679c\u7522\u751f\u4e00\u500b\u65b0\u7684\u5feb\u7167\uff0c\u4e26\u81ea\u52d5\u5efa\u7acb\u4e00\u500b\u6307\u5411\u9019\u500b\u5feb\u7167\u7684\u63d0\u4ea4\uff08\u8b6f\u8a3b\uff1aC6\uff09\u3002 \u9019\u500b\u63d0\u4ea4\u88ab\u7a31\u70ba\u300c\u5408\u4f75\u63d0\u4ea4\uff08merge commit\uff09\u300d\uff0c\u7279\u5225\u7684\u662f\u5b83\u7684\u89aa\u4ee3\uff08parent\uff09\u8d85\u904e\u4e00\u500b\uff08\u8b6f\u8a3b\uff1aC4 \u548c C5\uff09\u3002 \u65e2\u7136\u4f60\u7684\u5de5\u4f5c\u6210\u679c\u5df2\u7d93\u5408\u4f75\u4e86\uff0c\u4e5f\u5c31\u4e0d\u518d\u9700\u8981 iss53 \u5206\u652f\u4e86\uff0c \u4f60\u53ef\u4ee5\u5728\u8b70\u984c\u8ffd\u8e64\u7cfb\u7d71\u4e2d\u95dc\u9589\u8a72\u8b70\u984c\uff0c\u7136\u5f8c\u522a\u9664\u9019\u500b\u5206\u652f\uff1a $ git branch -d iss53 \u5408\u4f75\u885d\u7a81\u7684\u89e3\u6cd5 \u6709\u6642\u5019\u5408\u4f75\u904e\u7a0b\u4e26\u4e0d\u6703\u5982\u6b64\u9806\u5229\uff0c \u5982\u679c\u5728\u4e0d\u540c\u7684\u5206\u652f\u4e2d\u90fd\u4fee\u6539\u4e86\u540c\u4e00\u500b\u6a94\u6848\u7684\u540c\u4e00\u90e8\u5206\uff0cGit \u5c31\u7121\u6cd5\u4e7e\u6de8\u5730\u5408\u4f75\u5b83\u5011\uff1b \u5982\u679c\u4f60\u5728\u89e3\u6c7a\u8b70\u984c #53 \u7684\u904e\u7a0b\u4e2d\u4fee\u6539\u4e86 hotfix \u4e2d\u4e5f\u4fee\u6539\u904e\u7684\u90e8\u5206\uff0c\u5c07\u5f97\u5230\u985e\u4f3c\u4e0b\u9762\u7684\u300c\u5408\u4f75\u885d\u7a81\u300d\u7d50\u679c\uff1a $ git merge iss53 Auto-merging index.html CONFLICT (content): Merge conflict in index.html Automatic merge failed; fix conflicts and then commit the result. Git \u6c92\u6709\u81ea\u52d5\u7522\u751f\u65b0\u7684\u5408\u4f75\u63d0\u4ea4\uff0c \u5b83\u6703\u66ab\u505c\u4e0b\u4f86\u7b49\u4f60\u89e3\u6c7a\uff08resolve\uff09\u885d\u7a81\uff1b \u5728\u5408\u4f75\u885d\u7a81\u767c\u751f\u5f8c\u7684\u4efb\u4f55\u6642\u5019\uff0c\u5982\u679c\u4f60\u8981\u770b\u770b\u54ea\u4e9b\u6a94\u6848\u9084\u6c92\u6709\u5408\u4f75\uff0c\u53ef\u4ee5\u4f7f\u7528 git status : $ git status On branch master You have unmerged paths. (fix conflicts and run \"git commit\") Unmerged paths: (use \"git add <file>...\" to mark resolution) both modified: index.html no changes added to commit (use \"git add\" and/or \"git commit -a\") \u5b83\u6703\u5217\u51fa\u6240\u6709\u6709\u5408\u4f75\u885d\u7a81\u4e14\u4ecd\u672a\u89e3\u6c7a\u7684\u6a94\u6848\uff08\u8b6f\u8a3b\uff1a\u5217\u5728 Unmerged paths : \u4e0b\u9762\uff09\uff1b Git \u6703\u5728\u6709\u885d\u7a81\u7684\u6a94\u6848\u88e1\u52a0\u5165\u6a19\u6e96\u7684\u300c\u885d\u7a81\u89e3\u6c7a\uff08conflict-resolution\uff09\u300d\u6a19\u8a18\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u624b\u52d5\u958b\u555f\u5b83\u5011\u4ee5\u89e3\u6c7a\u9019\u4e9b\u885d\u7a81\uff1b \u4f60\u7684\u6a94\u6848\u6703\u5305\u542b\u985e\u4f3c\u4e0b\u9762\u9019\u6a23\u5b50\u7684\u5340\u6bb5\uff1a <<<<<<< HEAD:index.html <div id=\"footer\">contact : email.support@github.com</div> ======= <div id=\"footer\"> please contact us at support@github.com </div> >>>>>>> iss53:index.html \u53ef\u4ee5\u770b\u5230 ======= \u9694\u958b\u7684\u4e0a\u534a\u90e8\u5206\u662f HEAD \uff08\u5373 master \u5206\u652f\uff0c\u5728\u57f7\u884c\u5408\u4f75\u547d\u4ee4\u524d\u6240\u5207\u63db\u904e\u53bb\u7684\u5206\u652f\uff09\u4e2d\u7684\u5167\u5bb9\uff0c\u4e0b\u534a\u90e8\u5206\u5247\u662f\u5728 iss53 \u5206\u652f\u4e2d\u7684\u5167\u5bb9\uff1b \u89e3\u6c7a\u885d\u7a81\u7684\u8fa6\u6cd5\u7121\u975e\u662f\u4e8c\u9078\u4e00\uff0c\u6216\u8005\u7531\u4f60\u81ea\u5df1\u5408\u4f75\u5167\u5bb9\uff1b \u6bd4\u5982\u4f60\u53ef\u4ee5\u628a\u9019\u6574\u6bb5\u5167\u5bb9\u66ff\u63db\u6210\u4ee5\u4e0b\u5167\u5bb9\u800c\u89e3\u6c7a\u9019\u500b\u885d\u7a81\uff1a <div id=\"footer\"> please contact us at email.support@github.com </div> \u5728\u89e3\u6c7a\u4e86\u6bcf\u500b\u885d\u7a81\u6a94\u6848\u88e1\u7684\u6bcf\u500b\u885d\u7a81\u5f8c\uff0c\u5c0d\u6bcf\u500b\u6a94\u6848\u57f7\u884c git add \u6703\u5c07\u5b83\u5011\u6a19\u8a18\u70ba\u5df2\u89e3\u6c7a\u72c0\u614b\uff0c \u56e0\u70ba\u9810\u5b58\uff08stage\uff09\u52d5\u4f5c\u4ee3\u8868\u4e86\u885d\u7a81\u5df2\u7d93\u89e3\u6c7a\u3002\u4f60\u53ef\u4ee5\u518d\u6b21\u57f7\u884c git status \u4f86\u78ba\u8a8d\u6240\u6709\u885d\u7a81\u90fd\u5df2\u7d93\u89e3\u6c7a\uff1a $ git status On branch master All conflicts fixed but you are still merging. (use \"git commit\" to conclude merge) Changes to be committed: modified: index.html \u5982\u679c\u4f60\u6eff\u610f\u9019\u500b\u7d50\u679c\uff0c\u4e26\u4e14\u78ba\u8a8d\u4e86\u6240\u6709\u885d\u7a81\u90fd\u5df2\u7d93\u89e3\u6c7a\u4e5f\u9810\u5b58\u4e86\uff0c\u5c31\u53ef\u4ee5\u7528 git commit \u4f86\u5b8c\u6210\u9019\u6b21\u5408\u4f75\u63d0\u4ea4\uff1b","title":"Branching merging"},{"location":"Git/branching_merging/#_1","text":"\u8b93\u6211\u5011\u4f86\u770b\u4e00\u500b\u4f60\u5728\u73fe\u5be6\u751f\u6d3b\u4e2d\uff0c\u6709\u53ef\u80fd\u6703\u7528\u5230\u7684\u5206\u652f\uff08branch\uff09\u8207\u5408\u4f75\uff08merge\uff09\u5de5\u4f5c\u6d41\u7a0b\u7684\u7c21\u55ae\u7bc4\u4f8b\uff0c \u4f60\u505a\u4e86\u4ee5\u4e0b\u52d5\u4f5c\uff1a \u958b\u767c\u4e00\u500b\u7db2\u7ad9\u3002 \u5efa\u7acb\u4e00\u500b\u5206\u652f\u4ee5\u5be6\u73fe\u4e00\u500b\u65b0\u6545\u4e8b\u3002 \u5728\u9019\u500b\u5206\u652f\u4e0a\u9032\u884c\u958b\u767c\u3002 \u6b64\u6642\u4f60\u63a5\u5230\u4e00\u500b\u96fb\u8a71\uff0c\u6709\u500b\u5f88\u5371\u6025\u7684\u554f\u984c\u9700\u8981\u7dca\u6025\u4fee\u6b63\uff08hotfix\uff09\uff0c \u4f60\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u65b9\u5f0f\u8655\u7406\uff1a \u5207\u63db\u5230\u767c\u4f48\u7522\u54c1\u7528\u7684\u5206\u652f\u3002 \u5728\u540c\u4e00\u500b\u63d0\u4ea4\u4e0a\u5efa\u7acb\u4e00\u500b\u65b0\u5206\u652f\uff0c\u5728\u9019\u500b\u5206\u652f\u4e0a\u4fee\u6b63\u554f\u984c\u3002 \u901a\u904e\u6e2c\u8a66\u5f8c\uff0c\u5207\u56de\u767c\u4f48\u7522\u54c1\u7528\u7684\u5206\u652f\uff0c\u5c07\u4fee\u6b63\u7528\u7684\u5206\u652f\u5408\u4f75\u9032\u4f86\uff0c\u7136\u5f8c\u518d\u63a8\u9001\uff08push\uff09\u51fa\u53bb\u4ee5\u767c\u4f48\u7522\u54c1\u3002 \u5207\u63db\u5230\u4e4b\u524d\u5be6\u73fe\u65b0\u9700\u6c42\u7684\u5206\u652f\u4ee5\u7e7c\u7e8c\u5de5\u4f5c\u3002","title":"\u5206\u652f\u548c\u5408\u4f75\u7684\u57fa\u672c\u7528\u6cd5"},{"location":"Git/branching_merging/#_2","text":"\u9996\u5148\uff0c\u6211\u5011\u5047\u8a2d\u4f60\u6b63\u5728\u958b\u767c\u4f60\u7684\u5c08\u6848\uff0c\u4e26\u4e14\u5df2\u7d93\u6709\u4e00\u4e9b\u63d0\u4ea4\uff08commit\uff09\u4e86\u3002 \u7121\u8ad6\u4f60\u7684\u516c\u53f8\u4f7f\u7528\u7684\u8b70\u984c\u8ffd\u8e64\u7cfb\u7d71\uff08issue-tracking system\uff09\u662f\u54ea\u4e00\u5957\uff0c\u4f60\u6c7a\u5b9a\u8981\u4fee\u6b63\u5176\u4e2d\u7684\u8b70\u984c #53\uff1b \u8981\u540c\u6642\u65b0\u5efa\u4e26\u5207\u63db\u5230\u65b0\u5206\u652f\uff0c\u4f60\u53ef\u4ee5\u5728\u57f7\u884c git checkout \u6642\u52a0\u4e0a -b \u9078\u9805\uff1a $ git checkout -b iss53 Switched to a new branch \"iss53\" \u5b83\u76f8\u7576\u65bc\u4e0b\u9762\u9019\u5169\u689d\u547d\u4ee4\uff1a $ git branch iss53 $ git checkout iss53 \u4f60\u958b\u59cb\u958b\u767c\u7db2\u7ad9\uff0c\u4e26\u505a\u4e86\u4e00\u4e9b\u63d0\u4ea4\uff1b \u56e0\u70ba\u4f60\u6aa2\u51fa\uff08checkout\uff09\u4e86\u9019\u500b\u5206\u652f\uff08\u4e5f\u5c31\u662f HEAD \u6307\u6a19\u6b63\u6307\u5411\u5b83\uff09\uff0c iss53 \u5206\u652f\u4e5f\u96a8\u4e4b\u5411\u524d\u63a8\u9032\uff1a $ vim index.html $ git commit -a -m 'added a new footer [issue 53]' \u73fe\u5728\u4f60\u63a5\u5230\u96fb\u8a71\uff0c\u90a3\u500b\u7db2\u7ad9\u6709\u4e00\u500b\u554f\u984c\u9700\u8981\u7acb\u5373\u4fee\u6b63\uff1b \u6709\u4e86 Git \uff0c\u4f60\u5c31\u4e0d\u7528\u628a\u4f60\u7684\u7dca\u6025\u4fee\u6b63\u9023\u540c iss53 \u5c1a\u672a\u5b8c\u6210\u7684\u5167\u5bb9\u4e00\u8d77\u90e8\u7f72\uff08deploy\uff09\u5230\u6b63\u5f0f\u74b0\u5883\uff1b\u4f60\u4e5f\u4e0d\u7528\u70ba\u4e86\u6b63\u78ba\u5730\u5957\u7528\u4fee\u6b63\u800c\u5148\u82b1\u4e00\u5927\u5806\u529f\u592b\u56de\u5fa9\u4e4b\u524d iss53 \u7684\u4fee\u6539\uff1b \u552f\u4e00\u9700\u8981\u505a\u7684\u53ea\u662f\u5207\u63db\u56de\u767c\u4f48\u7522\u54c1\u7528\u7684 master \u5206\u652f\u3002 $ git checkout master Switched to branch 'master' \u6b64\u6642\u5de5\u4f5c\u76ee\u9304\u4e2d\u7684\u5167\u5bb9\u548c\u4f60\u5728\u89e3\u6c7a\u554f\u984c #53 \u4e4b\u524d\u7684\u5167\u5bb9\u4e00\u6a21\u4e00\u6a23\uff0c\u4f60\u53ef\u4ee5\u96c6\u4e2d\u7cbe\u529b\u9032\u884c\u7dca\u6025\u4fee\u6b63\u4e86\uff1b \u8b93\u6211\u5011\u5efa\u7acb\u4e00\u500b\u7dca\u6025\u4fee\u6b63\u7528\u7684\u5206\u652f\u4f86\u9032\u884c\u5de5\u4f5c\uff0c\u76f4\u5230\u5b8c\u6210\u5b83\uff1a $ git checkout -b hotfix Switched to a new branch 'hotfix' $ vim index.html $ git commit -a -m 'fixed the broken email address' [hotfix 1fb7853] fixed the broken email address 1 file changed, 2 insertions(+) \u4f60\u53ef\u4ee5\u8dd1\u4e00\u4e9b\u6e2c\u8a66\u4ee5\u78ba\u4fdd\u8a72\u4fee\u6b63\u662f\u4f60\u60f3\u8981\u7684\uff0c\u7136\u5f8c\u5207\u56de master \u5206\u652f\u4e26\u628a\u5b83\u5408\u4f75\u9032\u4f86\uff0c\u518d\u90e8\u7f72\u5230\u7522\u54c1\u4e0a\uff1b \u7528 git merge \u547d\u4ee4\u4f86\u9032\u884c\u5408\u4f75\uff1a $ git checkout master $ git merge hotfix Updating f42c576..3a0874c Fast-forward index.html | 2 ++ 1 file changed, 2 insertions(+) \u6ce8\u610f\u5408\u4f75\u6642\u6709\u4e00\u500b\u300cFast-forward\u300d\u5b57\u773c\uff1b \u7531\u65bc\u4f60\u8981\u5408\u4f75\u7684\u5206\u652f hotfix \u6240\u6307\u5411\u7684\u63d0\u4ea4 C4 \u76f4\u63a5\u8d85\u524d\u4e86\u63d0\u4ea4 C2 \uff0cGit \u65bc\u662f\u7c21\u55ae\u5730\u628a\u5206\u652f\u6307\u6a19\u5411\u524d\u63a8\u9032\uff1b \u63db\u53e5\u8a71\u8aaa\uff0c\u5982\u679c\u60f3\u8981\u5408\u4f75\u7684\u63d0\u4ea4\u53ef\u4ee5\u76f4\u63a5\u5f80\u56de\u8ffd\u6eaf\u6b77\u53f2\u5230\u76ee\u524d\u6240\u5728\u7684\u63d0\u4ea4\uff0cGit \u6703\u56e0\u70ba\u6c92\u6709\u9700\u8981\u5408\u4f75\u7684\u5de5\u4f5c\u800c\u7c21\u55ae\u5730\u628a\u6307\u6a19\u5411\u524d\u63a8\u9032\u2014\u2014\u9019\u5c31\u662f\u6240\u8b02\u7684\u300c\u5feb\u9032\uff08fast-forward\uff09\u300d\u3002 \u5728\u90a3\u500b\u8d85\u7d1a\u91cd\u8981\u7684\u4fee\u6b63\u88ab\u90e8\u7f72\u4ee5\u5f8c\uff0c\u4f60\u6e96\u5099\u8981\u5207\u56de\u5230\u4e4b\u524d\u88ab\u4e2d\u65b7\u800c\u6b63\u5728\u505a\u7684\u5de5\u4f5c\uff1b \u7136\u800c\u5728\u90a3\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u5148\u522a\u9664 hotfix \uff0c\u56e0\u70ba\u4f60\u4e0d\u518d\u9700\u8981\u5b83\u4e86\u2014\u2014 master \u4e5f\u6307\u5411\u76f8\u540c\u7684\u63d0\u4ea4\uff1b \u4f7f\u7528 git branch \u7684 -d \u9078\u9805\u57f7\u884c\u522a\u9664\u64cd\u4f5c\uff1a $ git branch -d hotfix Deleted branch hotfix (3a0874c). \u73fe\u5728\u4f60\u53ef\u4ee5\u5207\u56de\u5230\u4e4b\u524d\u7528\u4f86\u89e3\u6c7a\u8b70\u984c #53 \u4e14\u4ecd\u5728\u9032\u5c55\u4e2d\u7684\u5206\u652f\u4ee5\u7e7c\u7e8c\u5de5\u4f5c\uff1a $ git checkout iss53 Switched to branch \"iss53\" $ vim index.html $ git commit -a -m 'finished the new footer [issue 53]' [iss53 ad82d7a] finished the new footer [issue 53] 1 file changed, 1 insertion(+)","title":"\u5206\u652f\u57fa\u672c\u7528\u6cd5"},{"location":"Git/branching_merging/#_3","text":"\u4f60\u5df2\u7d93\u5b8c\u6210\u4e86\u8b70\u984c #53 \u7684\u5de5\u4f5c\uff0c\u4e26\u6e96\u5099\u597d\u5c07\u5b83\u5408\u4f75\u5230 master \u5206\u652f\uff1b \u8981\u5b8c\u6210\u9019\u4ef6\u4e8b\uff0c\u4f60\u9700\u8981\u5c07 iss53 \u5206\u652f\u5408\u4f75\u5230 master \u5206\u652f\uff0c\u5be6\u969b\u64cd\u4f5c\u548c\u4e4b\u524d\u5408\u4f75 hotfix \u5206\u652f\u6642\u5dee\u4e0d\u591a\uff0c \u53ea\u9700\u5207\u56de\u5408\u4f75\u76ee\u7684\u5730\u7684 master \u5206\u652f\uff0c\u7136\u5f8c\u57f7\u884c git merge \u547d\u4ee4: $ git checkout master Switched to branch 'master' $ git merge iss53 Merge made by the 'recursive' strategy. index.html | 1 + 1 file changed, 1 insertion(+) \u9019\u6b21\u7684\u5408\u4f75\u548c\u4e4b\u524d\u5408\u4f75 hotfix \u7684\u60c5\u6cc1\u770b\u8d77\u4f86\u6709\u9ede\u4e0d\u4e00\u6a23\uff1b \u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u4f60\u7684\u958b\u767c\u6b77\u53f2\u662f\u5f9e\u4e00\u500b\u8f03\u65e9\u7684\u9ede\u4fbf\u958b\u59cb\u5206\u96e2\u958b\u4f86\uff0c \u7531\u65bc\u76ee\u524d\u6240\u5728\u7684\u63d0\u4ea4\uff08\u8b6f\u8a3b\uff1aC4\uff09\u4e26\u4e0d\u662f\u88ab\u5408\u4f75\u7684\u5206\u652f\uff08\u8b6f\u8a3b\uff1a iss53 \uff0c\u5b83\u6307\u5411 C5\uff09\u7684\u76f4\u63a5\u7956\u5148\uff0cGit \u5fc5\u9700\u9032\u884c\u4e00\u4e9b\u8655\u7406\uff1b \u5c31\u6b64\u4f8b\u800c\u8a00\uff0cGit \u6703\u7528\u5169\u500b\u5206\u652f\u672b\u7aef\u7684\u5feb\u7167\uff08\u8b6f\u8a3b\uff1aC4\u3001C5\uff09\u4ee5\u53ca\u5b83\u5011\u7684\u5171\u540c\u7956\u5148\uff08\u8b6f\u8a3b\uff1aC2\uff09\u9032\u884c\u4e00\u6b21\u7c21\u55ae\u7684\u4e09\u65b9\u5408\u4f75\uff08three-way merge\uff09\u3002 \u4e0d\u540c\u65bc\u5c07\u5206\u652f\u6307\u6a19\u5411\u524d\u63a8\u9032\uff0cGit \u6703\u5c0d\u4e09\u65b9\u5408\u4f75\u5f8c\u7684\u7d50\u679c\u7522\u751f\u4e00\u500b\u65b0\u7684\u5feb\u7167\uff0c\u4e26\u81ea\u52d5\u5efa\u7acb\u4e00\u500b\u6307\u5411\u9019\u500b\u5feb\u7167\u7684\u63d0\u4ea4\uff08\u8b6f\u8a3b\uff1aC6\uff09\u3002 \u9019\u500b\u63d0\u4ea4\u88ab\u7a31\u70ba\u300c\u5408\u4f75\u63d0\u4ea4\uff08merge commit\uff09\u300d\uff0c\u7279\u5225\u7684\u662f\u5b83\u7684\u89aa\u4ee3\uff08parent\uff09\u8d85\u904e\u4e00\u500b\uff08\u8b6f\u8a3b\uff1aC4 \u548c C5\uff09\u3002 \u65e2\u7136\u4f60\u7684\u5de5\u4f5c\u6210\u679c\u5df2\u7d93\u5408\u4f75\u4e86\uff0c\u4e5f\u5c31\u4e0d\u518d\u9700\u8981 iss53 \u5206\u652f\u4e86\uff0c \u4f60\u53ef\u4ee5\u5728\u8b70\u984c\u8ffd\u8e64\u7cfb\u7d71\u4e2d\u95dc\u9589\u8a72\u8b70\u984c\uff0c\u7136\u5f8c\u522a\u9664\u9019\u500b\u5206\u652f\uff1a $ git branch -d iss53","title":"\u5408\u4f75\u57fa\u672c\u7528\u6cd5"},{"location":"Git/branching_merging/#_4","text":"\u6709\u6642\u5019\u5408\u4f75\u904e\u7a0b\u4e26\u4e0d\u6703\u5982\u6b64\u9806\u5229\uff0c \u5982\u679c\u5728\u4e0d\u540c\u7684\u5206\u652f\u4e2d\u90fd\u4fee\u6539\u4e86\u540c\u4e00\u500b\u6a94\u6848\u7684\u540c\u4e00\u90e8\u5206\uff0cGit \u5c31\u7121\u6cd5\u4e7e\u6de8\u5730\u5408\u4f75\u5b83\u5011\uff1b \u5982\u679c\u4f60\u5728\u89e3\u6c7a\u8b70\u984c #53 \u7684\u904e\u7a0b\u4e2d\u4fee\u6539\u4e86 hotfix \u4e2d\u4e5f\u4fee\u6539\u904e\u7684\u90e8\u5206\uff0c\u5c07\u5f97\u5230\u985e\u4f3c\u4e0b\u9762\u7684\u300c\u5408\u4f75\u885d\u7a81\u300d\u7d50\u679c\uff1a $ git merge iss53 Auto-merging index.html CONFLICT (content): Merge conflict in index.html Automatic merge failed; fix conflicts and then commit the result. Git \u6c92\u6709\u81ea\u52d5\u7522\u751f\u65b0\u7684\u5408\u4f75\u63d0\u4ea4\uff0c \u5b83\u6703\u66ab\u505c\u4e0b\u4f86\u7b49\u4f60\u89e3\u6c7a\uff08resolve\uff09\u885d\u7a81\uff1b \u5728\u5408\u4f75\u885d\u7a81\u767c\u751f\u5f8c\u7684\u4efb\u4f55\u6642\u5019\uff0c\u5982\u679c\u4f60\u8981\u770b\u770b\u54ea\u4e9b\u6a94\u6848\u9084\u6c92\u6709\u5408\u4f75\uff0c\u53ef\u4ee5\u4f7f\u7528 git status : $ git status On branch master You have unmerged paths. (fix conflicts and run \"git commit\") Unmerged paths: (use \"git add <file>...\" to mark resolution) both modified: index.html no changes added to commit (use \"git add\" and/or \"git commit -a\") \u5b83\u6703\u5217\u51fa\u6240\u6709\u6709\u5408\u4f75\u885d\u7a81\u4e14\u4ecd\u672a\u89e3\u6c7a\u7684\u6a94\u6848\uff08\u8b6f\u8a3b\uff1a\u5217\u5728 Unmerged paths : \u4e0b\u9762\uff09\uff1b Git \u6703\u5728\u6709\u885d\u7a81\u7684\u6a94\u6848\u88e1\u52a0\u5165\u6a19\u6e96\u7684\u300c\u885d\u7a81\u89e3\u6c7a\uff08conflict-resolution\uff09\u300d\u6a19\u8a18\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u624b\u52d5\u958b\u555f\u5b83\u5011\u4ee5\u89e3\u6c7a\u9019\u4e9b\u885d\u7a81\uff1b \u4f60\u7684\u6a94\u6848\u6703\u5305\u542b\u985e\u4f3c\u4e0b\u9762\u9019\u6a23\u5b50\u7684\u5340\u6bb5\uff1a <<<<<<< HEAD:index.html <div id=\"footer\">contact : email.support@github.com</div> ======= <div id=\"footer\"> please contact us at support@github.com </div> >>>>>>> iss53:index.html \u53ef\u4ee5\u770b\u5230 ======= \u9694\u958b\u7684\u4e0a\u534a\u90e8\u5206\u662f HEAD \uff08\u5373 master \u5206\u652f\uff0c\u5728\u57f7\u884c\u5408\u4f75\u547d\u4ee4\u524d\u6240\u5207\u63db\u904e\u53bb\u7684\u5206\u652f\uff09\u4e2d\u7684\u5167\u5bb9\uff0c\u4e0b\u534a\u90e8\u5206\u5247\u662f\u5728 iss53 \u5206\u652f\u4e2d\u7684\u5167\u5bb9\uff1b \u89e3\u6c7a\u885d\u7a81\u7684\u8fa6\u6cd5\u7121\u975e\u662f\u4e8c\u9078\u4e00\uff0c\u6216\u8005\u7531\u4f60\u81ea\u5df1\u5408\u4f75\u5167\u5bb9\uff1b \u6bd4\u5982\u4f60\u53ef\u4ee5\u628a\u9019\u6574\u6bb5\u5167\u5bb9\u66ff\u63db\u6210\u4ee5\u4e0b\u5167\u5bb9\u800c\u89e3\u6c7a\u9019\u500b\u885d\u7a81\uff1a <div id=\"footer\"> please contact us at email.support@github.com </div> \u5728\u89e3\u6c7a\u4e86\u6bcf\u500b\u885d\u7a81\u6a94\u6848\u88e1\u7684\u6bcf\u500b\u885d\u7a81\u5f8c\uff0c\u5c0d\u6bcf\u500b\u6a94\u6848\u57f7\u884c git add \u6703\u5c07\u5b83\u5011\u6a19\u8a18\u70ba\u5df2\u89e3\u6c7a\u72c0\u614b\uff0c \u56e0\u70ba\u9810\u5b58\uff08stage\uff09\u52d5\u4f5c\u4ee3\u8868\u4e86\u885d\u7a81\u5df2\u7d93\u89e3\u6c7a\u3002\u4f60\u53ef\u4ee5\u518d\u6b21\u57f7\u884c git status \u4f86\u78ba\u8a8d\u6240\u6709\u885d\u7a81\u90fd\u5df2\u7d93\u89e3\u6c7a\uff1a $ git status On branch master All conflicts fixed but you are still merging. (use \"git commit\" to conclude merge) Changes to be committed: modified: index.html \u5982\u679c\u4f60\u6eff\u610f\u9019\u500b\u7d50\u679c\uff0c\u4e26\u4e14\u78ba\u8a8d\u4e86\u6240\u6709\u885d\u7a81\u90fd\u5df2\u7d93\u89e3\u6c7a\u4e5f\u9810\u5b58\u4e86\uff0c\u5c31\u53ef\u4ee5\u7528 git commit \u4f86\u5b8c\u6210\u9019\u6b21\u5408\u4f75\u63d0\u4ea4\uff1b","title":"\u5408\u4f75\u885d\u7a81\u7684\u89e3\u6cd5"},{"location":"Git/branching_nutshell/","text":"\u5206\u652f \u70ba\u4e86\u5177\u9ad4\u8aaa\u660e\uff0c\u8b93\u6211\u5011\u5047\u8a2d\u4f60\u6709\u4e00\u500b\u76ee\u9304\u5305\u542b\u4e86\u4e09\u500b\u6a94\u6848\uff0c\u7576\u4f7f\u7528 git commit \u5efa\u7acb\u4e00\u500b\u63d0\u4ea4\u6642\uff0cGit \u6703\u5148\u8a08\u7b97\u6bcf\u4e00\u500b\u5b50\u76ee\u9304\uff08\u672c\u4f8b\u4e2d\u5247\u53ea\u6709\u5c08\u6848\u6839\u76ee\u9304\uff09\u7684\u96dc\u6e4a\u503c\uff0c\u7136\u5f8c\u5728 Git \u7248\u672c\u5eab\u4e2d\u5c07\u9019\u4e9b\u76ee\u9304\u8a18\u9304\u70ba\u6a39\uff08tree\uff09\u7269\u4ef6\uff1b \u4e4b\u5f8c Git \u5efa\u7acb\u63d0\u4ea4\u7269\u4ef6\uff0c\u5b83\u9664\u4e86\u5305\u542b\u76f8\u95dc\u63d0\u4ea4\u8cc7\u8a0a\u4ee5\u5916\uff0c\u9084\u5305\u542b\u8457\u6307\u5411\u5c08\u6848\u6839\u76ee\u9304\u7684\u6a39\u7269\u4ef6\u6307\u6a19\uff0c\u5982\u6b64\u5b83\u5c31\u53ef\u4ee5\u5728\u9700\u8981\u7684\u6642\u5019\u91cd\u5efa\u6b64\u6b21\u5feb\u7167\u5167\u5bb9\u3002 \u4f60\u7684 Git \u7248\u672c\u5eab\u73fe\u5728\u6709\u4e94\u500b\u7269\u4ef6\uff1a\u4e09\u500b blob \u7269\u4ef6\u7528\u4f86\u5132\u5b58\u6a94\u6848\u5167\u5bb9\u3001\u4e00\u500b\u6a39\u7269\u4ef6\u7528\u4f86\u5217\u51fa\u76ee\u9304\u7684\u5167\u5bb9\u4e26\u7d00\u9304\u5404\u500b\u6a94\u6848\u6240\u5c0d\u61c9\u7684 blob \u7269\u4ef6\u3001\u4e00\u500b\u63d0\u4ea4\u7528\u4f86\u8a18\u9304\u6839\u76ee\u9304\u7684\u6a39\u7269\u4ef6\u548c\u5176\u4ed6\u63d0\u4ea4\u8cc7\u8a0a\u3002 \u5982\u679c\u4f60\u505a\u4e00\u4e9b\u4fee\u6539\u4e26\u518d\u6b21\u63d0\u4ea4\uff0c\u9019\u6b21\u7684\u63d0\u4ea4\u6703\u518d\u5305\u542b\u4e00\u500b\u6307\u5411\u4e0a\u6b21\u63d0\u4ea4\u7684\u6307\u6a19: Git \u5206\u652f\u5176\u5be6\u53ea\u662f\u4e00\u500b\u6307\u5411\u67d0\u63d0\u4ea4\u7684\u53ef\u79fb\u52d5\u8f15\u91cf\u7d1a\u6307\u6a19\uff0c Git \u9810\u8a2d\u5206\u652f\u540d\u7a31\u662f master \uff0c \u96a8\u8457\u4e0d\u65b7\u5730\u88fd\u4f5c\u63d0\u4ea4\uff0c master \u5206\u652f\u6703\u70ba\u4f60\u4e00\u76f4\u6307\u5411\u6700\u5f8c\u4e00\u500b\u63d0\u4ea4\uff0c \u5b83\u5728\u6bcf\u6b21\u63d0\u4ea4\u7684\u6642\u5019\u90fd\u6703\u81ea\u52d5\u5411\u524d\u79fb\u52d5\u3002 \u5efa\u7acb\u4e00\u500b\u65b0\u7684\u5206\u652f \u5efa\u7acb\u4e00\u500b\u65b0\u5206\u652f\u6703\u767c\u751f\u4ec0\u9ebc\u4e8b\u5462\uff1f \u7b54\u6848\u5f88\u7c21\u55ae\uff0c\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u3001\u53ef\u79fb\u52d5\u7684\u6307\u6a19\uff1b \u6bd4\u5982\u65b0\u5efa\u4e00\u500b testing \u5206\u652f\uff0c \u53ef\u4ee5\u4f7f\u7528 git branch \u547d\u4ee4\uff1a $ git branch testing \u9019\u6703\u5728\u76ee\u524d\u63d0\u4ea4\u4e0a\u65b0\u5efa\u4e00\u500b\u6307\u6a19\u3002 Git \u5982\u4f55\u77e5\u9053\u4f60\u76ee\u524d\u5728\u54ea\u500b\u5206\u652f\u4e0a\u5de5\u4f5c\u7684\u5462\uff1f \u5176\u5be6\u5b83\u4fdd\u5b58\u4e86\u4e00\u500b\u540d\u70ba HEAD \u7684\u7279\u5225\u6307\u6a19\uff1b\u5728 Git \u4e2d\uff0c\u5b83\u5c31\u662f\u4e00\u500b\u6307\u5411\u4f60\u6b63\u5728\u5de5\u4f5c\u4e2d\u7684\u672c\u5730\u5206\u652f\u7684\u6307\u6a19\uff08\u8b6f\u6ce8\uff1a HEAD \u7b49\u65bc\u300c\u76ee\u524d\u7684\u300d\uff09\uff0c \u6240\u4ee5\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u4f60\u4ecd\u7136\u5728 master \u5206\u652f\u4e0a\u5de5\u4f5c\uff1b \u57f7\u884c git branch \u547d\u4ee4\uff0c\u53ea\u662f\u300c\u5efa\u7acb\u300d\u4e00\u500b\u65b0\u7684\u5206\u652f\u2014\u2014\u5b83\u4e26\u4e0d\u6703\u5207\u63db\u5230\u9019\u500b\u5206\u652f\u3002 \u4f60\u53ef\u4ee5\u5f88\u8f15\u9b06\u5730\u770b\u5230\u5206\u652f\u6307\u6a19\u6307\u5411\u4f55\u8655\uff0c\u53ea\u9700\u900f\u904e\u4e00\u500b\u7c21\u55ae\u7684 git log \u547d\u4ee4\uff0c \u52a0\u4e0a --decorate \u9078\u9805\u3002 $ git log --oneline --decorate f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface 34ac2 Fixed bug #1328 - stack overflow under certain conditions 98ca9 The initial commit of my project \u5728\u5206\u652f\u4e4b\u9593\u5207\u63db \u8981\u5207\u63db\u5230\u4e00\u500b\u5df2\u7d93\u5b58\u5728\u7684\u5206\u652f\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c git checkout \u547d\u4ee4\uff0c \u8b93\u6211\u5011\u5207\u63db\u5230\u65b0\u7684 testing \u5206\u652f\uff1a $ git checkout testing \u9019\u6703\u79fb\u52d5 HEAD \u4e26\u6307\u5411 testing \u5206\u652f\u3002 \u9019\u6a23\u505a\u6709\u4ec0\u9ebc\u610f\u7fa9\u5462\uff1f \u597d\u5427\uff01\u8b93\u6211\u5011\u518d\u63d0\u4ea4\u4e00\u6b21\uff1a \u975e\u5e38\u6709\u8da3\uff0c\u73fe\u5728 testing \u5206\u652f\u5411\u524d\u79fb\u52d5\u4e86\uff0c\u800c master \u5206\u652f\u4ecd\u7136\u6307\u5411\u7576\u521d\u5728\u57f7\u884c git checkout \u6642\u6240\u5728\u7684\u63d0\u4ea4\uff0c \u8b93\u6211\u5011\u5207\u56de master \u5206\u652f\u770b\u770b\uff1a \u9019\u689d\u547d\u4ee4\u505a\u4e86\u5169\u4ef6\u4e8b\uff0c \u5b83\u628a HEAD \u6307\u6a19\u79fb\u56de\u53bb\u4e26\u6307\u5411 master \u5206\u652f\uff0c\u7136\u5f8c\u628a\u5de5\u4f5c\u76ee\u9304\u4e2d\u7684\u6a94\u6848\u63db\u6210 master \u5206\u652f\u6240\u6307\u5411\u7684\u5feb\u7167\u5167\u5bb9\uff1b \u4e5f\u5c31\u662f\u8aaa\uff0c\u73fe\u5728\u958b\u59cb\u6240\u505a\u7684\u6539\u52d5\uff0c\u5c07\u57fa\u65bc\u5c08\u6848\u4e2d\u8f03\u820a\u7684\u7248\u672c\uff0c\u7136\u5f8c\u8207\u5176\u5b83\u63d0\u4ea4\u6b77\u53f2\u5206\u96e2\u958b\u4f86\uff1b \u5b83\u5be6\u969b\u4e0a\u662f\u53d6\u6d88\u4f60\u5728 testing \u5206\u652f\u88e1\u6240\u505a\u7684\u4fee\u6539\uff0c\u9019\u6a23\u4f60\u5c31\u53ef\u4ee5\u5f80\u4e0d\u540c\u65b9\u5411\u524d\u9032\u3002 \u7b46\u8a18 \u7576\u4f60\u5728 Git \u5207\u63db\u5206\u652f\u6642\uff0c\u5982\u679c Git \u7121\u6cd5\u5f88\u4e7e\u6de8\u5730\u5207\u63db\u904e\u53bb\uff0c\u5b83\u5c31\u4e0d\u6703\u8b93\u4f60\u5207\u63db\u904e\u53bb\u3002 \u8b93\u6211\u5011\u505a\u4e00\u4e9b\u4fee\u6539\u4e26\u518d\u6b21\u63d0\u4ea4\uff1a \u73fe\u5728\u4f60\u7684\u5c08\u6848\u6b77\u53f2\u958b\u59cb\u5206\u96e2\u4e86\uff1b \u4f60\u5efa\u7acb\u4e26\u5207\u63db\u5230\u65b0\u5206\u652f\uff0c\u5728\u4e0a\u9762\u9032\u884c\u4e86\u4e00\u4e9b\u5de5\u4f5c\uff0c\u7136\u5f8c\u5207\u63db\u56de\u5230\u4e3b\u5206\u652f\u9032\u884c\u4e86\u53e6\u5916\u4e00\u4e9b\u5de5\u4f5c\uff0c \u96d9\u65b9\u7684\u6539\u8b8a\u5206\u5225\u9694\u96e2\u5728\u4e0d\u540c\u7684\u5206\u652f\u88e1\uff1a\u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u5206\u652f\u88e1\u53cd\u8986\u5207\u63db\uff0c\u4e26\u5728\u6642\u6a5f\u6210\u719f\u6642\u628a\u5b83\u5011\u5408\u4f75\u5230\u4e00\u8d77\uff1b \u800c\u6240\u6709\u9019\u4e9b\u5de5\u4f5c\u53ea\u9700\u8981\u7c21\u55ae\u7684 branch \u3001 checkout \u3001 commit \u547d\u4ee4\u3002 \u7531\u65bc Git \u5206\u652f\u5be6\u969b\u4e0a\u53ea\u662f\u4e00\u500b\u6a94\u6848\uff0c\u8a72\u6a94\u6848\u5167\u5bb9\u662f\u9019\u500b\u5206\u652f\u6307\u5411\u7684\u63d0\u4ea4\u7684\u96dc\u6e4a\u503c\uff0840 \u500b\u5b57\u5143\u9577\u5ea6\u7684 SHA-1 \u5b57\u4e32\uff09\uff0c\u6240\u4ee5\u5efa\u7acb\u548c\u92b7\u6bc0\u4e00\u500b\u5206\u652f\u5c31\u8b8a\u5f97\u975e\u5e38\u5ec9\u50f9\uff1b \u65b0\u5efa\u4e00\u500b\u5206\u652f\u5c31\u662f\u5411\u4e00\u500b\u6a94\u5beb\u5165 41 \u500b\u4f4d\u5143\u7d44\uff0840 \u500b\u5b57\u5143\u5916\u52a0\u4e00\u500b\u63db\u884c\u7b26\u865f\uff09\u90a3\u6a23\u5730\u7c21\u55ae\u548c\u5feb\u901f\u3002","title":"Branching nutshell"},{"location":"Git/branching_nutshell/#_1","text":"\u70ba\u4e86\u5177\u9ad4\u8aaa\u660e\uff0c\u8b93\u6211\u5011\u5047\u8a2d\u4f60\u6709\u4e00\u500b\u76ee\u9304\u5305\u542b\u4e86\u4e09\u500b\u6a94\u6848\uff0c\u7576\u4f7f\u7528 git commit \u5efa\u7acb\u4e00\u500b\u63d0\u4ea4\u6642\uff0cGit \u6703\u5148\u8a08\u7b97\u6bcf\u4e00\u500b\u5b50\u76ee\u9304\uff08\u672c\u4f8b\u4e2d\u5247\u53ea\u6709\u5c08\u6848\u6839\u76ee\u9304\uff09\u7684\u96dc\u6e4a\u503c\uff0c\u7136\u5f8c\u5728 Git \u7248\u672c\u5eab\u4e2d\u5c07\u9019\u4e9b\u76ee\u9304\u8a18\u9304\u70ba\u6a39\uff08tree\uff09\u7269\u4ef6\uff1b \u4e4b\u5f8c Git \u5efa\u7acb\u63d0\u4ea4\u7269\u4ef6\uff0c\u5b83\u9664\u4e86\u5305\u542b\u76f8\u95dc\u63d0\u4ea4\u8cc7\u8a0a\u4ee5\u5916\uff0c\u9084\u5305\u542b\u8457\u6307\u5411\u5c08\u6848\u6839\u76ee\u9304\u7684\u6a39\u7269\u4ef6\u6307\u6a19\uff0c\u5982\u6b64\u5b83\u5c31\u53ef\u4ee5\u5728\u9700\u8981\u7684\u6642\u5019\u91cd\u5efa\u6b64\u6b21\u5feb\u7167\u5167\u5bb9\u3002 \u4f60\u7684 Git \u7248\u672c\u5eab\u73fe\u5728\u6709\u4e94\u500b\u7269\u4ef6\uff1a\u4e09\u500b blob \u7269\u4ef6\u7528\u4f86\u5132\u5b58\u6a94\u6848\u5167\u5bb9\u3001\u4e00\u500b\u6a39\u7269\u4ef6\u7528\u4f86\u5217\u51fa\u76ee\u9304\u7684\u5167\u5bb9\u4e26\u7d00\u9304\u5404\u500b\u6a94\u6848\u6240\u5c0d\u61c9\u7684 blob \u7269\u4ef6\u3001\u4e00\u500b\u63d0\u4ea4\u7528\u4f86\u8a18\u9304\u6839\u76ee\u9304\u7684\u6a39\u7269\u4ef6\u548c\u5176\u4ed6\u63d0\u4ea4\u8cc7\u8a0a\u3002 \u5982\u679c\u4f60\u505a\u4e00\u4e9b\u4fee\u6539\u4e26\u518d\u6b21\u63d0\u4ea4\uff0c\u9019\u6b21\u7684\u63d0\u4ea4\u6703\u518d\u5305\u542b\u4e00\u500b\u6307\u5411\u4e0a\u6b21\u63d0\u4ea4\u7684\u6307\u6a19: Git \u5206\u652f\u5176\u5be6\u53ea\u662f\u4e00\u500b\u6307\u5411\u67d0\u63d0\u4ea4\u7684\u53ef\u79fb\u52d5\u8f15\u91cf\u7d1a\u6307\u6a19\uff0c Git \u9810\u8a2d\u5206\u652f\u540d\u7a31\u662f master \uff0c \u96a8\u8457\u4e0d\u65b7\u5730\u88fd\u4f5c\u63d0\u4ea4\uff0c master \u5206\u652f\u6703\u70ba\u4f60\u4e00\u76f4\u6307\u5411\u6700\u5f8c\u4e00\u500b\u63d0\u4ea4\uff0c \u5b83\u5728\u6bcf\u6b21\u63d0\u4ea4\u7684\u6642\u5019\u90fd\u6703\u81ea\u52d5\u5411\u524d\u79fb\u52d5\u3002","title":"\u5206\u652f"},{"location":"Git/branching_nutshell/#_2","text":"\u5efa\u7acb\u4e00\u500b\u65b0\u5206\u652f\u6703\u767c\u751f\u4ec0\u9ebc\u4e8b\u5462\uff1f \u7b54\u6848\u5f88\u7c21\u55ae\uff0c\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u3001\u53ef\u79fb\u52d5\u7684\u6307\u6a19\uff1b \u6bd4\u5982\u65b0\u5efa\u4e00\u500b testing \u5206\u652f\uff0c \u53ef\u4ee5\u4f7f\u7528 git branch \u547d\u4ee4\uff1a $ git branch testing \u9019\u6703\u5728\u76ee\u524d\u63d0\u4ea4\u4e0a\u65b0\u5efa\u4e00\u500b\u6307\u6a19\u3002 Git \u5982\u4f55\u77e5\u9053\u4f60\u76ee\u524d\u5728\u54ea\u500b\u5206\u652f\u4e0a\u5de5\u4f5c\u7684\u5462\uff1f \u5176\u5be6\u5b83\u4fdd\u5b58\u4e86\u4e00\u500b\u540d\u70ba HEAD \u7684\u7279\u5225\u6307\u6a19\uff1b\u5728 Git \u4e2d\uff0c\u5b83\u5c31\u662f\u4e00\u500b\u6307\u5411\u4f60\u6b63\u5728\u5de5\u4f5c\u4e2d\u7684\u672c\u5730\u5206\u652f\u7684\u6307\u6a19\uff08\u8b6f\u6ce8\uff1a HEAD \u7b49\u65bc\u300c\u76ee\u524d\u7684\u300d\uff09\uff0c \u6240\u4ee5\u5728\u9019\u500b\u4f8b\u5b50\u4e2d\uff0c\u4f60\u4ecd\u7136\u5728 master \u5206\u652f\u4e0a\u5de5\u4f5c\uff1b \u57f7\u884c git branch \u547d\u4ee4\uff0c\u53ea\u662f\u300c\u5efa\u7acb\u300d\u4e00\u500b\u65b0\u7684\u5206\u652f\u2014\u2014\u5b83\u4e26\u4e0d\u6703\u5207\u63db\u5230\u9019\u500b\u5206\u652f\u3002 \u4f60\u53ef\u4ee5\u5f88\u8f15\u9b06\u5730\u770b\u5230\u5206\u652f\u6307\u6a19\u6307\u5411\u4f55\u8655\uff0c\u53ea\u9700\u900f\u904e\u4e00\u500b\u7c21\u55ae\u7684 git log \u547d\u4ee4\uff0c \u52a0\u4e0a --decorate \u9078\u9805\u3002 $ git log --oneline --decorate f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface 34ac2 Fixed bug #1328 - stack overflow under certain conditions 98ca9 The initial commit of my project","title":"\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u5206\u652f"},{"location":"Git/branching_nutshell/#_3","text":"\u8981\u5207\u63db\u5230\u4e00\u500b\u5df2\u7d93\u5b58\u5728\u7684\u5206\u652f\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c git checkout \u547d\u4ee4\uff0c \u8b93\u6211\u5011\u5207\u63db\u5230\u65b0\u7684 testing \u5206\u652f\uff1a $ git checkout testing \u9019\u6703\u79fb\u52d5 HEAD \u4e26\u6307\u5411 testing \u5206\u652f\u3002 \u9019\u6a23\u505a\u6709\u4ec0\u9ebc\u610f\u7fa9\u5462\uff1f \u597d\u5427\uff01\u8b93\u6211\u5011\u518d\u63d0\u4ea4\u4e00\u6b21\uff1a \u975e\u5e38\u6709\u8da3\uff0c\u73fe\u5728 testing \u5206\u652f\u5411\u524d\u79fb\u52d5\u4e86\uff0c\u800c master \u5206\u652f\u4ecd\u7136\u6307\u5411\u7576\u521d\u5728\u57f7\u884c git checkout \u6642\u6240\u5728\u7684\u63d0\u4ea4\uff0c \u8b93\u6211\u5011\u5207\u56de master \u5206\u652f\u770b\u770b\uff1a \u9019\u689d\u547d\u4ee4\u505a\u4e86\u5169\u4ef6\u4e8b\uff0c \u5b83\u628a HEAD \u6307\u6a19\u79fb\u56de\u53bb\u4e26\u6307\u5411 master \u5206\u652f\uff0c\u7136\u5f8c\u628a\u5de5\u4f5c\u76ee\u9304\u4e2d\u7684\u6a94\u6848\u63db\u6210 master \u5206\u652f\u6240\u6307\u5411\u7684\u5feb\u7167\u5167\u5bb9\uff1b \u4e5f\u5c31\u662f\u8aaa\uff0c\u73fe\u5728\u958b\u59cb\u6240\u505a\u7684\u6539\u52d5\uff0c\u5c07\u57fa\u65bc\u5c08\u6848\u4e2d\u8f03\u820a\u7684\u7248\u672c\uff0c\u7136\u5f8c\u8207\u5176\u5b83\u63d0\u4ea4\u6b77\u53f2\u5206\u96e2\u958b\u4f86\uff1b \u5b83\u5be6\u969b\u4e0a\u662f\u53d6\u6d88\u4f60\u5728 testing \u5206\u652f\u88e1\u6240\u505a\u7684\u4fee\u6539\uff0c\u9019\u6a23\u4f60\u5c31\u53ef\u4ee5\u5f80\u4e0d\u540c\u65b9\u5411\u524d\u9032\u3002","title":"\u5728\u5206\u652f\u4e4b\u9593\u5207\u63db"},{"location":"Git/branching_nutshell/#_4","text":"\u7576\u4f60\u5728 Git \u5207\u63db\u5206\u652f\u6642\uff0c\u5982\u679c Git \u7121\u6cd5\u5f88\u4e7e\u6de8\u5730\u5207\u63db\u904e\u53bb\uff0c\u5b83\u5c31\u4e0d\u6703\u8b93\u4f60\u5207\u63db\u904e\u53bb\u3002 \u8b93\u6211\u5011\u505a\u4e00\u4e9b\u4fee\u6539\u4e26\u518d\u6b21\u63d0\u4ea4\uff1a \u73fe\u5728\u4f60\u7684\u5c08\u6848\u6b77\u53f2\u958b\u59cb\u5206\u96e2\u4e86\uff1b \u4f60\u5efa\u7acb\u4e26\u5207\u63db\u5230\u65b0\u5206\u652f\uff0c\u5728\u4e0a\u9762\u9032\u884c\u4e86\u4e00\u4e9b\u5de5\u4f5c\uff0c\u7136\u5f8c\u5207\u63db\u56de\u5230\u4e3b\u5206\u652f\u9032\u884c\u4e86\u53e6\u5916\u4e00\u4e9b\u5de5\u4f5c\uff0c \u96d9\u65b9\u7684\u6539\u8b8a\u5206\u5225\u9694\u96e2\u5728\u4e0d\u540c\u7684\u5206\u652f\u88e1\uff1a\u4f60\u53ef\u4ee5\u5728\u4e0d\u540c\u5206\u652f\u88e1\u53cd\u8986\u5207\u63db\uff0c\u4e26\u5728\u6642\u6a5f\u6210\u719f\u6642\u628a\u5b83\u5011\u5408\u4f75\u5230\u4e00\u8d77\uff1b \u800c\u6240\u6709\u9019\u4e9b\u5de5\u4f5c\u53ea\u9700\u8981\u7c21\u55ae\u7684 branch \u3001 checkout \u3001 commit \u547d\u4ee4\u3002 \u7531\u65bc Git \u5206\u652f\u5be6\u969b\u4e0a\u53ea\u662f\u4e00\u500b\u6a94\u6848\uff0c\u8a72\u6a94\u6848\u5167\u5bb9\u662f\u9019\u500b\u5206\u652f\u6307\u5411\u7684\u63d0\u4ea4\u7684\u96dc\u6e4a\u503c\uff0840 \u500b\u5b57\u5143\u9577\u5ea6\u7684 SHA-1 \u5b57\u4e32\uff09\uff0c\u6240\u4ee5\u5efa\u7acb\u548c\u92b7\u6bc0\u4e00\u500b\u5206\u652f\u5c31\u8b8a\u5f97\u975e\u5e38\u5ec9\u50f9\uff1b \u65b0\u5efa\u4e00\u500b\u5206\u652f\u5c31\u662f\u5411\u4e00\u500b\u6a94\u5beb\u5165 41 \u500b\u4f4d\u5143\u7d44\uff0840 \u500b\u5b57\u5143\u5916\u52a0\u4e00\u500b\u63db\u884c\u7b26\u865f\uff09\u90a3\u6a23\u5730\u7c21\u55ae\u548c\u5feb\u901f\u3002","title":"\u7b46\u8a18"},{"location":"Git/clone_recording_changes/","text":"\u53d6\u5f97\u4e00\u500b\u5009\u5132 (repository) \u4f60\u6709\u5169\u7a2e\u4e3b\u8981\u65b9\u6cd5\u4f86\u53d6\u5f97\u4e00\u500b Git \u5009\u5132\u3002 \u7b2c\u4e00\u7a2e\u662f\u5c07\u73fe\u6709\u7684\u5c08\u6848\u6216\u8005\u8cc7\u6599\u593e\u532f\u5165 Git\uff1b \u7b2c\u4e8c\u7a2e\u662f\u5f9e\u5176\u5b83\u4f3a\u670d\u5668\u514b\u9686\uff08clone\uff09\u4e00\u4efd\u73fe\u6709\u7684 Git \u5009\u5132\u3002 \u5728\u73fe\u6709\u8cc7\u6599\u593e\u4e2d\u521d\u59cb\u5316\u5009\u5132 \u82e5\u4f60\u6253\u7b97\u4f7f\u7528 Git \u4f86\u8ffd\u8e64\uff08track\uff09\u73fe\u6709\u7684\u5c08\u6848\uff0c\u53ea\u9700\u8981\u9032\u5165\u8a72\u5c08\u6848\u7684\u8cc7\u6599\u593e\u4e26\u57f7\u884c\uff1a $ git init \u9019\u500b\u547d\u4ee4\u5c07\u6703\u5efa\u7acb\u4e00\u500b\u540d\u70ba .git \u7684\u5b50\u8cc7\u6599\u593e\uff0c\u5176\u4e2d\u5305\u542b Git \u6240\u6709\u5fc5\u9700\u7684\u5009\u5132\u6a94\u6848\uff0c\u4e5f\u5c31\u662f Git \u5009\u5132\u7684\u9aa8\u67b6\u3002 \u5230\u73fe\u5728\u9019\u6b65\u9a5f\u70ba\u6b62\uff0c\u5009\u5132\u9810\u8a2d\u6c92\u6709\u8ffd\u8e64\u4efb\u4f55\u6a94\u6848\u3002 \u63a5\u4e0b\u4f86\u4f60\u53ef\u4ee5\u901a\u904e\u591a\u6b21 git add \u6307\u4ee4\u4f86\u8ffd\u8e64\u5b8c\u6240\u6709\u4f60\u60f3\u8981\u8ffd\u8e64\u7684\u6a94\u6848\uff0c\u7136\u5f8c\u57f7\u884c git commit \u63d0\u4ea4\uff1a $ git add *.c $ git add LICENSE $ git commit -m 'initial project version' \u514b\u9686\u73fe\u6709\u7684\u5009\u5132 \u514b\u9686\u5009\u5eab\u7684\u547d\u4ee4\u683c\u5f0f\u662f git clone [url] \u3002 \u4f8b\u5982\uff1a\u82e5\u4f60\u60f3\u514b\u9686\u540d\u70ba libgit2 \u7684 Git linkable library\uff0c\u53ef\u4ee5\u57f7\u884c\u4e0b\u5217\u547d\u4ee4\uff1a $ git clone https://github.com/libgit2/libgit2 \u7d00\u9304\u8b8a\u66f4\u5230\u7248\u672c\u5eab\u4e2d \u73fe\u5728\u4f60\u7684\u624b\u4e0a\u6709\u4e86\u4e00\u500b\u8ca8\u771f\u50f9\u5be6\u7684 Git \u7248\u672c\u5eab\u548c\u9019\u500b\u5c08\u6848\u4e2d\u6240\u6709\u6a94\u6848\u7684\u6aa2\u51fa\uff08checkout\uff09\u6216\u5de5\u4f5c\u8907\u672c\uff08working copy\uff09\uff0c \u6bcf\u7576\u4f60\u4fee\u6539\u6a94\u6848\u5230\u4e00\u500b\u4f60\u60f3\u8a18\u9304\u5b83\u7684\u968e\u6bb5\u6642\uff0c\u4f60\u5c31\u9700\u8981\u63d0\u4ea4\uff08commit\uff09\u9019\u4e9b\u8b8a\u66f4\u7684\u5feb\u7167\u5230\u7248\u672c\u5eab\u4e2d\u3002 \u8acb\u8a18\u4f4f\uff0c\u4f60\u5de5\u4f5c\u76ee\u9304\u4e0b\u7684\u6bcf\u500b\u6a94\u6848\u4e0d\u5916\u4e4e\u5169\u7a2e\u72c0\u614b\uff1a\u5df2\u8ffd\u8e64\u3001\u672a\u8ffd\u8e64\u3002\u300c\u5df2\u8ffd\u8e64\u300d\u6a94\u6848\u662f\u6307\u90a3\u4e9b\u5728\u4e0a\u6b21\u5feb\u7167\u4e2d\u7684\u6a94\u6848\uff1a\u5b83\u5011\u7684\u72c0\u614b\u53ef\u80fd\u662f\u300c\u672a\u4fee\u6539\u300d\u3001\u300c\u5df2\u4fee\u6539\u300d\u3001\u300c\u5df2\u9810\u5b58\uff08staged\uff09\u300d\uff1b \u300c\u672a\u8ffd\u8e64\u300d\u5247\u662f\u5176\u5b83\u4ee5\u5916\u7684\u6a94\u6848\u2014\u2014\u5728\u5de5\u4f5c\u76ee\u9304\u4e2d\uff0c\u537b\u4e0d\u5305\u542b\u5728\u4e0a\u6b21\u7684\u5feb\u7167\u4e2d\uff0c\u4e5f\u4e0d\u5728\u9810\u5b58\u5340\uff08staging area\uff09\u4e2d\u7684\u4efb\u4f55\u6a94\u6848\uff1b \u7576\u4f60\u7b2c\u4e00\u6b21\u514b\u9686\uff08clone\uff09\u4e00\u500b\u7248\u672c\u5eab\u6642\uff0c\u6240\u6709\u6a94\u6848\u90fd\u662f\u300c\u5df2\u8ffd\u8e64\u300d\u4e14\u300c\u672a\u4fee\u6539\u300d\uff0c\u56e0\u70ba Git \u525b\u525b\u6aa2\u51fa\u5b83\u5011\u4e26\u4e14\u4f60\u5c1a\u672a\u7de8\u8f2f\u904e\u4efb\u4f55\u6a94\u6848\u3002 \u96a8\u8457\u4f60\u7de8\u8f2f\u67d0\u4e9b\u6a94\u6848\uff0cGit \u6703\u8996\u5b83\u5011\u70ba\u300c\u5df2\u4fee\u6539\u300d\uff0c\u56e0\u70ba\u81ea\u5f9e\u4e0a\u6b21\u63d0\u4ea4\u4ee5\u4f86\u4f60\u5df2\u7d93\u66f4\u52d5\u904e\u5b83\u5011\uff1b \u4f60\u9810\u5b58\uff08stage\uff09\u9019\u4e9b\u5df2\u4fee\u6539\u6a94\u6848\uff0c\u7136\u5f8c\u63d0\u4ea4\u6240\u6709\u5df2\u9810\u5b58\u7684\u4fee\u6539\u5167\u5bb9\uff0c\u63a5\u8457\u91cd\u8986\u9019\u500b\u5faa\u74b0\u3002 \u6aa2\u67e5\u4f60\u7684\u6a94\u6848\u72c0\u614b git status \u547d\u4ee4\u662f\u7528\u4f86\u5075\u6e2c\u54ea\u4e9b\u6a94\u6848\u8655\u5728\u4ec0\u9ebc\u6a23\u7684\u72c0\u614b\u4e0b\u7684\u4e3b\u8981\u5de5\u5177\uff1b \u5982\u679c\u4f60\u5728\u514b\u9686\u4e4b\u5f8c\u76f4\u63a5\u57f7\u884c\u8a72\u547d\u4ee4\uff0c\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\uff1a $ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean \u9019\u610f\u5473\u8457\u4f60\u6709\u4e00\u500b\u4e7e\u6de8\u7684\u5de5\u4f5c\u76ee\u9304\u2014\u2014\u63db\u53e5\u8a71\u8aaa\uff0c\u5df2\u8ffd\u8e64\u7684\u6a94\u6848\u6c92\u6709\u88ab\u4fee\u6539\uff1b Git \u4e5f\u6c92\u6709\u770b\u5230\u4efb\u4f55\u672a\u8ffd\u8e64\u6a94\u6848\uff0c\u5426\u5247\u5b83\u5011\u6703\u5728\u9019\u88e1\u88ab\u5217\u51fa\u4f86\uff1b \u5047\u8a2d\u4f60\u5728\u5c08\u6848\u4e2d\u65b0\u589e\u4e00\u500b\u6a94\u6848\uff0c\u4f8b\u5982\uff1a\u4e00\u500b\u7c21\u55ae\u7684 README \u6a94\u6848\uff1b \u5982\u679c\u8a72\u6a94\u6848\u5148\u524d\u4e26\u4e0d\u5b58\u5728\uff0c\u57f7\u884c git status \u547d\u4ee4\u5f8c\uff0c\u4f60\u6703\u770b\u5230\u672a\u8ffd\u8e64\u6a94\u6848\uff1a $ echo 'My Project' > README $ git status On branch master Your branch is up-to-date with 'origin/master'. Untracked files: (use \"git add <file>...\" to include in what will be committed) README nothing added to commit but untracked files present (use \"git add\" to track) \u4f60\u53ef\u4ee5\u770b\u5230\u65b0\u589e\u6a94\u6848 README \u5c1a\u672a\u88ab\u8ffd\u8e64\uff0c\u56e0\u70ba\u5b83\u88ab\u5217\u5728\u8f38\u51fa\u8a0a\u606f\u7684\u300cUntracked files\u300d\u6b04\u4f4d\u4e0b\u65b9\uff1b \u57fa\u672c\u4e0a\u300c\u672a\u8ffd\u8e64\u300d\u8868\u793a Git \u767c\u73fe\u9019\u500b\u6a94\u6848\u5728\u4e0a\u6b21\u7684\u5feb\u7167\uff08\u63d0\u4ea4\uff09\u4e2d\u4e26\u4e0d\u5b58\u5728\uff1bGit \u4e26\u4e0d\u6703\u5c07\u6b64\u6a94\u6848\u7d0d\u5165\u4f60\u7684\u63d0\u4ea4\u5feb\u7167\uff0c\u9664\u975e\u4f60\u660e\u78ba\u5730\u544a\u8a34 Git \u8981\u9019\u9ebc\u505a\uff1b \u8ffd\u8e64\u65b0\u7684\u6a94\u6848 \u8981\u958b\u59cb\u8ffd\u8e64\u4e00\u500b\u65b0\u7684\u6a94\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528 git add \u547d\u4ee4\uff1b \u8981\u958b\u59cb\u8ffd\u8e64 README \u6a94\u6848\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\uff1a $ git add README \u5982\u679c\u518d\u6b21\u57f7\u884c\u6aa2\u67e5\u72c0\u614b\u547d\u4ee4 $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README \u7531\u65bc\u5b83\u653e\u5728\u300cChanges to be committed\u300d\u6b04\u4f4d\u4e0b\u65b9\uff0c\u4f60\u53ef\u4ee5\u5f97\u77e5\u5b83\u5df2\u7d93\u88ab\u9810\u5b58\uff0c \u5982\u679c\u4f60\u5728\u6b64\u6642\u63d0\u4ea4\uff0c\u5728\u57f7\u884c git add \u7684\u7576\u4e0b\u6240\u52a0\u9032\u4f86\u7684\u6a94\u6848\u7248\u672c\u5c31\u6703\u88ab\u8a18\u9304\u5728\u6b77\u53f2\u5feb\u7167\u4e2d\uff1b \u9810\u5b58\u4fee\u6539\u904e\u7684\u6a94\u6848 \u8b93\u6211\u5011\u4fee\u6539\u4e00\u500b\u5df2\u8ffd\u8e64\u6a94\u6848\uff1b \u5047\u8a2d\u4f60\u4fee\u6539\u4e86\u4e00\u500b\u5148\u524d\u5df2\u8ffd\u8e64\u7684\u6a94\u6848 CONTRIBUTING.md \uff0c\u63a5\u8457\u518d\u6b21\u57f7\u884c git status \uff0c\u4f60\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u6587\u5b57\uff1a $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md CONTRIBUTING.md \u6a94\u6848\u51fa\u73fe\u5728\u300cChanges not staged for commit\u300d\u6b04\u4f4d\u4e0b\u65b9\u2014\u2014\u4ee3\u8868\u8457\u4f4d\u65bc\u5de5\u4f5c\u76ee\u9304\u7684\u5df2\u8ffd\u8e64\u6a94\u6848\u5df2\u7d93\u88ab\u4fee\u6539\uff0c\u4f46\u5c1a\u672a\u9810\u5b58\uff1b\u8981\u9810\u5b58\u8a72\u6a94\u6848\uff0c\u4f60\u53ef\u57f7\u884c git add \u547d\u4ee4\uff1b git add \u662f\u4e00\u500b\u591a\u91cd\u7528\u9014\u7684\u6307\u4ee4\u2014\u2014\u7528\u4f86\u300c\u958b\u59cb\u8ffd\u8e64\u300d\u6a94\u6848\u3001\u300c\u9810\u5b58\u300d\u6a94\u6848\u4ee5\u53ca\u505a\u4e00\u4e9b\u5176\u5b83\u7684\u4e8b\u3002 \u73fe\u5728\uff0c\u8b93\u6211\u5011\u57f7\u884c git add \u5c07 CONTRIBUTING.md \u6a94\u6848\u9810\u5b58\u8d77\u4f86\uff0c\u4e26\u518d\u5ea6\u57f7\u884c git status \uff1a $ git add CONTRIBUTING.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README modified: CONTRIBUTING.md \u9019\u5169\u500b\u6a94\u6848\u76ee\u524d\u90fd\u88ab\u9810\u5b58\uff0c\u800c\u4e14\u5c07\u6703\u6210\u70ba\u4f60\u4e0b\u6b21\u63d0\u4ea4\u7684\u5167\u5bb9\uff1b \u6b64\u6642\uff0c\u5047\u8a2d\u5728\u63d0\u4ea4\u524d\u4f60\u60f3\u8d77\u8981\u5c0d CONTRIBUTING.md \u518d\u505a\u4e00\u500b\u5c0f\u4fee\u6539\uff0c\u7136\u5f8c\uff0c\u7576\u6211\u5011\u518d\u6b21\u57f7\u884c git status\uff1a $ vim CONTRIBUTING.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README modified: CONTRIBUTING.md Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u898b\u9b3c\u4e86\uff1f \u73fe\u5728 CONTRIBUTING.md \u540c\u6642\u88ab\u5217\u5728\u5df2\u9810\u5b58\u300c\u53ca\u300d\u672a\u9810\u5b58\u3002 \u9019\u600e\u9ebc\u53ef\u80fd\uff1f \u539f\u4f86 Git \u5728\u4f60\u57f7\u884c git add \u547d\u4ee4\u6642\uff0c\u7684\u78ba\u5c07\u7576\u6642\u7684\u6a94\u6848\u5167\u5bb9\u9810\u5b58\u8d77\u4f86\uff1b \u5982\u679c\u4f60\u73fe\u5728\u63d0\u4ea4\uff0c\u6700\u5f8c\u4e00\u6b21\u57f7\u884c git add \u547d\u4ee4\u6642\uff0c\u90a3\u500b\u7576\u4e0b\u7684 CONTRIBUTING.md \u7684\u7248\u672c\u6703\u88ab\u63d0\u4ea4\uff0c\u800c\u4e0d\u662f\u5728\u63d0\u4ea4\u6642\u4f60\u5728\u5de5\u4f5c\u76ee\u9304\u6240\u770b\u5230\u7684\u6a94\u6848\u7248\u672c\u88ab\u63d0\u4ea4\uff1b \u5982\u679c\u4f60\u5728 git add \u5f8c\u4fee\u6539\u6a94\u6848\uff0c\u4f60\u5fc5\u9700\u518d\u6b21\u57f7\u884c git add \u9810\u5b58\u6700\u65b0\u7248\u7684\u6a94\u6848\uff1a $ git add CONTRIBUTING.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README modified: CONTRIBUTING.md \u7c21\u6f54\u7684\u72c0\u614b\u8f38\u51fa \u96d6\u7136 git status \u8f38\u51fa\u5167\u5bb9\u76f8\u7576\u5168\u9762\uff0c\u4f46\u4e5f\u76f8\u7576\u56c9\u55e6\uff1b Git \u53e6\u5916\u63d0\u4f9b\u4e00\u500b\u7c21\u6f54\u8f38\u51fa\u7684\u9078\u9805\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4ee5\u4e00\u7a2e\u8f03\u7cbe\u7c21\u7684\u65b9\u5f0f\u4f86\u6aa2\u8996\u4f60\u7684\u4fee\u6539\uff1b \u5982\u679c\u4f60\u57f7\u884c git status -s \u6216 git status --short \uff0c\u4f60\u53ef\u4ee5\u5f9e\u8a72\u547d\u4ee4\u5f97\u5230\u4e00\u500b\u76f8\u7576\u7c21\u55ae\u7684\u8f38\u51fa\u5167\u5bb9\uff1a $ git status -s M README MM Rakefile A lib/git.rb M lib/simplegit.rb ?? LICENSE.txt \u672a\u8ffd\u8e64\u7684\u65b0\u6a94\u6848\u5728\u958b\u982d\u88ab\u6a19\u793a\u70ba ?? \u3001\u88ab\u52a0\u5165\u9810\u5b58\u5340\u7684\u65b0\u6a94\u6848\u88ab\u6a19\u70ba A \u3001\u5df2\u4fee\u6539\u6a94\u6848\u5247\u662f M \u7b49\u7b49\u3002 \u6a19\u8a18\u6709\u4e8c\u500b\u6b04\u4f4d\u2014\u2014\u5de6\u908a\u6b04\u4f4d\u7528\u4f86\u6307\u793a\u300c\u9810\u5b58\u5340\u300d\u72c0\u614b\uff0c\u53f3\u908a\u6b04\u4f4d\u5247\u662f\u300c\u5de5\u4f5c\u76ee\u9304\u300d\u72c0\u614b\u3002 \u6240\u4ee5\u5728\u9019\u500b\u7bc4\u4f8b\u4e2d\uff0c\u5728\u5de5\u4f5c\u76ee\u9304\u4e2d\u7684\u6a94\u6848 README \u662f\u5df2\u4fee\u6539\u7684\uff0c\u4f46\u5c1a\u672a\u88ab\u9810\u5b58\uff1b\u800c lib/simplegit.rb \u6a94\u6848\u5247\u662f\u5df2\u4fee\u6539\u4e14\u5df2\u9810\u5b58\u7684\uff1b Rakefile \u5247\u662f\u66fe\u7d93\u4fee\u6539\u904e\u4e5f\u9810\u5b58\u904e\uff0c\u4f46\u4e4b\u5f8c\u53c8\u518d\u6b21\u4fee\u6539\uff0c\u6240\u4ee5\u7e3d\u5171\u6709\u4e8c\u6b21\u4fee\u6539\uff0c\u4e00\u500b\u6709\u9810\u5b58\u4e00\u500b\u6c92\u6709\u3002 \u5ffd\u7565\u4e0d\u9700\u8981\u7684\u6a94\u6848 \u901a\u5e38\u4f60\u6703\u6709\u4e00\u985e\u6a94\u6848\u4e0d\u60f3\u8b93 Git \u81ea\u52d5\u52a0\u5165\uff0c\u4e5f\u4e0d\u5e0c\u671b\u5b83\u5011\u88ab\u986f\u793a\u70ba\u672a\u8ffd\u8e64\uff0c \u9019\u4e9b\u901a\u5e38\u662f\u81ea\u52d5\u7522\u751f\u7684\u6a94\u6848\uff0c\u4f8b\u5982\uff1a\u65e5\u8a8c\u6a94\u6848\u6216\u8005\u7de8\u8b6f\u7cfb\u7d71\u7522\u751f\u7684\u6a94\u6848\uff1b \u5728\u9019\u60c5\u6cc1\u4e0b\uff0c\u4f60\u53ef\u4ee5\u65b0\u5efa\u4e00\u500b\u540d\u70ba .gitignore \u7684\u6a94\u6848\uff0c\u5728\u8a72\u6a94\u4e2d\u5217\u8209\u7b26\u5408\u9019\u4e9b\u6a94\u540d\u7684\u6a21\u5f0f\uff08pattern\uff09\u3002 \u4ee5\u4e0b\u662f\u4e00\u500b .gitignore \u7bc4\u4f8b\u6a94\u5167\u5bb9\uff1a $ cat .gitignore *.[oa] *~ \u7b2c\u4e00\u5217\u544a\u8a34 Git \u5ffd\u7565\u4efb\u4f55\u526f\u6a94\u540d\u70ba\u300c.o\u300d\u6216\u300c.a\u300d\u7684\u6a94\u6848\uff0c\u5b83\u5011\u53ef\u80fd\u662f\u7de8\u8b6f\u7cfb\u7d71\u5efa\u7f6e\u7a0b\u5f0f\u78bc\u6642\u6240\u7522\u751f\u7684\u76ee\u7684\u6a94\u53ca\u9023\u7d50\u6a94\uff1b \u7b2c\u4e8c\u5217\u544a\u8a34 Git \u5ffd\u7565\u6240\u6709\u6a94\u540d\u4ee5\u6ce2\u6d6a\u865f\uff08~\uff09\u7d50\u5c3e\u7684\u6a94\u6848\u3002 \u7de8\u5beb .gitignore \u6a94\u6848\u7684\u6a21\u5f0f\u898f\u5247\u5982\u4e0b\uff1a - \u7a7a\u767d\u5217\uff0c\u6216\u8005\u4ee5 # \u958b\u982d\u7684\u5217\u6703\u88ab\u5ffd\u7565\u3002 - \u53ef\u4f7f\u7528\u6a19\u6e96\u7684 Glob \u6a21\u5f0f\u3002 - \u4ee5\u659c\u7dda\uff08/\uff09\u958b\u982d\u4ee5\u907f\u514d\u8def\u5f91\u905e\u8ff4\u3002\uff08\u8b6f\u6ce8\uff1a\u53ea\u5ffd\u7565\u7279\u5b9a\u8def\u5f91\uff1b\u5982\u679c\u4e0d\u4ee5\u659c\u7dda\u958b\u982d\uff0c\u5247\u4e0d\u7ba1\u540c\u540d\u6a94\u6848\u6216\u540c\u540d\u8cc7\u6599\u593e\u5728\u54ea\u4e00\u5c64\u90fd\u6703\u88ab\u5ffd\u7565\u3002\uff09 - \u4ee5\u659c\u7dda\uff08/\uff09\u7d50\u5c3e\u4ee3\u8868\u662f\u76ee\u9304\u3002 - \u4ee5\u9a5a\u5606\u865f\uff08!\uff09\u958b\u982d\u8868\u793a\u5c07\u6a21\u5f0f\u898f\u5247\u53cd\u5411\u3002 Glob \u6a21\u5f0f\u5c31\u50cf\u662f Shell \u6240\u4f7f\u7528\u7684\u7c21\u5316\u7248\u6b63\u898f\u904b\u7b97\u5f0f\uff08regular expressions\uff09\uff0c\u4ee5\u4e0b\u662f\u53e6\u4e00\u500b .gitignore \u7bc4\u4f8b\u6a94\u6848\uff1a # \u4e0d\u8981\u8ffd\u8e64\u6a94\u540d\u70ba .a \u7d50\u5c3e\u7684\u6a94\u6848 *.a # \u4f46\u662f\u8981\u8ffd\u8e64 lib.a\uff0c\u5373\u4f7f\u4e0a\u9762\u5df2\u6307\u5b9a\u5ffd\u7565\u6240\u6709\u7684 .a \u6a94\u6848 !lib.a # \u53ea\u5ffd\u7565\u6839\u76ee\u9304\u4e0b\u7684 TODO \u6a94\u6848\uff0c\u4e0d\u5305\u542b\u5b50\u76ee\u9304\u4e0b\u7684 TODO /TODO # \u5ffd\u7565 build/ \u76ee\u9304\u4e0b\u6240\u6709\u6a94\u6848 build/ # \u5ffd\u7565 doc/notes.txt\uff0c\u4f46\u4e0d\u5305\u542b doc/server/arch.txt doc/*.txt # \u5ffd\u7565\u6240\u6709\u5728 doc/ \u76ee\u9304\u5e95\u4e0b\u7684 .pdf \u6a94\u6848 doc/**/*.pdf \u63d0\u793a \u5982\u679c\u4f60\u7684\u5c08\u6848\u60f3\u8981\u6709\u500b\u597d\u958b\u982d\uff0cGitHub \u5728 https://github.com/github/gitignore \u4e2d\u91dd\u5c0d\u5e7e\u5341\u7a2e\u5c08\u6848\u548c\u7a0b\u5f0f\u8a9e\u8a00\u7dad\u8b77\u4e86\u4e00\u500b\u76f8\u7576\u5b8c\u6574\u3001\u597d\u7528\u7684 .gitignore \u7bc4\u4f8b\u6a94\u6848\u5217\u8868\u3002 \u6aa2\u8996\u5df2\u9810\u5b58\u53ca\u672a\u9810\u5b58\u7684\u6a94\u6848 \u5982\u679c git status \u547d\u4ee4\u63d0\u4f9b\u7684\u8cc7\u8a0a\u5c0d\u4f60\u4f86\u8aaa\u592a\u904e\u7c21\u7565\u2014\u2014\u4f60\u8981\u60f3\u7cbe\u78ba\u5730\u77e5\u9053\u4f60\u4fee\u6539\u4e86\u4ec0\u9ebc\uff0c\u800c\u4e0d\u53ea\u662f\u90a3\u4e9b\u6a94\u6848\u88ab\u4fee\u6539\u2014\u2014\u4f60\u53ef\u4ee5\u4f7f\u7528 git diff \u547d\u4ee4\u3002 \u5047\u8a2d\u4f60\u518d\u6b21\u7de8\u8f2f\u4e26\u9810\u5b58 README \u6a94\u6848\uff0c\u63a5\u8457\u4fee\u6539 CONTRIBUTING.md \u6a94\u6848\u537b\u672a\u9810\u5b58\u5b83\uff0c \u5982\u679c\u4f60\u57f7\u884c git status \u547d\u4ee4\uff0c\u4f60\u6703\u518d\u6b21\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u8cc7\u8a0a\uff1a $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) modified: README Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u60f3\u77ad\u89e3\u5c1a\u672a\u9810\u5b58\u7684\u4fee\u6539\uff0c\u8f38\u5165\u4e0d\u5e36\u5176\u5b83\u53c3\u6578\u7684 git diff \uff1a $ git diff diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index 8ebb991..643e24f 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you're contributing in the first place, you're less likely to get feedback and have your change -merged in. +merged in. Also, split your changes into comprehensive chunks if your patch is +longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it's \u9019\u547d\u4ee4\u6703\u6bd4\u5c0d\u300c\u5de5\u4f5c\u76ee\u9304\u300d\u548c\u300c\u9810\u5b58\u5340\u300d\u4e4b\u9593\u7684\u7248\u672c\uff0c \u7136\u5f8c\u986f\u793a\u5c1a\u672a\u88ab\u5b58\u5165\u9810\u5b58\u5340\u7684\u4fee\u6539\u5167\u5bb9\u3002 \u5982\u679c\u4f60\u60f3\u6aa2\u8996\u4f60\u5df2\u7d93\u9810\u5b58\u800c\u63a5\u4e0b\u4f86\u5c07\u6703\u88ab\u63d0\u4ea4\u7684\u5167\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 git diff --staged \uff1b \u9019\u500b\u547d\u4ee4\u6bd4\u5c0d\u7684\u5c0d\u8c61\u662f\u300c\u9810\u5b58\u5340\u300d\u548c\u300c\u6700\u5f8c\u4e00\u6b21\u63d0\u4ea4\u300d\u3002 $ git diff --staged diff --git a/README b/README new file mode 100644 index 0000000..03902a1 --- /dev/null +++ b/README @@ -0,0 +1 @@ +My Project \u5f88\u91cd\u8981\u4e14\u9700\u8981\u6ce8\u610f\u7684\u4e00\u9ede\u662f git diff \u4e0d\u6703\u986f\u793a\u6700\u5f8c\u4e00\u6b21\u63d0\u4ea4\u5f8c\u7684\u6240\u6709\u8b8a\u66f4\u2014\u2014\u53ea\u6703\u986f\u793a\u672a\u9810\u5b58\u7684\u8b8a\u66f4\uff1b \u9019\u6703\u8b93\u4eba\u56f0\u60d1\uff0c\u56e0\u70ba\u5982\u679c\u4f60\u9810\u5b58\u4e86\u6240\u6709\u7684\u8b8a\u66f4\uff0c git diff \u4e0d\u6703\u8f38\u51fa\u4efb\u4f55\u5167\u5bb9\u3002 \u63d0\u4ea4\u4f60\u7684\u4fee\u6539 \u5728\u76ee\u524d\u60c5\u6cc1\u4e0b\uff0c\u5047\u8a2d\u4f60\u4e0a\u6b21\u57f7\u884c git status \u6642\uff0c\u4f60\u770b\u5230\u6240\u6709\u6a94\u6848\u90fd\u5df2\u7d93\u88ab\u9810\u5b58\uff0c\u56e0\u6b64\u4f60\u6e96\u5099\u63d0\u4ea4\u4f60\u7684\u8b8a\u66f4\u3002 \u6700\u7c21\u55ae\u7684\u63d0\u4ea4\u65b9\u5f0f\u662f\u8f38\u5165 git commit \uff1a $ git commit \u9019\u9ebc\u505a\u6703\u555f\u52d5\u4f60\u9078\u5b9a\u7684\u7de8\u8f2f\u5668\uff0c\u7de8\u8f2f\u5b8c commit \u5167\u5bb9\u904e\u5f8c\uff0c\u7576\u4f60\u95dc\u9589\u7de8\u8f2f\u5668\uff0cGit \u6703\u5229\u7528\u9019\u4e9b\u63d0\u4ea4\u8a0a\u606f\uff08\u8a3b\u89e3\u548c\u5dee\u7570\u5167\u5bb9\u6703\u88ab\u6ffe\u9664\uff09\u7522\u751f\u65b0\u7684\u63d0\u4ea4\u3002 \u53e6\u4e00\u7a2e\u65b9\u5f0f\u5247\u662f\u5728 commit \u547d\u4ee4\u7684 -m \u9078\u9805\u5f8c\u65b9\u76f4\u63a5\u8f38\u5165\u63d0\u4ea4\u8a0a\u606f\uff0c\u5982\u4e0b\uff1a $ git commit -m \"Story 182: Fix benchmarks for speed\" [master 463dc4f] Story 182: Fix benchmarks for speed 2 files changed, 2 insertions(+) create mode 100644 README \u73fe\u5728\u4f60\u5df2\u7d93\u5efa\u7acb\u4e86\u4f60\u7684\u7b2c\u4e00\u500b\u63d0\u4ea4\uff01 \u4f60\u53ef\u5f9e\u8f38\u51fa\u8a0a\u606f\u770b\u5230\u6b64\u63d0\u4ea4\u76f8\u95dc\u8cc7\u8a0a\uff1a\u63d0\u4ea4\u5230\u54ea\u500b\u5206\u652f\uff08master\uff09\u3001\u63d0\u4ea4\u7684 SHA-1 \u6821\u9a57\u78bc\uff08 463dc4f \uff09\u3001\u6709\u591a\u5c11\u6a94\u6848\u88ab\u66f4\u52d5\uff0c\u4ee5\u53ca\u7d71\u8a08\u6b64\u63d0\u4ea4\u6709\u591a\u5c11\u5217\u88ab\u65b0\u589e\u548c\u88ab\u79fb\u9664\u3002 \u7565\u904e\u9810\u5b58\u5340 Git \u63d0\u4f9b\u4e86\u4e00\u500b\u7c21\u6613\u7684\u6377\u5f91\uff0c \u5728 git commit \u547d\u4ee4\u52a0\u4e0a -a \u9078\u9805\uff0c\u4f7f Git \u5728\u63d0\u4ea4\u524d\u81ea\u52d5\u9810\u5b58\u6240\u6709\u5df2\u8ffd\u8e64\u7684\u6a94\u6848\uff0c\u8b93\u4f60\u7565\u904e git add \u6b65\u9a5f \u79fb\u9664\u6a94\u6848 \u8981\u5f9e Git \u4e2d\u522a\u9664\u4e00\u500b\u6a94\u6848\uff0c\u4f60\u9700\u8981\u5c07\u5b83\u5f9e\u5df2\u8ffd\u8e64\u6a94\u6848\u4e2d\u79fb\u9664\uff08\u66f4\u6e96\u78ba\u5730\u8aaa\uff0c\u662f\u5f9e\u9810\u5b58\u5340\u4e2d\u79fb\u9664\uff09\uff0c\u7136\u5f8c\u518d\u63d0\u4ea4\uff1b git rm \u547d\u4ee4\u53ef\u5b8c\u6210\u6b64\u5de5\u4f5c\uff0c\u5b83\u540c\u6642\u4e5f\u6703\u5c07\u8a72\u6a94\u6848\u5f9e\u5de5\u4f5c\u76ee\u9304\u4e2d\u79fb\u9664\uff0c\u5982\u6b64\u5b83\u4e4b\u5f8c\u4e5f\u4e0d\u6703\u8eab\u70ba\u672a\u8ffd\u8e64\u6a94\u6848\u800c\u88ab\u4f60\u770b\u5230\u3002 \u5982\u679c\u4f60\u50c5\u50c5\u662f\u5c07\u6a94\u6848\u5f9e\u5de5\u4f5c\u76ee\u9304\u4e2d\u79fb\u9664\uff0c\u90a3\u9ebc\u5b83\u6703\u88ab\u5217\u5728 git status \u8f38\u51fa\u5167\u5bb9\u7684\u300cChanged but not updated\u300d\uff08\u4e5f\u5c31\u662f\u300c\u672a\u9810\u5b58\u300d\uff09\u6b04\u4f4d\u4e0b\u9762\uff1a $ rm PROJECTS.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes not staged for commit: (use \"git add/rm <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) deleted: PROJECTS.md no changes added to commit (use \"git add\" and/or \"git commit -a\") \u5982\u679c\u4f60\u63a5\u8457\u57f7\u884c git rm \uff0c\u5b83\u6703\u9810\u5b58\u8a72\u6a94\u6848\u7684\u79fb\u9664\u52d5\u4f5c\uff1a $ git rm PROJECTS.md rm 'PROJECTS.md' $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) deleted: PROJECTS.md \u4e0b\u4e00\u6b21\u63d0\u4ea4\u6642\uff0c\u8a72\u6a94\u6848\u5c07\u6703\u6d88\u5931\u800c\u4e14\u4e0d\u518d\u88ab\u8ffd\u8e64\uff1b \u5982\u679c\u4f60\u4fee\u6539\u4e86\u6a94\u6848\u4e14\u5df2\u7d93\u628a\u4fee\u6539\u5167\u5bb9\u52a0\u5165\u7d22\u5f15\u4e2d\uff08\u8b6f\u6ce8\uff1a\u300c\u52a0\u5165\u7d22\u5f15\u300d\u548c\u300c\u9810\u5b58\u300d\u662f\u540c\u7fa9\u8a5e\uff09\uff0c\u4f60\u5fc5\u9700\u4f7f\u7528 -f \u9078\u9805\u624d\u80fd\u5f37\u5236\u5c07\u5b83\u79fb\u9664\uff1b \u9019\u662f\u4e00\u7a2e\u70ba\u4e86\u907f\u514d\u5df2\u8a18\u9304\u7684\u5feb\u7167\u610f\u5916\u88ab\u79fb\u9664\u5f8c\u518d\u4e5f\u7121\u6cd5\u4f7f\u7528 Git \u5fa9\u539f\u7684\u4fdd\u8b77\u6a5f\u5236\u3002 \u53e6\u4e00\u500b\u6709\u7528\u7684\u6280\u5de7\u662f\u4fdd\u7559\u5de5\u4f5c\u76ee\u9304\u7684\u6a94\u6848\uff0c\u4f46\u5c07\u5b83\u5f9e\u9810\u5b58\u5340\u4e2d\u79fb\u9664\uff1b \u63db\u53e5\u8a71\u8aaa\uff0c\u4f60\u6216\u8a31\u60f3\u4fdd\u7559\u5728\u78c1\u789f\u6a5f\u4e0a\u7684\u6a94\u6848\u4f46\u4e0d\u5e0c\u671b Git \u518d\u7e7c\u7e8c\u8ffd\u8e64\u5b83\uff1b \u7576\u4f60\u5fd8\u8a18\u5c07\u67d0\u4e9b\u6a94\u6848\u52a0\u5230 .gitignore \u4e2d\u800c\u4e14\u4e0d\u5c0f\u5fc3\u9810\u5b58\u5b83\u7684\u6642\u5019\u6703\u7279\u5225\u7528\u6709\uff0c\u50cf\u662f\u4e0d\u5c0f\u5fc3\u9810\u5b58\u4e86\u4e00\u500b\u5927\u7684\u65e5\u8a8c\u6a94\u6848\u6216\u8005\u4e00\u5806 .a \u5df2\u7de8\u8b6f\u6a94\u6848\u3002 \u52a0\u4e0a --cached \u9078\u9805\u53ef\u505a\u5230\u9019\u4ef6\u4e8b\uff1a $ git rm --cached README \u79fb\u52d5\u6a94\u6848 Git \u4e0d\u50cf\u5176\u5b83 VCS \u7cfb\u7d71\uff0c\u5b83\u4e26\u4e0d\u6703\u660e\u78ba\u5730\u8ffd\u8e64\u6a94\u6848\u7684\u79fb\u52d5\uff1b \u5982\u679c\u4f60\u5728 Git \u4e2d\u91cd\u65b0\u547d\u540d\u4e00\u500b\u6a94\u6848\uff0c\u4e26\u4e0d\u6703\u6709\u4efb\u4f55 Git \u5f8c\u8a2d\u8cc7\u6599\u8a18\u9304\u9019\u500b\u52d5\u4f5c\u4ee5\u8fa8\u5225\u4f60\u66fe\u7d93\u91cd\u65b0\u547d\u540d\u904e\u6a94\u6848\uff1b \u7136\u800c Git \u53ef\u4ee5\u5728\u6a94\u6848\u79fb\u52d5\u5f8c\u5f88\u8070\u660e\u5730\u5c07\u5b83\u5011\u627e\u51fa\u4f86\u2014\u2014\u6211\u5011\u7a0d\u5f8c\u6703\u5c0d\u5075\u6e2c\u6a94\u6848\u7684\u79fb\u52d5\u518d\u591a\u505a\u4e00\u9ede\u8aaa\u660e\u3002 \u56e0\u6b64 Git \u6709\u4e00\u500b mv \u547d\u4ee4\u53cd\u800c\u6709\u9ede\u4ee4\u4eba\u56f0\u60d1\uff1b \u5982\u679c\u4f60\u60f3\u8981\u5728 Git \u4e2d\u91cd\u65b0\u547d\u540d\u4e00\u500b\u6a94\u6848\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ git mv file_from file_to \u4e8b\u5be6\u4e0a\uff0c\u5982\u679c\u4f60\u57f7\u884c\u985e\u4f3c\u4ee5\u4e0b\u7684\u52d5\u4f5c\u7136\u5f8c\u6aa2\u8996\u4e00\u4e0b\u72c0\u614b\uff0c\u4f60\u5c07\u770b\u5230 Git \u5c07\u8a72\u6a94\u6848\u8996\u70ba\u4e00\u500b\u91cd\u65b0\u547d\u540d\u904e\u7684\u6a94\u6848\uff1a $ git mv README.md README $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README \u5176\u5be6\uff0c\u5b83\u76f8\u7576\u65bc\u57f7\u884c\u4e0b\u5217\u547d\u4ee4\uff1a $ mv README.md README $ git rm README.md $ git add README","title":"Clone recording changes"},{"location":"Git/clone_recording_changes/#repository","text":"\u4f60\u6709\u5169\u7a2e\u4e3b\u8981\u65b9\u6cd5\u4f86\u53d6\u5f97\u4e00\u500b Git \u5009\u5132\u3002 \u7b2c\u4e00\u7a2e\u662f\u5c07\u73fe\u6709\u7684\u5c08\u6848\u6216\u8005\u8cc7\u6599\u593e\u532f\u5165 Git\uff1b \u7b2c\u4e8c\u7a2e\u662f\u5f9e\u5176\u5b83\u4f3a\u670d\u5668\u514b\u9686\uff08clone\uff09\u4e00\u4efd\u73fe\u6709\u7684 Git \u5009\u5132\u3002","title":"\u53d6\u5f97\u4e00\u500b\u5009\u5132 (repository)"},{"location":"Git/clone_recording_changes/#_1","text":"\u82e5\u4f60\u6253\u7b97\u4f7f\u7528 Git \u4f86\u8ffd\u8e64\uff08track\uff09\u73fe\u6709\u7684\u5c08\u6848\uff0c\u53ea\u9700\u8981\u9032\u5165\u8a72\u5c08\u6848\u7684\u8cc7\u6599\u593e\u4e26\u57f7\u884c\uff1a $ git init \u9019\u500b\u547d\u4ee4\u5c07\u6703\u5efa\u7acb\u4e00\u500b\u540d\u70ba .git \u7684\u5b50\u8cc7\u6599\u593e\uff0c\u5176\u4e2d\u5305\u542b Git \u6240\u6709\u5fc5\u9700\u7684\u5009\u5132\u6a94\u6848\uff0c\u4e5f\u5c31\u662f Git \u5009\u5132\u7684\u9aa8\u67b6\u3002 \u5230\u73fe\u5728\u9019\u6b65\u9a5f\u70ba\u6b62\uff0c\u5009\u5132\u9810\u8a2d\u6c92\u6709\u8ffd\u8e64\u4efb\u4f55\u6a94\u6848\u3002 \u63a5\u4e0b\u4f86\u4f60\u53ef\u4ee5\u901a\u904e\u591a\u6b21 git add \u6307\u4ee4\u4f86\u8ffd\u8e64\u5b8c\u6240\u6709\u4f60\u60f3\u8981\u8ffd\u8e64\u7684\u6a94\u6848\uff0c\u7136\u5f8c\u57f7\u884c git commit \u63d0\u4ea4\uff1a $ git add *.c $ git add LICENSE $ git commit -m 'initial project version'","title":"\u5728\u73fe\u6709\u8cc7\u6599\u593e\u4e2d\u521d\u59cb\u5316\u5009\u5132"},{"location":"Git/clone_recording_changes/#_2","text":"\u514b\u9686\u5009\u5eab\u7684\u547d\u4ee4\u683c\u5f0f\u662f git clone [url] \u3002 \u4f8b\u5982\uff1a\u82e5\u4f60\u60f3\u514b\u9686\u540d\u70ba libgit2 \u7684 Git linkable library\uff0c\u53ef\u4ee5\u57f7\u884c\u4e0b\u5217\u547d\u4ee4\uff1a $ git clone https://github.com/libgit2/libgit2","title":"\u514b\u9686\u73fe\u6709\u7684\u5009\u5132"},{"location":"Git/clone_recording_changes/#_3","text":"\u73fe\u5728\u4f60\u7684\u624b\u4e0a\u6709\u4e86\u4e00\u500b\u8ca8\u771f\u50f9\u5be6\u7684 Git \u7248\u672c\u5eab\u548c\u9019\u500b\u5c08\u6848\u4e2d\u6240\u6709\u6a94\u6848\u7684\u6aa2\u51fa\uff08checkout\uff09\u6216\u5de5\u4f5c\u8907\u672c\uff08working copy\uff09\uff0c \u6bcf\u7576\u4f60\u4fee\u6539\u6a94\u6848\u5230\u4e00\u500b\u4f60\u60f3\u8a18\u9304\u5b83\u7684\u968e\u6bb5\u6642\uff0c\u4f60\u5c31\u9700\u8981\u63d0\u4ea4\uff08commit\uff09\u9019\u4e9b\u8b8a\u66f4\u7684\u5feb\u7167\u5230\u7248\u672c\u5eab\u4e2d\u3002 \u8acb\u8a18\u4f4f\uff0c\u4f60\u5de5\u4f5c\u76ee\u9304\u4e0b\u7684\u6bcf\u500b\u6a94\u6848\u4e0d\u5916\u4e4e\u5169\u7a2e\u72c0\u614b\uff1a\u5df2\u8ffd\u8e64\u3001\u672a\u8ffd\u8e64\u3002\u300c\u5df2\u8ffd\u8e64\u300d\u6a94\u6848\u662f\u6307\u90a3\u4e9b\u5728\u4e0a\u6b21\u5feb\u7167\u4e2d\u7684\u6a94\u6848\uff1a\u5b83\u5011\u7684\u72c0\u614b\u53ef\u80fd\u662f\u300c\u672a\u4fee\u6539\u300d\u3001\u300c\u5df2\u4fee\u6539\u300d\u3001\u300c\u5df2\u9810\u5b58\uff08staged\uff09\u300d\uff1b \u300c\u672a\u8ffd\u8e64\u300d\u5247\u662f\u5176\u5b83\u4ee5\u5916\u7684\u6a94\u6848\u2014\u2014\u5728\u5de5\u4f5c\u76ee\u9304\u4e2d\uff0c\u537b\u4e0d\u5305\u542b\u5728\u4e0a\u6b21\u7684\u5feb\u7167\u4e2d\uff0c\u4e5f\u4e0d\u5728\u9810\u5b58\u5340\uff08staging area\uff09\u4e2d\u7684\u4efb\u4f55\u6a94\u6848\uff1b \u7576\u4f60\u7b2c\u4e00\u6b21\u514b\u9686\uff08clone\uff09\u4e00\u500b\u7248\u672c\u5eab\u6642\uff0c\u6240\u6709\u6a94\u6848\u90fd\u662f\u300c\u5df2\u8ffd\u8e64\u300d\u4e14\u300c\u672a\u4fee\u6539\u300d\uff0c\u56e0\u70ba Git \u525b\u525b\u6aa2\u51fa\u5b83\u5011\u4e26\u4e14\u4f60\u5c1a\u672a\u7de8\u8f2f\u904e\u4efb\u4f55\u6a94\u6848\u3002 \u96a8\u8457\u4f60\u7de8\u8f2f\u67d0\u4e9b\u6a94\u6848\uff0cGit \u6703\u8996\u5b83\u5011\u70ba\u300c\u5df2\u4fee\u6539\u300d\uff0c\u56e0\u70ba\u81ea\u5f9e\u4e0a\u6b21\u63d0\u4ea4\u4ee5\u4f86\u4f60\u5df2\u7d93\u66f4\u52d5\u904e\u5b83\u5011\uff1b \u4f60\u9810\u5b58\uff08stage\uff09\u9019\u4e9b\u5df2\u4fee\u6539\u6a94\u6848\uff0c\u7136\u5f8c\u63d0\u4ea4\u6240\u6709\u5df2\u9810\u5b58\u7684\u4fee\u6539\u5167\u5bb9\uff0c\u63a5\u8457\u91cd\u8986\u9019\u500b\u5faa\u74b0\u3002","title":"\u7d00\u9304\u8b8a\u66f4\u5230\u7248\u672c\u5eab\u4e2d"},{"location":"Git/clone_recording_changes/#_4","text":"git status \u547d\u4ee4\u662f\u7528\u4f86\u5075\u6e2c\u54ea\u4e9b\u6a94\u6848\u8655\u5728\u4ec0\u9ebc\u6a23\u7684\u72c0\u614b\u4e0b\u7684\u4e3b\u8981\u5de5\u5177\uff1b \u5982\u679c\u4f60\u5728\u514b\u9686\u4e4b\u5f8c\u76f4\u63a5\u57f7\u884c\u8a72\u547d\u4ee4\uff0c\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u5167\u5bb9\uff1a $ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean \u9019\u610f\u5473\u8457\u4f60\u6709\u4e00\u500b\u4e7e\u6de8\u7684\u5de5\u4f5c\u76ee\u9304\u2014\u2014\u63db\u53e5\u8a71\u8aaa\uff0c\u5df2\u8ffd\u8e64\u7684\u6a94\u6848\u6c92\u6709\u88ab\u4fee\u6539\uff1b Git \u4e5f\u6c92\u6709\u770b\u5230\u4efb\u4f55\u672a\u8ffd\u8e64\u6a94\u6848\uff0c\u5426\u5247\u5b83\u5011\u6703\u5728\u9019\u88e1\u88ab\u5217\u51fa\u4f86\uff1b \u5047\u8a2d\u4f60\u5728\u5c08\u6848\u4e2d\u65b0\u589e\u4e00\u500b\u6a94\u6848\uff0c\u4f8b\u5982\uff1a\u4e00\u500b\u7c21\u55ae\u7684 README \u6a94\u6848\uff1b \u5982\u679c\u8a72\u6a94\u6848\u5148\u524d\u4e26\u4e0d\u5b58\u5728\uff0c\u57f7\u884c git status \u547d\u4ee4\u5f8c\uff0c\u4f60\u6703\u770b\u5230\u672a\u8ffd\u8e64\u6a94\u6848\uff1a $ echo 'My Project' > README $ git status On branch master Your branch is up-to-date with 'origin/master'. Untracked files: (use \"git add <file>...\" to include in what will be committed) README nothing added to commit but untracked files present (use \"git add\" to track) \u4f60\u53ef\u4ee5\u770b\u5230\u65b0\u589e\u6a94\u6848 README \u5c1a\u672a\u88ab\u8ffd\u8e64\uff0c\u56e0\u70ba\u5b83\u88ab\u5217\u5728\u8f38\u51fa\u8a0a\u606f\u7684\u300cUntracked files\u300d\u6b04\u4f4d\u4e0b\u65b9\uff1b \u57fa\u672c\u4e0a\u300c\u672a\u8ffd\u8e64\u300d\u8868\u793a Git \u767c\u73fe\u9019\u500b\u6a94\u6848\u5728\u4e0a\u6b21\u7684\u5feb\u7167\uff08\u63d0\u4ea4\uff09\u4e2d\u4e26\u4e0d\u5b58\u5728\uff1bGit \u4e26\u4e0d\u6703\u5c07\u6b64\u6a94\u6848\u7d0d\u5165\u4f60\u7684\u63d0\u4ea4\u5feb\u7167\uff0c\u9664\u975e\u4f60\u660e\u78ba\u5730\u544a\u8a34 Git \u8981\u9019\u9ebc\u505a\uff1b","title":"\u6aa2\u67e5\u4f60\u7684\u6a94\u6848\u72c0\u614b"},{"location":"Git/clone_recording_changes/#_5","text":"\u8981\u958b\u59cb\u8ffd\u8e64\u4e00\u500b\u65b0\u7684\u6a94\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528 git add \u547d\u4ee4\uff1b \u8981\u958b\u59cb\u8ffd\u8e64 README \u6a94\u6848\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\uff1a $ git add README \u5982\u679c\u518d\u6b21\u57f7\u884c\u6aa2\u67e5\u72c0\u614b\u547d\u4ee4 $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README \u7531\u65bc\u5b83\u653e\u5728\u300cChanges to be committed\u300d\u6b04\u4f4d\u4e0b\u65b9\uff0c\u4f60\u53ef\u4ee5\u5f97\u77e5\u5b83\u5df2\u7d93\u88ab\u9810\u5b58\uff0c \u5982\u679c\u4f60\u5728\u6b64\u6642\u63d0\u4ea4\uff0c\u5728\u57f7\u884c git add \u7684\u7576\u4e0b\u6240\u52a0\u9032\u4f86\u7684\u6a94\u6848\u7248\u672c\u5c31\u6703\u88ab\u8a18\u9304\u5728\u6b77\u53f2\u5feb\u7167\u4e2d\uff1b","title":"\u8ffd\u8e64\u65b0\u7684\u6a94\u6848"},{"location":"Git/clone_recording_changes/#_6","text":"\u8b93\u6211\u5011\u4fee\u6539\u4e00\u500b\u5df2\u8ffd\u8e64\u6a94\u6848\uff1b \u5047\u8a2d\u4f60\u4fee\u6539\u4e86\u4e00\u500b\u5148\u524d\u5df2\u8ffd\u8e64\u7684\u6a94\u6848 CONTRIBUTING.md \uff0c\u63a5\u8457\u518d\u6b21\u57f7\u884c git status \uff0c\u4f60\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u6587\u5b57\uff1a $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md CONTRIBUTING.md \u6a94\u6848\u51fa\u73fe\u5728\u300cChanges not staged for commit\u300d\u6b04\u4f4d\u4e0b\u65b9\u2014\u2014\u4ee3\u8868\u8457\u4f4d\u65bc\u5de5\u4f5c\u76ee\u9304\u7684\u5df2\u8ffd\u8e64\u6a94\u6848\u5df2\u7d93\u88ab\u4fee\u6539\uff0c\u4f46\u5c1a\u672a\u9810\u5b58\uff1b\u8981\u9810\u5b58\u8a72\u6a94\u6848\uff0c\u4f60\u53ef\u57f7\u884c git add \u547d\u4ee4\uff1b git add \u662f\u4e00\u500b\u591a\u91cd\u7528\u9014\u7684\u6307\u4ee4\u2014\u2014\u7528\u4f86\u300c\u958b\u59cb\u8ffd\u8e64\u300d\u6a94\u6848\u3001\u300c\u9810\u5b58\u300d\u6a94\u6848\u4ee5\u53ca\u505a\u4e00\u4e9b\u5176\u5b83\u7684\u4e8b\u3002 \u73fe\u5728\uff0c\u8b93\u6211\u5011\u57f7\u884c git add \u5c07 CONTRIBUTING.md \u6a94\u6848\u9810\u5b58\u8d77\u4f86\uff0c\u4e26\u518d\u5ea6\u57f7\u884c git status \uff1a $ git add CONTRIBUTING.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README modified: CONTRIBUTING.md \u9019\u5169\u500b\u6a94\u6848\u76ee\u524d\u90fd\u88ab\u9810\u5b58\uff0c\u800c\u4e14\u5c07\u6703\u6210\u70ba\u4f60\u4e0b\u6b21\u63d0\u4ea4\u7684\u5167\u5bb9\uff1b \u6b64\u6642\uff0c\u5047\u8a2d\u5728\u63d0\u4ea4\u524d\u4f60\u60f3\u8d77\u8981\u5c0d CONTRIBUTING.md \u518d\u505a\u4e00\u500b\u5c0f\u4fee\u6539\uff0c\u7136\u5f8c\uff0c\u7576\u6211\u5011\u518d\u6b21\u57f7\u884c git status\uff1a $ vim CONTRIBUTING.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README modified: CONTRIBUTING.md Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u898b\u9b3c\u4e86\uff1f \u73fe\u5728 CONTRIBUTING.md \u540c\u6642\u88ab\u5217\u5728\u5df2\u9810\u5b58\u300c\u53ca\u300d\u672a\u9810\u5b58\u3002 \u9019\u600e\u9ebc\u53ef\u80fd\uff1f \u539f\u4f86 Git \u5728\u4f60\u57f7\u884c git add \u547d\u4ee4\u6642\uff0c\u7684\u78ba\u5c07\u7576\u6642\u7684\u6a94\u6848\u5167\u5bb9\u9810\u5b58\u8d77\u4f86\uff1b \u5982\u679c\u4f60\u73fe\u5728\u63d0\u4ea4\uff0c\u6700\u5f8c\u4e00\u6b21\u57f7\u884c git add \u547d\u4ee4\u6642\uff0c\u90a3\u500b\u7576\u4e0b\u7684 CONTRIBUTING.md \u7684\u7248\u672c\u6703\u88ab\u63d0\u4ea4\uff0c\u800c\u4e0d\u662f\u5728\u63d0\u4ea4\u6642\u4f60\u5728\u5de5\u4f5c\u76ee\u9304\u6240\u770b\u5230\u7684\u6a94\u6848\u7248\u672c\u88ab\u63d0\u4ea4\uff1b \u5982\u679c\u4f60\u5728 git add \u5f8c\u4fee\u6539\u6a94\u6848\uff0c\u4f60\u5fc5\u9700\u518d\u6b21\u57f7\u884c git add \u9810\u5b58\u6700\u65b0\u7248\u7684\u6a94\u6848\uff1a $ git add CONTRIBUTING.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) new file: README modified: CONTRIBUTING.md","title":"\u9810\u5b58\u4fee\u6539\u904e\u7684\u6a94\u6848"},{"location":"Git/clone_recording_changes/#_7","text":"\u96d6\u7136 git status \u8f38\u51fa\u5167\u5bb9\u76f8\u7576\u5168\u9762\uff0c\u4f46\u4e5f\u76f8\u7576\u56c9\u55e6\uff1b Git \u53e6\u5916\u63d0\u4f9b\u4e00\u500b\u7c21\u6f54\u8f38\u51fa\u7684\u9078\u9805\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4ee5\u4e00\u7a2e\u8f03\u7cbe\u7c21\u7684\u65b9\u5f0f\u4f86\u6aa2\u8996\u4f60\u7684\u4fee\u6539\uff1b \u5982\u679c\u4f60\u57f7\u884c git status -s \u6216 git status --short \uff0c\u4f60\u53ef\u4ee5\u5f9e\u8a72\u547d\u4ee4\u5f97\u5230\u4e00\u500b\u76f8\u7576\u7c21\u55ae\u7684\u8f38\u51fa\u5167\u5bb9\uff1a $ git status -s M README MM Rakefile A lib/git.rb M lib/simplegit.rb ?? LICENSE.txt \u672a\u8ffd\u8e64\u7684\u65b0\u6a94\u6848\u5728\u958b\u982d\u88ab\u6a19\u793a\u70ba ?? \u3001\u88ab\u52a0\u5165\u9810\u5b58\u5340\u7684\u65b0\u6a94\u6848\u88ab\u6a19\u70ba A \u3001\u5df2\u4fee\u6539\u6a94\u6848\u5247\u662f M \u7b49\u7b49\u3002 \u6a19\u8a18\u6709\u4e8c\u500b\u6b04\u4f4d\u2014\u2014\u5de6\u908a\u6b04\u4f4d\u7528\u4f86\u6307\u793a\u300c\u9810\u5b58\u5340\u300d\u72c0\u614b\uff0c\u53f3\u908a\u6b04\u4f4d\u5247\u662f\u300c\u5de5\u4f5c\u76ee\u9304\u300d\u72c0\u614b\u3002 \u6240\u4ee5\u5728\u9019\u500b\u7bc4\u4f8b\u4e2d\uff0c\u5728\u5de5\u4f5c\u76ee\u9304\u4e2d\u7684\u6a94\u6848 README \u662f\u5df2\u4fee\u6539\u7684\uff0c\u4f46\u5c1a\u672a\u88ab\u9810\u5b58\uff1b\u800c lib/simplegit.rb \u6a94\u6848\u5247\u662f\u5df2\u4fee\u6539\u4e14\u5df2\u9810\u5b58\u7684\uff1b Rakefile \u5247\u662f\u66fe\u7d93\u4fee\u6539\u904e\u4e5f\u9810\u5b58\u904e\uff0c\u4f46\u4e4b\u5f8c\u53c8\u518d\u6b21\u4fee\u6539\uff0c\u6240\u4ee5\u7e3d\u5171\u6709\u4e8c\u6b21\u4fee\u6539\uff0c\u4e00\u500b\u6709\u9810\u5b58\u4e00\u500b\u6c92\u6709\u3002","title":"\u7c21\u6f54\u7684\u72c0\u614b\u8f38\u51fa"},{"location":"Git/clone_recording_changes/#_8","text":"\u901a\u5e38\u4f60\u6703\u6709\u4e00\u985e\u6a94\u6848\u4e0d\u60f3\u8b93 Git \u81ea\u52d5\u52a0\u5165\uff0c\u4e5f\u4e0d\u5e0c\u671b\u5b83\u5011\u88ab\u986f\u793a\u70ba\u672a\u8ffd\u8e64\uff0c \u9019\u4e9b\u901a\u5e38\u662f\u81ea\u52d5\u7522\u751f\u7684\u6a94\u6848\uff0c\u4f8b\u5982\uff1a\u65e5\u8a8c\u6a94\u6848\u6216\u8005\u7de8\u8b6f\u7cfb\u7d71\u7522\u751f\u7684\u6a94\u6848\uff1b \u5728\u9019\u60c5\u6cc1\u4e0b\uff0c\u4f60\u53ef\u4ee5\u65b0\u5efa\u4e00\u500b\u540d\u70ba .gitignore \u7684\u6a94\u6848\uff0c\u5728\u8a72\u6a94\u4e2d\u5217\u8209\u7b26\u5408\u9019\u4e9b\u6a94\u540d\u7684\u6a21\u5f0f\uff08pattern\uff09\u3002 \u4ee5\u4e0b\u662f\u4e00\u500b .gitignore \u7bc4\u4f8b\u6a94\u5167\u5bb9\uff1a $ cat .gitignore *.[oa] *~ \u7b2c\u4e00\u5217\u544a\u8a34 Git \u5ffd\u7565\u4efb\u4f55\u526f\u6a94\u540d\u70ba\u300c.o\u300d\u6216\u300c.a\u300d\u7684\u6a94\u6848\uff0c\u5b83\u5011\u53ef\u80fd\u662f\u7de8\u8b6f\u7cfb\u7d71\u5efa\u7f6e\u7a0b\u5f0f\u78bc\u6642\u6240\u7522\u751f\u7684\u76ee\u7684\u6a94\u53ca\u9023\u7d50\u6a94\uff1b \u7b2c\u4e8c\u5217\u544a\u8a34 Git \u5ffd\u7565\u6240\u6709\u6a94\u540d\u4ee5\u6ce2\u6d6a\u865f\uff08~\uff09\u7d50\u5c3e\u7684\u6a94\u6848\u3002 \u7de8\u5beb .gitignore \u6a94\u6848\u7684\u6a21\u5f0f\u898f\u5247\u5982\u4e0b\uff1a - \u7a7a\u767d\u5217\uff0c\u6216\u8005\u4ee5 # \u958b\u982d\u7684\u5217\u6703\u88ab\u5ffd\u7565\u3002 - \u53ef\u4f7f\u7528\u6a19\u6e96\u7684 Glob \u6a21\u5f0f\u3002 - \u4ee5\u659c\u7dda\uff08/\uff09\u958b\u982d\u4ee5\u907f\u514d\u8def\u5f91\u905e\u8ff4\u3002\uff08\u8b6f\u6ce8\uff1a\u53ea\u5ffd\u7565\u7279\u5b9a\u8def\u5f91\uff1b\u5982\u679c\u4e0d\u4ee5\u659c\u7dda\u958b\u982d\uff0c\u5247\u4e0d\u7ba1\u540c\u540d\u6a94\u6848\u6216\u540c\u540d\u8cc7\u6599\u593e\u5728\u54ea\u4e00\u5c64\u90fd\u6703\u88ab\u5ffd\u7565\u3002\uff09 - \u4ee5\u659c\u7dda\uff08/\uff09\u7d50\u5c3e\u4ee3\u8868\u662f\u76ee\u9304\u3002 - \u4ee5\u9a5a\u5606\u865f\uff08!\uff09\u958b\u982d\u8868\u793a\u5c07\u6a21\u5f0f\u898f\u5247\u53cd\u5411\u3002 Glob \u6a21\u5f0f\u5c31\u50cf\u662f Shell \u6240\u4f7f\u7528\u7684\u7c21\u5316\u7248\u6b63\u898f\u904b\u7b97\u5f0f\uff08regular expressions\uff09\uff0c\u4ee5\u4e0b\u662f\u53e6\u4e00\u500b .gitignore \u7bc4\u4f8b\u6a94\u6848\uff1a # \u4e0d\u8981\u8ffd\u8e64\u6a94\u540d\u70ba .a \u7d50\u5c3e\u7684\u6a94\u6848 *.a # \u4f46\u662f\u8981\u8ffd\u8e64 lib.a\uff0c\u5373\u4f7f\u4e0a\u9762\u5df2\u6307\u5b9a\u5ffd\u7565\u6240\u6709\u7684 .a \u6a94\u6848 !lib.a # \u53ea\u5ffd\u7565\u6839\u76ee\u9304\u4e0b\u7684 TODO \u6a94\u6848\uff0c\u4e0d\u5305\u542b\u5b50\u76ee\u9304\u4e0b\u7684 TODO /TODO # \u5ffd\u7565 build/ \u76ee\u9304\u4e0b\u6240\u6709\u6a94\u6848 build/ # \u5ffd\u7565 doc/notes.txt\uff0c\u4f46\u4e0d\u5305\u542b doc/server/arch.txt doc/*.txt # \u5ffd\u7565\u6240\u6709\u5728 doc/ \u76ee\u9304\u5e95\u4e0b\u7684 .pdf \u6a94\u6848 doc/**/*.pdf","title":"\u5ffd\u7565\u4e0d\u9700\u8981\u7684\u6a94\u6848"},{"location":"Git/clone_recording_changes/#_9","text":"\u5982\u679c\u4f60\u7684\u5c08\u6848\u60f3\u8981\u6709\u500b\u597d\u958b\u982d\uff0cGitHub \u5728 https://github.com/github/gitignore \u4e2d\u91dd\u5c0d\u5e7e\u5341\u7a2e\u5c08\u6848\u548c\u7a0b\u5f0f\u8a9e\u8a00\u7dad\u8b77\u4e86\u4e00\u500b\u76f8\u7576\u5b8c\u6574\u3001\u597d\u7528\u7684 .gitignore \u7bc4\u4f8b\u6a94\u6848\u5217\u8868\u3002","title":"\u63d0\u793a"},{"location":"Git/clone_recording_changes/#_10","text":"\u5982\u679c git status \u547d\u4ee4\u63d0\u4f9b\u7684\u8cc7\u8a0a\u5c0d\u4f60\u4f86\u8aaa\u592a\u904e\u7c21\u7565\u2014\u2014\u4f60\u8981\u60f3\u7cbe\u78ba\u5730\u77e5\u9053\u4f60\u4fee\u6539\u4e86\u4ec0\u9ebc\uff0c\u800c\u4e0d\u53ea\u662f\u90a3\u4e9b\u6a94\u6848\u88ab\u4fee\u6539\u2014\u2014\u4f60\u53ef\u4ee5\u4f7f\u7528 git diff \u547d\u4ee4\u3002 \u5047\u8a2d\u4f60\u518d\u6b21\u7de8\u8f2f\u4e26\u9810\u5b58 README \u6a94\u6848\uff0c\u63a5\u8457\u4fee\u6539 CONTRIBUTING.md \u6a94\u6848\u537b\u672a\u9810\u5b58\u5b83\uff0c \u5982\u679c\u4f60\u57f7\u884c git status \u547d\u4ee4\uff0c\u4f60\u6703\u518d\u6b21\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u8cc7\u8a0a\uff1a $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) modified: README Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u60f3\u77ad\u89e3\u5c1a\u672a\u9810\u5b58\u7684\u4fee\u6539\uff0c\u8f38\u5165\u4e0d\u5e36\u5176\u5b83\u53c3\u6578\u7684 git diff \uff1a $ git diff diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md index 8ebb991..643e24f 100644 --- a/CONTRIBUTING.md +++ b/CONTRIBUTING.md @@ -65,7 +65,8 @@ branch directly, things can get messy. Please include a nice description of your changes when you submit your PR; if we have to read the whole diff to figure out why you're contributing in the first place, you're less likely to get feedback and have your change -merged in. +merged in. Also, split your changes into comprehensive chunks if your patch is +longer than a dozen lines. If you are starting to work on a particular area, feel free to submit a PR that highlights your work in progress (and note in the PR title that it's \u9019\u547d\u4ee4\u6703\u6bd4\u5c0d\u300c\u5de5\u4f5c\u76ee\u9304\u300d\u548c\u300c\u9810\u5b58\u5340\u300d\u4e4b\u9593\u7684\u7248\u672c\uff0c \u7136\u5f8c\u986f\u793a\u5c1a\u672a\u88ab\u5b58\u5165\u9810\u5b58\u5340\u7684\u4fee\u6539\u5167\u5bb9\u3002 \u5982\u679c\u4f60\u60f3\u6aa2\u8996\u4f60\u5df2\u7d93\u9810\u5b58\u800c\u63a5\u4e0b\u4f86\u5c07\u6703\u88ab\u63d0\u4ea4\u7684\u5167\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 git diff --staged \uff1b \u9019\u500b\u547d\u4ee4\u6bd4\u5c0d\u7684\u5c0d\u8c61\u662f\u300c\u9810\u5b58\u5340\u300d\u548c\u300c\u6700\u5f8c\u4e00\u6b21\u63d0\u4ea4\u300d\u3002 $ git diff --staged diff --git a/README b/README new file mode 100644 index 0000000..03902a1 --- /dev/null +++ b/README @@ -0,0 +1 @@ +My Project \u5f88\u91cd\u8981\u4e14\u9700\u8981\u6ce8\u610f\u7684\u4e00\u9ede\u662f git diff \u4e0d\u6703\u986f\u793a\u6700\u5f8c\u4e00\u6b21\u63d0\u4ea4\u5f8c\u7684\u6240\u6709\u8b8a\u66f4\u2014\u2014\u53ea\u6703\u986f\u793a\u672a\u9810\u5b58\u7684\u8b8a\u66f4\uff1b \u9019\u6703\u8b93\u4eba\u56f0\u60d1\uff0c\u56e0\u70ba\u5982\u679c\u4f60\u9810\u5b58\u4e86\u6240\u6709\u7684\u8b8a\u66f4\uff0c git diff \u4e0d\u6703\u8f38\u51fa\u4efb\u4f55\u5167\u5bb9\u3002","title":"\u6aa2\u8996\u5df2\u9810\u5b58\u53ca\u672a\u9810\u5b58\u7684\u6a94\u6848"},{"location":"Git/clone_recording_changes/#_11","text":"\u5728\u76ee\u524d\u60c5\u6cc1\u4e0b\uff0c\u5047\u8a2d\u4f60\u4e0a\u6b21\u57f7\u884c git status \u6642\uff0c\u4f60\u770b\u5230\u6240\u6709\u6a94\u6848\u90fd\u5df2\u7d93\u88ab\u9810\u5b58\uff0c\u56e0\u6b64\u4f60\u6e96\u5099\u63d0\u4ea4\u4f60\u7684\u8b8a\u66f4\u3002 \u6700\u7c21\u55ae\u7684\u63d0\u4ea4\u65b9\u5f0f\u662f\u8f38\u5165 git commit \uff1a $ git commit \u9019\u9ebc\u505a\u6703\u555f\u52d5\u4f60\u9078\u5b9a\u7684\u7de8\u8f2f\u5668\uff0c\u7de8\u8f2f\u5b8c commit \u5167\u5bb9\u904e\u5f8c\uff0c\u7576\u4f60\u95dc\u9589\u7de8\u8f2f\u5668\uff0cGit \u6703\u5229\u7528\u9019\u4e9b\u63d0\u4ea4\u8a0a\u606f\uff08\u8a3b\u89e3\u548c\u5dee\u7570\u5167\u5bb9\u6703\u88ab\u6ffe\u9664\uff09\u7522\u751f\u65b0\u7684\u63d0\u4ea4\u3002 \u53e6\u4e00\u7a2e\u65b9\u5f0f\u5247\u662f\u5728 commit \u547d\u4ee4\u7684 -m \u9078\u9805\u5f8c\u65b9\u76f4\u63a5\u8f38\u5165\u63d0\u4ea4\u8a0a\u606f\uff0c\u5982\u4e0b\uff1a $ git commit -m \"Story 182: Fix benchmarks for speed\" [master 463dc4f] Story 182: Fix benchmarks for speed 2 files changed, 2 insertions(+) create mode 100644 README \u73fe\u5728\u4f60\u5df2\u7d93\u5efa\u7acb\u4e86\u4f60\u7684\u7b2c\u4e00\u500b\u63d0\u4ea4\uff01 \u4f60\u53ef\u5f9e\u8f38\u51fa\u8a0a\u606f\u770b\u5230\u6b64\u63d0\u4ea4\u76f8\u95dc\u8cc7\u8a0a\uff1a\u63d0\u4ea4\u5230\u54ea\u500b\u5206\u652f\uff08master\uff09\u3001\u63d0\u4ea4\u7684 SHA-1 \u6821\u9a57\u78bc\uff08 463dc4f \uff09\u3001\u6709\u591a\u5c11\u6a94\u6848\u88ab\u66f4\u52d5\uff0c\u4ee5\u53ca\u7d71\u8a08\u6b64\u63d0\u4ea4\u6709\u591a\u5c11\u5217\u88ab\u65b0\u589e\u548c\u88ab\u79fb\u9664\u3002","title":"\u63d0\u4ea4\u4f60\u7684\u4fee\u6539"},{"location":"Git/clone_recording_changes/#_12","text":"Git \u63d0\u4f9b\u4e86\u4e00\u500b\u7c21\u6613\u7684\u6377\u5f91\uff0c \u5728 git commit \u547d\u4ee4\u52a0\u4e0a -a \u9078\u9805\uff0c\u4f7f Git \u5728\u63d0\u4ea4\u524d\u81ea\u52d5\u9810\u5b58\u6240\u6709\u5df2\u8ffd\u8e64\u7684\u6a94\u6848\uff0c\u8b93\u4f60\u7565\u904e git add \u6b65\u9a5f","title":"\u7565\u904e\u9810\u5b58\u5340"},{"location":"Git/clone_recording_changes/#_13","text":"\u8981\u5f9e Git \u4e2d\u522a\u9664\u4e00\u500b\u6a94\u6848\uff0c\u4f60\u9700\u8981\u5c07\u5b83\u5f9e\u5df2\u8ffd\u8e64\u6a94\u6848\u4e2d\u79fb\u9664\uff08\u66f4\u6e96\u78ba\u5730\u8aaa\uff0c\u662f\u5f9e\u9810\u5b58\u5340\u4e2d\u79fb\u9664\uff09\uff0c\u7136\u5f8c\u518d\u63d0\u4ea4\uff1b git rm \u547d\u4ee4\u53ef\u5b8c\u6210\u6b64\u5de5\u4f5c\uff0c\u5b83\u540c\u6642\u4e5f\u6703\u5c07\u8a72\u6a94\u6848\u5f9e\u5de5\u4f5c\u76ee\u9304\u4e2d\u79fb\u9664\uff0c\u5982\u6b64\u5b83\u4e4b\u5f8c\u4e5f\u4e0d\u6703\u8eab\u70ba\u672a\u8ffd\u8e64\u6a94\u6848\u800c\u88ab\u4f60\u770b\u5230\u3002 \u5982\u679c\u4f60\u50c5\u50c5\u662f\u5c07\u6a94\u6848\u5f9e\u5de5\u4f5c\u76ee\u9304\u4e2d\u79fb\u9664\uff0c\u90a3\u9ebc\u5b83\u6703\u88ab\u5217\u5728 git status \u8f38\u51fa\u5167\u5bb9\u7684\u300cChanged but not updated\u300d\uff08\u4e5f\u5c31\u662f\u300c\u672a\u9810\u5b58\u300d\uff09\u6b04\u4f4d\u4e0b\u9762\uff1a $ rm PROJECTS.md $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes not staged for commit: (use \"git add/rm <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) deleted: PROJECTS.md no changes added to commit (use \"git add\" and/or \"git commit -a\") \u5982\u679c\u4f60\u63a5\u8457\u57f7\u884c git rm \uff0c\u5b83\u6703\u9810\u5b58\u8a72\u6a94\u6848\u7684\u79fb\u9664\u52d5\u4f5c\uff1a $ git rm PROJECTS.md rm 'PROJECTS.md' $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) deleted: PROJECTS.md \u4e0b\u4e00\u6b21\u63d0\u4ea4\u6642\uff0c\u8a72\u6a94\u6848\u5c07\u6703\u6d88\u5931\u800c\u4e14\u4e0d\u518d\u88ab\u8ffd\u8e64\uff1b \u5982\u679c\u4f60\u4fee\u6539\u4e86\u6a94\u6848\u4e14\u5df2\u7d93\u628a\u4fee\u6539\u5167\u5bb9\u52a0\u5165\u7d22\u5f15\u4e2d\uff08\u8b6f\u6ce8\uff1a\u300c\u52a0\u5165\u7d22\u5f15\u300d\u548c\u300c\u9810\u5b58\u300d\u662f\u540c\u7fa9\u8a5e\uff09\uff0c\u4f60\u5fc5\u9700\u4f7f\u7528 -f \u9078\u9805\u624d\u80fd\u5f37\u5236\u5c07\u5b83\u79fb\u9664\uff1b \u9019\u662f\u4e00\u7a2e\u70ba\u4e86\u907f\u514d\u5df2\u8a18\u9304\u7684\u5feb\u7167\u610f\u5916\u88ab\u79fb\u9664\u5f8c\u518d\u4e5f\u7121\u6cd5\u4f7f\u7528 Git \u5fa9\u539f\u7684\u4fdd\u8b77\u6a5f\u5236\u3002 \u53e6\u4e00\u500b\u6709\u7528\u7684\u6280\u5de7\u662f\u4fdd\u7559\u5de5\u4f5c\u76ee\u9304\u7684\u6a94\u6848\uff0c\u4f46\u5c07\u5b83\u5f9e\u9810\u5b58\u5340\u4e2d\u79fb\u9664\uff1b \u63db\u53e5\u8a71\u8aaa\uff0c\u4f60\u6216\u8a31\u60f3\u4fdd\u7559\u5728\u78c1\u789f\u6a5f\u4e0a\u7684\u6a94\u6848\u4f46\u4e0d\u5e0c\u671b Git \u518d\u7e7c\u7e8c\u8ffd\u8e64\u5b83\uff1b \u7576\u4f60\u5fd8\u8a18\u5c07\u67d0\u4e9b\u6a94\u6848\u52a0\u5230 .gitignore \u4e2d\u800c\u4e14\u4e0d\u5c0f\u5fc3\u9810\u5b58\u5b83\u7684\u6642\u5019\u6703\u7279\u5225\u7528\u6709\uff0c\u50cf\u662f\u4e0d\u5c0f\u5fc3\u9810\u5b58\u4e86\u4e00\u500b\u5927\u7684\u65e5\u8a8c\u6a94\u6848\u6216\u8005\u4e00\u5806 .a \u5df2\u7de8\u8b6f\u6a94\u6848\u3002 \u52a0\u4e0a --cached \u9078\u9805\u53ef\u505a\u5230\u9019\u4ef6\u4e8b\uff1a $ git rm --cached README","title":"\u79fb\u9664\u6a94\u6848"},{"location":"Git/clone_recording_changes/#_14","text":"Git \u4e0d\u50cf\u5176\u5b83 VCS \u7cfb\u7d71\uff0c\u5b83\u4e26\u4e0d\u6703\u660e\u78ba\u5730\u8ffd\u8e64\u6a94\u6848\u7684\u79fb\u52d5\uff1b \u5982\u679c\u4f60\u5728 Git \u4e2d\u91cd\u65b0\u547d\u540d\u4e00\u500b\u6a94\u6848\uff0c\u4e26\u4e0d\u6703\u6709\u4efb\u4f55 Git \u5f8c\u8a2d\u8cc7\u6599\u8a18\u9304\u9019\u500b\u52d5\u4f5c\u4ee5\u8fa8\u5225\u4f60\u66fe\u7d93\u91cd\u65b0\u547d\u540d\u904e\u6a94\u6848\uff1b \u7136\u800c Git \u53ef\u4ee5\u5728\u6a94\u6848\u79fb\u52d5\u5f8c\u5f88\u8070\u660e\u5730\u5c07\u5b83\u5011\u627e\u51fa\u4f86\u2014\u2014\u6211\u5011\u7a0d\u5f8c\u6703\u5c0d\u5075\u6e2c\u6a94\u6848\u7684\u79fb\u52d5\u518d\u591a\u505a\u4e00\u9ede\u8aaa\u660e\u3002 \u56e0\u6b64 Git \u6709\u4e00\u500b mv \u547d\u4ee4\u53cd\u800c\u6709\u9ede\u4ee4\u4eba\u56f0\u60d1\uff1b \u5982\u679c\u4f60\u60f3\u8981\u5728 Git \u4e2d\u91cd\u65b0\u547d\u540d\u4e00\u500b\u6a94\u6848\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a $ git mv file_from file_to \u4e8b\u5be6\u4e0a\uff0c\u5982\u679c\u4f60\u57f7\u884c\u985e\u4f3c\u4ee5\u4e0b\u7684\u52d5\u4f5c\u7136\u5f8c\u6aa2\u8996\u4e00\u4e0b\u72c0\u614b\uff0c\u4f60\u5c07\u770b\u5230 Git \u5c07\u8a72\u6a94\u6848\u8996\u70ba\u4e00\u500b\u91cd\u65b0\u547d\u540d\u904e\u7684\u6a94\u6848\uff1a $ git mv README.md README $ git status On branch master Your branch is up-to-date with 'origin/master'. Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README \u5176\u5be6\uff0c\u5b83\u76f8\u7576\u65bc\u57f7\u884c\u4e0b\u5217\u547d\u4ee4\uff1a $ mv README.md README $ git rm README.md $ git add README","title":"\u79fb\u52d5\u6a94\u6848"},{"location":"Git/getting_started/","text":"Getting Started \u95dc\u65bc\u7248\u672c\u63a7\u5236 \u672c\u5730\u7aef\u7248\u672c\u63a7\u5236 \u5176\u4e2d\u6700\u6d41\u884c\u7684\u4e00\u7a2e\u53eb\u505a RCS\uff0c\u81f3\u4eca\u8a31\u591a\u96fb\u8166\u4e0a\u90fd\u9084\u53ef\u4ee5\u627e\u5230\u4ed6\u7684\u8e64\u5f71\u3002 \u751a\u81f3\u5728\u6d41\u884c\u7684 Mac OS X \u7cfb\u7d71\u4e2d\uff0c\u53ea\u8981\u5b89\u88dd\u4e86\u958b\u767c\u8005\u5de5\u5177\u5305\u4ee5\u5f8c\uff0c\u4f60\u5c31\u6703\u6709 rcs \u7684\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528\u3002 RCS \u7684\u5de5\u4f5c\u539f\u7406\u662f\u5728\u786c\u789f\u4e0a\u4fdd\u5b58\u4e00\u5806\u7279\u6b8a\u683c\u5f0f\u7684\u88dc\u4e01\u96c6\u5408\uff08patch set\uff0c\u5373\u6a94\u6848\u5f9e\u4e00\u500b\u7248\u672c\u8b8a\u66f4\u5230\u53e6\u4e00\u500b\u7248\u672c\u6240\u9700\u8cc7\u8a0a\uff09\uff1b\u901a\u904e\u5957\u7528\u4efb\u610f\u7684\u88dc\u4e01\uff0c\u4fbf\u53ef\u4ee5\u91cd\u65b0\u7522\u751f\u51fa\u6bcf\u500b\u7248\u672c\u7684\u6a94\u6848\u5167\u5bb9\u3002 \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7d71 \u63a5\u4e0b\u4f86\u4eba\u5011\u53c8\u9047\u5230\u4e86\u91cd\u5927\u554f\u984c\uff0c\u5c31\u662f\u5982\u4f55\u548c\u5176\u4ed6\u96fb\u8166\u4e0a\u7684\u958b\u767c\u8005\u5354\u540c\u5408\u4f5c\uff1f \u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u65bc\u662f\u96c6\u4e2d\u5316\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7d71\u61c9\u904b\u800c\u751f\u3002 \u76f8\u5c0d\u65bc\u672c\u6a5f\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff0c\u9019\u7a2e\u505a\u6cd5\u5e36\u4f86\u4e86\u8a31\u591a\u597d\u8655\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u6bcf\u500b\u4eba\u90fd\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u7684\u77e5\u9053\u5c08\u6848\u4e2d\u7684\u5176\u4ed6\u4eba\u6b63\u5728\u505a\u4e9b\u4ec0\u9ebc\u3002 \u7ba1\u7406\u54e1\u4e5f\u53ef\u4ee5\u8f15\u9b06\u638c\u63a7\u6bcf\u500b\u958b\u767c\u8005\u7684\u6b0a\u9650\u3002 \u7136\u800c\uff0c\u96c6\u4e2d\u5316\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7d71\u4e5f\u6709\u4e00\u4e9b\u56b4\u91cd\u7684\u7f3a\u9ede\u3002 \u6700\u56b4\u91cd\u7684\u7576\u7136\u662f\u4e2d\u592e\u4f3a\u670d\u5668\u5982\u679c\u767c\u751f\u6545\u969c\u7684\u6642\u5019\u3002 \u5982\u679c\u7576\u6a5f\u4e00\u5c0f\u6642\uff0c\u90a3\u9ebc\u9019\u500b\u5c0f\u6642\u4e4b\u4e2d\uff0c\u6c92\u6709\u4eba\u53ef\u4ee5\u63d0\u4ea4\u66f4\u65b0\uff0c\u4e5f\u5c31\u7121\u6cd5\u5354\u540c\u5408\u4f5c\u3002 \u5206\u6563\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7d71 \u65bc\u662f\u5206\u6563\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff08Distributed Version Control Systems\uff0c\u7c21\u7a31 DCCSs\uff09\u5c31\u6b64\u767b\u4e0a\u821e\u53f0\u3002 \u5728 DVCS \u7cfb\u7d71\uff08\u5982 Git\u3001Mercurial\u3001Bazaar \u548c Darcs\uff09\u4e2d\uff0c\u7528\u6236\u7aef\u4e26\u4e0d\u53ea\u53d6\u51fa\u6700\u65b0\u7684\u6a94\u6848\u5feb\u7167\uff1b\u9084\u628a\u6574\u500b\u5009\u5132\u505a\u500b\u93e1\u50cf\u3002 \u5047\u8a2d\u6709\u4efb\u4f55\u4e00\u500b\u5354\u540c\u5408\u4f5c\u7684\u4f3a\u670d\u5668\u6545\u969c\uff0c\u4e8b\u5f8c\u90fd\u53ef\u4ee5\u7528\u4efb\u4f55\u4e00\u500b\u7528\u6236\u7aef\u7684\u93e1\u50cf\u4f86\u9084\u539f\u3002 \u56e0\u70ba\u6bcf\u500b\u5730\u65b9\u90fd\u6709\u5b8c\u6574\u7684\u8cc7\u6599\u5099\u4efd\u3002 Git \u57fa\u790e\u8981\u9ede \u8a18\u9304\u6a94\u6848\u5feb\u7167\uff0c\u800c\u4e0d\u662f\u5dee\u7570 Git \u8207\u5176\u5b83\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff08\u5305\u542b Subversion \u4ee5\u53ca\u8207\u5b83\u76f8\u95dc\u7684\uff09\u6700\u4e3b\u8981\u7684\u5dee\u5225\u662f\u5982\u4f55\u8655\u7406\u8cc7\u6599\u7684\u65b9\u5f0f\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c\u5176\u4ed6\u5927\u90e8\u5206\u7684\u7cfb\u7d71\u662f\u7d00\u9304\u4e00\u9023\u4e32\u6a94\u6848\u66f4\u6539\u7684\u8cc7\u8a0a\u3002 \u9019\u4e9b\u7cfb\u7d71\uff08CVS\u3001Subversion\u3001Perforce\u3001Bazaar\u2026\u7b49\u7b49\uff09\u5132\u5b58\u4e00\u7d44\u57fa\u672c\u7684\u6a94\u6848\u4ee5\u53ca\u9019\u4e9b\u6a94\u6848\u96a8\u6642\u9593\u905e\u589e\u7684\u66f4\u52d5\u8cc7\u6599\u3002 \u4f46\u662f Git \u4e0d\u662f\u7528\u9019\u7a2e\u65b9\u5f0f\u5132\u5b58\u53ca\u770b\u5f85\u9019\u4e9b\u8cc7\u6599\uff0c \u800c\u662f\u5c07\u5176\u8996\u70ba\u5c0f\u578b\u6a94\u6848\u7cfb\u7d71\u7684\u4e00\u7d44\u5feb\u7167\uff08Snapshot\uff09\u3002 \u6bcf\u7576\u4f60\u63d0\u4ea4\uff08commit\uff09\uff08\u8a3b\uff1a\u5728 Git \u5132\u5b58\u76ee\u524d\u5c08\u6848\u7684\u72c0\u614b\uff09\u6642\uff0cGit \u6703\u7d00\u9304\u4e0b\u4f60\u6240\u6709\u76ee\u524d\u6a94\u6848\u7684\u6a23\u5b50\uff0c\u4e26\u4e14\u53c3\u7167\u5230\u9019\u6b21\u5feb\u7167\u4e2d\u3002 \u70ba\u4e86\u8b1b\u6c42\u6548\u7387\uff0c\u53ea\u8981\u6a94\u6848\u6c92\u6709\u8b8a\u66f4\uff0cGit \u4e0d\u6703\u518d\u5ea6\u5132\u5b58\u8a72\u6a94\u6848\uff0c\u800c\u662f\u76f4\u63a5\u5c07\u4e0a\u4e00\u6b21\u76f8\u540c\u7684\u6a94\u6848\u53c3\u7167\u5230\u9019\u6b21\u5feb\u7167\u4e2d\u3002 Git \u628a\u5b83\u7684\u8cc7\u6599\u8996\u70ba\u4e00\u9023\u4e32\u7684\u5feb\u7167\u3002 Git \u80fd\u6aa2\u67e5\u5b8c\u6574\u6027 \u5728 Git \u4e2d\u6240\u6709\u7684\u7269\u4ef6\u5728\u5132\u5b58\u524d\u90fd\u6703\u88ab\u8a08\u7b97\u6821\u9a57\u78bc\uff08checksum\uff09\u4e26\u4ee5\u6821\u9a57\u78bc\u53c3\u7167\u7269\u4ef6\u3002 \u9019\u610f\u5473\u8457\u4f60\u4e0d\u53ef\u80fd\u779e\u8457 Git \u5c0d\u4efb\u4f55\u6a94\u6848\u6216\u76ee\u9304\u9032\u884c\u4fee\u6539\u3002 \u6b64\u529f\u80fd\u5167\u5efa\u5728 Git \u5e95\u5c64\u4e26\u6574\u5408\u5230\u5b83\u7684\u8a2d\u8a08\u54f2\u5b78\u3002 Git \u66f4\u80fd\u5920\u99ac\u4e0a\u5bdf\u89ba\u50b3\u8f38\u6642\u7684\u907a\u5931\u6216\u662f\u6a94\u6848\u7684\u6bc0\u640d\u3002 Git \u7528\u4f86\u8a08\u7b97\u6821\u9a57\u78bc\u7684\u6a5f\u5236\u7a31\u70ba SHA-1 \u96dc\u6e4a\u6f14\u7b97\u6cd5\u3002 \u4e00\u500b\u6821\u9a57\u78bc\u662f\u7531 40 \u500b 16 \u9032\u4f4d\u7684\u5b57\u6bcd\uff080\u20139 \u548c a\u2013f\uff09\u6240\u7d44\u6210\uff0cGit \u6703\u6839\u64da\u6a94\u6848\u7684\u5167\u5bb9\u548c\u8cc7\u6599\u593e\u7684\u7d50\u69cb\u4f86\u8a08\u7b97\u3002 \u4e00\u500b SHA-1 \u6821\u9a57\u78bc\u770b\u8d77\u4f86\u5982\u4e0b\u6240\u793a\uff1a 24b9da6552252987aa493b52f8696cd6d3b00373 \u4f60\u6703 Git \u4e2d\u5230\u8655\u90fd\u770b\u5230\u6821\u9a57\u78bc\uff0c\u56e0\u70ba\u6821\u9a57\u78bc\u88ab Git \u5230\u8655\u4f7f\u7528\u3002 \u4e8b\u5be6\u4e0a\u5728 Git \u7684\u8cc7\u6599\u5eab\u5167\uff0c\u6bcf\u500b\u6a94\u6848\u90fd\u662f\u7528\u5176\u5167\u5bb9\u7684\u6821\u9a57\u78bc\u4f86\u5132\u5b58\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6a94\u540d\u3002 Git \u901a\u5e38\u53ea\u589e\u52a0\u8cc7\u6599 \u7576\u4f60\u4f7f\u7528 Git\uff0c\u5e7e\u4e4e\u6240\u6709\u7684\u52d5\u4f5c\u90fd\u53ea\u662f\u589e\u52a0\u8cc7\u6599\u5230Git\u7684\u8cc7\u6599\u5eab\u3002 \u4f60\u5f88\u96e3\u85c9\u6b64\u8b93\u505a\u51fa\u8b93\u7cfb\u7d71\u7121\u6cd5\u5fa9\u539f\u6216\u8005\u6e05\u9664\u8cc7\u6599\u7684\u52d5\u4f5c\u3002 \u5728\u4efb\u4f55\u7248\u672c\u63a7\u5236\u7cfb\u7d71\u4e2d\uff0c\u4f60\u5c1a\u672a\u63d0\u4ea4\u7684\u4fee\u6539\u90fd\u6709\u53ef\u80fd\u6703\u907a\u5931\u6216\u8005\u641e\u4e82\u3002 \u4f46\u662f\u53ea\u8981\u4f60\u63d0\u4ea4\u5feb\u7167\u5230 Git \u5f8c\uff0c\u5f88\u96e3\u6703\u767c\u751f\u907a\u5931\u7684\u60c5\u6cc1\uff0c\u7279\u5225\u662f\u4f60\u5b9a\u671f\u5c07\u8cc7\u6599\u5eab\u63a8\u9001\uff08push\uff09\u5230\u5176\u5b83\u5132\u5b58\u5eab\u6642\uff0c\u5c31\u66f4\u4e0d\u53ef\u80fd\u6703\u5f04\u4e1f\u8cc7\u6599\u3002 \u4e09\u7a2e\u72c0\u614b Git \u6703\u628a\u4f60\u7684\u6a94\u6848\u6a19\u8a18\u70ba\u4e09\u7a2e\u4e3b\u8981\u7684\u72c0\u614b\uff1a\u5df2\u63d0\u4ea4\uff08committed\uff09\u3001\u5df2\u4fee\u6539\uff08modified\uff09\u53ca\u5df2\u9810\u5b58\uff08staged\uff09\u3002 \u5df2\u63d0\u4ea4\u4ee3\u8868\u9019\u6a94\u6848\u5df1\u5b89\u5168\u5730\u5b58\u5728\u4f60\u7684\u672c\u5730\u7aef\u8cc7\u6599\u5eab\u3002 \u5df1\u4fee\u6539\u4ee3\u8868\u9019\u6a94\u6848\u5df2\u88ab\u4fee\u6539\u4f46\u5c1a\u672a\u63d0\u4ea4\u5230\u672c\u5730\u7aef\u8cc7\u6599\u5eab\u3002 \u5df2\u9810\u5b58\u4ee3\u8868\u9019\u6a94\u6848\u5c07\u6703\u88ab\u5b58\u5230\u4e0b\u6b21\u4f60\u63d0\u4ea4\u7684\u5feb\u7167\u4e2d\u3002 \u9019\u5e36\u9818\u6211\u5011\u5230 Git \u5c08\u6848\u7684\u4e09\u500b\u4e3b\u8981\u5340\u57df\uff1aGit \u8cc7\u6599\u593e\uff08.git directory\uff09\u3001\u5de5\u4f5c\u76ee\u9304\uff08working directory\uff09\u4ee5\u53ca\u9810\u5b58\u5340\uff08staging area\uff09\u3002 Git \u8cc7\u6599\u593e\uff08.git directory\uff09\u662f Git \u7528\u4f86\u5132\u5b58\u4f60\u5c08\u6848\u7684\u5f8c\u8a2d\u8cc7\u6599\u53ca\u7269\u4ef6\u8cc7\u6599\u5eab\u7684\u5730\u65b9\u3002 \u9019\u662f Git \u6700\u91cd\u8981\u7684\u90e8\u4efd\uff0c\u800c\u4e14\u7576\u4f60\u514b\u9686\u4e00\u500b\u5176\u4ed6\u96fb\u8166\u7684\u5132\u5b58\u5eab\u6642\uff0c\u9019\u500b\u8cc7\u6599\u593e\u4e5f\u6703\u88ab\u540c\u6642\u8907\u88fd\u3002 \u5de5\u4f5c\u76ee\u9304\uff08working directory\uff09\u662f\u5c08\u6848\u88ab\u6aa2\u51fa\u7684\u67d0\u4e00\u500b\u7248\u672c\u3002 \u9019\u4e9b\u6a94\u6848\u5f9e Git \u8cc7\u6599\u593e\u5167\u88ab\u58d3\u7e2e\u904e\u7684\u8cc7\u6599\u5eab\u4e2d\u62c9\u51fa\u4f86\u4e26\u653e\u5728\u786c\u789f\u4f9b\u4f60\u4f7f\u7528\u6216\u4fee\u6539\u3002 \u9810\u5b58\u5340\uff08staging area\uff09\u662f\u4e00\u500b\u55ae\u4e00\u6a94\u6848\uff0c\u4e00\u822c\u4f86\u8aaa\u653e\u5728 Git \u8cc7\u6599\u593e\u4e0b\uff0c\u5132\u5b58\u95dc\u65bc\u4e0b\u6b21\u63d0\u4ea4\u7684\u8cc7\u8a0a\u3002 \u6709\u6642\u5b83\u6703\u7a31\u70ba\u7d22\u5f15\u300cindex\u300d\uff0c\u4f46\u73fe\u5728\u66f4\u5e38\u88ab\u7a31\u547c\u70ba\u9810\u5b58\u5340\u3002 \u57fa\u672c Git \u5de5\u4f5c\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a \u4f60\u5728\u4f60\u5de5\u4f5c\u76ee\u9304\u4fee\u6539\u6a94\u6848\u3002 \u9810\u5b58\u6a94\u6848\uff0c\u5c07\u6a94\u6848\u7684\u5feb\u7167\u65b0\u589e\u5230\u9810\u5b58\u5340\u3002 \u505a\u63d0\u4ea4\u7684\u52d5\u4f5c\uff0c\u9019\u6703\u8b93\u5b58\u5728\u9810\u5b58\u5340\u7684\u6a94\u6848\u5feb\u7167\u6c38\u4e45\u5730\u5132\u5b58\u5728 Git \u8cc7\u6599\u593e\u4e2d\u3002 \u82e5\u6a94\u6848\u5df2\u88ab\u5b58\u65bc Git \u8cc7\u6599\u593e\u5167\uff0c\u5247\u7a31\u70ba\u5df2\u63d0\u4ea4\u3002 \u82e5\u6a94\u6848\u5148\u88ab\u4fee\u6539\uff0c\u63a5\u8457\u88ab\u589e\u52a0\u5230\u9810\u5b58\u5340\u57df\uff0c\u5247\u7a31\u70ba\u5df2\u9810\u5b58\u3002 \u82e5\u6a94\u6848\u88ab\u6aa2\u51fa\u5f8c\u6709\u88ab\u4fee\u6539\uff0c\u4f46\u672a\u88ab\u9810\u5b58\uff0c\u5247\u7a31\u70ba\u5df2\u4fee\u6539\u3002","title":"Getting Started"},{"location":"Git/getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"Git/getting_started/#_1","text":"","title":"\u95dc\u65bc\u7248\u672c\u63a7\u5236"},{"location":"Git/getting_started/#_2","text":"\u5176\u4e2d\u6700\u6d41\u884c\u7684\u4e00\u7a2e\u53eb\u505a RCS\uff0c\u81f3\u4eca\u8a31\u591a\u96fb\u8166\u4e0a\u90fd\u9084\u53ef\u4ee5\u627e\u5230\u4ed6\u7684\u8e64\u5f71\u3002 \u751a\u81f3\u5728\u6d41\u884c\u7684 Mac OS X \u7cfb\u7d71\u4e2d\uff0c\u53ea\u8981\u5b89\u88dd\u4e86\u958b\u767c\u8005\u5de5\u5177\u5305\u4ee5\u5f8c\uff0c\u4f60\u5c31\u6703\u6709 rcs \u7684\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528\u3002 RCS \u7684\u5de5\u4f5c\u539f\u7406\u662f\u5728\u786c\u789f\u4e0a\u4fdd\u5b58\u4e00\u5806\u7279\u6b8a\u683c\u5f0f\u7684\u88dc\u4e01\u96c6\u5408\uff08patch set\uff0c\u5373\u6a94\u6848\u5f9e\u4e00\u500b\u7248\u672c\u8b8a\u66f4\u5230\u53e6\u4e00\u500b\u7248\u672c\u6240\u9700\u8cc7\u8a0a\uff09\uff1b\u901a\u904e\u5957\u7528\u4efb\u610f\u7684\u88dc\u4e01\uff0c\u4fbf\u53ef\u4ee5\u91cd\u65b0\u7522\u751f\u51fa\u6bcf\u500b\u7248\u672c\u7684\u6a94\u6848\u5167\u5bb9\u3002","title":"\u672c\u5730\u7aef\u7248\u672c\u63a7\u5236"},{"location":"Git/getting_started/#_3","text":"\u63a5\u4e0b\u4f86\u4eba\u5011\u53c8\u9047\u5230\u4e86\u91cd\u5927\u554f\u984c\uff0c\u5c31\u662f\u5982\u4f55\u548c\u5176\u4ed6\u96fb\u8166\u4e0a\u7684\u958b\u767c\u8005\u5354\u540c\u5408\u4f5c\uff1f \u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u65bc\u662f\u96c6\u4e2d\u5316\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7d71\u61c9\u904b\u800c\u751f\u3002 \u76f8\u5c0d\u65bc\u672c\u6a5f\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff0c\u9019\u7a2e\u505a\u6cd5\u5e36\u4f86\u4e86\u8a31\u591a\u597d\u8655\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u6bcf\u500b\u4eba\u90fd\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u7684\u77e5\u9053\u5c08\u6848\u4e2d\u7684\u5176\u4ed6\u4eba\u6b63\u5728\u505a\u4e9b\u4ec0\u9ebc\u3002 \u7ba1\u7406\u54e1\u4e5f\u53ef\u4ee5\u8f15\u9b06\u638c\u63a7\u6bcf\u500b\u958b\u767c\u8005\u7684\u6b0a\u9650\u3002 \u7136\u800c\uff0c\u96c6\u4e2d\u5316\u7684\u7248\u672c\u63a7\u5236\u7cfb\u7d71\u4e5f\u6709\u4e00\u4e9b\u56b4\u91cd\u7684\u7f3a\u9ede\u3002 \u6700\u56b4\u91cd\u7684\u7576\u7136\u662f\u4e2d\u592e\u4f3a\u670d\u5668\u5982\u679c\u767c\u751f\u6545\u969c\u7684\u6642\u5019\u3002 \u5982\u679c\u7576\u6a5f\u4e00\u5c0f\u6642\uff0c\u90a3\u9ebc\u9019\u500b\u5c0f\u6642\u4e4b\u4e2d\uff0c\u6c92\u6709\u4eba\u53ef\u4ee5\u63d0\u4ea4\u66f4\u65b0\uff0c\u4e5f\u5c31\u7121\u6cd5\u5354\u540c\u5408\u4f5c\u3002","title":"\u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7d71"},{"location":"Git/getting_started/#_4","text":"\u65bc\u662f\u5206\u6563\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff08Distributed Version Control Systems\uff0c\u7c21\u7a31 DCCSs\uff09\u5c31\u6b64\u767b\u4e0a\u821e\u53f0\u3002 \u5728 DVCS \u7cfb\u7d71\uff08\u5982 Git\u3001Mercurial\u3001Bazaar \u548c Darcs\uff09\u4e2d\uff0c\u7528\u6236\u7aef\u4e26\u4e0d\u53ea\u53d6\u51fa\u6700\u65b0\u7684\u6a94\u6848\u5feb\u7167\uff1b\u9084\u628a\u6574\u500b\u5009\u5132\u505a\u500b\u93e1\u50cf\u3002 \u5047\u8a2d\u6709\u4efb\u4f55\u4e00\u500b\u5354\u540c\u5408\u4f5c\u7684\u4f3a\u670d\u5668\u6545\u969c\uff0c\u4e8b\u5f8c\u90fd\u53ef\u4ee5\u7528\u4efb\u4f55\u4e00\u500b\u7528\u6236\u7aef\u7684\u93e1\u50cf\u4f86\u9084\u539f\u3002 \u56e0\u70ba\u6bcf\u500b\u5730\u65b9\u90fd\u6709\u5b8c\u6574\u7684\u8cc7\u6599\u5099\u4efd\u3002","title":"\u5206\u6563\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7d71"},{"location":"Git/getting_started/#git","text":"","title":"Git \u57fa\u790e\u8981\u9ede"},{"location":"Git/getting_started/#_5","text":"Git \u8207\u5176\u5b83\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff08\u5305\u542b Subversion \u4ee5\u53ca\u8207\u5b83\u76f8\u95dc\u7684\uff09\u6700\u4e3b\u8981\u7684\u5dee\u5225\u662f\u5982\u4f55\u8655\u7406\u8cc7\u6599\u7684\u65b9\u5f0f\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c\u5176\u4ed6\u5927\u90e8\u5206\u7684\u7cfb\u7d71\u662f\u7d00\u9304\u4e00\u9023\u4e32\u6a94\u6848\u66f4\u6539\u7684\u8cc7\u8a0a\u3002 \u9019\u4e9b\u7cfb\u7d71\uff08CVS\u3001Subversion\u3001Perforce\u3001Bazaar\u2026\u7b49\u7b49\uff09\u5132\u5b58\u4e00\u7d44\u57fa\u672c\u7684\u6a94\u6848\u4ee5\u53ca\u9019\u4e9b\u6a94\u6848\u96a8\u6642\u9593\u905e\u589e\u7684\u66f4\u52d5\u8cc7\u6599\u3002 \u4f46\u662f Git \u4e0d\u662f\u7528\u9019\u7a2e\u65b9\u5f0f\u5132\u5b58\u53ca\u770b\u5f85\u9019\u4e9b\u8cc7\u6599\uff0c \u800c\u662f\u5c07\u5176\u8996\u70ba\u5c0f\u578b\u6a94\u6848\u7cfb\u7d71\u7684\u4e00\u7d44\u5feb\u7167\uff08Snapshot\uff09\u3002 \u6bcf\u7576\u4f60\u63d0\u4ea4\uff08commit\uff09\uff08\u8a3b\uff1a\u5728 Git \u5132\u5b58\u76ee\u524d\u5c08\u6848\u7684\u72c0\u614b\uff09\u6642\uff0cGit \u6703\u7d00\u9304\u4e0b\u4f60\u6240\u6709\u76ee\u524d\u6a94\u6848\u7684\u6a23\u5b50\uff0c\u4e26\u4e14\u53c3\u7167\u5230\u9019\u6b21\u5feb\u7167\u4e2d\u3002 \u70ba\u4e86\u8b1b\u6c42\u6548\u7387\uff0c\u53ea\u8981\u6a94\u6848\u6c92\u6709\u8b8a\u66f4\uff0cGit \u4e0d\u6703\u518d\u5ea6\u5132\u5b58\u8a72\u6a94\u6848\uff0c\u800c\u662f\u76f4\u63a5\u5c07\u4e0a\u4e00\u6b21\u76f8\u540c\u7684\u6a94\u6848\u53c3\u7167\u5230\u9019\u6b21\u5feb\u7167\u4e2d\u3002 Git \u628a\u5b83\u7684\u8cc7\u6599\u8996\u70ba\u4e00\u9023\u4e32\u7684\u5feb\u7167\u3002","title":"\u8a18\u9304\u6a94\u6848\u5feb\u7167\uff0c\u800c\u4e0d\u662f\u5dee\u7570"},{"location":"Git/getting_started/#git_1","text":"\u5728 Git \u4e2d\u6240\u6709\u7684\u7269\u4ef6\u5728\u5132\u5b58\u524d\u90fd\u6703\u88ab\u8a08\u7b97\u6821\u9a57\u78bc\uff08checksum\uff09\u4e26\u4ee5\u6821\u9a57\u78bc\u53c3\u7167\u7269\u4ef6\u3002 \u9019\u610f\u5473\u8457\u4f60\u4e0d\u53ef\u80fd\u779e\u8457 Git \u5c0d\u4efb\u4f55\u6a94\u6848\u6216\u76ee\u9304\u9032\u884c\u4fee\u6539\u3002 \u6b64\u529f\u80fd\u5167\u5efa\u5728 Git \u5e95\u5c64\u4e26\u6574\u5408\u5230\u5b83\u7684\u8a2d\u8a08\u54f2\u5b78\u3002 Git \u66f4\u80fd\u5920\u99ac\u4e0a\u5bdf\u89ba\u50b3\u8f38\u6642\u7684\u907a\u5931\u6216\u662f\u6a94\u6848\u7684\u6bc0\u640d\u3002 Git \u7528\u4f86\u8a08\u7b97\u6821\u9a57\u78bc\u7684\u6a5f\u5236\u7a31\u70ba SHA-1 \u96dc\u6e4a\u6f14\u7b97\u6cd5\u3002 \u4e00\u500b\u6821\u9a57\u78bc\u662f\u7531 40 \u500b 16 \u9032\u4f4d\u7684\u5b57\u6bcd\uff080\u20139 \u548c a\u2013f\uff09\u6240\u7d44\u6210\uff0cGit \u6703\u6839\u64da\u6a94\u6848\u7684\u5167\u5bb9\u548c\u8cc7\u6599\u593e\u7684\u7d50\u69cb\u4f86\u8a08\u7b97\u3002 \u4e00\u500b SHA-1 \u6821\u9a57\u78bc\u770b\u8d77\u4f86\u5982\u4e0b\u6240\u793a\uff1a 24b9da6552252987aa493b52f8696cd6d3b00373 \u4f60\u6703 Git \u4e2d\u5230\u8655\u90fd\u770b\u5230\u6821\u9a57\u78bc\uff0c\u56e0\u70ba\u6821\u9a57\u78bc\u88ab Git \u5230\u8655\u4f7f\u7528\u3002 \u4e8b\u5be6\u4e0a\u5728 Git \u7684\u8cc7\u6599\u5eab\u5167\uff0c\u6bcf\u500b\u6a94\u6848\u90fd\u662f\u7528\u5176\u5167\u5bb9\u7684\u6821\u9a57\u78bc\u4f86\u5132\u5b58\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6a94\u540d\u3002","title":"Git \u80fd\u6aa2\u67e5\u5b8c\u6574\u6027"},{"location":"Git/getting_started/#git_2","text":"\u7576\u4f60\u4f7f\u7528 Git\uff0c\u5e7e\u4e4e\u6240\u6709\u7684\u52d5\u4f5c\u90fd\u53ea\u662f\u589e\u52a0\u8cc7\u6599\u5230Git\u7684\u8cc7\u6599\u5eab\u3002 \u4f60\u5f88\u96e3\u85c9\u6b64\u8b93\u505a\u51fa\u8b93\u7cfb\u7d71\u7121\u6cd5\u5fa9\u539f\u6216\u8005\u6e05\u9664\u8cc7\u6599\u7684\u52d5\u4f5c\u3002 \u5728\u4efb\u4f55\u7248\u672c\u63a7\u5236\u7cfb\u7d71\u4e2d\uff0c\u4f60\u5c1a\u672a\u63d0\u4ea4\u7684\u4fee\u6539\u90fd\u6709\u53ef\u80fd\u6703\u907a\u5931\u6216\u8005\u641e\u4e82\u3002 \u4f46\u662f\u53ea\u8981\u4f60\u63d0\u4ea4\u5feb\u7167\u5230 Git \u5f8c\uff0c\u5f88\u96e3\u6703\u767c\u751f\u907a\u5931\u7684\u60c5\u6cc1\uff0c\u7279\u5225\u662f\u4f60\u5b9a\u671f\u5c07\u8cc7\u6599\u5eab\u63a8\u9001\uff08push\uff09\u5230\u5176\u5b83\u5132\u5b58\u5eab\u6642\uff0c\u5c31\u66f4\u4e0d\u53ef\u80fd\u6703\u5f04\u4e1f\u8cc7\u6599\u3002","title":"Git \u901a\u5e38\u53ea\u589e\u52a0\u8cc7\u6599"},{"location":"Git/getting_started/#_6","text":"Git \u6703\u628a\u4f60\u7684\u6a94\u6848\u6a19\u8a18\u70ba\u4e09\u7a2e\u4e3b\u8981\u7684\u72c0\u614b\uff1a\u5df2\u63d0\u4ea4\uff08committed\uff09\u3001\u5df2\u4fee\u6539\uff08modified\uff09\u53ca\u5df2\u9810\u5b58\uff08staged\uff09\u3002 \u5df2\u63d0\u4ea4\u4ee3\u8868\u9019\u6a94\u6848\u5df1\u5b89\u5168\u5730\u5b58\u5728\u4f60\u7684\u672c\u5730\u7aef\u8cc7\u6599\u5eab\u3002 \u5df1\u4fee\u6539\u4ee3\u8868\u9019\u6a94\u6848\u5df2\u88ab\u4fee\u6539\u4f46\u5c1a\u672a\u63d0\u4ea4\u5230\u672c\u5730\u7aef\u8cc7\u6599\u5eab\u3002 \u5df2\u9810\u5b58\u4ee3\u8868\u9019\u6a94\u6848\u5c07\u6703\u88ab\u5b58\u5230\u4e0b\u6b21\u4f60\u63d0\u4ea4\u7684\u5feb\u7167\u4e2d\u3002 \u9019\u5e36\u9818\u6211\u5011\u5230 Git \u5c08\u6848\u7684\u4e09\u500b\u4e3b\u8981\u5340\u57df\uff1aGit \u8cc7\u6599\u593e\uff08.git directory\uff09\u3001\u5de5\u4f5c\u76ee\u9304\uff08working directory\uff09\u4ee5\u53ca\u9810\u5b58\u5340\uff08staging area\uff09\u3002 Git \u8cc7\u6599\u593e\uff08.git directory\uff09\u662f Git \u7528\u4f86\u5132\u5b58\u4f60\u5c08\u6848\u7684\u5f8c\u8a2d\u8cc7\u6599\u53ca\u7269\u4ef6\u8cc7\u6599\u5eab\u7684\u5730\u65b9\u3002 \u9019\u662f Git \u6700\u91cd\u8981\u7684\u90e8\u4efd\uff0c\u800c\u4e14\u7576\u4f60\u514b\u9686\u4e00\u500b\u5176\u4ed6\u96fb\u8166\u7684\u5132\u5b58\u5eab\u6642\uff0c\u9019\u500b\u8cc7\u6599\u593e\u4e5f\u6703\u88ab\u540c\u6642\u8907\u88fd\u3002 \u5de5\u4f5c\u76ee\u9304\uff08working directory\uff09\u662f\u5c08\u6848\u88ab\u6aa2\u51fa\u7684\u67d0\u4e00\u500b\u7248\u672c\u3002 \u9019\u4e9b\u6a94\u6848\u5f9e Git \u8cc7\u6599\u593e\u5167\u88ab\u58d3\u7e2e\u904e\u7684\u8cc7\u6599\u5eab\u4e2d\u62c9\u51fa\u4f86\u4e26\u653e\u5728\u786c\u789f\u4f9b\u4f60\u4f7f\u7528\u6216\u4fee\u6539\u3002 \u9810\u5b58\u5340\uff08staging area\uff09\u662f\u4e00\u500b\u55ae\u4e00\u6a94\u6848\uff0c\u4e00\u822c\u4f86\u8aaa\u653e\u5728 Git \u8cc7\u6599\u593e\u4e0b\uff0c\u5132\u5b58\u95dc\u65bc\u4e0b\u6b21\u63d0\u4ea4\u7684\u8cc7\u8a0a\u3002 \u6709\u6642\u5b83\u6703\u7a31\u70ba\u7d22\u5f15\u300cindex\u300d\uff0c\u4f46\u73fe\u5728\u66f4\u5e38\u88ab\u7a31\u547c\u70ba\u9810\u5b58\u5340\u3002 \u57fa\u672c Git \u5de5\u4f5c\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a \u4f60\u5728\u4f60\u5de5\u4f5c\u76ee\u9304\u4fee\u6539\u6a94\u6848\u3002 \u9810\u5b58\u6a94\u6848\uff0c\u5c07\u6a94\u6848\u7684\u5feb\u7167\u65b0\u589e\u5230\u9810\u5b58\u5340\u3002 \u505a\u63d0\u4ea4\u7684\u52d5\u4f5c\uff0c\u9019\u6703\u8b93\u5b58\u5728\u9810\u5b58\u5340\u7684\u6a94\u6848\u5feb\u7167\u6c38\u4e45\u5730\u5132\u5b58\u5728 Git \u8cc7\u6599\u593e\u4e2d\u3002 \u82e5\u6a94\u6848\u5df2\u88ab\u5b58\u65bc Git \u8cc7\u6599\u593e\u5167\uff0c\u5247\u7a31\u70ba\u5df2\u63d0\u4ea4\u3002 \u82e5\u6a94\u6848\u5148\u88ab\u4fee\u6539\uff0c\u63a5\u8457\u88ab\u589e\u52a0\u5230\u9810\u5b58\u5340\u57df\uff0c\u5247\u7a31\u70ba\u5df2\u9810\u5b58\u3002 \u82e5\u6a94\u6848\u88ab\u6aa2\u51fa\u5f8c\u6709\u88ab\u4fee\u6539\uff0c\u4f46\u672a\u88ab\u9810\u5b58\uff0c\u5247\u7a31\u70ba\u5df2\u4fee\u6539\u3002","title":"\u4e09\u7a2e\u72c0\u614b"},{"location":"Git/git_maintain_data_recovery/","text":"Maintenance and Data Recovery Occasionally, you may have to do some cleanup \u2013 make a repository more compact, clean up an imported repository, or recover lost work. This section will cover some of these scenarios. Maintenance Occasionally, Git automatically runs a command called \u201cauto gc\u201d. Most of the time, this command does nothing. However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged git gc command. The \u201cgc\u201d stands for garbage collect, and the command does a number of things: it gathers up all the loose objects and places them in packfiles, it consolidates packfiles into one big packfile, and it removes objects that aren\u2019t reachable from any commit and are a few months old. You can run auto gc manually as follows: $ git gc --auto Again, this generally does nothing. You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command. You can modify these limits with the gc.auto and gc.autopacklimit config settings, respectively. The other thing gc will do is pack up your references into a single file. Suppose your repository contains the following branches and tags: $ find .git/refs -type f .git/refs/heads/experiment .git/refs/heads/master .git/refs/tags/v1.0 .git/refs/tags/v1.1 If you run git gc , you\u2019ll no longer have these files in the refs directory. Git will move them for the sake of efficiency into a file named .git/packed-refs that looks like this: $ cat .git/packed-refs # pack-refs with: peeled fully-peeled cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0 9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1 ^1a410efbd13591db07496601ebc7a059dd55cfe9 If you update a reference, Git doesn\u2019t edit this file but instead writes a new file to refs/heads . To get the appropriate SHA-1 for a given reference, Git checks for that reference in the refs directory and then checks the packed-refs file as a fallback. However, if you can\u2019t find a reference in the refs directory, it\u2019s probably in your packed-refs file. Notice the last line of the file, which begins with a ^ . This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to. Data Recovery At some point in your Git journey, you may accidentally lose a commit. Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from. Assuming this happens, how can you get your commits back? Here\u2019s an example that hard-resets the master branch in your test repository to an older commit and then recovers the lost commits. First, let\u2019s review where your repository is at this point: $ git log --pretty=oneline ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit 484a59275031909e19aadb7c92262719cfcdf19a added repo.rb 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit Now, move the master branch back to the middle commit: $ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9 HEAD is now at 1a410ef third commit $ git log --pretty=oneline 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit You\u2019ve effectively lost the top two commits \u2013 you have no branch from which those commits are reachable. You need to find the latest commit SHA-1 and then add a branch that points to it. The trick is finding that latest commit SHA-1 \u2013 it\u2019s not like you\u2019ve memorized it, right? Often, the quickest way is to use a tool called git reflog . As you\u2019re working, Git silently records what your HEAD is every time you change it. Each time you commit or change branches, the reflog is updated. The reflog is also updated by the git update-ref command, which is another reason to use it instead of just writing the SHA-1 value to your ref files, as we covered in Git References. You can see where you\u2019ve been at any time by running git reflog : $ git reflog 1a410ef HEAD@{0}: reset: moving to 1a410ef ab1afef HEAD@{1}: commit: modified repo.rb a bit 484a592 HEAD@{2}: commit: added repo.rb Here we can see the two commits that we have had checked out, however there is not much information here. To see the same information in a much more useful way, we can run git log -g , which will give you a normal log output for your reflog. $ git log -g commit 1a410efbd13591db07496601ebc7a059dd55cfe9 Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>) Reflog message: updating HEAD Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:22:37 2009 -0700 third commit commit ab1afef80fac8e34258ff41fc1b867c702daa24b Reflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>) Reflog message: updating HEAD Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:15:24 2009 -0700 modified repo.rb a bit It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit. For example, you can start a branch named recover-branch at that commit (ab1afef): $ git branch recover-branch ab1afef $ git log --pretty=oneline recover-branch ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit 484a59275031909e19aadb7c92262719cfcdf19a added repo.rb 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit Cool \u2013 now you have a branch named recover-branch that is where your master branch used to be, making the first two commits reachable again. Next, suppose your loss was for some reason not in the reflog \u2013 you can simulate that by removing recover-branch and deleting the reflog. Now the first two commits aren\u2019t reachable by anything: $ git branch -D recover-branch $ rm -Rf .git/logs/ Because the reflog data is kept in the .git/logs/ directory, you effectively have no reflog. How can you recover that commit at this point? One way is to use the git fsck utility, which checks your database for integrity. If you run it with the --full option, it shows you all objects that aren\u2019t pointed to by another object: $ git fsck --full Checking object directories: 100% (256/256), done. Checking objects: 100% (18/18), done. dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9 dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293 In this case, you can see your missing commit after the string \u201cdangling commit\u201d. You can recover it the same way, by adding a branch that points to that SHA-1. Removing Object There are a lot of great things about Git, but one feature that can cause issues is the fact that a git clone downloads the entire history of the project, including every version of every file. This is fine if the whole thing is source code, because Git is highly optimized to compress that data efficiently. However, if someone at any point in the history of your project added a single huge file, every clone for all time will be forced to download that large file, even if it was removed from the project in the very next commit. Because it\u2019s reachable from the history, it will always be there. This can be a huge problem when you\u2019re converting Subversion or Perforce repositories into Git. Because you don\u2019t download the whole history in those systems, this type of addition carries few consequences. If you did an import from another system or otherwise find that your repository is much larger than it should be, here is how you can find and remove large objects. Be warned: this technique is destructive to your commit history. It rewrites every commit object since the earliest tree you have to modify to remove a large file reference. If you do this immediately after an import, before anyone has started to base work on the commit, you\u2019re fine \u2013 otherwise, you have to notify all contributors that they must rebase their work onto your new commits. To demonstrate, you\u2019ll add a large file into your test repository, remove it in the next commit, find it, and remove it permanently from the repository. First, add a large object to your history: $ curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz $ git add git.tgz $ git commit -m 'add git tarball' [master 7b30847] add git tarball 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 git.tgz Oops \u2013 you didn\u2019t want to add a huge tarball to your project. Better get rid of it: $ git rm git.tgz rm 'git.tgz' $ git commit -m 'oops - removed large tarball' [master dadf725] oops - removed large tarball 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 git.tgz Now, gc your database and see how much space you\u2019re using: $ git gc Counting objects: 17, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (17/17), done. Total 17 (delta 1), reused 10 (delta 0) You can run the count-objects command to quickly see how much space you\u2019re using: $ git count-objects -v count: 7 size: 32 in-pack: 17 packs: 1 size-pack: 4868 prune-packable: 0 garbage: 0 size-garbage: 0 The size-pack entry is the size of your packfiles in kilobytes, so you\u2019re using almost 5MB. Before the last commit, you were using closer to 2K \u2013 clearly, removing the file from the previous commit didn\u2019t remove it from your history. Every time anyone clones this repository, they will have to clone all 5MB just to get this tiny project, because you accidentally added a big file. Let\u2019s get rid of it. First you have to find it. In this case, you already know what file it is. But suppose you didn\u2019t; how would you identify what file or files were taking up so much space? If you run git gc , all the objects are in a packfile; you can identify the big objects by running another plumbing command called git verify-pack and sorting on the third field in the output, which is file size. You can also pipe it through the tail command because you\u2019re only interested in the last few largest files: $ git verify-pack -v .git/objects/pack/pack-29\u202669.idx \\ | sort -k 3 -n \\ | tail -3 dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 22044 5792 4977696 82c99a3e86bb1267b236a4b6eff7868d97489af1 blob 4975916 4976258 1438 The big object is at the bottom: 5MB. To find out what file it is, you\u2019ll use the rev-list command, which you used briefly in Enforcing a Specific Commit-Message Format. If you pass --objects to rev-list , it lists all the commit SHA-1s and also the blob SHA-1s with the file paths associated with them. You can use this to find your blob\u2019s name: $ git rev-list --objects --all | grep 82c99a3 82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz Now, you need to remove this file from all trees in your past. You can easily see what commits modified this file: $ git log --oneline --branches -- git.tgz dadf725 oops - removed large tarball 7b30847 add git tarball You must rewrite all the commits downstream from 7b30847 to fully remove this file from your Git history. To do so, you use filter-branch , which you used in Rewriting History: $ git filter-branch --index-filter \\ 'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^.. Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz' Rewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2) Ref 'refs/heads/master' was rewritten The --index-filter option is similar to the --tree-filter option used in Rewriting History, except that instead of passing a command that modifies files checked out on disk, you\u2019re modifying your staging area or index each time. Rather than remove a specific file with something like rm file , you have to remove it with git rm --cached \u2013 you must remove it from the index, not from disk. The reason to do it this way is speed \u2013 because Git doesn\u2019t have to check out each revision to disk before running your filter, the process can be much, much faster. You can accomplish the same task with --tree-filter if you want. The --ignore-unmatch option to git rm tells it not to error out if the pattern you\u2019re trying to remove isn\u2019t there. Finally, you ask filter-branch to rewrite your history only from the 7b30847 commit up, because you know that is where this problem started. Otherwise, it will start from the beginning and will unnecessarily take longer. Your history no longer contains a reference to that file. However, your reflog and a new set of refs that Git added when you did the filter-branch under .git/refs/original still do, so you have to remove them and then repack the database. You need to get rid of anything that has a pointer to those old commits before you repack: $ rm -Rf .git/refs/original $ rm -Rf .git/logs/ $ git gc Counting objects: 15, done. Delta compression using up to 8 threads. Compressing objects: 100% (11/11), done. Writing objects: 100% (15/15), done. Total 15 (delta 1), reused 12 (delta 0) Let\u2019s see how much space you saved. $ git count-objects -v count: 11 size: 4904 in-pack: 15 packs: 1 size-pack: 8 prune-packable: 0 garbage: 0 size-garbage: 0 The packed repository size is down to 8K, which is much better than 5MB. You can see from the size value that the big object is still in your loose objects, so it\u2019s not gone; but it won\u2019t be transferred on a push or subsequent clone, which is what is important. If you really wanted to, you could remove the object completely by running git prune with the --expire option: $ git prune --expire now $ git count-objects -v count: 0 size: 0 in-pack: 15 packs: 1 size-pack: 8 prune-packable: 0 garbage: 0 size-garbage: 0","title":"Git maintain data recovery"},{"location":"Git/git_maintain_data_recovery/#maintenance-and-data-recovery","text":"Occasionally, you may have to do some cleanup \u2013 make a repository more compact, clean up an imported repository, or recover lost work. This section will cover some of these scenarios.","title":"Maintenance and Data Recovery"},{"location":"Git/git_maintain_data_recovery/#maintenance","text":"Occasionally, Git automatically runs a command called \u201cauto gc\u201d. Most of the time, this command does nothing. However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged git gc command. The \u201cgc\u201d stands for garbage collect, and the command does a number of things: it gathers up all the loose objects and places them in packfiles, it consolidates packfiles into one big packfile, and it removes objects that aren\u2019t reachable from any commit and are a few months old. You can run auto gc manually as follows: $ git gc --auto Again, this generally does nothing. You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command. You can modify these limits with the gc.auto and gc.autopacklimit config settings, respectively. The other thing gc will do is pack up your references into a single file. Suppose your repository contains the following branches and tags: $ find .git/refs -type f .git/refs/heads/experiment .git/refs/heads/master .git/refs/tags/v1.0 .git/refs/tags/v1.1 If you run git gc , you\u2019ll no longer have these files in the refs directory. Git will move them for the sake of efficiency into a file named .git/packed-refs that looks like this: $ cat .git/packed-refs # pack-refs with: peeled fully-peeled cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0 9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1 ^1a410efbd13591db07496601ebc7a059dd55cfe9 If you update a reference, Git doesn\u2019t edit this file but instead writes a new file to refs/heads . To get the appropriate SHA-1 for a given reference, Git checks for that reference in the refs directory and then checks the packed-refs file as a fallback. However, if you can\u2019t find a reference in the refs directory, it\u2019s probably in your packed-refs file. Notice the last line of the file, which begins with a ^ . This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to.","title":"Maintenance"},{"location":"Git/git_maintain_data_recovery/#data-recovery","text":"At some point in your Git journey, you may accidentally lose a commit. Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from. Assuming this happens, how can you get your commits back? Here\u2019s an example that hard-resets the master branch in your test repository to an older commit and then recovers the lost commits. First, let\u2019s review where your repository is at this point: $ git log --pretty=oneline ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit 484a59275031909e19aadb7c92262719cfcdf19a added repo.rb 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit Now, move the master branch back to the middle commit: $ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9 HEAD is now at 1a410ef third commit $ git log --pretty=oneline 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit You\u2019ve effectively lost the top two commits \u2013 you have no branch from which those commits are reachable. You need to find the latest commit SHA-1 and then add a branch that points to it. The trick is finding that latest commit SHA-1 \u2013 it\u2019s not like you\u2019ve memorized it, right? Often, the quickest way is to use a tool called git reflog . As you\u2019re working, Git silently records what your HEAD is every time you change it. Each time you commit or change branches, the reflog is updated. The reflog is also updated by the git update-ref command, which is another reason to use it instead of just writing the SHA-1 value to your ref files, as we covered in Git References. You can see where you\u2019ve been at any time by running git reflog : $ git reflog 1a410ef HEAD@{0}: reset: moving to 1a410ef ab1afef HEAD@{1}: commit: modified repo.rb a bit 484a592 HEAD@{2}: commit: added repo.rb Here we can see the two commits that we have had checked out, however there is not much information here. To see the same information in a much more useful way, we can run git log -g , which will give you a normal log output for your reflog. $ git log -g commit 1a410efbd13591db07496601ebc7a059dd55cfe9 Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>) Reflog message: updating HEAD Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:22:37 2009 -0700 third commit commit ab1afef80fac8e34258ff41fc1b867c702daa24b Reflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>) Reflog message: updating HEAD Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:15:24 2009 -0700 modified repo.rb a bit It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit. For example, you can start a branch named recover-branch at that commit (ab1afef): $ git branch recover-branch ab1afef $ git log --pretty=oneline recover-branch ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit 484a59275031909e19aadb7c92262719cfcdf19a added repo.rb 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit Cool \u2013 now you have a branch named recover-branch that is where your master branch used to be, making the first two commits reachable again. Next, suppose your loss was for some reason not in the reflog \u2013 you can simulate that by removing recover-branch and deleting the reflog. Now the first two commits aren\u2019t reachable by anything: $ git branch -D recover-branch $ rm -Rf .git/logs/ Because the reflog data is kept in the .git/logs/ directory, you effectively have no reflog. How can you recover that commit at this point? One way is to use the git fsck utility, which checks your database for integrity. If you run it with the --full option, it shows you all objects that aren\u2019t pointed to by another object: $ git fsck --full Checking object directories: 100% (256/256), done. Checking objects: 100% (18/18), done. dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4 dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9 dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293 In this case, you can see your missing commit after the string \u201cdangling commit\u201d. You can recover it the same way, by adding a branch that points to that SHA-1.","title":"Data Recovery"},{"location":"Git/git_maintain_data_recovery/#removing-object","text":"There are a lot of great things about Git, but one feature that can cause issues is the fact that a git clone downloads the entire history of the project, including every version of every file. This is fine if the whole thing is source code, because Git is highly optimized to compress that data efficiently. However, if someone at any point in the history of your project added a single huge file, every clone for all time will be forced to download that large file, even if it was removed from the project in the very next commit. Because it\u2019s reachable from the history, it will always be there. This can be a huge problem when you\u2019re converting Subversion or Perforce repositories into Git. Because you don\u2019t download the whole history in those systems, this type of addition carries few consequences. If you did an import from another system or otherwise find that your repository is much larger than it should be, here is how you can find and remove large objects. Be warned: this technique is destructive to your commit history. It rewrites every commit object since the earliest tree you have to modify to remove a large file reference. If you do this immediately after an import, before anyone has started to base work on the commit, you\u2019re fine \u2013 otherwise, you have to notify all contributors that they must rebase their work onto your new commits. To demonstrate, you\u2019ll add a large file into your test repository, remove it in the next commit, find it, and remove it permanently from the repository. First, add a large object to your history: $ curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz $ git add git.tgz $ git commit -m 'add git tarball' [master 7b30847] add git tarball 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 git.tgz Oops \u2013 you didn\u2019t want to add a huge tarball to your project. Better get rid of it: $ git rm git.tgz rm 'git.tgz' $ git commit -m 'oops - removed large tarball' [master dadf725] oops - removed large tarball 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 git.tgz Now, gc your database and see how much space you\u2019re using: $ git gc Counting objects: 17, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (17/17), done. Total 17 (delta 1), reused 10 (delta 0) You can run the count-objects command to quickly see how much space you\u2019re using: $ git count-objects -v count: 7 size: 32 in-pack: 17 packs: 1 size-pack: 4868 prune-packable: 0 garbage: 0 size-garbage: 0 The size-pack entry is the size of your packfiles in kilobytes, so you\u2019re using almost 5MB. Before the last commit, you were using closer to 2K \u2013 clearly, removing the file from the previous commit didn\u2019t remove it from your history. Every time anyone clones this repository, they will have to clone all 5MB just to get this tiny project, because you accidentally added a big file. Let\u2019s get rid of it. First you have to find it. In this case, you already know what file it is. But suppose you didn\u2019t; how would you identify what file or files were taking up so much space? If you run git gc , all the objects are in a packfile; you can identify the big objects by running another plumbing command called git verify-pack and sorting on the third field in the output, which is file size. You can also pipe it through the tail command because you\u2019re only interested in the last few largest files: $ git verify-pack -v .git/objects/pack/pack-29\u202669.idx \\ | sort -k 3 -n \\ | tail -3 dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 22044 5792 4977696 82c99a3e86bb1267b236a4b6eff7868d97489af1 blob 4975916 4976258 1438 The big object is at the bottom: 5MB. To find out what file it is, you\u2019ll use the rev-list command, which you used briefly in Enforcing a Specific Commit-Message Format. If you pass --objects to rev-list , it lists all the commit SHA-1s and also the blob SHA-1s with the file paths associated with them. You can use this to find your blob\u2019s name: $ git rev-list --objects --all | grep 82c99a3 82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz Now, you need to remove this file from all trees in your past. You can easily see what commits modified this file: $ git log --oneline --branches -- git.tgz dadf725 oops - removed large tarball 7b30847 add git tarball You must rewrite all the commits downstream from 7b30847 to fully remove this file from your Git history. To do so, you use filter-branch , which you used in Rewriting History: $ git filter-branch --index-filter \\ 'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^.. Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz' Rewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2) Ref 'refs/heads/master' was rewritten The --index-filter option is similar to the --tree-filter option used in Rewriting History, except that instead of passing a command that modifies files checked out on disk, you\u2019re modifying your staging area or index each time. Rather than remove a specific file with something like rm file , you have to remove it with git rm --cached \u2013 you must remove it from the index, not from disk. The reason to do it this way is speed \u2013 because Git doesn\u2019t have to check out each revision to disk before running your filter, the process can be much, much faster. You can accomplish the same task with --tree-filter if you want. The --ignore-unmatch option to git rm tells it not to error out if the pattern you\u2019re trying to remove isn\u2019t there. Finally, you ask filter-branch to rewrite your history only from the 7b30847 commit up, because you know that is where this problem started. Otherwise, it will start from the beginning and will unnecessarily take longer. Your history no longer contains a reference to that file. However, your reflog and a new set of refs that Git added when you did the filter-branch under .git/refs/original still do, so you have to remove them and then repack the database. You need to get rid of anything that has a pointer to those old commits before you repack: $ rm -Rf .git/refs/original $ rm -Rf .git/logs/ $ git gc Counting objects: 15, done. Delta compression using up to 8 threads. Compressing objects: 100% (11/11), done. Writing objects: 100% (15/15), done. Total 15 (delta 1), reused 12 (delta 0) Let\u2019s see how much space you saved. $ git count-objects -v count: 11 size: 4904 in-pack: 15 packs: 1 size-pack: 8 prune-packable: 0 garbage: 0 size-garbage: 0 The packed repository size is down to 8K, which is much better than 5MB. You can see from the size value that the big object is still in your loose objects, so it\u2019s not gone; but it won\u2019t be transferred on a push or subsequent clone, which is what is important. If you really wanted to, you could remove the object completely by running git prune with the --expire option: $ git prune --expire now $ git count-objects -v count: 0 size: 0 in-pack: 15 packs: 1 size-pack: 8 prune-packable: 0 garbage: 0 size-garbage: 0","title":"Removing Object"},{"location":"Git/git_object/","text":"Plumbing and Porcelain This book covers how to use Git with 30 or so verbs such as checkout , branch , remote , and so on. But because Git was initially a toolkit for a VCS rather than a full user-friendly VCS, it has a bunch of verbs that do low-level work and were designed to be chained together UNIX style or called from scripts. These commands are generally referred to as \u201cplumbing\u201d commands, and the more user-friendly commands are called \u201cporcelain\u201d commands. The book\u2019s first nine chapters deal almost exclusively with porcelain commands. But in this chapter, you\u2019ll be dealing mostly with the lower-level plumbing commands, because they give you access to the inner workings of Git, and help demonstrate how and why Git does what it does. When you run git init in a new or existing directory, Git creates the .git directory, This entire chapter basically deals with the stuff in this directory. Here\u2019s what it looks like: $ ls -F1 HEAD config* description hooks/ info/ objects/ refs/ You may see some other files in there, but this is a fresh git init repository \u2013 it\u2019s what you see by default. The description file is only used by the GitWeb program, so don\u2019t worry about it. The config file contains your project-specific configuration options, and the info directory keeps a global exclude file for ignored patterns that you don\u2019t want to track in a .gitignore file. The hooks directory contains your client- or server-side hook scripts, which are discussed in detail in Git Hooks. This leaves four important entries: the HEAD and (yet to be created) index files, and the objects and refs directories. These are the core parts of Git. The objects directory stores all the content for your database, the refs directory stores pointers into commit objects in that data (branches), the HEAD file points to the branch you currently have checked out, and the index file is where Git stores your staging area information. You\u2019ll now look at each of these sections in detail to see how Git operates. Git Objects Git is a content-addressable filesystem. Great. What does that mean? It means that at the core of Git is a simple key-value data store. You can insert any kind of content into it, and it will give you back a key that you can use to retrieve the content again at any time. To demonstrate, you can use the plumbing command hash-object , which takes some data, stores it in your .git directory, and gives you back the key the data is stored as. First, you initialize a new Git repository and verify that there is nothing in the objects directory: $ git init test Initialized empty Git repository in /tmp/test/.git/ $ cd test $ find .git/objects .git/objects .git/objects/info .git/objects/pack $ find .git/objects -type f Git has initialized the objects directory and created pack and info subdirectories in it, but there are no regular files. Now, store some text in your Git database: $ echo 'test content' | git hash-object -w --stdin d670460b4b4aece5915caf5c68d12f560a9fe3e4 The output from the command is a 40-character checksum hash. This is the SHA-1 hash \u2013 a checksum of the content you\u2019re storing plus a header, which you\u2019ll learn about in a bit. Now you can see how Git has stored your data: $ find .git/objects -type f .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 You can see a file in the objects directory. This is how Git stores the content initially \u2013 as a single file per piece of content, named with the SHA-1 checksum of the content and its header. The subdirectory is named with the first 2 characters of the SHA-1, and the filename is the remaining 38 characters. You can pull the content back out of Git with the cat-file command. This command is sort of a Swiss army knife for inspecting Git objects. Passing -p to it instructs the cat-file command to figure out the type of content and display it nicely for you: $ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 test content Now, you can add content to Git and pull it back out again. You can also do this with content in files. For example, you can do some simple version control on a file. First, create a new file and save its contents in your database: $ echo 'version 1' > test.txt $ git hash-object -w test.txt 83baae61804e65cc73a7201a7252750c76066a30 Then, write some new content to the file, and save it again: $ echo 'version 2' > test.txt $ git hash-object -w test.txt 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a Your database contains the two new versions of the file as well as the first content you stored there: $ find .git/objects -type f .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 Now you can revert the file back to the first version $ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt $ cat test.txt version 1 But remembering the SHA-1 key for each version of your file isn\u2019t practical; plus, you aren\u2019t storing the filename in your system \u2013 just the content. This object type is called a blob. You can have Git tell you the object type of any object in Git, given its SHA-1 key, with cat-file -t : $ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob Tree Objects The next type we\u2019ll look at is the tree, which solves the problem of storing the filename and also allows you to store a group of files together. Git stores content in a manner similar to a UNIX filesystem, but a bit simplified. All the content is stored as tree and blob objects, with trees corresponding to UNIX directory entries and blobs corresponding more or less to inodes or file contents. A single tree object contains one or more tree entries, each of which contains a SHA-1 pointer to a blob or subtree with its associated mode, type, and filename. For example, the most recent tree in a project may look something like this: $ git cat-file -p master^{tree} 100644 blob a906cb2a4a904a152e80877d4088654daad0c859 README 100644 blob 8f94139338f9404f26296befa88755fc2598c289 Rakefile 040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 lib The master^{tree} syntax specifies the tree object that is pointed to by the last commit on your master branch. Notice that the lib subdirectory isn\u2019t a blob but a pointer to another tree: $ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b simplegit.rb Conceptually, the data that Git is storing is something like this: Commit Objects You have three trees that specify the different snapshots of your project that you want to track, but the earlier problem remains: you must remember all three SHA-1 values in order to recall the snapshots. You also don\u2019t have any information about who saved the snapshots, when they were saved, or why they were saved. This is the basic information that the commit object stores for you. To create a commit object, you call commit-tree and specify a single tree SHA-1 and which commit objects, if any, directly preceded it. Start with the first tree you wrote: $ echo 'first commit' | git commit-tree d8329f fdf4fc3344e67ab068f836878b6c4951e3b15f3d You will get a different hash value because of different creation time and author data. Replace commit and tag hashes with your own checksums further in this chapter. Now you can look at your new commit object with cat-file : $ git cat-file -p fdf4fc3 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 author Scott Chacon <schacon@gmail.com> 1243040974 -0700 committer Scott Chacon <schacon@gmail.com> 1243040974 -0700 first commit The format for a commit object is simple: it specifies the top-level tree for the snapshot of the project at that point; the author/committer information (which uses your user.name and user.email configuration settings and a timestamp); a blank line, and then the commit message. Next, you\u2019ll write the other two commit objects, each referencing the commit that came directly before it: $ echo 'second commit' | git commit-tree 0155eb -p fdf4fc3 cac0cab538b970a37ea1e769cbbde608743bc96d $ echo 'third commit' | git commit-tree 3c4e9c -p cac0cab 1a410efbd13591db07496601ebc7a059dd55cfe9 Each of the three commit objects points to one of the three snapshot trees you created. Oddly enough, you have a real Git history now that you can view with the git log command, if you run it on the last commit SHA-1: $ git log --stat 1a410e commit 1a410efbd13591db07496601ebc7a059dd55cfe9 Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:15:24 2009 -0700 third commit bak/test.txt | 1 + 1 file changed, 1 insertion(+) commit cac0cab538b970a37ea1e769cbbde608743bc96d Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:14:29 2009 -0700 second commit new.txt | 1 + test.txt | 2 +- 2 files changed, 2 insertions(+), 1 deletion(-) commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:09:34 2009 -0700 first commit test.txt | 1 + 1 file changed, 1 insertion(+) Amazing. You\u2019ve just done the low-level operations to build up a Git history without using any of the front end commands. This is essentially what Git does when you run the git add and git commit commands \u2013 it stores blobs for the files that have changed, updates the index, writes out trees, and writes commit objects that reference the top-level trees and the commits that came immediately before them. These three main Git objects \u2013 the blob, the tree, and the commit \u2013 are initially stored as separate files in your .git/objects directory. Here are all the objects in the example directory now, commented with what they store: $ find .git/objects -type f .git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2 .git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3 .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2 .git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1 .git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content' .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt .git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1 If you follow all the internal pointers, you get an object graph something like this: Object Storage We mentioned earlier that a header is stored with the content. Let\u2019s take a minute to look at how Git stores its objects. You\u2019ll see how to store a blob object \u2013 in this case, the string \u201cwhat is up, doc?\u201d \u2013 interactively in the Ruby scripting language. You can start up interactive Ruby mode with the irb command: $ irb >> content = \"what is up, doc?\" => \"what is up, doc?\" Git constructs a header that starts with the type of the object, in this case a blob. Then, it adds a space followed by the size of the content and finally a null byte: >> header = \"blob #{content.length}\\0\" => \"blob 16\\u0000\" Git concatenates the header and the original content and then calculates the SHA-1 checksum of that new content. You can calculate the SHA-1 value of a string in Ruby by including the SHA1 digest library with the require command and then calling Digest::SHA1.hexdigest() with the string: >> store = header + content => \"blob 16\\u0000what is up, doc?\" >> require 'digest/sha1' => true >> sha1 = Digest::SHA1.hexdigest(store) => \"bd9dbf5aae1a3862dd1526723246b20206e5fc37\" Git compresses the new content with zlib, which you can do in Ruby with the zlib library. First, you need to require the library and then run Zlib::Deflate.deflate() on the content: >> require 'zlib' => true >> zlib_content = Zlib::Deflate.deflate(store) => \"x\\x9CK\\xCA\\xC9OR04c(\\xCFH,Q\\xC8,V(-\\xD0QH\\xC9O\\xB6\\a\\x00_\\x1C\\a\\x9D\" Finally, you\u2019ll write your zlib-deflated content to an object on disk. You\u2019ll determine the path of the object you want to write out (the first two characters of the SHA-1 value being the subdirectory name, and the last 38 characters being the filename within that directory). In Ruby, you can use the FileUtils.mkdir_p() function to create the subdirectory if it doesn\u2019t exist. Then, open the file with File.open() and write out the previously zlib-compressed content to the file with a write() call on the resulting file handle: >> path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38] => \".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37\" >> require 'fileutils' => true >> FileUtils.mkdir_p(File.dirname(path)) => \".git/objects/bd\" >> File.open(path, 'w') { |f| f.write zlib_content } => 32","title":"Git object"},{"location":"Git/git_object/#plumbing-and-porcelain","text":"This book covers how to use Git with 30 or so verbs such as checkout , branch , remote , and so on. But because Git was initially a toolkit for a VCS rather than a full user-friendly VCS, it has a bunch of verbs that do low-level work and were designed to be chained together UNIX style or called from scripts. These commands are generally referred to as \u201cplumbing\u201d commands, and the more user-friendly commands are called \u201cporcelain\u201d commands. The book\u2019s first nine chapters deal almost exclusively with porcelain commands. But in this chapter, you\u2019ll be dealing mostly with the lower-level plumbing commands, because they give you access to the inner workings of Git, and help demonstrate how and why Git does what it does. When you run git init in a new or existing directory, Git creates the .git directory, This entire chapter basically deals with the stuff in this directory. Here\u2019s what it looks like: $ ls -F1 HEAD config* description hooks/ info/ objects/ refs/ You may see some other files in there, but this is a fresh git init repository \u2013 it\u2019s what you see by default. The description file is only used by the GitWeb program, so don\u2019t worry about it. The config file contains your project-specific configuration options, and the info directory keeps a global exclude file for ignored patterns that you don\u2019t want to track in a .gitignore file. The hooks directory contains your client- or server-side hook scripts, which are discussed in detail in Git Hooks. This leaves four important entries: the HEAD and (yet to be created) index files, and the objects and refs directories. These are the core parts of Git. The objects directory stores all the content for your database, the refs directory stores pointers into commit objects in that data (branches), the HEAD file points to the branch you currently have checked out, and the index file is where Git stores your staging area information. You\u2019ll now look at each of these sections in detail to see how Git operates.","title":"Plumbing and Porcelain"},{"location":"Git/git_object/#git-objects","text":"Git is a content-addressable filesystem. Great. What does that mean? It means that at the core of Git is a simple key-value data store. You can insert any kind of content into it, and it will give you back a key that you can use to retrieve the content again at any time. To demonstrate, you can use the plumbing command hash-object , which takes some data, stores it in your .git directory, and gives you back the key the data is stored as. First, you initialize a new Git repository and verify that there is nothing in the objects directory: $ git init test Initialized empty Git repository in /tmp/test/.git/ $ cd test $ find .git/objects .git/objects .git/objects/info .git/objects/pack $ find .git/objects -type f Git has initialized the objects directory and created pack and info subdirectories in it, but there are no regular files. Now, store some text in your Git database: $ echo 'test content' | git hash-object -w --stdin d670460b4b4aece5915caf5c68d12f560a9fe3e4 The output from the command is a 40-character checksum hash. This is the SHA-1 hash \u2013 a checksum of the content you\u2019re storing plus a header, which you\u2019ll learn about in a bit. Now you can see how Git has stored your data: $ find .git/objects -type f .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 You can see a file in the objects directory. This is how Git stores the content initially \u2013 as a single file per piece of content, named with the SHA-1 checksum of the content and its header. The subdirectory is named with the first 2 characters of the SHA-1, and the filename is the remaining 38 characters. You can pull the content back out of Git with the cat-file command. This command is sort of a Swiss army knife for inspecting Git objects. Passing -p to it instructs the cat-file command to figure out the type of content and display it nicely for you: $ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4 test content Now, you can add content to Git and pull it back out again. You can also do this with content in files. For example, you can do some simple version control on a file. First, create a new file and save its contents in your database: $ echo 'version 1' > test.txt $ git hash-object -w test.txt 83baae61804e65cc73a7201a7252750c76066a30 Then, write some new content to the file, and save it again: $ echo 'version 2' > test.txt $ git hash-object -w test.txt 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a Your database contains the two new versions of the file as well as the first content you stored there: $ find .git/objects -type f .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 Now you can revert the file back to the first version $ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 > test.txt $ cat test.txt version 1 But remembering the SHA-1 key for each version of your file isn\u2019t practical; plus, you aren\u2019t storing the filename in your system \u2013 just the content. This object type is called a blob. You can have Git tell you the object type of any object in Git, given its SHA-1 key, with cat-file -t : $ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob","title":"Git Objects"},{"location":"Git/git_object/#tree-objects","text":"The next type we\u2019ll look at is the tree, which solves the problem of storing the filename and also allows you to store a group of files together. Git stores content in a manner similar to a UNIX filesystem, but a bit simplified. All the content is stored as tree and blob objects, with trees corresponding to UNIX directory entries and blobs corresponding more or less to inodes or file contents. A single tree object contains one or more tree entries, each of which contains a SHA-1 pointer to a blob or subtree with its associated mode, type, and filename. For example, the most recent tree in a project may look something like this: $ git cat-file -p master^{tree} 100644 blob a906cb2a4a904a152e80877d4088654daad0c859 README 100644 blob 8f94139338f9404f26296befa88755fc2598c289 Rakefile 040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 lib The master^{tree} syntax specifies the tree object that is pointed to by the last commit on your master branch. Notice that the lib subdirectory isn\u2019t a blob but a pointer to another tree: $ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0 100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b simplegit.rb Conceptually, the data that Git is storing is something like this:","title":"Tree Objects"},{"location":"Git/git_object/#commit-objects","text":"You have three trees that specify the different snapshots of your project that you want to track, but the earlier problem remains: you must remember all three SHA-1 values in order to recall the snapshots. You also don\u2019t have any information about who saved the snapshots, when they were saved, or why they were saved. This is the basic information that the commit object stores for you. To create a commit object, you call commit-tree and specify a single tree SHA-1 and which commit objects, if any, directly preceded it. Start with the first tree you wrote: $ echo 'first commit' | git commit-tree d8329f fdf4fc3344e67ab068f836878b6c4951e3b15f3d You will get a different hash value because of different creation time and author data. Replace commit and tag hashes with your own checksums further in this chapter. Now you can look at your new commit object with cat-file : $ git cat-file -p fdf4fc3 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 author Scott Chacon <schacon@gmail.com> 1243040974 -0700 committer Scott Chacon <schacon@gmail.com> 1243040974 -0700 first commit The format for a commit object is simple: it specifies the top-level tree for the snapshot of the project at that point; the author/committer information (which uses your user.name and user.email configuration settings and a timestamp); a blank line, and then the commit message. Next, you\u2019ll write the other two commit objects, each referencing the commit that came directly before it: $ echo 'second commit' | git commit-tree 0155eb -p fdf4fc3 cac0cab538b970a37ea1e769cbbde608743bc96d $ echo 'third commit' | git commit-tree 3c4e9c -p cac0cab 1a410efbd13591db07496601ebc7a059dd55cfe9 Each of the three commit objects points to one of the three snapshot trees you created. Oddly enough, you have a real Git history now that you can view with the git log command, if you run it on the last commit SHA-1: $ git log --stat 1a410e commit 1a410efbd13591db07496601ebc7a059dd55cfe9 Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:15:24 2009 -0700 third commit bak/test.txt | 1 + 1 file changed, 1 insertion(+) commit cac0cab538b970a37ea1e769cbbde608743bc96d Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:14:29 2009 -0700 second commit new.txt | 1 + test.txt | 2 +- 2 files changed, 2 insertions(+), 1 deletion(-) commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d Author: Scott Chacon <schacon@gmail.com> Date: Fri May 22 18:09:34 2009 -0700 first commit test.txt | 1 + 1 file changed, 1 insertion(+) Amazing. You\u2019ve just done the low-level operations to build up a Git history without using any of the front end commands. This is essentially what Git does when you run the git add and git commit commands \u2013 it stores blobs for the files that have changed, updates the index, writes out trees, and writes commit objects that reference the top-level trees and the commits that came immediately before them. These three main Git objects \u2013 the blob, the tree, and the commit \u2013 are initially stored as separate files in your .git/objects directory. Here are all the objects in the example directory now, commented with what they store: $ find .git/objects -type f .git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2 .git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3 .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2 .git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1 .git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content' .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt .git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1 If you follow all the internal pointers, you get an object graph something like this:","title":"Commit Objects"},{"location":"Git/git_object/#object-storage","text":"We mentioned earlier that a header is stored with the content. Let\u2019s take a minute to look at how Git stores its objects. You\u2019ll see how to store a blob object \u2013 in this case, the string \u201cwhat is up, doc?\u201d \u2013 interactively in the Ruby scripting language. You can start up interactive Ruby mode with the irb command: $ irb >> content = \"what is up, doc?\" => \"what is up, doc?\" Git constructs a header that starts with the type of the object, in this case a blob. Then, it adds a space followed by the size of the content and finally a null byte: >> header = \"blob #{content.length}\\0\" => \"blob 16\\u0000\" Git concatenates the header and the original content and then calculates the SHA-1 checksum of that new content. You can calculate the SHA-1 value of a string in Ruby by including the SHA1 digest library with the require command and then calling Digest::SHA1.hexdigest() with the string: >> store = header + content => \"blob 16\\u0000what is up, doc?\" >> require 'digest/sha1' => true >> sha1 = Digest::SHA1.hexdigest(store) => \"bd9dbf5aae1a3862dd1526723246b20206e5fc37\" Git compresses the new content with zlib, which you can do in Ruby with the zlib library. First, you need to require the library and then run Zlib::Deflate.deflate() on the content: >> require 'zlib' => true >> zlib_content = Zlib::Deflate.deflate(store) => \"x\\x9CK\\xCA\\xC9OR04c(\\xCFH,Q\\xC8,V(-\\xD0QH\\xC9O\\xB6\\a\\x00_\\x1C\\a\\x9D\" Finally, you\u2019ll write your zlib-deflated content to an object on disk. You\u2019ll determine the path of the object you want to write out (the first two characters of the SHA-1 value being the subdirectory name, and the last 38 characters being the filename within that directory). In Ruby, you can use the FileUtils.mkdir_p() function to create the subdirectory if it doesn\u2019t exist. Then, open the file with File.open() and write out the previously zlib-compressed content to the file with a write() call on the resulting file handle: >> path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38] => \".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37\" >> require 'fileutils' => true >> FileUtils.mkdir_p(File.dirname(path)) => \".git/objects/bd\" >> File.open(path, 'w') { |f| f.write zlib_content } => 32","title":"Object Storage"},{"location":"Git/git_ref_packfiles/","text":"Git References You can run something like git log 1a410e to look through your whole history, but you still have to remember that 1a410e is the last commit in order to walk that history to find all those objects. You need a file in which you can store the SHA-1 value under a simple name so you can use that pointer rather than the raw SHA-1 value. In Git, these are called \u201creferences\u201d or \u201crefs\u201d; you can find the files that contain the SHA-1 values in the .git/refs directory. In the current project, this directory contains no files, but it does contain a simple structure: $ find .git/refs .git/refs .git/refs/heads .git/refs/tags $ find .git/refs -type f To create a new reference that will help you remember where your latest commit is, you can technically do something as simple as this: $ echo \"1a410efbd13591db07496601ebc7a059dd55cfe9\" > .git/refs/heads/master Now, you can use the head reference you just created instead of the SHA-1 value in your Git commands: $ git log --pretty=oneline master 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit You aren\u2019t encouraged to directly edit the reference files. Git provides a safer command to do this if you want to update a reference called update-ref : $ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9 That\u2019s basically what a branch in Git is: a simple pointer or reference to the head of a line of work. To create a branch back at the second commit, you can do this: $ git update-ref refs/heads/test cac0ca Your branch will contain only work from that commit down: $ git log --pretty=oneline test cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit Now, your Git database conceptually looks something like this: When you run commands like git branch (branchname) , Git basically runs that update-ref command to add the SHA-1 of the last commit of the branch you\u2019re on into whatever new reference you want to create. The HEAD The question now is, when you run git branch (branchname) , how does Git know the SHA-1 of the last commit? The answer is the HEAD file. The HEAD file is a symbolic reference to the branch you\u2019re currently on. By symbolic reference, we mean that unlike a normal reference, it doesn\u2019t generally contain a SHA-1 value but rather a pointer to another reference. If you look at the file, you\u2019ll normally see something like this: $ cat .git/HEAD ref: refs/heads/master If you run git checkout test , Git updates the file to look like this: $ cat .git/HEAD ref: refs/heads/test When you run git commit , it creates the commit object, specifying the parent of that commit object to be whatever SHA-1 value the reference in HEAD points to. You can also manually edit this file, but again a safer command exists to do so: symbolic-ref . You can read the value of your HEAD via this command: $ git symbolic-ref HEAD refs/heads/master You can also set the value of HEAD: $ git symbolic-ref HEAD refs/heads/test $ cat .git/HEAD ref: refs/heads/test You can\u2019t set a symbolic reference outside of the refs style: $ git symbolic-ref HEAD test fatal: Refusing to point HEAD outside of refs/ Tags We just finished discussing Git\u2019s three main object types, but there is a fourth. The tag object is very much like a commit object \u2013 it contains a tagger, a date, a message, and a pointer. The main difference is that a tag object generally points to a commit rather than a tree. It\u2019s like a branch reference, but it never moves \u2013 it always points to the same commit but gives it a friendlier name. As discussed in Git \u57fa\u790e, there are two types of tags: annotated and lightweight. You can make a lightweight tag by running something like this: $ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d Notice that the object entry points to the commit SHA-1 value that you tagged. Also notice that it doesn\u2019t need to point to a commit; you can tag any Git object. Remotes The third type of reference that you\u2019ll see is a remote reference. If you add a remote and push to it, Git stores the value you last pushed to that remote for each branch in the refs/remotes directory. For instance, you can add a remote called origin and push your master branch to it: $ git remote add origin git@github.com:schacon/simplegit-progit.git $ git push origin master Counting objects: 11, done. Compressing objects: 100% (5/5), done. Writing objects: 100% (7/7), 716 bytes, done. Total 7 (delta 2), reused 4 (delta 1) To git@github.com:schacon/simplegit-progit.git a11bef0..ca82a6d master -> master Then, you can see what the master branch on the origin remote was the last time you communicated with the server, by checking the refs/remotes/origin/master file: $ cat .git/refs/remotes/origin/master ca82a6dff817ec66f44342007202690a93763949 Remote references differ from branches ( refs/heads references) mainly in that they\u2019re considered read-only. You can git checkout to one, but Git won\u2019t point HEAD at one, so you\u2019ll never update it with a commit command. Git manages them as bookmarks to the last known state of where those branches were on those servers. Packfiles Let\u2019s go back to the objects database for your test Git repository. At this point, you have 11 objects \u2013 4 blobs, 3 trees, 3 commits, and 1 tag: $ find .git/objects -type f .git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2 .git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3 .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2 .git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1 .git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag .git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content' .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt .git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1 Git compresses the contents of these files with zlib, and you\u2019re not storing much, so all these files collectively take up only 925 bytes. You\u2019ll add some larger content to the repository to demonstrate an interesting feature of Git. To demonstrate, we\u2019ll add the repo.rb file from the Grit library \u2013 this is about a 22K source code file: $ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb $ git checkout master $ git add repo.rb $ git commit -m 'added repo.rb' [master 484a592] added repo.rb 3 files changed, 709 insertions(+), 2 deletions(-) delete mode 100644 bak/test.txt create mode 100644 repo.rb rewrite test.txt (100%) If you look at the resulting tree, you can see the SHA-1 value your repo.rb file got for the blob object: $ git cat-file -p master^{tree} 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 repo.rb 100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt You can then use git cat-file to see how big that object is: $ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 22044 Now, modify that file a little, and see what happens: $ echo '# testing' >> repo.rb $ git commit -am 'modified repo a bit' [master 2431da6] modified repo.rb a bit 1 file changed, 1 insertion(+) Check the tree created by that commit, and you see something interesting: $ git cat-file -p master^{tree} 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob b042a60ef7dff760008df33cee372b945b6e884e repo.rb 100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt The blob is now a different blob, which means that although you added only a single line to the end of a 400-line file, Git stored that new content as a completely new object: $ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e 22054 You have two nearly identical 22K objects on your disk (each compressed to approximately 7K). Wouldn\u2019t it be nice if Git could store one of them in full but then the second object only as the delta between it and the first? It turns out that it can. The initial format in which Git saves objects on disk is called a \u201cloose\u201d object format. However, occasionally Git packs up several of these objects into a single binary file called a \u201cpackfile\u201d in order to save space and be more efficient. Git does this if you have too many loose objects around, if you run the git gc command manually, or if you push to a remote server. To see what happens, you can manually ask Git to pack up the objects by calling the git gc command: $ git gc Counting objects: 18, done. Delta compression using up to 8 threads. Compressing objects: 100% (14/14), done. Writing objects: 100% (18/18), done. Total 18 (delta 3), reused 0 (delta 0) If you look in your objects directory, you\u2019ll find that most of your objects are gone, and a new pair of files has appeared: $ find .git/objects -type f .git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 .git/objects/info/packs .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack The objects that remain are the blobs that aren\u2019t pointed to by any commit \u2013 in this case, the \u201cwhat is up, doc?\u201d example and the \u201ctest content\u201d example blobs you created earlier. Because you never added them to any commits, they\u2019re considered dangling and aren\u2019t packed up in your new packfile. The other files are your new packfile and an index. The packfile is a single file containing the contents of all the objects that were removed from your filesystem. The index is a file that contains offsets into that packfile so you can quickly seek to a specific object. What is cool is that although the objects on disk before you ran the gc were collectively about 15K in size, the new packfile is only 7K. You\u2019ve cut your disk usage by half by packing your objects. How does Git do this? When Git packs objects, it looks for files that are named and sized similarly, and stores just the deltas from one version of the file to the next. You can look into the packfile and see what Git did to save space. The git verify-pack plumbing command allows you to see what was packed up: $ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx 2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12 69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167 80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319 43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464 092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610 702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756 d368d0ac0678cbe6cce505be58126d3526706e54 tag 130 122 874 fe879577cb8cffcdf25441725141e310dd7d239b tree 136 136 996 d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree 36 46 1132 deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree 136 136 1178 d982c7cb2c2a972ee391a85da481fc1f9127a01d tree 6 17 1314 1 \\ deef2e1b793907545e50a2ea2ddb5ba6c58c4506 3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree 8 19 1331 1 \\ deef2e1b793907545e50a2ea2ddb5ba6c58c4506 0155eb4229851634a0f03eb265b69f5a2d56f341 tree 71 76 1350 83baae61804e65cc73a7201a7252750c76066a30 blob 10 19 1426 fa49b077972391ad58037050f2a75f74e3671e92 blob 9 18 1445 b042a60ef7dff760008df33cee372b945b6e884e blob 22054 5799 1463 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 9 20 7262 1 \\ b042a60ef7dff760008df33cee372b945b6e884e 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob 10 19 7282 non delta: 15 objects chain length = 1: 3 objects .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok Here, the 033b4 blob, which if you remember was the first version of your repo.rb file, is referencing the b042a blob, which was the second version of the file. The third column in the output is the size of the object in the pack, so you can see that b042a takes up 22K of the file, but that 033b4 only takes up 9 bytes. What is also interesting is that the second version of the file is the one that is stored intact, whereas the original version is stored as a delta \u2013 this is because you\u2019re most likely to need faster access to the most recent version of the file. The really nice thing about this is that it can be repacked at any time. Git will occasionally repack your database automatically, always trying to save more space, but you can also manually repack at any time by running git gc by hand.","title":"Git ref packfiles"},{"location":"Git/git_ref_packfiles/#git-references","text":"You can run something like git log 1a410e to look through your whole history, but you still have to remember that 1a410e is the last commit in order to walk that history to find all those objects. You need a file in which you can store the SHA-1 value under a simple name so you can use that pointer rather than the raw SHA-1 value. In Git, these are called \u201creferences\u201d or \u201crefs\u201d; you can find the files that contain the SHA-1 values in the .git/refs directory. In the current project, this directory contains no files, but it does contain a simple structure: $ find .git/refs .git/refs .git/refs/heads .git/refs/tags $ find .git/refs -type f To create a new reference that will help you remember where your latest commit is, you can technically do something as simple as this: $ echo \"1a410efbd13591db07496601ebc7a059dd55cfe9\" > .git/refs/heads/master Now, you can use the head reference you just created instead of the SHA-1 value in your Git commands: $ git log --pretty=oneline master 1a410efbd13591db07496601ebc7a059dd55cfe9 third commit cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit You aren\u2019t encouraged to directly edit the reference files. Git provides a safer command to do this if you want to update a reference called update-ref : $ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9 That\u2019s basically what a branch in Git is: a simple pointer or reference to the head of a line of work. To create a branch back at the second commit, you can do this: $ git update-ref refs/heads/test cac0ca Your branch will contain only work from that commit down: $ git log --pretty=oneline test cac0cab538b970a37ea1e769cbbde608743bc96d second commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit Now, your Git database conceptually looks something like this: When you run commands like git branch (branchname) , Git basically runs that update-ref command to add the SHA-1 of the last commit of the branch you\u2019re on into whatever new reference you want to create.","title":"Git References"},{"location":"Git/git_ref_packfiles/#the-head","text":"The question now is, when you run git branch (branchname) , how does Git know the SHA-1 of the last commit? The answer is the HEAD file. The HEAD file is a symbolic reference to the branch you\u2019re currently on. By symbolic reference, we mean that unlike a normal reference, it doesn\u2019t generally contain a SHA-1 value but rather a pointer to another reference. If you look at the file, you\u2019ll normally see something like this: $ cat .git/HEAD ref: refs/heads/master If you run git checkout test , Git updates the file to look like this: $ cat .git/HEAD ref: refs/heads/test When you run git commit , it creates the commit object, specifying the parent of that commit object to be whatever SHA-1 value the reference in HEAD points to. You can also manually edit this file, but again a safer command exists to do so: symbolic-ref . You can read the value of your HEAD via this command: $ git symbolic-ref HEAD refs/heads/master You can also set the value of HEAD: $ git symbolic-ref HEAD refs/heads/test $ cat .git/HEAD ref: refs/heads/test You can\u2019t set a symbolic reference outside of the refs style: $ git symbolic-ref HEAD test fatal: Refusing to point HEAD outside of refs/","title":"The HEAD"},{"location":"Git/git_ref_packfiles/#tags","text":"We just finished discussing Git\u2019s three main object types, but there is a fourth. The tag object is very much like a commit object \u2013 it contains a tagger, a date, a message, and a pointer. The main difference is that a tag object generally points to a commit rather than a tree. It\u2019s like a branch reference, but it never moves \u2013 it always points to the same commit but gives it a friendlier name. As discussed in Git \u57fa\u790e, there are two types of tags: annotated and lightweight. You can make a lightweight tag by running something like this: $ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d Notice that the object entry points to the commit SHA-1 value that you tagged. Also notice that it doesn\u2019t need to point to a commit; you can tag any Git object.","title":"Tags"},{"location":"Git/git_ref_packfiles/#remotes","text":"The third type of reference that you\u2019ll see is a remote reference. If you add a remote and push to it, Git stores the value you last pushed to that remote for each branch in the refs/remotes directory. For instance, you can add a remote called origin and push your master branch to it: $ git remote add origin git@github.com:schacon/simplegit-progit.git $ git push origin master Counting objects: 11, done. Compressing objects: 100% (5/5), done. Writing objects: 100% (7/7), 716 bytes, done. Total 7 (delta 2), reused 4 (delta 1) To git@github.com:schacon/simplegit-progit.git a11bef0..ca82a6d master -> master Then, you can see what the master branch on the origin remote was the last time you communicated with the server, by checking the refs/remotes/origin/master file: $ cat .git/refs/remotes/origin/master ca82a6dff817ec66f44342007202690a93763949 Remote references differ from branches ( refs/heads references) mainly in that they\u2019re considered read-only. You can git checkout to one, but Git won\u2019t point HEAD at one, so you\u2019ll never update it with a commit command. Git manages them as bookmarks to the last known state of where those branches were on those servers.","title":"Remotes"},{"location":"Git/git_ref_packfiles/#packfiles","text":"Let\u2019s go back to the objects database for your test Git repository. At this point, you have 11 objects \u2013 4 blobs, 3 trees, 3 commits, and 1 tag: $ find .git/objects -type f .git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2 .git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3 .git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2 .git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1 .git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag .git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content' .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt .git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1 Git compresses the contents of these files with zlib, and you\u2019re not storing much, so all these files collectively take up only 925 bytes. You\u2019ll add some larger content to the repository to demonstrate an interesting feature of Git. To demonstrate, we\u2019ll add the repo.rb file from the Grit library \u2013 this is about a 22K source code file: $ curl https://raw.githubusercontent.com/mojombo/grit/master/lib/grit/repo.rb > repo.rb $ git checkout master $ git add repo.rb $ git commit -m 'added repo.rb' [master 484a592] added repo.rb 3 files changed, 709 insertions(+), 2 deletions(-) delete mode 100644 bak/test.txt create mode 100644 repo.rb rewrite test.txt (100%) If you look at the resulting tree, you can see the SHA-1 value your repo.rb file got for the blob object: $ git cat-file -p master^{tree} 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 repo.rb 100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt You can then use git cat-file to see how big that object is: $ git cat-file -s 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 22044 Now, modify that file a little, and see what happens: $ echo '# testing' >> repo.rb $ git commit -am 'modified repo a bit' [master 2431da6] modified repo.rb a bit 1 file changed, 1 insertion(+) Check the tree created by that commit, and you see something interesting: $ git cat-file -p master^{tree} 100644 blob fa49b077972391ad58037050f2a75f74e3671e92 new.txt 100644 blob b042a60ef7dff760008df33cee372b945b6e884e repo.rb 100644 blob e3f094f522629ae358806b17daf78246c27c007b test.txt The blob is now a different blob, which means that although you added only a single line to the end of a 400-line file, Git stored that new content as a completely new object: $ git cat-file -s b042a60ef7dff760008df33cee372b945b6e884e 22054 You have two nearly identical 22K objects on your disk (each compressed to approximately 7K). Wouldn\u2019t it be nice if Git could store one of them in full but then the second object only as the delta between it and the first? It turns out that it can. The initial format in which Git saves objects on disk is called a \u201cloose\u201d object format. However, occasionally Git packs up several of these objects into a single binary file called a \u201cpackfile\u201d in order to save space and be more efficient. Git does this if you have too many loose objects around, if you run the git gc command manually, or if you push to a remote server. To see what happens, you can manually ask Git to pack up the objects by calling the git gc command: $ git gc Counting objects: 18, done. Delta compression using up to 8 threads. Compressing objects: 100% (14/14), done. Writing objects: 100% (18/18), done. Total 18 (delta 3), reused 0 (delta 0) If you look in your objects directory, you\u2019ll find that most of your objects are gone, and a new pair of files has appeared: $ find .git/objects -type f .git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37 .git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 .git/objects/info/packs .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack The objects that remain are the blobs that aren\u2019t pointed to by any commit \u2013 in this case, the \u201cwhat is up, doc?\u201d example and the \u201ctest content\u201d example blobs you created earlier. Because you never added them to any commits, they\u2019re considered dangling and aren\u2019t packed up in your new packfile. The other files are your new packfile and an index. The packfile is a single file containing the contents of all the objects that were removed from your filesystem. The index is a file that contains offsets into that packfile so you can quickly seek to a specific object. What is cool is that although the objects on disk before you ran the gc were collectively about 15K in size, the new packfile is only 7K. You\u2019ve cut your disk usage by half by packing your objects. How does Git do this? When Git packs objects, it looks for files that are named and sized similarly, and stores just the deltas from one version of the file to the next. You can look into the packfile and see what Git did to save space. The git verify-pack plumbing command allows you to see what was packed up: $ git verify-pack -v .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.idx 2431da676938450a4d72e260db3bf7b0f587bbc1 commit 223 155 12 69bcdaff5328278ab1c0812ce0e07fa7d26a96d7 commit 214 152 167 80d02664cb23ed55b226516648c7ad5d0a3deb90 commit 214 145 319 43168a18b7613d1281e5560855a83eb8fde3d687 commit 213 146 464 092917823486a802e94d727c820a9024e14a1fc2 commit 214 146 610 702470739ce72005e2edff522fde85d52a65df9b commit 165 118 756 d368d0ac0678cbe6cce505be58126d3526706e54 tag 130 122 874 fe879577cb8cffcdf25441725141e310dd7d239b tree 136 136 996 d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree 36 46 1132 deef2e1b793907545e50a2ea2ddb5ba6c58c4506 tree 136 136 1178 d982c7cb2c2a972ee391a85da481fc1f9127a01d tree 6 17 1314 1 \\ deef2e1b793907545e50a2ea2ddb5ba6c58c4506 3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree 8 19 1331 1 \\ deef2e1b793907545e50a2ea2ddb5ba6c58c4506 0155eb4229851634a0f03eb265b69f5a2d56f341 tree 71 76 1350 83baae61804e65cc73a7201a7252750c76066a30 blob 10 19 1426 fa49b077972391ad58037050f2a75f74e3671e92 blob 9 18 1445 b042a60ef7dff760008df33cee372b945b6e884e blob 22054 5799 1463 033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob 9 20 7262 1 \\ b042a60ef7dff760008df33cee372b945b6e884e 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob 10 19 7282 non delta: 15 objects chain length = 1: 3 objects .git/objects/pack/pack-978e03944f5c581011e6998cd0e9e30000905586.pack: ok Here, the 033b4 blob, which if you remember was the first version of your repo.rb file, is referencing the b042a blob, which was the second version of the file. The third column in the output is the size of the object in the pack, so you can see that b042a takes up 22K of the file, but that 033b4 only takes up 9 bytes. What is also interesting is that the second version of the file is the one that is stored intact, whereas the original version is stored as a delta \u2013 this is because you\u2019re most likely to need faster access to the most recent version of the file. The really nice thing about this is that it can be repacked at any time. Git will occasionally repack your database automatically, always trying to save more space, but you can also manually repack at any time by running git gc by hand.","title":"Packfiles"},{"location":"Git/git_refspec/","text":"The Refspec Throughout this book, we\u2019ve used simple mappings from remote branches to local references, but they can be more complex. Suppose you add a remote like this: $ git remote add origin https://github.com/schacon/simplegit-progit It adds a section to your .git/config file, specifying the name of the remote ( origin ), the URL of the remote repository, and the refspec for fetching: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/*:refs/remotes/origin/* The format of the refspec is an optional + , followed by <src>:<dst> , where <src> is the pattern for references on the remote side and <dst> is where those references will be written locally. The + tells Git to update the reference even if it isn\u2019t a fast-forward. In the default case that is automatically written by a git remote add command, Git fetches all the references under refs/heads/ on the server and writes them to refs/remotes/origin/ locally. So, if there is a master branch on the server, you can access the log of that branch locally via $ git log origin/master $ git log remotes/origin/master $ git log refs/remotes/origin/master They\u2019re all equivalent, because Git expands each of them to refs/remotes/origin/master . If you want Git instead to pull down only the master branch each time, and not every other branch on the remote server, you can change the fetch line to fetch = +refs/heads/master:refs/remotes/origin/master This is just the default refspec for git fetch for that remote. If you want to do something one time, you can specify the refspec on the command line, too. To pull the master branch on the remote down to origin/mymaster locally, you can run $ git fetch origin master:refs/remotes/origin/mymaster You can also specify multiple refspecs. On the command line, you can pull down several branches like so: $ git fetch origin master:refs/remotes/origin/mymaster \\ topic:refs/remotes/origin/topic From git@github.com:schacon/simplegit ! [rejected] master -> origin/mymaster (non fast forward) * [new branch] topic -> origin/topic In this case, the master branch pull was rejected because it wasn\u2019t a fast-forward reference. You can override that by specifying the + in front of the refspec. You can also specify multiple refspecs for fetching in your configuration file. If you want to always fetch the master and experiment branches, add two lines: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/master:refs/remotes/origin/master fetch = +refs/heads/experiment:refs/remotes/origin/experiment You can\u2019t use partial globs in the pattern, so this would be invalid: fetch = +refs/heads/qa*:refs/remotes/origin/qa* However, you can use namespaces (or directories) to accomplish something like that. If you have a QA team that pushes a series of branches, and you want to get the master branch and any of the QA team\u2019s branches but nothing else, you can use a config section like this: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/master:refs/remotes/origin/master fetch = +refs/heads/qa/*:refs/remotes/origin/qa/* If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way. Pushing Refspecs It\u2019s nice that you can fetch namespaced references that way, but how does the QA team get their branches into a qa/ namespace in the first place? You accomplish that by using refspecs to push. If the QA team wants to push their master branch to qa/master on the remote server, they can run $ git push origin master:refs/heads/qa/master If they want Git to do that automatically each time they run git push origin , they can add a push value to their config file: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/*:refs/remotes/origin/* push = refs/heads/master:refs/heads/qa/master Again, this will cause a git push origin to push the local master branch to the remote qa/master branch by default. Deleting References You can also use the refspec to delete references from the remote server by running something like this: $ git push origin :topic Because the refspec is <src>:<dst> , by leaving off the <src> part, this basically says to make the topic branch on the remote nothing, which deletes it.","title":"Git refspec"},{"location":"Git/git_refspec/#the-refspec","text":"Throughout this book, we\u2019ve used simple mappings from remote branches to local references, but they can be more complex. Suppose you add a remote like this: $ git remote add origin https://github.com/schacon/simplegit-progit It adds a section to your .git/config file, specifying the name of the remote ( origin ), the URL of the remote repository, and the refspec for fetching: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/*:refs/remotes/origin/* The format of the refspec is an optional + , followed by <src>:<dst> , where <src> is the pattern for references on the remote side and <dst> is where those references will be written locally. The + tells Git to update the reference even if it isn\u2019t a fast-forward. In the default case that is automatically written by a git remote add command, Git fetches all the references under refs/heads/ on the server and writes them to refs/remotes/origin/ locally. So, if there is a master branch on the server, you can access the log of that branch locally via $ git log origin/master $ git log remotes/origin/master $ git log refs/remotes/origin/master They\u2019re all equivalent, because Git expands each of them to refs/remotes/origin/master . If you want Git instead to pull down only the master branch each time, and not every other branch on the remote server, you can change the fetch line to fetch = +refs/heads/master:refs/remotes/origin/master This is just the default refspec for git fetch for that remote. If you want to do something one time, you can specify the refspec on the command line, too. To pull the master branch on the remote down to origin/mymaster locally, you can run $ git fetch origin master:refs/remotes/origin/mymaster You can also specify multiple refspecs. On the command line, you can pull down several branches like so: $ git fetch origin master:refs/remotes/origin/mymaster \\ topic:refs/remotes/origin/topic From git@github.com:schacon/simplegit ! [rejected] master -> origin/mymaster (non fast forward) * [new branch] topic -> origin/topic In this case, the master branch pull was rejected because it wasn\u2019t a fast-forward reference. You can override that by specifying the + in front of the refspec. You can also specify multiple refspecs for fetching in your configuration file. If you want to always fetch the master and experiment branches, add two lines: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/master:refs/remotes/origin/master fetch = +refs/heads/experiment:refs/remotes/origin/experiment You can\u2019t use partial globs in the pattern, so this would be invalid: fetch = +refs/heads/qa*:refs/remotes/origin/qa* However, you can use namespaces (or directories) to accomplish something like that. If you have a QA team that pushes a series of branches, and you want to get the master branch and any of the QA team\u2019s branches but nothing else, you can use a config section like this: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/master:refs/remotes/origin/master fetch = +refs/heads/qa/*:refs/remotes/origin/qa/* If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way.","title":"The Refspec"},{"location":"Git/git_refspec/#pushing-refspecs","text":"It\u2019s nice that you can fetch namespaced references that way, but how does the QA team get their branches into a qa/ namespace in the first place? You accomplish that by using refspecs to push. If the QA team wants to push their master branch to qa/master on the remote server, they can run $ git push origin master:refs/heads/qa/master If they want Git to do that automatically each time they run git push origin , they can add a push value to their config file: [remote \"origin\"] url = https://github.com/schacon/simplegit-progit fetch = +refs/heads/*:refs/remotes/origin/* push = refs/heads/master:refs/heads/qa/master Again, this will cause a git push origin to push the local master branch to the remote qa/master branch by default.","title":"Pushing Refspecs"},{"location":"Git/git_refspec/#deleting-references","text":"You can also use the refspec to delete references from the remote server by running something like this: $ git push origin :topic Because the refspec is <src>:<dst> , by leaving off the <src> part, this basically says to make the topic branch on the remote nothing, which deletes it.","title":"Deleting References"},{"location":"Git/q%26a/","text":"Q & A stage \u5b58\u5728\u7684\u7528\u610f\u4f55\u5728? http://gitolite.com/uses-of-index.html","title":"Q&a"},{"location":"Git/q%26a/#q-a","text":"stage \u5b58\u5728\u7684\u7528\u610f\u4f55\u5728? http://gitolite.com/uses-of-index.html","title":"Q &amp; A"},{"location":"Git/rebasing/","text":"Rebasing In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase . In this section you\u2019ll learn what rebasing is, how to do it, why it\u2019s a pretty amazing tool, and in what cases you won\u2019t want to use it. The Basic Rebase In this example, The easiest way to integrate the branches, as we\u2019ve already covered, is the merge command. It performs a three-way merge between the two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2), creating a new snapshot (and commit). However, there is another way: you can take the patch of the change that was introduced in C4 and reapply it on top of C3. In Git, this is called rebasing . With the rebase command, you can take all the changes that were committed on one branch and replay them on a different branch. For this example, you would check out the experiment branch, and then rebase it onto the master branch as follows: $ git checkout experiment $ git rebase master First, rewinding head to replay your work on top of it... Applying: added staged command This operation works by going to the common ancestor of the two branches (the one you\u2019re on and the one you\u2019re rebasing onto), getting the diff introduced by each commit of the branch you\u2019re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn. At this point, you can go back to the master branch and do a fast-forward merge. $ git checkout master $ git merge experiment Now, the snapshot pointed to by C4' is exactly the same as the one that was pointed to by C5 in the merge example. There is no difference in the end product of the integration, but rebasing makes for a cleaner history. If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel. More interesting Rebases You can also have your rebase replay on something other than the rebase target branch. Take a history like A history with a topic branch off another topic branch, for example. You branched a topic branch ( server ) to add some server-side functionality to your project, and made a commit. Then, you branched off that to make the client-side changes ( client ) and committed a few times. Finally, you went back to your server branch and did a few more commits. Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it\u2019s tested further. You can take the changes on client that aren\u2019t on server (C8 and C9) and replay them on your master branch by using the --onto option of git rebase : $ git rebase --onto master server client This basically says, \u201cTake the client branch, figure out the patches since it diverged from the server branch, and replay these patches in the client branch as if it was based directly off the master branch instead.\u201d It\u2019s a bit complex, but the result is pretty cool. Now you can fast-forward your master branch $ git checkout master $ git merge client Let\u2019s say you decide to pull in your server branch as well. You can rebase the server branch onto the master branch without having to check it out first by running git rebase <basebranch> <topicbranch> \u2009\u2014\u2009which checks out the topic branch (in this case, server ) for you and replays it onto the base branch ( master ): $ git rebase master server Then, you can fast-forward the base branch ( master ): $ git checkout master $ git merge server You can remove the client and server branches because all the work is integrated and you don\u2019t need them anymore, leaving your history for this entire process looking like Final commit history: $ git branch -d client $ git branch -d server The Perils of Rebasing","title":"Rebasing"},{"location":"Git/rebasing/#rebasing","text":"In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase . In this section you\u2019ll learn what rebasing is, how to do it, why it\u2019s a pretty amazing tool, and in what cases you won\u2019t want to use it.","title":"Rebasing"},{"location":"Git/rebasing/#the-basic-rebase","text":"In this example, The easiest way to integrate the branches, as we\u2019ve already covered, is the merge command. It performs a three-way merge between the two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2), creating a new snapshot (and commit). However, there is another way: you can take the patch of the change that was introduced in C4 and reapply it on top of C3. In Git, this is called rebasing . With the rebase command, you can take all the changes that were committed on one branch and replay them on a different branch. For this example, you would check out the experiment branch, and then rebase it onto the master branch as follows: $ git checkout experiment $ git rebase master First, rewinding head to replay your work on top of it... Applying: added staged command This operation works by going to the common ancestor of the two branches (the one you\u2019re on and the one you\u2019re rebasing onto), getting the diff introduced by each commit of the branch you\u2019re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn. At this point, you can go back to the master branch and do a fast-forward merge. $ git checkout master $ git merge experiment Now, the snapshot pointed to by C4' is exactly the same as the one that was pointed to by C5 in the merge example. There is no difference in the end product of the integration, but rebasing makes for a cleaner history. If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.","title":"The Basic Rebase"},{"location":"Git/rebasing/#more-interesting-rebases","text":"You can also have your rebase replay on something other than the rebase target branch. Take a history like A history with a topic branch off another topic branch, for example. You branched a topic branch ( server ) to add some server-side functionality to your project, and made a commit. Then, you branched off that to make the client-side changes ( client ) and committed a few times. Finally, you went back to your server branch and did a few more commits. Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it\u2019s tested further. You can take the changes on client that aren\u2019t on server (C8 and C9) and replay them on your master branch by using the --onto option of git rebase : $ git rebase --onto master server client This basically says, \u201cTake the client branch, figure out the patches since it diverged from the server branch, and replay these patches in the client branch as if it was based directly off the master branch instead.\u201d It\u2019s a bit complex, but the result is pretty cool. Now you can fast-forward your master branch $ git checkout master $ git merge client Let\u2019s say you decide to pull in your server branch as well. You can rebase the server branch onto the master branch without having to check it out first by running git rebase <basebranch> <topicbranch> \u2009\u2014\u2009which checks out the topic branch (in this case, server ) for you and replays it onto the base branch ( master ): $ git rebase master server Then, you can fast-forward the base branch ( master ): $ git checkout master $ git merge server You can remove the client and server branches because all the work is integrated and you don\u2019t need them anymore, leaving your history for this entire process looking like Final commit history: $ git branch -d client $ git branch -d server","title":"More interesting Rebases"},{"location":"Git/rebasing/#the-perils-of-rebasing","text":"","title":"The Perils of Rebasing"},{"location":"Git/remote/","text":"\u8207\u9060\u7aef\u5354\u540c\u5de5\u4f5c \u986f\u793a\u4f60\u7684\u9060\u7aef \u4f7f\u7528 git remote \u547d\u4ee4\u53ef\u4ee5\u6aa2\u8996\u4f60\u5df2\u7d93\u8a2d\u5b9a\u597d\u7684\u9060\u7aef\u7248\u672c\u5eab\uff0c \u5b83\u6703\u5217\u51fa\u6bcf\u500b\u9060\u7aef\u7248\u672c\u5eab\u7684\u300c\u7c21\u7a31\u300d\u3002 \u5982\u679c\u4f60\u514b\u9686\uff08clone\uff09\u4e86\u4e00\u500b\u9060\u7aef\u7248\u672c\u5eab\uff0c\u4f60\u81f3\u5c11\u770b\u5f97\u5230\u300corigin\u300d\u2014\u2014\u5b83\u662f Git \u7d66\u5b9a\u7684\u9810\u8a2d\u7c21\u7a31\uff0c\u7528\u4f86\u4ee3\u8868\u88ab\u514b\u9686\u7684\u4f86\u6e90\u3002 $ git remote origin \u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a -v \u9078\u9805\u4f86\u986f\u793a Git \u7528\u4f86\u8b80\u5beb\u9060\u7aef\u7c21\u7a31\u6642\u6240\u7528\u7684\u7db2\u5740\u3002 $ git remote -v origin https://github.com/schacon/ticgit (fetch) origin https://github.com/schacon/ticgit (push) \u5982\u679c\u9060\u7aef\u7248\u672c\u5eab\u4e0d\u6b62\u4e00\u500b\uff0c\u9019\u500b\u547d\u4ee4\u6703\u5c07\u5b83\u5011\u5168\u90e8\u5217\u51fa\u4f86\u3002 \u4f8b\u5982\uff0c\u4e00\u500b\u7248\u672c\u5eab\u5167\u9023\u7d50\u4e86\u8a31\u591a\u5176\u5b83\u5354\u4f5c\u8005\u7684\u9060\u7aef\u7248\u672c\u5eab\uff0c\u53ef\u80fd\u770b\u8d77\u4f86\u5c31\u50cf\u9019\u6a23\uff1a $ cd grit $ git remote -v bakkdoor https://github.com/bakkdoor/grit (fetch) bakkdoor https://github.com/bakkdoor/grit (push) cho45 https://github.com/cho45/grit (fetch) cho45 https://github.com/cho45/grit (push) defunkt https://github.com/defunkt/grit (fetch) defunkt https://github.com/defunkt/grit (push) koke git://github.com/koke/grit.git (fetch) koke git://github.com/koke/grit.git (push) origin git@github.com:mojombo/grit.git (fetch) origin git@github.com:mojombo/grit.git (push) \u65b0\u589e\u9060\u7aef\u7248\u672c\u5eab \u6211\u5011\u5728\u4e4b\u524d\u7684\u7ae0\u7bc0\u4e2d\u5df2\u7d93\u63d0\u904e\u4e26\u7d66\u4e86\u4e00\u4e9b\u7bc4\u4f8b\u4f86\u8aaa\u660e clone \u547d\u4ee4\u5982\u4f55\u96b1\u5f0f\u5730\u70ba\u4f60\u52a0\u5165 origin \u9060\u7aef\uff1b \u800c\u5728\u9019\u88e1\u5c07\u8aaa\u660e\u5982\u4f55\u300c\u660e\u78ba\u5730\u300d\u65b0\u589e\u4e00\u500b\u9060\u7aef\u3002 \u9078\u4e00\u500b\u4f60\u53ef\u4ee5\u8f15\u9b06\u5f15\u7528\u7684\u7c21\u7a31\uff0c\u7528\u4f86\u4ee3\u8868\u8981\u65b0\u589e\u7684\u9060\u7aef Git \u7248\u672c\u5eab\uff0c\u7136\u5f8c\u57f7\u884c git remote add <\u7c21\u7a31> <url> \u4f86\u65b0\u589e\u5b83\uff1a $ git remote origin $ git remote add pb https://github.com/paulboone/ticgit $ git remote -v origin https://github.com/schacon/ticgit (fetch) origin https://github.com/schacon/ticgit (push) pb https://github.com/paulboone/ticgit (fetch) pb https://github.com/paulboone/ticgit (push) \u5f9e\u4f60\u7684\u9060\u7aef\u7372\u53d6\u6216\u62c9\u53d6 \u82e5\u8981\u5f9e\u4f60\u7684\u9060\u7aef\u5c08\u6848\u4e2d\u53d6\u5f97\u8cc7\u6599\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\uff1a $ git fetch [remote-name] \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u5f9e Paul \u7684\u7248\u672c\u5eab\u4e2d\u53d6\u5f97\u6240\u6709\u8cc7\u8a0a\uff0c\u800c\u9019\u4e9b\u8cc7\u8a0a\u4e26\u4e0d\u5b58\u5728\u65bc\u4f60\u7684\u7248\u672c\u5eab\u4e2d\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c git fetch pb \uff1a $ git fetch pb remote: Counting objects: 43, done. remote: Compressing objects: 100% (36/36), done. remote: Total 43 (delta 10), reused 31 (delta 5) Unpacking objects: 100% (43/43), done. From https://github.com/paulboone/ticgit * [new branch] master -> pb/master * [new branch] ticgit -> pb/ticgit \u9019\u500b\u547d\u4ee4\u6703\u9023\u5230\u9060\u7aef\u5c08\u6848\uff0c\u7136\u5f8c\u5f9e\u9060\u7aef\u5c08\u6848\u4e2d\u5c07\u4f60\u9084\u6c92\u6709\u7684\u8cc7\u6599\u5168\u90e8\u62c9\u4e0b\u4f86\uff1b \u57f7\u884c\u5b8c\u6210\u5f8c\uff0c\u4f60\u61c9\u8a72\u6703\u6709\u90a3\u500b\u9060\u7aef\u7248\u672c\u5eab\u4e2d\u6240\u6709\u5206\u652f\u7684\u53c3\u7167\uff08reference\uff09\uff08\u8b6f\u8a3b\uff1a\u518d\u6b21\u5f37\u8abf\uff0c\u9060\u7aef\u7684\u5206\u652f\u5728\u672c\u5730\u7aef\u7684\u5206\u8eab\u2014\u2014\u9060\u7aef\u8ffd\u8e64\u5206\u652f\uff09\uff0c\u53ef\u4ee5\u96a8\u6642\u7528\u4f86\u5408\u4f75\u6216\u6aa2\u8996\u3002 \u5f88\u91cd\u8981\u7684\u4e00\u9ede\u662f\uff1a git fetch \u547d\u4ee4\u53ea\u6703\u4e0b\u8f09\u8cc7\u6599\u5230\u4f60\u7684\u7248\u672c\u5eab\u2014\u2014\u5b83\u4e26\u4e0d\u6703\u81ea\u52d5\u5408\u4f75\u4f60\u7684\u4efb\u4f55\u5de5\u4f5c\u5167\u5bb9\u3002 \u5982\u679c\u4f60\u7684\u76ee\u524d\u5206\u652f\u88ab\u8a2d\u5b9a\u70ba\u300c\u8ffd\u8e64\u300d\u9060\u7aef\u4e0a\u7684\u5206\u652f\uff08\u95b1\u8b80\u4e0b\u4e00\u7bc0\u4ee5\u53ca \u4f7f\u7528 Git \u5206\u652f \u4ee5\u4e86\u89e3\u66f4\u591a\u8cc7\u8a0a\uff09\uff0c\u4f60\u4fbf\u53ef\u4f7f\u7528 git pull \u547d\u4ee4\u4f86\u81ea\u52d5\u300c\u7372\u53d6\u300d\u4e26\u300c\u5408\u4f75\u300d\u90a3\u500b\u9060\u7aef\u5206\u652f\u5230\u4f60\u76ee\u524d\u7684\u5206\u652f\u88e1\u53bb\uff1b\u7531\u65bc git clone \u547d\u4ee4\u6703\u300c\u81ea\u52d5\u5730\u300d\u5c07\u672c\u5730\u5206\u652f master \u8a2d\u5b9a\u70ba\u300c\u8ffd\u8e64\u300d\u9060\u7aef\u4e0a\u7684 master\uff08\u7121\u8ad6\u9810\u8a2d\u5206\u652f\u53eb\u4ec0\u9ebc\u540d\u7a31\u3002\u8b6f\u8a3b\uff1a\u53ea\u8981\u662f\u9810\u8a2d\u5206\u652f\u90fd\u6703\u81ea\u52d5\u8a2d\u5b9a\u8ffd\u8e28\u884c\u70ba\uff0c\u800c master \u5e38\u5e38\u662f\u9810\u8a2d\u5206\u652f\uff09 \u63a8\u9001\u5230\u4f60\u7684\u9060\u7aef \u7576\u4f60\u60f3\u5206\u4eab\u4f60\u7684\u5c08\u6848\u6210\u679c\u6642\uff0c\u4f60\u5fc5\u9700\u5c07\u5b83\u63a8\u9001\u5230\u4e0a\u6e38\u3002 \u63a8\u9001\u7684\u547d\u4ee4\u5f88\u7c21\u55ae\uff1a git push [remote-name] [branch-name] \u3002 \u5982\u679c\u4f60\u60f3\u8981\u5c07 master \u5206\u652f\u63a8\u9001\u5230 origin \u4f3a\u670d\u5668\u4e0a\u6642\uff08\u518d\u6b21\u8aaa\u660e\uff0c\u514b\u9686\u6642\u901a\u5e38\u6703\u81ea\u52d5\u5730\u5e6b\u4f60\u8a2d\u5b9a\u597d master \u548c origin \u9019\u4e8c\u500b\u540d\u7a31\uff09\uff0c\u90a3\u9ebc\u4f60\u53ef\u4ee5\u57f7\u884c\u9019\u500b\u547d\u4eca\u5c07\u6240\u6709\u4f60\u5b8c\u6210\u7684\u63d0\u4ea4\uff08commit\uff09\u63a8\u9001\u56de\u4f3a\u670d\u5668\u4e0a\u3002 $ git push origin master \u53ea\u6709\u5728\u4f60\u5c0d\u514b\u9686\u4f86\u6e90\u7684\u4f3a\u670d\u5668\u6709\u5beb\u5165\u6b0a\u9650\uff0c\u4e26\u4e14\u5728\u9019\u500b\u7576\u4e0b\u9084\u6c92\u6709\u5176\u5b83\u4eba\u63a8\u9001\u904e\uff0c\u9019\u500b\u547d\u4ee4\u624d\u6703\u6210\u529f\uff1b \u5982\u679c\u4f60\u548c\u5176\u5b83\u4eba\u540c\u6642\u505a\u4e86\u514b\u9686\uff0c\u7136\u5f8c\u4ed6\u5011\u5148\u63a8\u9001\u5230\u4e0a\u6e38\uff0c\u63a5\u8457\u63db\u4f60\u63a8\u9001\u5230\u4e0a\u6e38\uff0c\u6beb\u7121\u7591\u554f\u5730\u4f60\u7684\u63a8\u9001\u6703\u88ab\u62d2\u7d55\uff1b \u4f60\u5fc5\u9700\u5148\u7372\u53d6\u4ed6\u5011\u7684\u5de5\u4f5c\u5167\u5bb9\uff0c\u5c07\u5176\u6574\u4f75\u5230\u4f60\u4e4b\u524d\u7684\u5de5\u4f5c\u5167\u5bb9\uff0c\u5982\u6b64\u4f60\u624d\u6703\u88ab\u5141\u8a31\u63a8\u9001\u3002 \u6aa2\u8996\u9060\u7aef \u5982\u679c\u4f60\u60f3\u8981\u5c0d\u4e00\u500b\u7279\u5b9a\u9060\u7aef\u6aa2\u8996\u66f4\u591a\u8cc7\u8a0a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 git remote show [remote-name] \u547d\u4ee4\u3002 \u5982\u679c\u4f60\u5728\u57f7\u884c\u9019\u500b\u547d\u4ee4\u4e2d\u4f7f\u7528\u7279\u5b9a\u7684\u7c21\u7a31\uff0c\u4f8b\u5982 origin\uff0c\u4f60\u6703\u5f97\u5230\u4e0b\u9762\u9019\u500b\u985e\u4f3c\u7684\u8a0a\u606f\uff1a $ git remote show origin * remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for 'git pull': master merges with remote master Local ref configured for 'git push': master pushes to master (up to date) \u5b83\u540c\u6642\u5217\u51fa\u4e86\u9060\u7aef\u7248\u672c\u5eab\u7684\u7db2\u5740\u548c\u300c\u8ffd\u8e64\u5206\u652f\uff08tracking branch\uff09\u300d\u8cc7\u8a0a\u3002 \u9019\u500b\u547d\u4ee4\u5f88\u6709\u7528\u5730\u544a\u8a34\u4f60\uff1a\u76ee\u524d\u5206\u652f\u662f master\uff08\u8b6f\u6ce8\uff1aHEAD \u610f\u5473\u8457\u76ee\u524d\u7684\uff09\u3002 \u4e0b\u9762\u662f\u53e6\u4e00\u500b\u4f8b\u5b50: $ git remote show origin * remote origin URL: https://github.com/my-org/complex-project Fetch URL: https://github.com/my-org/complex-project Push URL: https://github.com/my-org/complex-project HEAD branch: master Remote branches: master tracked dev-branch tracked markdown-strip tracked issue-43 new (next fetch will store in remotes/origin) issue-45 new (next fetch will store in remotes/origin) refs/remotes/origin/issue-11 stale (use 'git remote prune' to remove) Local branches configured for 'git pull': dev-branch merges with remote dev-branch master merges with remote master Local refs configured for 'git push': dev-branch pushes to dev-branch (up to date) markdown-strip pushes to markdown-strip (up to date) master pushes to master (up to date) \u9019\u500b\u547d\u4ee4\u986f\u793a\u4e86\u7576\u4f60\u5728\u7279\u5b9a\u7684\u5206\u652f\u4e0a\u57f7\u884c git push \u6642\uff0c\u5b83\u5c07\u81ea\u52d5\u63a8\u9001\u5230\u54ea\u4e00\u500b\u9060\u7aef\u5206\u652f\uff1b \u5b83\u4e5f\u986f\u793a\u4e86\uff1a\u54ea\u4e9b\u9060\u7aef\u5206\u652f\u662f\u5728\u4f60\u7684\u672c\u5730\u7aef\u9084\u6c92\u6709\u7684\uff08\u8b6f\u8a3b\uff1anew \u5c6c\u6027\uff09\u3001\u54ea\u4e9b\u4f60\u66fe\u7372\u53d6\u904e\u7684\u9060\u7aef\u5206\u652f\u5df2\u7d93\u5728\u9060\u7aef\u4e0a\u88ab\u79fb\u9664\u4e86\uff08\u8b6f\u8a3b\uff1astale \u5c6c\u6027\uff09\u3001\u54ea\u4e9b\u672c\u5730\u5206\u652f\u662f\u6709\u80fd\u529b\u5728\u57f7\u884c git pull \u5f8c\u81ea\u52d5\u548c\u5b83\u5011\u7684\u9060\u7aef\u8ffd\u8e64\u5206\u652f\u5408\u4f75\u3002 \u79fb\u9664\u6216\u91cd\u65b0\u547d\u540d\u9060\u7aef \u4f60\u53ef\u4ee5\u57f7\u884c git remote rename \u4f86\u91cd\u65b0\u547d\u540d\u9060\u7aef\u7684\u7c21\u7a31\u3002 \u4f8b\u5982\uff1a\u5982\u679c\u4f60\u60f3\u8981\u5c07 pb \u91cd\u65b0\u547d\u540d\u70ba paul \uff0c\u4f60\u53ef\u4ee5\u9019\u6a23\u4f7f\u7528 git remote rename \uff1a $ git remote rename pb paul $ git remote origin paul \u5982\u679c\u4f60\u56e0\u70ba\u67d0\u4e9b\u539f\u56e0\u60f3\u8981\u79fb\u9664\u4e00\u500b\u9060\u7aef\u2014\u2014\u4f60\u642c\u52d5\u4e86\u4f3a\u670d\u5668\u3001\u6216\u8005\u4e0d\u518d\u4f7f\u7528\u67d0\u500b\u7279\u5b9a\u7684\u93e1\u50cf\u3001\u6216\u8005\u67d0\u500b\u8ca2\u737b\u8005\u4e0d\u518d\u8ca2\u737b\u4e86\u2014\u2014\u4f60\u53ef\u4ee5\u57f7\u884c git remote rm\uff1a $ git remote rm paul $ git remote origin","title":"Remote"},{"location":"Git/remote/#_1","text":"","title":"\u8207\u9060\u7aef\u5354\u540c\u5de5\u4f5c"},{"location":"Git/remote/#_2","text":"\u4f7f\u7528 git remote \u547d\u4ee4\u53ef\u4ee5\u6aa2\u8996\u4f60\u5df2\u7d93\u8a2d\u5b9a\u597d\u7684\u9060\u7aef\u7248\u672c\u5eab\uff0c \u5b83\u6703\u5217\u51fa\u6bcf\u500b\u9060\u7aef\u7248\u672c\u5eab\u7684\u300c\u7c21\u7a31\u300d\u3002 \u5982\u679c\u4f60\u514b\u9686\uff08clone\uff09\u4e86\u4e00\u500b\u9060\u7aef\u7248\u672c\u5eab\uff0c\u4f60\u81f3\u5c11\u770b\u5f97\u5230\u300corigin\u300d\u2014\u2014\u5b83\u662f Git \u7d66\u5b9a\u7684\u9810\u8a2d\u7c21\u7a31\uff0c\u7528\u4f86\u4ee3\u8868\u88ab\u514b\u9686\u7684\u4f86\u6e90\u3002 $ git remote origin \u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a -v \u9078\u9805\u4f86\u986f\u793a Git \u7528\u4f86\u8b80\u5beb\u9060\u7aef\u7c21\u7a31\u6642\u6240\u7528\u7684\u7db2\u5740\u3002 $ git remote -v origin https://github.com/schacon/ticgit (fetch) origin https://github.com/schacon/ticgit (push) \u5982\u679c\u9060\u7aef\u7248\u672c\u5eab\u4e0d\u6b62\u4e00\u500b\uff0c\u9019\u500b\u547d\u4ee4\u6703\u5c07\u5b83\u5011\u5168\u90e8\u5217\u51fa\u4f86\u3002 \u4f8b\u5982\uff0c\u4e00\u500b\u7248\u672c\u5eab\u5167\u9023\u7d50\u4e86\u8a31\u591a\u5176\u5b83\u5354\u4f5c\u8005\u7684\u9060\u7aef\u7248\u672c\u5eab\uff0c\u53ef\u80fd\u770b\u8d77\u4f86\u5c31\u50cf\u9019\u6a23\uff1a $ cd grit $ git remote -v bakkdoor https://github.com/bakkdoor/grit (fetch) bakkdoor https://github.com/bakkdoor/grit (push) cho45 https://github.com/cho45/grit (fetch) cho45 https://github.com/cho45/grit (push) defunkt https://github.com/defunkt/grit (fetch) defunkt https://github.com/defunkt/grit (push) koke git://github.com/koke/grit.git (fetch) koke git://github.com/koke/grit.git (push) origin git@github.com:mojombo/grit.git (fetch) origin git@github.com:mojombo/grit.git (push)","title":"\u986f\u793a\u4f60\u7684\u9060\u7aef"},{"location":"Git/remote/#_3","text":"\u6211\u5011\u5728\u4e4b\u524d\u7684\u7ae0\u7bc0\u4e2d\u5df2\u7d93\u63d0\u904e\u4e26\u7d66\u4e86\u4e00\u4e9b\u7bc4\u4f8b\u4f86\u8aaa\u660e clone \u547d\u4ee4\u5982\u4f55\u96b1\u5f0f\u5730\u70ba\u4f60\u52a0\u5165 origin \u9060\u7aef\uff1b \u800c\u5728\u9019\u88e1\u5c07\u8aaa\u660e\u5982\u4f55\u300c\u660e\u78ba\u5730\u300d\u65b0\u589e\u4e00\u500b\u9060\u7aef\u3002 \u9078\u4e00\u500b\u4f60\u53ef\u4ee5\u8f15\u9b06\u5f15\u7528\u7684\u7c21\u7a31\uff0c\u7528\u4f86\u4ee3\u8868\u8981\u65b0\u589e\u7684\u9060\u7aef Git \u7248\u672c\u5eab\uff0c\u7136\u5f8c\u57f7\u884c git remote add <\u7c21\u7a31> <url> \u4f86\u65b0\u589e\u5b83\uff1a $ git remote origin $ git remote add pb https://github.com/paulboone/ticgit $ git remote -v origin https://github.com/schacon/ticgit (fetch) origin https://github.com/schacon/ticgit (push) pb https://github.com/paulboone/ticgit (fetch) pb https://github.com/paulboone/ticgit (push)","title":"\u65b0\u589e\u9060\u7aef\u7248\u672c\u5eab"},{"location":"Git/remote/#_4","text":"\u82e5\u8981\u5f9e\u4f60\u7684\u9060\u7aef\u5c08\u6848\u4e2d\u53d6\u5f97\u8cc7\u6599\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\uff1a $ git fetch [remote-name] \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u5f9e Paul \u7684\u7248\u672c\u5eab\u4e2d\u53d6\u5f97\u6240\u6709\u8cc7\u8a0a\uff0c\u800c\u9019\u4e9b\u8cc7\u8a0a\u4e26\u4e0d\u5b58\u5728\u65bc\u4f60\u7684\u7248\u672c\u5eab\u4e2d\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c git fetch pb \uff1a $ git fetch pb remote: Counting objects: 43, done. remote: Compressing objects: 100% (36/36), done. remote: Total 43 (delta 10), reused 31 (delta 5) Unpacking objects: 100% (43/43), done. From https://github.com/paulboone/ticgit * [new branch] master -> pb/master * [new branch] ticgit -> pb/ticgit \u9019\u500b\u547d\u4ee4\u6703\u9023\u5230\u9060\u7aef\u5c08\u6848\uff0c\u7136\u5f8c\u5f9e\u9060\u7aef\u5c08\u6848\u4e2d\u5c07\u4f60\u9084\u6c92\u6709\u7684\u8cc7\u6599\u5168\u90e8\u62c9\u4e0b\u4f86\uff1b \u57f7\u884c\u5b8c\u6210\u5f8c\uff0c\u4f60\u61c9\u8a72\u6703\u6709\u90a3\u500b\u9060\u7aef\u7248\u672c\u5eab\u4e2d\u6240\u6709\u5206\u652f\u7684\u53c3\u7167\uff08reference\uff09\uff08\u8b6f\u8a3b\uff1a\u518d\u6b21\u5f37\u8abf\uff0c\u9060\u7aef\u7684\u5206\u652f\u5728\u672c\u5730\u7aef\u7684\u5206\u8eab\u2014\u2014\u9060\u7aef\u8ffd\u8e64\u5206\u652f\uff09\uff0c\u53ef\u4ee5\u96a8\u6642\u7528\u4f86\u5408\u4f75\u6216\u6aa2\u8996\u3002 \u5f88\u91cd\u8981\u7684\u4e00\u9ede\u662f\uff1a git fetch \u547d\u4ee4\u53ea\u6703\u4e0b\u8f09\u8cc7\u6599\u5230\u4f60\u7684\u7248\u672c\u5eab\u2014\u2014\u5b83\u4e26\u4e0d\u6703\u81ea\u52d5\u5408\u4f75\u4f60\u7684\u4efb\u4f55\u5de5\u4f5c\u5167\u5bb9\u3002 \u5982\u679c\u4f60\u7684\u76ee\u524d\u5206\u652f\u88ab\u8a2d\u5b9a\u70ba\u300c\u8ffd\u8e64\u300d\u9060\u7aef\u4e0a\u7684\u5206\u652f\uff08\u95b1\u8b80\u4e0b\u4e00\u7bc0\u4ee5\u53ca \u4f7f\u7528 Git \u5206\u652f \u4ee5\u4e86\u89e3\u66f4\u591a\u8cc7\u8a0a\uff09\uff0c\u4f60\u4fbf\u53ef\u4f7f\u7528 git pull \u547d\u4ee4\u4f86\u81ea\u52d5\u300c\u7372\u53d6\u300d\u4e26\u300c\u5408\u4f75\u300d\u90a3\u500b\u9060\u7aef\u5206\u652f\u5230\u4f60\u76ee\u524d\u7684\u5206\u652f\u88e1\u53bb\uff1b\u7531\u65bc git clone \u547d\u4ee4\u6703\u300c\u81ea\u52d5\u5730\u300d\u5c07\u672c\u5730\u5206\u652f master \u8a2d\u5b9a\u70ba\u300c\u8ffd\u8e64\u300d\u9060\u7aef\u4e0a\u7684 master\uff08\u7121\u8ad6\u9810\u8a2d\u5206\u652f\u53eb\u4ec0\u9ebc\u540d\u7a31\u3002\u8b6f\u8a3b\uff1a\u53ea\u8981\u662f\u9810\u8a2d\u5206\u652f\u90fd\u6703\u81ea\u52d5\u8a2d\u5b9a\u8ffd\u8e28\u884c\u70ba\uff0c\u800c master \u5e38\u5e38\u662f\u9810\u8a2d\u5206\u652f\uff09","title":"\u5f9e\u4f60\u7684\u9060\u7aef\u7372\u53d6\u6216\u62c9\u53d6"},{"location":"Git/remote/#_5","text":"\u7576\u4f60\u60f3\u5206\u4eab\u4f60\u7684\u5c08\u6848\u6210\u679c\u6642\uff0c\u4f60\u5fc5\u9700\u5c07\u5b83\u63a8\u9001\u5230\u4e0a\u6e38\u3002 \u63a8\u9001\u7684\u547d\u4ee4\u5f88\u7c21\u55ae\uff1a git push [remote-name] [branch-name] \u3002 \u5982\u679c\u4f60\u60f3\u8981\u5c07 master \u5206\u652f\u63a8\u9001\u5230 origin \u4f3a\u670d\u5668\u4e0a\u6642\uff08\u518d\u6b21\u8aaa\u660e\uff0c\u514b\u9686\u6642\u901a\u5e38\u6703\u81ea\u52d5\u5730\u5e6b\u4f60\u8a2d\u5b9a\u597d master \u548c origin \u9019\u4e8c\u500b\u540d\u7a31\uff09\uff0c\u90a3\u9ebc\u4f60\u53ef\u4ee5\u57f7\u884c\u9019\u500b\u547d\u4eca\u5c07\u6240\u6709\u4f60\u5b8c\u6210\u7684\u63d0\u4ea4\uff08commit\uff09\u63a8\u9001\u56de\u4f3a\u670d\u5668\u4e0a\u3002 $ git push origin master \u53ea\u6709\u5728\u4f60\u5c0d\u514b\u9686\u4f86\u6e90\u7684\u4f3a\u670d\u5668\u6709\u5beb\u5165\u6b0a\u9650\uff0c\u4e26\u4e14\u5728\u9019\u500b\u7576\u4e0b\u9084\u6c92\u6709\u5176\u5b83\u4eba\u63a8\u9001\u904e\uff0c\u9019\u500b\u547d\u4ee4\u624d\u6703\u6210\u529f\uff1b \u5982\u679c\u4f60\u548c\u5176\u5b83\u4eba\u540c\u6642\u505a\u4e86\u514b\u9686\uff0c\u7136\u5f8c\u4ed6\u5011\u5148\u63a8\u9001\u5230\u4e0a\u6e38\uff0c\u63a5\u8457\u63db\u4f60\u63a8\u9001\u5230\u4e0a\u6e38\uff0c\u6beb\u7121\u7591\u554f\u5730\u4f60\u7684\u63a8\u9001\u6703\u88ab\u62d2\u7d55\uff1b \u4f60\u5fc5\u9700\u5148\u7372\u53d6\u4ed6\u5011\u7684\u5de5\u4f5c\u5167\u5bb9\uff0c\u5c07\u5176\u6574\u4f75\u5230\u4f60\u4e4b\u524d\u7684\u5de5\u4f5c\u5167\u5bb9\uff0c\u5982\u6b64\u4f60\u624d\u6703\u88ab\u5141\u8a31\u63a8\u9001\u3002","title":"\u63a8\u9001\u5230\u4f60\u7684\u9060\u7aef"},{"location":"Git/remote/#_6","text":"\u5982\u679c\u4f60\u60f3\u8981\u5c0d\u4e00\u500b\u7279\u5b9a\u9060\u7aef\u6aa2\u8996\u66f4\u591a\u8cc7\u8a0a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 git remote show [remote-name] \u547d\u4ee4\u3002 \u5982\u679c\u4f60\u5728\u57f7\u884c\u9019\u500b\u547d\u4ee4\u4e2d\u4f7f\u7528\u7279\u5b9a\u7684\u7c21\u7a31\uff0c\u4f8b\u5982 origin\uff0c\u4f60\u6703\u5f97\u5230\u4e0b\u9762\u9019\u500b\u985e\u4f3c\u7684\u8a0a\u606f\uff1a $ git remote show origin * remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for 'git pull': master merges with remote master Local ref configured for 'git push': master pushes to master (up to date) \u5b83\u540c\u6642\u5217\u51fa\u4e86\u9060\u7aef\u7248\u672c\u5eab\u7684\u7db2\u5740\u548c\u300c\u8ffd\u8e64\u5206\u652f\uff08tracking branch\uff09\u300d\u8cc7\u8a0a\u3002 \u9019\u500b\u547d\u4ee4\u5f88\u6709\u7528\u5730\u544a\u8a34\u4f60\uff1a\u76ee\u524d\u5206\u652f\u662f master\uff08\u8b6f\u6ce8\uff1aHEAD \u610f\u5473\u8457\u76ee\u524d\u7684\uff09\u3002 \u4e0b\u9762\u662f\u53e6\u4e00\u500b\u4f8b\u5b50: $ git remote show origin * remote origin URL: https://github.com/my-org/complex-project Fetch URL: https://github.com/my-org/complex-project Push URL: https://github.com/my-org/complex-project HEAD branch: master Remote branches: master tracked dev-branch tracked markdown-strip tracked issue-43 new (next fetch will store in remotes/origin) issue-45 new (next fetch will store in remotes/origin) refs/remotes/origin/issue-11 stale (use 'git remote prune' to remove) Local branches configured for 'git pull': dev-branch merges with remote dev-branch master merges with remote master Local refs configured for 'git push': dev-branch pushes to dev-branch (up to date) markdown-strip pushes to markdown-strip (up to date) master pushes to master (up to date) \u9019\u500b\u547d\u4ee4\u986f\u793a\u4e86\u7576\u4f60\u5728\u7279\u5b9a\u7684\u5206\u652f\u4e0a\u57f7\u884c git push \u6642\uff0c\u5b83\u5c07\u81ea\u52d5\u63a8\u9001\u5230\u54ea\u4e00\u500b\u9060\u7aef\u5206\u652f\uff1b \u5b83\u4e5f\u986f\u793a\u4e86\uff1a\u54ea\u4e9b\u9060\u7aef\u5206\u652f\u662f\u5728\u4f60\u7684\u672c\u5730\u7aef\u9084\u6c92\u6709\u7684\uff08\u8b6f\u8a3b\uff1anew \u5c6c\u6027\uff09\u3001\u54ea\u4e9b\u4f60\u66fe\u7372\u53d6\u904e\u7684\u9060\u7aef\u5206\u652f\u5df2\u7d93\u5728\u9060\u7aef\u4e0a\u88ab\u79fb\u9664\u4e86\uff08\u8b6f\u8a3b\uff1astale \u5c6c\u6027\uff09\u3001\u54ea\u4e9b\u672c\u5730\u5206\u652f\u662f\u6709\u80fd\u529b\u5728\u57f7\u884c git pull \u5f8c\u81ea\u52d5\u548c\u5b83\u5011\u7684\u9060\u7aef\u8ffd\u8e64\u5206\u652f\u5408\u4f75\u3002","title":"\u6aa2\u8996\u9060\u7aef"},{"location":"Git/remote/#_7","text":"\u4f60\u53ef\u4ee5\u57f7\u884c git remote rename \u4f86\u91cd\u65b0\u547d\u540d\u9060\u7aef\u7684\u7c21\u7a31\u3002 \u4f8b\u5982\uff1a\u5982\u679c\u4f60\u60f3\u8981\u5c07 pb \u91cd\u65b0\u547d\u540d\u70ba paul \uff0c\u4f60\u53ef\u4ee5\u9019\u6a23\u4f7f\u7528 git remote rename \uff1a $ git remote rename pb paul $ git remote origin paul \u5982\u679c\u4f60\u56e0\u70ba\u67d0\u4e9b\u539f\u56e0\u60f3\u8981\u79fb\u9664\u4e00\u500b\u9060\u7aef\u2014\u2014\u4f60\u642c\u52d5\u4e86\u4f3a\u670d\u5668\u3001\u6216\u8005\u4e0d\u518d\u4f7f\u7528\u67d0\u500b\u7279\u5b9a\u7684\u93e1\u50cf\u3001\u6216\u8005\u67d0\u500b\u8ca2\u737b\u8005\u4e0d\u518d\u8ca2\u737b\u4e86\u2014\u2014\u4f60\u53ef\u4ee5\u57f7\u884c git remote rm\uff1a $ git remote rm paul $ git remote origin","title":"\u79fb\u9664\u6216\u91cd\u65b0\u547d\u540d\u9060\u7aef"},{"location":"Git/tagging_aliase/","text":"\u6a19\u7c64 \u8ddf\u5927\u591a\u6578\u7684\u7248\u672c\u7ba1\u7406\u7cfb\u7d71\u4e00\u6a23\uff0cGit \u6709\u80fd\u529b\u5c0d\u5c08\u6848\u6b77\u53f2\u4e2d\u6bd4\u8f03\u7279\u5225\u7684\u6642\u9593\u9ede\u8cbc\u6a19\u7c64\uff0c\u4f86\u8868\u793a\u5176\u91cd\u8981\u6027\u3002 \u5217\u51fa\u4f60\u7684\u6a19\u7c64 \u60f3\u8981\u5217\u51fa Git \u4e2d\u6240\u6709\u6a19\u7c64\u7684\u65b9\u6cd5\u975e\u5e38\u76f4\u89ba\u3002 \u53ea\u8981\u8f38\u5165 git tag \u5982\u4e0b\uff1a $ git tag v0.1 v1.3 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u7684 pattern \u4f86\u641c\u5c0b\u6a19\u7c64\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u5728 Git \u539f\u59cb\u78bc\u7684\u7248\u672c\u5eab\u4e2d\uff0c\u5df2\u7d93\u5305\u542b\u4e86\u8d85\u904e 500 \u500b\u6a19\u7c64\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u770b\u5230 1.8.5 \u7cfb\u5217\u7684\u6a19\u7c64\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a $ git tag -l \"v1.8.5*\" v1.8.5 v1.8.5-rc0 v1.8.5-rc1 v1.8.5-rc2 v1.8.5-rc3 v1.8.5.1 v1.8.5.2 v1.8.5.3 v1.8.5.4 v1.8.5.5 \u5efa\u7acb\u65b0\u7684\u6a19\u7c64 Git \u4e3b\u8981\u4f7f\u7528\u5169\u7a2e\u985e\u578b\u7684\u6a19\u7c64\uff1a\u8f15\u91cf\u7d1a\u6a19\u7c64\u548c\u6709\u8a3b\u89e3\u7684\u6a19\u7c64\u3002 \u4e00\u500b\u8f15\u91cf\u7d1a\u7684\u6a19\u7c64\u5c31\u50cf\u662f\u4e00\u500b\u4e0d\u6703\u79fb\u52d5\u7684\u5206\u652f\u2014\u2014\u9019\u500b\u6a19\u7c64\u53ea\u6703\u6307\u5411\u4e00\u500b\u7279\u5b9a\u7684\u63d0\u4ea4\u3002 \u7136\u800c\uff0c\u6709\u8a3b\u89e3\u7684\u6a19\u7c64\uff0c\u6703\u5728 Git \u7684\u8cc7\u6599\u5eab\u4e2d\u5132\u5b58\u6210\u5b8c\u6574\u7684\u7269\u4ef6\u3002 \u5b83\u5011\u5c07\u88ab\u8a08\u7b97\u6821\u9a57\u78bc\uff1b\u5305\u542b\u8cbc\u6a19\u7c64\u90a3\u500b\u4eba\u7684\u540d\u5b57\u3001\u96fb\u5b50\u90f5\u4ef6\u548c\u65e5\u671f\uff1b\u80fd\u5920\u7d00\u9304\u4e00\u500b\u6a19\u7c64\u8a0a\u606f\uff1b \u6709\u8a3b\u89e3\u7684\u6a19\u7c64 \u5efa\u7acb\u4e00\u500b\u6709\u8a3b\u89e3\u7684\u6a19\u7c64\u5f88\u7c21\u55ae\u3002 \u6700\u7c21\u55ae\u7684\u65b9\u6cd5\u662f\u5728\u4f60\u5efa\u7acb\u6a19\u7c64\u6642\uff0c\u540c\u6642\u6307\u5b9a -a \u7684\u9078\u9805\u5982\u4e0b: $ git tag -a v1.4 -m \"my version 1.4\" $ git tag v0.1 v1.3 v1.4 \u6307\u4ee4\u4e2d\u7684 -m \u9078\u9805\u5f8c\u9762\u540c\u6642\u6307\u5b9a\u4e86\u4e00\u500b\u6a19\u7c64\u8a0a\u606f\uff0c\u9019\u500b\u8a0a\u606f\u6703\u548c\u9019\u500b\u6a19\u7c64\u4e00\u8d77\u4fdd\u5b58\u3002 \u5982\u679c\u4f60\u6c92\u6709\u70ba\u6a19\u7c64\u6307\u5b9a\u4e00\u500b\u8a0a\u606f\uff0c\u90a3\u9ebc Git \u6703\u958b\u555f\u4f60\u7684\u7de8\u8f2f\u5668\u4ee5\u4fbf\u4f60\u8f38\u5165\u3002 \u7576\u4f60\u4f7f\u7528 git show \u6307\u4ee4\u6642\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u6a19\u7c64\u7684\u8cc7\u8a0a\uff0c\u9084\u6709\u9019\u500b\u6a19\u7c64\u6240\u6a19\u8a18\u7684\u63d0\u4ea4\u8cc7\u8a0a\u5982\u4e0b\uff1a $ git show v1.4 tag v1.4 Tagger: Ben Straub <ben@straub.cc> Date: Sat May 3 20:19:12 2014 -0700 my version 1.4 commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon <schacon@gee-mail.com> Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number \u8f15\u91cf\u7d1a\u6a19\u7c64 \u53e6\u5916\u4e00\u7a2e\u80fd\u6a19\u8a18\u63d0\u4ea4\u7684\u6a19\u7c64\u662f\u8f15\u91cf\u7d1a\u6a19\u7c64\u3002 \u9019\u57fa\u672c\u4e0a\u662f\u628a\u8a72\u63d0\u4ea4\u7684\u6821\u9a57\u78bc\u5b58\u5728\u4e00\u500b\u6a94\u6848\u4e2d\uff0c\u4e0d\u5305\u542b\u5176\u4ed6\u8cc7\u8a0a\u3002 \u5982\u679c\u60f3\u8981\u5efa\u7acb\u4e00\u500b\u8f15\u91cf\u7d1a\u7684\u6a19\u7c64\uff0c\u4e0d\u8981\u6307\u5b9a -a \u3001 -s \u6216 -m \u7684\u9078\u9805\u5982\u4e0b\uff1a $ git tag v1.4-lw $ git tag v0.1 v1.3 v1.4 v1.4-lw v1.5 \u6b64\u6642\u5982\u679c\u5c0d\u8a72\u6a19\u7c64\u4f7f\u7528 git show \uff0c\u4f60\u5c07\u4e0d\u6703\u770b\u5230\u9019\u500b\u6a19\u7c64\u7684\u984d\u5916\u8cc7\u8a0a\u3002 \u9019\u500b\u6307\u4ee4\u5c31\u53ea\u6703\u986f\u793a\u6a19\u7c64\u6240\u5728\u7684\u63d0\u4ea4\u8cc7\u8a0a\uff1a $ git show v1.4-lw commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon <schacon@gee-mail.com> Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number \u5c0d\u4ee5\u524d\u7684\u63d0\u4ea4\u8cbc\u6a19\u7c64 \u4f60\u4e5f\u53ef\u4ee5\u5c0d\u904e\u53bb\u7684\u63d0\u4ea4\u8cbc\u6a19\u7c64\u3002 \u5047\u8a2d\u4f60\u7684\u63d0\u4ea4\u6b77\u53f2\u770b\u8d77\u4f86\u5982\u4e0b\uff1a $ git log --pretty=oneline 15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment' a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support 0d52aaab4479697da7686c15f77a3d64d9165190 one more thing 6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment' 0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function 4682c3261057305bdd616e23b64b0857d832627b added a todo file 166ae0c4d3f420721acbb115cc33848dfcc2121a started write support 9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile 964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo 8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme \u73fe\u5728\uff0c\u5047\u8a2d\u4f60\u5fd8\u8a18\u5728\u5c08\u6848\u7684\u300cupdated rakefile\u300d\u63d0\u4ea4\u8cbc v1.2 \u7684\u6a19\u7c64\u3002 \u4f60\u53ef\u4ee5\u5728\u5f8c\u4f86\u518d\u88dc\u8cbc\u6a19\u7c64\u3002 \u8981\u5728\u90a3\u500b\u63d0\u4ea4\u4e0a\u9762\u8cbc\u6a19\u7c64\uff0c\u4f60\u9700\u8981\u5728\u6307\u4ee4\u5f8c\u9762\u6307\u5b9a\u90a3\u500b\u63d0\u4ea4\u7684\u6821\u9a57\u78bc\uff08\u53ef\u4ee5\u7701\u7565\u5f8c\u534a\u6bb5\uff09\uff1a $ git tag -a v1.2 9fceb02 $ git tag v0.1 v1.2 v1.3 v1.4 v1.4-lw v1.5 $ git show v1.2 tag v1.2 Tagger: Scott Chacon <schacon@gee-mail.com> Date: Mon Feb 9 15:32:16 2009 -0800 version 1.2 commit 9fceb02d0ae598e95dc970b74767f19372d61af8 Author: Magnus Chacon <mchacon@gee-mail.com> Date: Sun Apr 27 20:43:35 2008 -0700 updated rakefile ... \u5206\u4eab\u6a19\u7c64 git push \u6307\u4ee4\u9810\u8a2d\u4e0d\u6703\u50b3\u9001\u6a19\u7c64\u5230\u9060\u7aef\u4f3a\u670d\u5668\u3002 \u5728\u4f60\u5efa\u7acb\u6a19\u7c64\u5f8c\uff0c\u4f60\u5fc5\u9808\u660e\u78ba\u7684\u8981\u6c42 Git \u5c07\u6a19\u7c64\u63a8\u9001\u5230\u5171\u7528\u7684\u4f3a\u670d\u5668\u4e0a\u9762\u3002 \u9019\u500b\u52d5\u4f5c\u5c31\u50cf\u662f\u5728\u5206\u4eab\u9060\u7aef\u5206\u652f\u4e00\u6a23\u2014\u2014\u4f60\u53ef\u4ee5\u57f7\u884c git push origin [tagname] \u3002 $ git push origin v1.5 Counting objects: 14, done. Delta compression using up to 8 threads. Compressing objects: 100% (12/12), done. Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done. Total 14 (delta 3), reused 0 (delta 0) To git@github.com:schacon/simplegit.git * [new tag] v1.5 -> v1.5 \u5982\u679c\u60f3\u8981\u4e00\u6b21\u63a8\u9001\u5f88\u591a\u6a19\u7c64\uff0c\u4e5f\u53ef\u4ee5\u5728\u4f7f\u7528 git push \u6307\u4ee4\u7684\u6642\u5019\u52a0\u4e0a --tags \u9078\u9805\u3002 \u9019\u5c07\u6703\u628a\u4f60\u6240\u6709\u4e0d\u5728\u4f3a\u670d\u5668\u4e0a\u9762\u7684\u6a19\u7c64\u50b3\u9001\u7d66\u9060\u7aef\u4f3a\u670d\u5668\u3002 $ git push origin --tags Counting objects: 1, done. Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done. Total 1 (delta 0), reused 0 (delta 0) To git@github.com:schacon/simplegit.git * [new tag] v1.4 -> v1.4 * [new tag] v1.4-lw -> v1.4-lw \u73fe\u5728\uff0c\u7576\u5176\u4ed6\u4eba\u5f9e\u7248\u672c\u5eab\u514b\u9686\u6216\u62c9\u53d6\u6642\uff0c\u4ed6\u5011\u5c31\u80fd\u540c\u6642\u62ff\u5230\u4f60\u6240\u8cbc\u7684\u6a19\u7c64\uff0c Git Aliases \u5728\u7d50\u675f\u300cGit \u57fa\u790e\u300d\u9019\u500b\u7ae0\u7bc0\u4ee5\u524d\uff0c\u5728\u6b64\u60f3\u548c\u4f60\u5206\u4eab\u4e00\u4e9b\u4f7f\u7528 Git \u7684\u6280\u5de7\uff0c\u8b93\u4f60\u80fd\u5920\u66f4\u7c21\u6613\u4e14\u53cb\u5584\u7684\u4f7f\u7528 Git\u2014\u2014\u5225\u540d\uff08alias\uff09\u3002 \u4f60\u53ef\u4ee5\u8f15\u6613\u7684\u4f7f\u7528 git config \u4f86\u66ff\u6307\u4ee4\u8a2d\u5b9a\u5225\u540d\u3002 \u4e0b\u9762\u6709\u4e00\u4e9b\u4f60\u53ef\u80fd\u6703\u60f3\u8981\u8a2d\u5b9a\u5225\u540d\u7684\u7bc4\u4f8b\uff1a $ git config --global alias.co checkout $ git config --global alias.br branch $ git config --global alias.ci commit $ git config --global alias.st status \u8209\u5176\u4e2d\u4e00\u500b\u4f8b\u5b50\u4f86\u8aaa\uff0c\u9019\u6a23\u7684\u8a2d\u5b9a\u610f\u5473\u8457\u4f60\u53ef\u4ee5\u53ea\u6253 git ci \u800c\u4e0d\u9700\u8981\u6253 git commit \u3002 \u96a8\u8457\u4f60\u6df1\u5165\u4f7f\u7528 Git\uff0c\u4f60\u5c07\u6703\u767c\u73fe\u67d0\u4e9b\u6307\u4ee4\u7528\u7684\u5f88\u983b\u7e41\uff0c\u4e0d\u8981\u7336\u8c6b\uff0c\u99ac\u4e0a\u5efa\u7acb\u65b0\u7684\u6307\u4ee4\u5225\u540d\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u70ba\u4e86\u63d0\u9ad8 unstage \u6a94\u6848\u7684\u65b9\u4fbf\u6027\uff0c\u4f60\u53ef\u4ee5\u52a0\u5165\u4f60\u81ea\u5df1\u7684 unstage \u5225\u540d\uff1a $ git config --global alias.unstage 'reset HEAD --' \u800c\u4e14\u9019\u500b unstage \u5225\u540d\u6703\u8b93\u4ee5\u4e0b\u5169\u500b\u6307\u4ee4\u6709\u76f8\u540c\u7684\u529f\u7528\uff1a $ git unstage fileA $ git reset HEAD -- fileA \u6b64\u5916\uff0c\u5927\u5bb6\u901a\u5e38\u9084\u6703\u65b0\u589e\u4e00\u500b last \u6307\u4ee4\u5982\u4e0b\uff1a $ git config --global alias.last 'log -1 HEAD' \u5982\u6b64\u4e00\u4f86\uff0c\u4f60\u53ef\u4ee5\u66f4\u7c21\u6613\u7684\u770b\u5230\u6700\u5f8c\u7684\u63d0\u4ea4\u8a0a\u606f\uff1a $ git last commit 66938dae3329c7aebe598c2246a8e6af90d04646 Author: Josh Goebel <dreamer3@example.com> Date: Tue Aug 26 19:48:51 2008 +0800 test for current head Signed-off-by: Scott Chacon <schacon@example.com>","title":"Tagging aliase"},{"location":"Git/tagging_aliase/#_1","text":"\u8ddf\u5927\u591a\u6578\u7684\u7248\u672c\u7ba1\u7406\u7cfb\u7d71\u4e00\u6a23\uff0cGit \u6709\u80fd\u529b\u5c0d\u5c08\u6848\u6b77\u53f2\u4e2d\u6bd4\u8f03\u7279\u5225\u7684\u6642\u9593\u9ede\u8cbc\u6a19\u7c64\uff0c\u4f86\u8868\u793a\u5176\u91cd\u8981\u6027\u3002","title":"\u6a19\u7c64"},{"location":"Git/tagging_aliase/#_2","text":"\u60f3\u8981\u5217\u51fa Git \u4e2d\u6240\u6709\u6a19\u7c64\u7684\u65b9\u6cd5\u975e\u5e38\u76f4\u89ba\u3002 \u53ea\u8981\u8f38\u5165 git tag \u5982\u4e0b\uff1a $ git tag v0.1 v1.3 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u7684 pattern \u4f86\u641c\u5c0b\u6a19\u7c64\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u5728 Git \u539f\u59cb\u78bc\u7684\u7248\u672c\u5eab\u4e2d\uff0c\u5df2\u7d93\u5305\u542b\u4e86\u8d85\u904e 500 \u500b\u6a19\u7c64\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u770b\u5230 1.8.5 \u7cfb\u5217\u7684\u6a19\u7c64\uff0c\u4f60\u53ef\u4ee5\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\uff1a $ git tag -l \"v1.8.5*\" v1.8.5 v1.8.5-rc0 v1.8.5-rc1 v1.8.5-rc2 v1.8.5-rc3 v1.8.5.1 v1.8.5.2 v1.8.5.3 v1.8.5.4 v1.8.5.5","title":"\u5217\u51fa\u4f60\u7684\u6a19\u7c64"},{"location":"Git/tagging_aliase/#_3","text":"Git \u4e3b\u8981\u4f7f\u7528\u5169\u7a2e\u985e\u578b\u7684\u6a19\u7c64\uff1a\u8f15\u91cf\u7d1a\u6a19\u7c64\u548c\u6709\u8a3b\u89e3\u7684\u6a19\u7c64\u3002 \u4e00\u500b\u8f15\u91cf\u7d1a\u7684\u6a19\u7c64\u5c31\u50cf\u662f\u4e00\u500b\u4e0d\u6703\u79fb\u52d5\u7684\u5206\u652f\u2014\u2014\u9019\u500b\u6a19\u7c64\u53ea\u6703\u6307\u5411\u4e00\u500b\u7279\u5b9a\u7684\u63d0\u4ea4\u3002 \u7136\u800c\uff0c\u6709\u8a3b\u89e3\u7684\u6a19\u7c64\uff0c\u6703\u5728 Git \u7684\u8cc7\u6599\u5eab\u4e2d\u5132\u5b58\u6210\u5b8c\u6574\u7684\u7269\u4ef6\u3002 \u5b83\u5011\u5c07\u88ab\u8a08\u7b97\u6821\u9a57\u78bc\uff1b\u5305\u542b\u8cbc\u6a19\u7c64\u90a3\u500b\u4eba\u7684\u540d\u5b57\u3001\u96fb\u5b50\u90f5\u4ef6\u548c\u65e5\u671f\uff1b\u80fd\u5920\u7d00\u9304\u4e00\u500b\u6a19\u7c64\u8a0a\u606f\uff1b","title":"\u5efa\u7acb\u65b0\u7684\u6a19\u7c64"},{"location":"Git/tagging_aliase/#_4","text":"\u5efa\u7acb\u4e00\u500b\u6709\u8a3b\u89e3\u7684\u6a19\u7c64\u5f88\u7c21\u55ae\u3002 \u6700\u7c21\u55ae\u7684\u65b9\u6cd5\u662f\u5728\u4f60\u5efa\u7acb\u6a19\u7c64\u6642\uff0c\u540c\u6642\u6307\u5b9a -a \u7684\u9078\u9805\u5982\u4e0b: $ git tag -a v1.4 -m \"my version 1.4\" $ git tag v0.1 v1.3 v1.4 \u6307\u4ee4\u4e2d\u7684 -m \u9078\u9805\u5f8c\u9762\u540c\u6642\u6307\u5b9a\u4e86\u4e00\u500b\u6a19\u7c64\u8a0a\u606f\uff0c\u9019\u500b\u8a0a\u606f\u6703\u548c\u9019\u500b\u6a19\u7c64\u4e00\u8d77\u4fdd\u5b58\u3002 \u5982\u679c\u4f60\u6c92\u6709\u70ba\u6a19\u7c64\u6307\u5b9a\u4e00\u500b\u8a0a\u606f\uff0c\u90a3\u9ebc Git \u6703\u958b\u555f\u4f60\u7684\u7de8\u8f2f\u5668\u4ee5\u4fbf\u4f60\u8f38\u5165\u3002 \u7576\u4f60\u4f7f\u7528 git show \u6307\u4ee4\u6642\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u6a19\u7c64\u7684\u8cc7\u8a0a\uff0c\u9084\u6709\u9019\u500b\u6a19\u7c64\u6240\u6a19\u8a18\u7684\u63d0\u4ea4\u8cc7\u8a0a\u5982\u4e0b\uff1a $ git show v1.4 tag v1.4 Tagger: Ben Straub <ben@straub.cc> Date: Sat May 3 20:19:12 2014 -0700 my version 1.4 commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon <schacon@gee-mail.com> Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number","title":"\u6709\u8a3b\u89e3\u7684\u6a19\u7c64"},{"location":"Git/tagging_aliase/#_5","text":"\u53e6\u5916\u4e00\u7a2e\u80fd\u6a19\u8a18\u63d0\u4ea4\u7684\u6a19\u7c64\u662f\u8f15\u91cf\u7d1a\u6a19\u7c64\u3002 \u9019\u57fa\u672c\u4e0a\u662f\u628a\u8a72\u63d0\u4ea4\u7684\u6821\u9a57\u78bc\u5b58\u5728\u4e00\u500b\u6a94\u6848\u4e2d\uff0c\u4e0d\u5305\u542b\u5176\u4ed6\u8cc7\u8a0a\u3002 \u5982\u679c\u60f3\u8981\u5efa\u7acb\u4e00\u500b\u8f15\u91cf\u7d1a\u7684\u6a19\u7c64\uff0c\u4e0d\u8981\u6307\u5b9a -a \u3001 -s \u6216 -m \u7684\u9078\u9805\u5982\u4e0b\uff1a $ git tag v1.4-lw $ git tag v0.1 v1.3 v1.4 v1.4-lw v1.5 \u6b64\u6642\u5982\u679c\u5c0d\u8a72\u6a19\u7c64\u4f7f\u7528 git show \uff0c\u4f60\u5c07\u4e0d\u6703\u770b\u5230\u9019\u500b\u6a19\u7c64\u7684\u984d\u5916\u8cc7\u8a0a\u3002 \u9019\u500b\u6307\u4ee4\u5c31\u53ea\u6703\u986f\u793a\u6a19\u7c64\u6240\u5728\u7684\u63d0\u4ea4\u8cc7\u8a0a\uff1a $ git show v1.4-lw commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon <schacon@gee-mail.com> Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number","title":"\u8f15\u91cf\u7d1a\u6a19\u7c64"},{"location":"Git/tagging_aliase/#_6","text":"\u4f60\u4e5f\u53ef\u4ee5\u5c0d\u904e\u53bb\u7684\u63d0\u4ea4\u8cbc\u6a19\u7c64\u3002 \u5047\u8a2d\u4f60\u7684\u63d0\u4ea4\u6b77\u53f2\u770b\u8d77\u4f86\u5982\u4e0b\uff1a $ git log --pretty=oneline 15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment' a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support 0d52aaab4479697da7686c15f77a3d64d9165190 one more thing 6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment' 0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function 4682c3261057305bdd616e23b64b0857d832627b added a todo file 166ae0c4d3f420721acbb115cc33848dfcc2121a started write support 9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile 964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo 8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme \u73fe\u5728\uff0c\u5047\u8a2d\u4f60\u5fd8\u8a18\u5728\u5c08\u6848\u7684\u300cupdated rakefile\u300d\u63d0\u4ea4\u8cbc v1.2 \u7684\u6a19\u7c64\u3002 \u4f60\u53ef\u4ee5\u5728\u5f8c\u4f86\u518d\u88dc\u8cbc\u6a19\u7c64\u3002 \u8981\u5728\u90a3\u500b\u63d0\u4ea4\u4e0a\u9762\u8cbc\u6a19\u7c64\uff0c\u4f60\u9700\u8981\u5728\u6307\u4ee4\u5f8c\u9762\u6307\u5b9a\u90a3\u500b\u63d0\u4ea4\u7684\u6821\u9a57\u78bc\uff08\u53ef\u4ee5\u7701\u7565\u5f8c\u534a\u6bb5\uff09\uff1a $ git tag -a v1.2 9fceb02 $ git tag v0.1 v1.2 v1.3 v1.4 v1.4-lw v1.5 $ git show v1.2 tag v1.2 Tagger: Scott Chacon <schacon@gee-mail.com> Date: Mon Feb 9 15:32:16 2009 -0800 version 1.2 commit 9fceb02d0ae598e95dc970b74767f19372d61af8 Author: Magnus Chacon <mchacon@gee-mail.com> Date: Sun Apr 27 20:43:35 2008 -0700 updated rakefile ...","title":"\u5c0d\u4ee5\u524d\u7684\u63d0\u4ea4\u8cbc\u6a19\u7c64"},{"location":"Git/tagging_aliase/#_7","text":"git push \u6307\u4ee4\u9810\u8a2d\u4e0d\u6703\u50b3\u9001\u6a19\u7c64\u5230\u9060\u7aef\u4f3a\u670d\u5668\u3002 \u5728\u4f60\u5efa\u7acb\u6a19\u7c64\u5f8c\uff0c\u4f60\u5fc5\u9808\u660e\u78ba\u7684\u8981\u6c42 Git \u5c07\u6a19\u7c64\u63a8\u9001\u5230\u5171\u7528\u7684\u4f3a\u670d\u5668\u4e0a\u9762\u3002 \u9019\u500b\u52d5\u4f5c\u5c31\u50cf\u662f\u5728\u5206\u4eab\u9060\u7aef\u5206\u652f\u4e00\u6a23\u2014\u2014\u4f60\u53ef\u4ee5\u57f7\u884c git push origin [tagname] \u3002 $ git push origin v1.5 Counting objects: 14, done. Delta compression using up to 8 threads. Compressing objects: 100% (12/12), done. Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done. Total 14 (delta 3), reused 0 (delta 0) To git@github.com:schacon/simplegit.git * [new tag] v1.5 -> v1.5 \u5982\u679c\u60f3\u8981\u4e00\u6b21\u63a8\u9001\u5f88\u591a\u6a19\u7c64\uff0c\u4e5f\u53ef\u4ee5\u5728\u4f7f\u7528 git push \u6307\u4ee4\u7684\u6642\u5019\u52a0\u4e0a --tags \u9078\u9805\u3002 \u9019\u5c07\u6703\u628a\u4f60\u6240\u6709\u4e0d\u5728\u4f3a\u670d\u5668\u4e0a\u9762\u7684\u6a19\u7c64\u50b3\u9001\u7d66\u9060\u7aef\u4f3a\u670d\u5668\u3002 $ git push origin --tags Counting objects: 1, done. Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done. Total 1 (delta 0), reused 0 (delta 0) To git@github.com:schacon/simplegit.git * [new tag] v1.4 -> v1.4 * [new tag] v1.4-lw -> v1.4-lw \u73fe\u5728\uff0c\u7576\u5176\u4ed6\u4eba\u5f9e\u7248\u672c\u5eab\u514b\u9686\u6216\u62c9\u53d6\u6642\uff0c\u4ed6\u5011\u5c31\u80fd\u540c\u6642\u62ff\u5230\u4f60\u6240\u8cbc\u7684\u6a19\u7c64\uff0c","title":"\u5206\u4eab\u6a19\u7c64"},{"location":"Git/tagging_aliase/#git-aliases","text":"\u5728\u7d50\u675f\u300cGit \u57fa\u790e\u300d\u9019\u500b\u7ae0\u7bc0\u4ee5\u524d\uff0c\u5728\u6b64\u60f3\u548c\u4f60\u5206\u4eab\u4e00\u4e9b\u4f7f\u7528 Git \u7684\u6280\u5de7\uff0c\u8b93\u4f60\u80fd\u5920\u66f4\u7c21\u6613\u4e14\u53cb\u5584\u7684\u4f7f\u7528 Git\u2014\u2014\u5225\u540d\uff08alias\uff09\u3002 \u4f60\u53ef\u4ee5\u8f15\u6613\u7684\u4f7f\u7528 git config \u4f86\u66ff\u6307\u4ee4\u8a2d\u5b9a\u5225\u540d\u3002 \u4e0b\u9762\u6709\u4e00\u4e9b\u4f60\u53ef\u80fd\u6703\u60f3\u8981\u8a2d\u5b9a\u5225\u540d\u7684\u7bc4\u4f8b\uff1a $ git config --global alias.co checkout $ git config --global alias.br branch $ git config --global alias.ci commit $ git config --global alias.st status \u8209\u5176\u4e2d\u4e00\u500b\u4f8b\u5b50\u4f86\u8aaa\uff0c\u9019\u6a23\u7684\u8a2d\u5b9a\u610f\u5473\u8457\u4f60\u53ef\u4ee5\u53ea\u6253 git ci \u800c\u4e0d\u9700\u8981\u6253 git commit \u3002 \u96a8\u8457\u4f60\u6df1\u5165\u4f7f\u7528 Git\uff0c\u4f60\u5c07\u6703\u767c\u73fe\u67d0\u4e9b\u6307\u4ee4\u7528\u7684\u5f88\u983b\u7e41\uff0c\u4e0d\u8981\u7336\u8c6b\uff0c\u99ac\u4e0a\u5efa\u7acb\u65b0\u7684\u6307\u4ee4\u5225\u540d\u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u70ba\u4e86\u63d0\u9ad8 unstage \u6a94\u6848\u7684\u65b9\u4fbf\u6027\uff0c\u4f60\u53ef\u4ee5\u52a0\u5165\u4f60\u81ea\u5df1\u7684 unstage \u5225\u540d\uff1a $ git config --global alias.unstage 'reset HEAD --' \u800c\u4e14\u9019\u500b unstage \u5225\u540d\u6703\u8b93\u4ee5\u4e0b\u5169\u500b\u6307\u4ee4\u6709\u76f8\u540c\u7684\u529f\u7528\uff1a $ git unstage fileA $ git reset HEAD -- fileA \u6b64\u5916\uff0c\u5927\u5bb6\u901a\u5e38\u9084\u6703\u65b0\u589e\u4e00\u500b last \u6307\u4ee4\u5982\u4e0b\uff1a $ git config --global alias.last 'log -1 HEAD' \u5982\u6b64\u4e00\u4f86\uff0c\u4f60\u53ef\u4ee5\u66f4\u7c21\u6613\u7684\u770b\u5230\u6700\u5f8c\u7684\u63d0\u4ea4\u8a0a\u606f\uff1a $ git last commit 66938dae3329c7aebe598c2246a8e6af90d04646 Author: Josh Goebel <dreamer3@example.com> Date: Tue Aug 26 19:48:51 2008 +0800 test for current head Signed-off-by: Scott Chacon <schacon@example.com>","title":"Git Aliases"},{"location":"Git/viewing_history_undoing/","text":"\u6aa2\u8996\u63d0\u4ea4\u7684\u6b77\u53f2\u8a18\u9304 \u5728\u7522\u751f\u6578\u7b46\u63d0\u4ea4\uff08commit\uff09\u6216\u8005\u514b\u9686\uff08clone\uff09\u4e00\u500b\u5df2\u6709\u6b77\u53f2\u8a18\u9304\u7684\u7248\u672c\u5eab\u4e4b\u5f8c\uff0c\u4f60\u6216\u8a31\u6703\u60f3\u8981\u6aa2\u8996\u4e4b\u524d\u767c\u751f\u904e\u4ec0\u9ebc\u4e8b\uff1b \u6700\u57fa\u672c\u4e5f\u6700\u5177\u5a01\u529b\u7684\u5de5\u5177\u5c31\u662f git log \u547d\u4ee4\u3002 \u5728\u5c08\u6848\u76ee\u9304\u5167\u57f7\u884c git log \uff0c\u4f60\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u8a0a\u606f\uff1a $ git log commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon <schacon@gee-mail.com> Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon <schacon@gee-mail.com> Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test commit a11bef06a3f659402fe7563abf99ad00de2209e6 Author: Scott Chacon <schacon@gee-mail.com> Date: Sat Mar 15 10:31:28 2008 -0700 first commit \u9810\u8a2d\u60c5\u6cc1\uff08\u672a\u52a0\u4efb\u4f55\u9078\u9805\uff09 git log \u4ee5\u53cd\u5411\u7684\u6642\u9593\u9806\u5e8f\u5217\u51fa\u7248\u672c\u5eab\u7684\u63d0\u4ea4\u6b77\u53f2\u8a18\u9304\u2014\u2014\u4e5f\u5c31\u662f\u8aaa\u6700\u65b0\u7684\u63d0\u4ea4\u6703\u5148\u88ab\u5217\u51fa\u4f86\uff1b \u5982\u4f60\u6240\u898b\uff0c\u5b83\u4e5f\u6703\u5217\u51fa\u6bcf\u7b46\u63d0\u4ea4\u7684 SHA-1 \u6821\u9a57\u78bc\u3001\u4f5c\u8005\u540d\u5b57\u53ca\u96fb\u5b50\u90f5\u4ef6\u3001\u5beb\u5165\u65e5\u671f\u4ee5\u53ca\u63d0\u4ea4\u8a0a\u606f\u3002 git log \u547d\u4ee4\u6709\u5927\u91cf\u4e14\u591a\u6a23\u7684\u9078\u9805\uff0c\u80fd\u7cbe\u78ba\u5730\u627e\u51fa\u4f60\u60f3\u641c\u5c0b\u7684\u7d50\u679c\uff1b \u5728\u9019\u88e1\uff0c\u6211\u5011\u6703\u5c55\u793a\u4e00\u4e9b\u6700\u53d7\u6b61\u8fce\u7684\u9078\u9805\u3002 \u9078\u9805 \u8aaa\u660e -p \u986f\u793a\u6bcf\u7b46\u63d0\u4ea4\u7684\u88dc\u7db4\u3002 --stat \u986f\u793a\u6bcf\u7b46\u63d0\u4ea4\u4e2d\u66f4\u52d5\u6a94\u6848\u7684\u7d71\u8a08\u53ca\u6458\u8981\u8cc7\u8a0a\u3002 --shortstat \u53ea\u986f\u793a --stat \u63d0\u4f9b\u7684\u7684\u8a0a\u606f\u4e2d\u95dc\u65bc\u66f4\u52d5\u3001\u63d2\u5165\u3001\u522a\u9664\u7684\u6587\u5b57\u3002 --name-only \u5728\u63d0\u4ea4\u8a0a\u606f\u5f8c\u65b9\u986f\u793a\u66f4\u52d5\u7684\u6a94\u6848\u5217\u8868\u3002 --name-status \u5728\u6a94\u6848\u5217\u8868\u986f\u793a\u300c\u65b0\u589e\u300d\u3001\u300c\u66f4\u52d5\u300d\u3001\u300c\u522a\u9664\u300d\u7b49\u8cc7\u8a0a\u3002 --abbrev-commit \u53ea\u986f\u793a SHA-1 \u6821\u9a57\u78bc\u7684\u524d\u5e7e\u4f4d\u6578\uff0c\u800c\u4e0d\u662f\u986f\u793a\u5168\u90e8 40 \u4f4d\u6578\u3002 --relative-date \u4ee5\u76f8\u5c0d\u6642\u9593\u683c\u5f0f\u986f\u793a\u65e5\u671f\uff08\u4f8b\u5982\uff1a\u300c2 weeks ago\u300d\uff09\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5b8c\u6574\u7684\u65e5\u671f\u683c\u5f0f\u3002 --graph \u5728\u8f38\u51fa\u7684\u65e5\u8a8c\u65c1\u908a\u986f\u793a\u5206\u652f\u53ca\u5408\u4f75\u6b77\u53f2\u7684 ASCII \u5716\u5f62\u3002 --pretty \u4ee5\u5176\u5b83\u683c\u5f0f\u986f\u793a\u63d0\u4ea4\u3002\u9078\u9805\u5305\u62ec oneline \u3001 short \u3001 full \u3001 fuller \u53ca\u53ef\u81ea\u8a02\u683c\u5f0f\u7684 format\u3002 \u9650\u5236\u65e5\u8a8c\u7684\u8f38\u51fa \u9664\u4e86\u8f38\u51fa\u683c\u5f0f\u7684\u9078\u9805\u4ee5\u5916\uff0c git log \u9084\u6709\u4e00\u4e9b\u6709\u7528\u7684\u8f38\u51fa\u9650\u5236\u9078\u9805\uff0c\u4f8b\u5982:\u7528 -2 \u9078\u9805\u53ea\u986f\u793a\u6700\u5f8c\u4e8c\u7b46\u63d0\u4ea4\u3002 \u6216\u8005\u50cf --since \u548c --until \u9019\u4e9b\u9650\u5236\u6642\u9593\u7684\u9078\u9805\u4e5f\u5f88\u6709\u7528\uff1b \u4f8b\u5982\uff0c\u4ee5\u4e0b\u547d\u4ee4\u5217\u51fa\u6700\u8fd1\u5169\u9031\u4ee5\u4f86\u7684\u63d0\u4ea4\uff1a $ git log --since=2.weeks \u53e6\u4e00\u500b\u5be6\u7528\u7684\u9078\u9805\u662f -S \uff0c\u7528\u4f86\u5c0b\u627e\u6240\u4fee\u6539\u7684\u5167\u5bb9\u4e2d\u88ab\u52a0\u5165\u6216\u79fb\u9664\u67d0\u5b57\u4e32\u7684\u63d0\u4ea4\uff1b \u64e7\u4f8b\uff0c\u5982\u679c\u4f60\u60f3\u8981\u627e\u51fa\u6700\u5f8c\u4e00\u500b\u6709\u52a0\u5165\u6216\u79fb\u9664\u67d0\u500b\u7279\u5b9a\u51fd\u6578\u53c3\u7167\u7684\u63d0\u4ea4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\uff1a $ git log -Sfunction_name \u6700\u5f8c\u4e00\u500b\u5be6\u7528\u7684 git log \u904e\u6ffe\u9078\u9805\u662f\u8def\u5f91\uff0c \u5982\u679c\u4f60\u6307\u5b9a\u4e00\u500b\u76ee\u9304\u6216\u6a94\u540d\uff0c\u4f60\u53ef\u4ee5\u5217\u51fa\u53ea\u5c0d\u9019\u4e9b\u6a94\u6848\u6709\u4fee\u6539\u8a18\u9304\u7684\u63d0\u4ea4\uff1b \u9019\u500b\u9078\u9805\u6c38\u9060\u653e\u5728\u6700\u5f8c\u4e00\u500b\uff0c\u4e26\u4e14\u901a\u5e38\u4f7f\u7528\u4e8c\u500b\u9023\u63a5\u865f\uff08 -- \uff09\u5c07\u8def\u5f91\u8207\u5176\u5b83\u9078\u9805\u9694\u958b\u3002 \u9078\u9805 \u8aaa\u660e -(n) \u53ea\u986f\u793a\u6700\u5f8c n \u7b46\u63d0\u4ea4\u3002 --since, --after \u5217\u51fa\u7279\u5b9a\u65e5\u671f\u5f8c\u7684\u63d0\u4ea4\u3002 --until, --before \u5217\u51fa\u7279\u5b9a\u65e5\u671f\u524d\u7684\u63d0\u4ea4\u3002 --author \u5217\u51fa\u4f5c\u8005\u540d\u5b57\u7b26\u5408\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 --committer \u5217\u51fa\u63d0\u4ea4\u8005\u540d\u5b57\u7b26\u5408\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 --grep \u5217\u51fa\u63d0\u4ea4\u8a0a\u606f\u4e2d\u7b26\u5408\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 -S \u5217\u51fa\u4fee\u6539\u6a94\u6848\u4e2d\u6709\u52a0\u5165\u6216\u79fb\u9664\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 \u4f8b\u5982\uff1a\u5982\u679c\u4f60\u60f3\u6aa2\u8996 Git \u539f\u59cb\u78bc\u7684\u6e2c\u8a66\u6a94\u6848\u4e2d\uff08\u8a3b\uff1a\u5b83\u5011\u90fd\u653e\u5728\u8cc7\u6599\u593e t/ \uff09\uff0c\u7531 Junio Hamano \u5728 2008 \u5e74 10 \u6708\u4efd\u6240\u63d0\u4ea4\uff0c\u4f46\u4e0d\u5305\u542b\u300c\u5408\u4f75\u63d0\u4ea4\u300d\u7684\u63d0\u4ea4\u3002\u53ef\u57f7\u884c\u4ee5\u4e0b\u7684\u547d\u4ee4\uff1a $ git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" \\ --before=\"2008-11-01\" --no-merges -- t/ 5610e3b - Fix testcase failure when extended attributes are in use acd3b9e - Enhance hold_lock_file_for_{update,append}() API f563754 - demonstrate breakage of detached checkout with symbolic link HEAD d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths 51a94af - Fix \"checkout --track -b newbranch\" on detached HEAD b0ad11e - pull: allow \"git pull origin $something:$current_branch\" into an unborn branch \u5fa9\u539f \u5728\u4efb\u4f55\u4e00\u500b\u904e\u7a0b\u4e2d\uff0c\u4f60\u90fd\u53ef\u80fd\u60f3\u8981\u5fa9\u539f\u67d0\u4e9b\u5167\u5bb9\uff0c \u5728\u9019\u88e1\u6211\u5011\u6703\u56de\u9867\u4e00\u4e9b\u57fa\u672c\u7684\u5de5\u5177\u7528\u4f86\u5fa9\u539f\u4f60\u505a\u904e\u7684\u4fee\u6539\u5167\u5bb9\uff1b \u5c0f\u5fc3\uff01\u56e0\u70ba\u5fa9\u539f\u64cd\u4f5c\u4e0d\u662f\u6c38\u9060\u90fd\u53ef\u9006\u7684\uff0c \u9019\u662f\u5c11\u6578\u5728\u4f7f\u7528 Git \u6642\uff0c\u57f7\u884c\u932f\u8aa4\u7684\u52d5\u4f5c\u6703\u907a\u5931\u8cc7\u6599\u7684\u60c5\u6cc1\u3002 \u4e00\u500b\u5e38\u898b\u7684\u5fa9\u539f\u64cd\u4f5c\u767c\u751f\u5728\u7576\u4f60\u592a\u65e9\u63d0\u4ea4\uff08 commit \uff09\uff0c\u63a5\u8457\u624d\u767c\u73fe\u5fd8\u4e86\u52a0\u5165\u67d0\u4e9b\u6a94\u6848\uff0c\u6216\u8005\u5beb\u932f\u4e86\u63d0\u4ea4\u8a0a\u606f\uff1b \u5982\u679c\u4f60\u60f3\u8981\u91cd\u65b0\u63d0\u4ea4\uff0c\u4f60\u53ef\u4ee5\u5728\u63d0\u4ea4\u547d\u4ee4\u4e0a\u4f7f\u7528 --amend \u9078\u9805\uff1a $ git commit --amend \u9019\u500b\u547d\u4ee4\u6703\u518d\u6b21\u628a\u9810\u5b58\u5340\uff08staging area\uff09\u62ff\u4f86\u63d0\u4ea4\u3002 \u4f8b\u5982\uff1a\u5982\u679c\u4f60\u63d0\u4ea4\u5f8c\u624d\u610f\u8b58\u5230\u4f60\u60f3\u8981\u628a\u67d0\u4e9b\u5fd8\u8a18\u9810\u5b58\uff08stage\uff09\u7684\u4fee\u6539\u4e5f\u4e00\u4f75\u52a0\u5165\u5230\u4e0a\u4e00\u500b\u63d0\u4ea4\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9019\u6a23\u505a\uff1a $ git commit -m 'initial commit' $ git add forgotten_file $ git commit --amend \u6700\u7d42\u53ea\u6703\u5f97\u5230\u4e00\u500b\u63d0\u4ea4\u2014\u2014\u7b2c\u4e8c\u6b21\u7684\u63d0\u4ea4\u53d6\u4ee3\u4e86\u7b2c\u4e00\u6b21\u63d0\u4ea4\u7684\u7d50\u679c\u3002 \u5c07\u5df2\u9810\u5b58\u7684\u6a94\u6848\u79fb\u51fa\u9810\u5b58\u5340 \u63a5\u4e0b\u4f86\u7684\u5169\u7bc0\u6703\u5c55\u793a\u5982\u4f55\u64cd\u4f5c\u9810\u5b58\u5340\u548c\u5de5\u4f5c\u76ee\u9304\u4e2d\u5df2\u4fee\u6539\u7684\u6a94\u6848\uff1b \u4f8b\u5982\uff1a\u5047\u8a2d\u4f60\u5df2\u7d93\u4fee\u6539\u4e86\u4e8c\u500b\u6a94\u6848\uff0c\u4e26\u4e14\u60f3\u8981\u5206\u5225\u63d0\u4ea4\u5b83\u5011\uff0c\u4f46\u662f\u4f60\u537b\u610f\u5916\u5730\u4f7f\u7528 git add * \u628a\u5b83\u5011\u4e8c\u500b\u90fd\u9810\u5b58\u4e86\uff0c \u8981\u5982\u4f55\u5c07\u5176\u4e2d\u4e00\u500b\u300c\u79fb\u51fa\u9810\u5b58\u5340\uff08unstage\uff09\u300d\u5462\uff1f git status \u547d\u4ee4\u63d0\u793a\u4f60\uff1a $ git add * $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README modified: CONTRIBUTING.md \u5728\u300cChanges to be committed\u300d\u6587\u5b57\u6b63\u4e0b\u65b9\uff0c\u8aaa\u660e\u4e86\u4f7f\u7528 git reset HEAD <file>... \u5c07\u6a94\u6848\u79fb\u51fa\u9810\u5b58\u5340\uff1b \u56e0\u6b64\uff0c\u8b93\u6211\u5011\u4f9d\u5faa\u8a72\u5efa\u8b70\u5c07 CONTRIBUTING.md \u6a94\u6848\u79fb\u51fa\u9810\u5b58\u5340\uff1a $ git reset HEAD CONTRIBUTING.md Unstaged changes after reset: M CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u95dc\u65bc git reset \u547d\u4ee4\uff0c\u5f8c\u9762\u7ae0\u7bc0\u6703\u5728\u6df1\u5165\u4ecb\u7d39\u66f4\u591a\u7d30\u7bc0\u3002 \u5fa9\u539f\u88ab\u4fee\u6539\u7684\u6a94\u6848 \u7576\u4f60\u4e0d\u60f3\u8981\u4fdd\u7559 CONTRIBUTING.md \u6a94\u6848\u7684\u4fee\u6539\u6642\u8a72\u600e\u9ebc\u8fa6\uff1f \u4f60\u5982\u4f55\u624d\u80fd\u8f15\u6613\u5730\u5fa9\u539f\u5b83\u2014\u2014\u5c07\u5b83\u9084\u539f\u5230\u4e0a\u6b21\u63d0\u4ea4\u6642\u7684\u6a23\u5b50\uff08\u6216\u6700\u521d\u514b\u9686\u6642\u3001\u6216\u7576\u521d\u653e\u5230\u5de5\u4f5c\u76ee\u9304\u6642\u7684\u7248\u672c\uff09\uff1f \u5f88\u5e78\u904b\u7684\uff0c git status \u4e5f\u544a\u8a34\u4f60\u8a72\u5982\u4f55\u505a\uff1b \u5728\u4e0a\u4e00\u500b\u7bc4\u4f8b\u7684\u8f38\u51fa\u4e2d\uff0c\u6709\u4fee\u6539\u800c\u672a\u9810\u5b58\u7684\u5167\u5bb9\u9577\u5f97\u50cf\u9019\u6a23\uff1a Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u5b83\u76f8\u7576\u660e\u78ba\u5730\u63d0\u793a\u4f60\u5982\u4f55\u6368\u68c4\u5de5\u4f5c\u76ee\u9304\u6240\u505a\u7684\u4fee\u6539\uff0c \u8b93\u6211\u5011\u8ddf\u8457\u63d0\u793a\u505a\uff1a $ git checkout -- CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README \u4f60\u53ef\u4ee5\u770b\u5230\u90a3\u4e9b\u4fee\u6539\u5df2\u7d93\u88ab\u9084\u539f\u4e86\u3002 \u91cd\u8981\u63d0\u9192 \u4f60\u5fc5\u9700\u660e\u77ad\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\uff1a git checkout -- <file> \u662f\u4e00\u500b\u5371\u96aa\u7684\u547d\u4ee4\uff0c \u4f60\u5c0d\u90a3\u500b\u6a94\u6848\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u6703\u6d88\u5931\u2014\u2014Git \u53ea\u662f\u8907\u88fd\u4e86\u53e6\u4e00\u500b\u6a94\u6848\u4f86\u8986\u84cb\u5b83\uff1b \u9664\u975e\u4f60\u5f88\u80af\u5b9a\u5730\u77e5\u9053\u4f60\u4e0d\u60f3\u8981\u90a3\u500b\u6a94\u6848\u4e86\uff0c\u5426\u5247\u5343\u842c\u4e0d\u8981\u4f7f\u7528\u9019\u500b\u547d\u4ee4\u3002 \u5982\u679c\u4f60\u4ecd\u7136\u60f3\u4fdd\u7559\u90a3\u500b\u6a94\u6848\u6240\u505a\u7684\u4fee\u6539\uff0c\u4f46\u662f\u67d0\u500b\u7576\u4e0b\u9700\u8981\u5148\u5fa9\u539f\u6a94\u6848\uff0c\u6211\u5011\u5c07\u6703\u5728 \u4f7f\u7528 Git \u5206\u652f\u7ae0\u7bc0 \u4e2d\u4ecb\u7d39\u300c\u6536\u85cf\uff08stashing\uff09\u300d\u548c\u300c\u5206\u652f\uff08branching\uff09\u300d\uff0c\u4e00\u822c\u800c\u8a00\u5b83\u5011\u662f\u6bd4\u8f03\u597d\u7684\u505a\u6cd5\u3002","title":"Viewing history undoing"},{"location":"Git/viewing_history_undoing/#_1","text":"\u5728\u7522\u751f\u6578\u7b46\u63d0\u4ea4\uff08commit\uff09\u6216\u8005\u514b\u9686\uff08clone\uff09\u4e00\u500b\u5df2\u6709\u6b77\u53f2\u8a18\u9304\u7684\u7248\u672c\u5eab\u4e4b\u5f8c\uff0c\u4f60\u6216\u8a31\u6703\u60f3\u8981\u6aa2\u8996\u4e4b\u524d\u767c\u751f\u904e\u4ec0\u9ebc\u4e8b\uff1b \u6700\u57fa\u672c\u4e5f\u6700\u5177\u5a01\u529b\u7684\u5de5\u5177\u5c31\u662f git log \u547d\u4ee4\u3002 \u5728\u5c08\u6848\u76ee\u9304\u5167\u57f7\u884c git log \uff0c\u4f60\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4ee5\u4e0b\u8a0a\u606f\uff1a $ git log commit ca82a6dff817ec66f44342007202690a93763949 Author: Scott Chacon <schacon@gee-mail.com> Date: Mon Mar 17 21:52:11 2008 -0700 changed the version number commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Author: Scott Chacon <schacon@gee-mail.com> Date: Sat Mar 15 16:40:33 2008 -0700 removed unnecessary test commit a11bef06a3f659402fe7563abf99ad00de2209e6 Author: Scott Chacon <schacon@gee-mail.com> Date: Sat Mar 15 10:31:28 2008 -0700 first commit \u9810\u8a2d\u60c5\u6cc1\uff08\u672a\u52a0\u4efb\u4f55\u9078\u9805\uff09 git log \u4ee5\u53cd\u5411\u7684\u6642\u9593\u9806\u5e8f\u5217\u51fa\u7248\u672c\u5eab\u7684\u63d0\u4ea4\u6b77\u53f2\u8a18\u9304\u2014\u2014\u4e5f\u5c31\u662f\u8aaa\u6700\u65b0\u7684\u63d0\u4ea4\u6703\u5148\u88ab\u5217\u51fa\u4f86\uff1b \u5982\u4f60\u6240\u898b\uff0c\u5b83\u4e5f\u6703\u5217\u51fa\u6bcf\u7b46\u63d0\u4ea4\u7684 SHA-1 \u6821\u9a57\u78bc\u3001\u4f5c\u8005\u540d\u5b57\u53ca\u96fb\u5b50\u90f5\u4ef6\u3001\u5beb\u5165\u65e5\u671f\u4ee5\u53ca\u63d0\u4ea4\u8a0a\u606f\u3002 git log \u547d\u4ee4\u6709\u5927\u91cf\u4e14\u591a\u6a23\u7684\u9078\u9805\uff0c\u80fd\u7cbe\u78ba\u5730\u627e\u51fa\u4f60\u60f3\u641c\u5c0b\u7684\u7d50\u679c\uff1b \u5728\u9019\u88e1\uff0c\u6211\u5011\u6703\u5c55\u793a\u4e00\u4e9b\u6700\u53d7\u6b61\u8fce\u7684\u9078\u9805\u3002 \u9078\u9805 \u8aaa\u660e -p \u986f\u793a\u6bcf\u7b46\u63d0\u4ea4\u7684\u88dc\u7db4\u3002 --stat \u986f\u793a\u6bcf\u7b46\u63d0\u4ea4\u4e2d\u66f4\u52d5\u6a94\u6848\u7684\u7d71\u8a08\u53ca\u6458\u8981\u8cc7\u8a0a\u3002 --shortstat \u53ea\u986f\u793a --stat \u63d0\u4f9b\u7684\u7684\u8a0a\u606f\u4e2d\u95dc\u65bc\u66f4\u52d5\u3001\u63d2\u5165\u3001\u522a\u9664\u7684\u6587\u5b57\u3002 --name-only \u5728\u63d0\u4ea4\u8a0a\u606f\u5f8c\u65b9\u986f\u793a\u66f4\u52d5\u7684\u6a94\u6848\u5217\u8868\u3002 --name-status \u5728\u6a94\u6848\u5217\u8868\u986f\u793a\u300c\u65b0\u589e\u300d\u3001\u300c\u66f4\u52d5\u300d\u3001\u300c\u522a\u9664\u300d\u7b49\u8cc7\u8a0a\u3002 --abbrev-commit \u53ea\u986f\u793a SHA-1 \u6821\u9a57\u78bc\u7684\u524d\u5e7e\u4f4d\u6578\uff0c\u800c\u4e0d\u662f\u986f\u793a\u5168\u90e8 40 \u4f4d\u6578\u3002 --relative-date \u4ee5\u76f8\u5c0d\u6642\u9593\u683c\u5f0f\u986f\u793a\u65e5\u671f\uff08\u4f8b\u5982\uff1a\u300c2 weeks ago\u300d\uff09\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5b8c\u6574\u7684\u65e5\u671f\u683c\u5f0f\u3002 --graph \u5728\u8f38\u51fa\u7684\u65e5\u8a8c\u65c1\u908a\u986f\u793a\u5206\u652f\u53ca\u5408\u4f75\u6b77\u53f2\u7684 ASCII \u5716\u5f62\u3002 --pretty \u4ee5\u5176\u5b83\u683c\u5f0f\u986f\u793a\u63d0\u4ea4\u3002\u9078\u9805\u5305\u62ec oneline \u3001 short \u3001 full \u3001 fuller \u53ca\u53ef\u81ea\u8a02\u683c\u5f0f\u7684 format\u3002","title":"\u6aa2\u8996\u63d0\u4ea4\u7684\u6b77\u53f2\u8a18\u9304"},{"location":"Git/viewing_history_undoing/#_2","text":"\u9664\u4e86\u8f38\u51fa\u683c\u5f0f\u7684\u9078\u9805\u4ee5\u5916\uff0c git log \u9084\u6709\u4e00\u4e9b\u6709\u7528\u7684\u8f38\u51fa\u9650\u5236\u9078\u9805\uff0c\u4f8b\u5982:\u7528 -2 \u9078\u9805\u53ea\u986f\u793a\u6700\u5f8c\u4e8c\u7b46\u63d0\u4ea4\u3002 \u6216\u8005\u50cf --since \u548c --until \u9019\u4e9b\u9650\u5236\u6642\u9593\u7684\u9078\u9805\u4e5f\u5f88\u6709\u7528\uff1b \u4f8b\u5982\uff0c\u4ee5\u4e0b\u547d\u4ee4\u5217\u51fa\u6700\u8fd1\u5169\u9031\u4ee5\u4f86\u7684\u63d0\u4ea4\uff1a $ git log --since=2.weeks \u53e6\u4e00\u500b\u5be6\u7528\u7684\u9078\u9805\u662f -S \uff0c\u7528\u4f86\u5c0b\u627e\u6240\u4fee\u6539\u7684\u5167\u5bb9\u4e2d\u88ab\u52a0\u5165\u6216\u79fb\u9664\u67d0\u5b57\u4e32\u7684\u63d0\u4ea4\uff1b \u64e7\u4f8b\uff0c\u5982\u679c\u4f60\u60f3\u8981\u627e\u51fa\u6700\u5f8c\u4e00\u500b\u6709\u52a0\u5165\u6216\u79fb\u9664\u67d0\u500b\u7279\u5b9a\u51fd\u6578\u53c3\u7167\u7684\u63d0\u4ea4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\uff1a $ git log -Sfunction_name \u6700\u5f8c\u4e00\u500b\u5be6\u7528\u7684 git log \u904e\u6ffe\u9078\u9805\u662f\u8def\u5f91\uff0c \u5982\u679c\u4f60\u6307\u5b9a\u4e00\u500b\u76ee\u9304\u6216\u6a94\u540d\uff0c\u4f60\u53ef\u4ee5\u5217\u51fa\u53ea\u5c0d\u9019\u4e9b\u6a94\u6848\u6709\u4fee\u6539\u8a18\u9304\u7684\u63d0\u4ea4\uff1b \u9019\u500b\u9078\u9805\u6c38\u9060\u653e\u5728\u6700\u5f8c\u4e00\u500b\uff0c\u4e26\u4e14\u901a\u5e38\u4f7f\u7528\u4e8c\u500b\u9023\u63a5\u865f\uff08 -- \uff09\u5c07\u8def\u5f91\u8207\u5176\u5b83\u9078\u9805\u9694\u958b\u3002 \u9078\u9805 \u8aaa\u660e -(n) \u53ea\u986f\u793a\u6700\u5f8c n \u7b46\u63d0\u4ea4\u3002 --since, --after \u5217\u51fa\u7279\u5b9a\u65e5\u671f\u5f8c\u7684\u63d0\u4ea4\u3002 --until, --before \u5217\u51fa\u7279\u5b9a\u65e5\u671f\u524d\u7684\u63d0\u4ea4\u3002 --author \u5217\u51fa\u4f5c\u8005\u540d\u5b57\u7b26\u5408\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 --committer \u5217\u51fa\u63d0\u4ea4\u8005\u540d\u5b57\u7b26\u5408\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 --grep \u5217\u51fa\u63d0\u4ea4\u8a0a\u606f\u4e2d\u7b26\u5408\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 -S \u5217\u51fa\u4fee\u6539\u6a94\u6848\u4e2d\u6709\u52a0\u5165\u6216\u79fb\u9664\u6307\u5b9a\u5b57\u4e32\u7684\u63d0\u4ea4\u3002 \u4f8b\u5982\uff1a\u5982\u679c\u4f60\u60f3\u6aa2\u8996 Git \u539f\u59cb\u78bc\u7684\u6e2c\u8a66\u6a94\u6848\u4e2d\uff08\u8a3b\uff1a\u5b83\u5011\u90fd\u653e\u5728\u8cc7\u6599\u593e t/ \uff09\uff0c\u7531 Junio Hamano \u5728 2008 \u5e74 10 \u6708\u4efd\u6240\u63d0\u4ea4\uff0c\u4f46\u4e0d\u5305\u542b\u300c\u5408\u4f75\u63d0\u4ea4\u300d\u7684\u63d0\u4ea4\u3002\u53ef\u57f7\u884c\u4ee5\u4e0b\u7684\u547d\u4ee4\uff1a $ git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" \\ --before=\"2008-11-01\" --no-merges -- t/ 5610e3b - Fix testcase failure when extended attributes are in use acd3b9e - Enhance hold_lock_file_for_{update,append}() API f563754 - demonstrate breakage of detached checkout with symbolic link HEAD d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths 51a94af - Fix \"checkout --track -b newbranch\" on detached HEAD b0ad11e - pull: allow \"git pull origin $something:$current_branch\" into an unborn branch","title":"\u9650\u5236\u65e5\u8a8c\u7684\u8f38\u51fa"},{"location":"Git/viewing_history_undoing/#_3","text":"\u5728\u4efb\u4f55\u4e00\u500b\u904e\u7a0b\u4e2d\uff0c\u4f60\u90fd\u53ef\u80fd\u60f3\u8981\u5fa9\u539f\u67d0\u4e9b\u5167\u5bb9\uff0c \u5728\u9019\u88e1\u6211\u5011\u6703\u56de\u9867\u4e00\u4e9b\u57fa\u672c\u7684\u5de5\u5177\u7528\u4f86\u5fa9\u539f\u4f60\u505a\u904e\u7684\u4fee\u6539\u5167\u5bb9\uff1b \u5c0f\u5fc3\uff01\u56e0\u70ba\u5fa9\u539f\u64cd\u4f5c\u4e0d\u662f\u6c38\u9060\u90fd\u53ef\u9006\u7684\uff0c \u9019\u662f\u5c11\u6578\u5728\u4f7f\u7528 Git \u6642\uff0c\u57f7\u884c\u932f\u8aa4\u7684\u52d5\u4f5c\u6703\u907a\u5931\u8cc7\u6599\u7684\u60c5\u6cc1\u3002 \u4e00\u500b\u5e38\u898b\u7684\u5fa9\u539f\u64cd\u4f5c\u767c\u751f\u5728\u7576\u4f60\u592a\u65e9\u63d0\u4ea4\uff08 commit \uff09\uff0c\u63a5\u8457\u624d\u767c\u73fe\u5fd8\u4e86\u52a0\u5165\u67d0\u4e9b\u6a94\u6848\uff0c\u6216\u8005\u5beb\u932f\u4e86\u63d0\u4ea4\u8a0a\u606f\uff1b \u5982\u679c\u4f60\u60f3\u8981\u91cd\u65b0\u63d0\u4ea4\uff0c\u4f60\u53ef\u4ee5\u5728\u63d0\u4ea4\u547d\u4ee4\u4e0a\u4f7f\u7528 --amend \u9078\u9805\uff1a $ git commit --amend \u9019\u500b\u547d\u4ee4\u6703\u518d\u6b21\u628a\u9810\u5b58\u5340\uff08staging area\uff09\u62ff\u4f86\u63d0\u4ea4\u3002 \u4f8b\u5982\uff1a\u5982\u679c\u4f60\u63d0\u4ea4\u5f8c\u624d\u610f\u8b58\u5230\u4f60\u60f3\u8981\u628a\u67d0\u4e9b\u5fd8\u8a18\u9810\u5b58\uff08stage\uff09\u7684\u4fee\u6539\u4e5f\u4e00\u4f75\u52a0\u5165\u5230\u4e0a\u4e00\u500b\u63d0\u4ea4\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9019\u6a23\u505a\uff1a $ git commit -m 'initial commit' $ git add forgotten_file $ git commit --amend \u6700\u7d42\u53ea\u6703\u5f97\u5230\u4e00\u500b\u63d0\u4ea4\u2014\u2014\u7b2c\u4e8c\u6b21\u7684\u63d0\u4ea4\u53d6\u4ee3\u4e86\u7b2c\u4e00\u6b21\u63d0\u4ea4\u7684\u7d50\u679c\u3002","title":"\u5fa9\u539f"},{"location":"Git/viewing_history_undoing/#_4","text":"\u63a5\u4e0b\u4f86\u7684\u5169\u7bc0\u6703\u5c55\u793a\u5982\u4f55\u64cd\u4f5c\u9810\u5b58\u5340\u548c\u5de5\u4f5c\u76ee\u9304\u4e2d\u5df2\u4fee\u6539\u7684\u6a94\u6848\uff1b \u4f8b\u5982\uff1a\u5047\u8a2d\u4f60\u5df2\u7d93\u4fee\u6539\u4e86\u4e8c\u500b\u6a94\u6848\uff0c\u4e26\u4e14\u60f3\u8981\u5206\u5225\u63d0\u4ea4\u5b83\u5011\uff0c\u4f46\u662f\u4f60\u537b\u610f\u5916\u5730\u4f7f\u7528 git add * \u628a\u5b83\u5011\u4e8c\u500b\u90fd\u9810\u5b58\u4e86\uff0c \u8981\u5982\u4f55\u5c07\u5176\u4e2d\u4e00\u500b\u300c\u79fb\u51fa\u9810\u5b58\u5340\uff08unstage\uff09\u300d\u5462\uff1f git status \u547d\u4ee4\u63d0\u793a\u4f60\uff1a $ git add * $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README modified: CONTRIBUTING.md \u5728\u300cChanges to be committed\u300d\u6587\u5b57\u6b63\u4e0b\u65b9\uff0c\u8aaa\u660e\u4e86\u4f7f\u7528 git reset HEAD <file>... \u5c07\u6a94\u6848\u79fb\u51fa\u9810\u5b58\u5340\uff1b \u56e0\u6b64\uff0c\u8b93\u6211\u5011\u4f9d\u5faa\u8a72\u5efa\u8b70\u5c07 CONTRIBUTING.md \u6a94\u6848\u79fb\u51fa\u9810\u5b58\u5340\uff1a $ git reset HEAD CONTRIBUTING.md Unstaged changes after reset: M CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u95dc\u65bc git reset \u547d\u4ee4\uff0c\u5f8c\u9762\u7ae0\u7bc0\u6703\u5728\u6df1\u5165\u4ecb\u7d39\u66f4\u591a\u7d30\u7bc0\u3002","title":"\u5c07\u5df2\u9810\u5b58\u7684\u6a94\u6848\u79fb\u51fa\u9810\u5b58\u5340"},{"location":"Git/viewing_history_undoing/#_5","text":"\u7576\u4f60\u4e0d\u60f3\u8981\u4fdd\u7559 CONTRIBUTING.md \u6a94\u6848\u7684\u4fee\u6539\u6642\u8a72\u600e\u9ebc\u8fa6\uff1f \u4f60\u5982\u4f55\u624d\u80fd\u8f15\u6613\u5730\u5fa9\u539f\u5b83\u2014\u2014\u5c07\u5b83\u9084\u539f\u5230\u4e0a\u6b21\u63d0\u4ea4\u6642\u7684\u6a23\u5b50\uff08\u6216\u6700\u521d\u514b\u9686\u6642\u3001\u6216\u7576\u521d\u653e\u5230\u5de5\u4f5c\u76ee\u9304\u6642\u7684\u7248\u672c\uff09\uff1f \u5f88\u5e78\u904b\u7684\uff0c git status \u4e5f\u544a\u8a34\u4f60\u8a72\u5982\u4f55\u505a\uff1b \u5728\u4e0a\u4e00\u500b\u7bc4\u4f8b\u7684\u8f38\u51fa\u4e2d\uff0c\u6709\u4fee\u6539\u800c\u672a\u9810\u5b58\u7684\u5167\u5bb9\u9577\u5f97\u50cf\u9019\u6a23\uff1a Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: CONTRIBUTING.md \u5b83\u76f8\u7576\u660e\u78ba\u5730\u63d0\u793a\u4f60\u5982\u4f55\u6368\u68c4\u5de5\u4f5c\u76ee\u9304\u6240\u505a\u7684\u4fee\u6539\uff0c \u8b93\u6211\u5011\u8ddf\u8457\u63d0\u793a\u505a\uff1a $ git checkout -- CONTRIBUTING.md $ git status On branch master Changes to be committed: (use \"git reset HEAD <file>...\" to unstage) renamed: README.md -> README \u4f60\u53ef\u4ee5\u770b\u5230\u90a3\u4e9b\u4fee\u6539\u5df2\u7d93\u88ab\u9084\u539f\u4e86\u3002","title":"\u5fa9\u539f\u88ab\u4fee\u6539\u7684\u6a94\u6848"},{"location":"Git/viewing_history_undoing/#_6","text":"\u4f60\u5fc5\u9700\u660e\u77ad\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\uff1a git checkout -- <file> \u662f\u4e00\u500b\u5371\u96aa\u7684\u547d\u4ee4\uff0c \u4f60\u5c0d\u90a3\u500b\u6a94\u6848\u6240\u505a\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u6703\u6d88\u5931\u2014\u2014Git \u53ea\u662f\u8907\u88fd\u4e86\u53e6\u4e00\u500b\u6a94\u6848\u4f86\u8986\u84cb\u5b83\uff1b \u9664\u975e\u4f60\u5f88\u80af\u5b9a\u5730\u77e5\u9053\u4f60\u4e0d\u60f3\u8981\u90a3\u500b\u6a94\u6848\u4e86\uff0c\u5426\u5247\u5343\u842c\u4e0d\u8981\u4f7f\u7528\u9019\u500b\u547d\u4ee4\u3002 \u5982\u679c\u4f60\u4ecd\u7136\u60f3\u4fdd\u7559\u90a3\u500b\u6a94\u6848\u6240\u505a\u7684\u4fee\u6539\uff0c\u4f46\u662f\u67d0\u500b\u7576\u4e0b\u9700\u8981\u5148\u5fa9\u539f\u6a94\u6848\uff0c\u6211\u5011\u5c07\u6703\u5728 \u4f7f\u7528 Git \u5206\u652f\u7ae0\u7bc0 \u4e2d\u4ecb\u7d39\u300c\u6536\u85cf\uff08stashing\uff09\u300d\u548c\u300c\u5206\u652f\uff08branching\uff09\u300d\uff0c\u4e00\u822c\u800c\u8a00\u5b83\u5011\u662f\u6bd4\u8f03\u597d\u7684\u505a\u6cd5\u3002","title":"\u91cd\u8981\u63d0\u9192"},{"location":"Others/C%2B%2B11_Feature/","text":"C++ 11 new feature tags: C++11 , C++ Chapter 2: Variable and Basic Types List Initialization nullptr constexpr Alias Declaration : using SI = Sales_item; auto decltype Chapter 3: Strings, Vectors, and Arrays for( declaration : expression ) : expression -> vector , array[] , string List Initialization : vector < string > articles = { \"a\" , \"an\" , \"the\" }; The .cbegin() and .cend() Operations in Iterator: vector < int > v ; auto it = v . cbegin (); // it has type vector<int>::const_iterator The Library begin() and end() Functions: int ia [] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; // ia is an array of ten ints int * beg = begin ( ia ); // pointer to the first element in ia int * last = end ( ia ); // pointer one past the last element in ia Multidimension for loop application: size_t cnt = 0 ; for ( auto & row : ia ) // for every element in the outer array for ( auto & col : row ) { // for every element in the inner array col = cnt; // give this element the next value ++ cnt ; // increment cnt } Pointer: Function pointer: std::bind() , std::function<> #include <function> using namespace std ; using namespace placeholder ; int add ( int a , int b ){ return a + b ; } auto func = bind ( add , _1 , 20 ); cout << func ( 10 ) << endl ; // result: 30 Smart pointer: unique_ptr #include <iostream> #include <memory> using namespace std ; class Test { public : Test () { cout << \"created\" << endl ; } ~ Test () { cout << \"destroy\" << endl ; } void greet () { cout << \"Hello\" << endl ; } }; class Temp { private : unique_ptr < Test [] > pTest_ ; public : Temp () : pTest_ ( new Test [ 2 ]) {} }; int main () { Temp temp ; cout << \"finished\" << endl ; return 0 ; } // pTest_ will be delete when temp out of the scope. Smart pointer: shared_ptr int main () { shared_ptr < Test > test2 ( nullptr ); { shared_ptr < Test > test1 = make_shared < Test > (); test2 = test1 ; } cout << \"finished\" << endl ; return 0 ; } // result: // \"created\" // \"finished\" // \"destroy\" // shared_ptr will be delete until all of same address pointer out of scope.","title":"C++ 11 new feature"},{"location":"Others/C%2B%2B11_Feature/#c-11-new-feature","text":"","title":"C++ 11 new feature"},{"location":"Others/C%2B%2B11_Feature/#tagsc11-c","text":"","title":"tags:C++11, C++"},{"location":"Others/C%2B%2B11_Feature/#chapter-2-variable-and-basic-types","text":"List Initialization nullptr constexpr Alias Declaration : using SI = Sales_item; auto decltype","title":"Chapter 2: Variable and Basic Types"},{"location":"Others/C%2B%2B11_Feature/#chapter-3-strings-vectors-and-arrays","text":"for( declaration : expression ) : expression -> vector , array[] , string List Initialization : vector < string > articles = { \"a\" , \"an\" , \"the\" }; The .cbegin() and .cend() Operations in Iterator: vector < int > v ; auto it = v . cbegin (); // it has type vector<int>::const_iterator The Library begin() and end() Functions: int ia [] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; // ia is an array of ten ints int * beg = begin ( ia ); // pointer to the first element in ia int * last = end ( ia ); // pointer one past the last element in ia Multidimension for loop application: size_t cnt = 0 ; for ( auto & row : ia ) // for every element in the outer array for ( auto & col : row ) { // for every element in the inner array col = cnt; // give this element the next value ++ cnt ; // increment cnt }","title":"Chapter 3: Strings, Vectors, and Arrays"},{"location":"Others/C%2B%2B11_Feature/#pointer","text":"Function pointer: std::bind() , std::function<> #include <function> using namespace std ; using namespace placeholder ; int add ( int a , int b ){ return a + b ; } auto func = bind ( add , _1 , 20 ); cout << func ( 10 ) << endl ; // result: 30 Smart pointer: unique_ptr #include <iostream> #include <memory> using namespace std ; class Test { public : Test () { cout << \"created\" << endl ; } ~ Test () { cout << \"destroy\" << endl ; } void greet () { cout << \"Hello\" << endl ; } }; class Temp { private : unique_ptr < Test [] > pTest_ ; public : Temp () : pTest_ ( new Test [ 2 ]) {} }; int main () { Temp temp ; cout << \"finished\" << endl ; return 0 ; } // pTest_ will be delete when temp out of the scope. Smart pointer: shared_ptr int main () { shared_ptr < Test > test2 ( nullptr ); { shared_ptr < Test > test1 = make_shared < Test > (); test2 = test1 ; } cout << \"finished\" << endl ; return 0 ; } // result: // \"created\" // \"finished\" // \"destroy\" // shared_ptr will be delete until all of same address pointer out of scope.","title":"Pointer:"},{"location":"Others/C%2B%2B_Coding_Style/","text":"C++ Coding Style Class 1. \u5efa\u69cb\u5b50(Constructor) \u4e0d\u8981\u5728\u5efa\u69cb\u5b50\u4e2d\u9032\u884c\u8907\u96dc\u7684\u521d\u59cb\u5316 (\u5c24\u5176\u662f\u90a3\u4e9b\u6709\u53ef\u80fd\u5931\u6557\u6216\u8005\u9700\u8981\u547c\u53eb\u865b\u51fd\u5f0f\u7684\u521d\u59cb\u5316). 2. \u521d\u59cb\u5316 \u5982\u679c\u985e\u4e2d\u5b9a\u7fa9\u4e86\u6210\u54e1\u8b8a\u6578, \u5247\u5fc5\u9808\u5728\u985e\u4e2d\u70ba\u6bcf\u500b\u985e\u63d0\u4f9b\u521d\u59cb\u5316\u51fd\u5f0f\u6216\u5b9a\u7fa9\u4e00\u500b\u5efa\u69cb\u5b50. \u82e5\u672a\u5ba3\u544a\u5efa\u69cb\u51fd\u5f0f, \u5247\u7de8\u8b6f\u5668\u6703\u751f\u6210\u4e00\u500b\u9ed8\u8a8d\u7684\u69cb\u9020\u51fd\u5f0f, \u9019\u6709\u53ef\u80fd\u5c0e\u81f4\u67d0\u4e9b\u6210\u54e1\u672a\u88ab\u521d\u59cb\u5316\u6216\u88ab\u521d\u59cb\u5316\u70ba\u4e0d\u6070\u7576\u7684\u503c. 3.\b\b \u986f\u793a( explicit ) \u5efa\u69cb\u5b50(Constructor) \u5c0d\u55ae\u500b\u53c3\u6578\u7684\u5efa\u69cb\u5b50\u4f7f\u7528 C++ \u95dc\u9375\u5b57 explicit . 4. \u53ef\u62f7\u8c9d\u985e\u578b\u548c\u53ef\u79fb\u52d5\u985e\u578b (Copy contructor and Move contructor) \u5982\u679c\u4f60\u7684\u985e\u578b\u9700\u8981, \u5c31\u8b93\u5b83\u5011\u652f\u6301\u62f7\u8c9d / \u79fb\u52d5. \u5426\u5247, \u5c31\u628a\u96b1\u5f0f\u7522\u751f\u7684\u62f7\u8c9d\u548c\u79fb\u52d5\u51fd\u5f0f\u7981\u7528. what's default , delete copy , move contructor 5.","title":"C++ Coding Style"},{"location":"Others/C%2B%2B_Coding_Style/#c-coding-style","text":"","title":"C++ Coding Style"},{"location":"Others/C%2B%2B_Coding_Style/#class","text":"","title":"Class"},{"location":"Others/C%2B%2B_Coding_Style/#1-constructor","text":"\u4e0d\u8981\u5728\u5efa\u69cb\u5b50\u4e2d\u9032\u884c\u8907\u96dc\u7684\u521d\u59cb\u5316 (\u5c24\u5176\u662f\u90a3\u4e9b\u6709\u53ef\u80fd\u5931\u6557\u6216\u8005\u9700\u8981\u547c\u53eb\u865b\u51fd\u5f0f\u7684\u521d\u59cb\u5316).","title":"1. \u5efa\u69cb\u5b50(Constructor)"},{"location":"Others/C%2B%2B_Coding_Style/#2","text":"\u5982\u679c\u985e\u4e2d\u5b9a\u7fa9\u4e86\u6210\u54e1\u8b8a\u6578, \u5247\u5fc5\u9808\u5728\u985e\u4e2d\u70ba\u6bcf\u500b\u985e\u63d0\u4f9b\u521d\u59cb\u5316\u51fd\u5f0f\u6216\u5b9a\u7fa9\u4e00\u500b\u5efa\u69cb\u5b50. \u82e5\u672a\u5ba3\u544a\u5efa\u69cb\u51fd\u5f0f, \u5247\u7de8\u8b6f\u5668\u6703\u751f\u6210\u4e00\u500b\u9ed8\u8a8d\u7684\u69cb\u9020\u51fd\u5f0f, \u9019\u6709\u53ef\u80fd\u5c0e\u81f4\u67d0\u4e9b\u6210\u54e1\u672a\u88ab\u521d\u59cb\u5316\u6216\u88ab\u521d\u59cb\u5316\u70ba\u4e0d\u6070\u7576\u7684\u503c.","title":"2. \u521d\u59cb\u5316"},{"location":"Others/C%2B%2B_Coding_Style/#3-explicit-constructor","text":"\u5c0d\u55ae\u500b\u53c3\u6578\u7684\u5efa\u69cb\u5b50\u4f7f\u7528 C++ \u95dc\u9375\u5b57 explicit .","title":"3.\b\b \u986f\u793a(explicit) \u5efa\u69cb\u5b50(Constructor)"},{"location":"Others/C%2B%2B_Coding_Style/#4-copy-contructor-and-move-contructor","text":"\u5982\u679c\u4f60\u7684\u985e\u578b\u9700\u8981, \u5c31\u8b93\u5b83\u5011\u652f\u6301\u62f7\u8c9d / \u79fb\u52d5. \u5426\u5247, \u5c31\u628a\u96b1\u5f0f\u7522\u751f\u7684\u62f7\u8c9d\u548c\u79fb\u52d5\u51fd\u5f0f\u7981\u7528. what's default , delete copy , move contructor","title":"4. \u53ef\u62f7\u8c9d\u985e\u578b\u548c\u53ef\u79fb\u52d5\u985e\u578b (Copy contructor and Move contructor)"},{"location":"Others/C%2B%2B_Coding_Style/#5","text":"","title":"5."},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/","text":"Chapter 2 - Variables and Basic Types tags: C++ C++11 C++primer 2.1 Primitive Built-in Types 2.1.1 Arithmetic Types char \u4fdd\u8b49\u5927\u5c0f\u8db3\u5920\u5132\u5b58\u88dd\u7f6e\u7684 basic character set wchar_t , char16_t , char32_t \u7528\u65bc\u5132\u5b58 extended character set, wchar_t \u4fdd\u8b49\u5927\u5c0f\u8db3\u5920\u5132\u5b58\u88dd\u7f6e\u6700\u5927\u7684 extended character set, \u800c char16_t , char32_t \u5247\u662f\u7528\u65bc Unicode character int \u4fdd\u8b49\u53ef\u5132\u5b58\u7684\u5927\u5c0f >= short long \u4fdd\u8b49\u53ef\u5132\u5b58\u7684\u5927\u5c0f >= int long long \u4fdd\u8b49\u53ef\u5132\u5b58\u7684\u5927\u5c0f >= long Type Meaning Minimum Size bool boolean NA char character 8 bits wchar_t wide character 16 bits char16_t Unicode character 16 bits char32_t Unicode character 32 bits short short integer 16 bits int integer 16 bits long long integer 32 bits long long long integer 64 bits float single-precision floating-point 6 significant digits double double-precision floating-point 10 significant digits long double extended-precision floating-point 10 significant digits Advice: Deciding Which Type to use C++ \u7684\u8a2d\u8a08\u8b93\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u5728\u5fc5\u8981\u7684\u6642\u5019\u53ef\u4ee5\u66f4\u8cbc\u8fd1\u786c\u9ad4, \u9019\u4e9b arithmetic types \u88ab\u8a2d\u8a08\u6210\u53ef\u4ee5\u8fce\u5408\u5404\u5f0f\u5404\u6a23\u4e0d\u540c\u7684\u786c\u9ad4, \u67d0\u4e9b\u7684 arithmetic types \u6216\u8a31\u6703\u8b93\u958b\u767c\u8005\u89ba\u5f97\u8907\u96dc, \u6240\u4ee5\u4ee5\u4e0b\u63d0\u4f9b\u5e7e\u7a2e\u7c21\u55ae\u7684\u65b9\u6cd5\u53bb\u9078\u64c7\u4f7f\u7528\u7684\u578b\u5225: - \u7576\u4f60\u77e5\u9053\u9019\u500b\u503c\u4e0d\u53ef\u80fd\u662f\u8ca0\u7684\u6642\u5019, \u8acb\u4f7f\u7528 unsigned - \u6574\u6578\u8acb\u4f7f\u7528 int , short \u901a\u5e38\u592a\u5c0f, long \u5247\u5f80\u5f80\u8ddf int \u4f54\u7528\u4e00\u6a23\u7684\u5927\u5c0f, \u5982\u679c\u4f60\u8981\u4f7f\u7528\u7684\u503c\u5927\u65bc int \u7684 minimum size, \u5247\u8acb\u6539\u7528 long long - \u6d6e\u9ede\u6578\u904b\u7b97\u8acb\u4f7f\u7528 double , float \u901a\u5e38\u4e0d\u5920\u7cbe\u6e96, double-precision floating-point \u8207 single-precision floating-point \u7684\u6240\u8017\u7684\u8a08\u7b97\u91cf\u5dee\u7570\u4e26\u4e0d\u5927, \u4e8b\u5be6\u4e0a, \u5728\u6709\u4e9b\u88dd\u7f6e double-precision floating-point \u7684\u904b\u7b97\u901f\u5ea6\u751a\u81f3\u5feb\u65bc single-precision floating-point 2.1.2 Type Conversions \u578b\u5225\u8f49\u63db\u901a\u5e38\u53d6\u6c7a\u65bc\u6b64\u578b\u614b\u53ef\u5bb9\u8a31\u7684\u5927\u5c0f\u7bc4\u570d bool b = 42 ; // b is true int i = b ; // i has value 1 i = 3.14 ; // i has value 3 double pi = i ; // pi has value 3.0 unsigned char c = -1 ; // assuming 8-bits char, c has value 255 signed char c2 = 256 ; // assuming 8-bits char, the value of c is undefined > \u96b1\u5f0f\u578b\u5225\u8f49\u63db\u7684\u7d30\u7bc0\u898f\u5247, \u53ef\u4ee5\u5728\u66f8\u4e0a\u67e5 \u7576\u6211\u5011\u5728\u4e00\u500b expression \u88e1\u9762\u4f7f\u7528\u4e86\u4e00\u7a2e arithmetic types \u7684\u8b8a\u6578, \u4f46 expression \u537b\u671f\u671b\u5f97\u5230\u53e6\u4e00\u7a2e arithmetic types \u7684\u8b8a\u6578\u6642, compiler \u6703\u81ea\u52d5\u505a\u578b\u5225\u8f49\u63db int i = 42 ; if ( i ) // condition will evaluate as true i = 0 ; \u7576\u6d89\u53ca\u5230 unsigned \u578b\u5225\u6642\u5fc5\u9808\u5c0f\u5fc3 unsigned u = 10 ; int i = -42 ; std :: cout << i + i << std :: endl ; // print -84 std :: cout << u + i << std :: endl ; // if 32-bits int, print 4294967264 \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7b2c\u4e8c\u500b expression i \u88ab\u96b1\u5f0f\u578b\u5225\u8f49\u63db\u6210 unsigned\b \u6240\u4ee5\u9020\u6210\u554f\u984c // WRONG: u can never be less than 0; the condition will always succeed for ( unsigned u = 10 ; u >= 0 ; -- u ) std :: cout << u << std :: endl ; \u53ef\u4ee5\u6539\u6210\u4f7f\u7528 while \u4f86\u89e3\u6c7a\u9019\u7a2e\u554f\u984c unsigned u = 11 ; while ( u > 0 ) { -- u ; std :: cout << u << std :: endl ; } Caution: Don't Mix Signed and Unsigned Types \u7576 expression \u540c\u6642\u5305\u542b signed \u8ddf unsigned \u578b\u5225\u7684\u8b8a\u6578\u800c signed \u8b8a\u6578\u662f\u8ca0\u503c\u6642, \u53ef\u80fd\u6703\u7522\u751f\u610f\u5916\u7684\u5f8c\u679c, \u7c21\u55ae\u4f86\u8aaa, \u907f\u514d\u5c07\u9019\u5169\u7a2e\u578b\u5225\u6df7\u5408\u4f7f\u7528 2.1.3 Literals \u6bcf\u500b\u5b57\u9762\u5e38\u6578\u90fd\u6709\u4e00\u7a2e\u578b\u5225, \u4ee5\u4e0b\u70ba\u5e38\u898b\u5e7e\u7a2e\u5beb\u6cd5, \u82e5\u60f3\u8981\u5f37\u5236\u6c7a\u5b9a\u5b57\u9762\u5e38\u6578\u7684\u578b\u5225, \u53ef\u4ee5\u53c3\u8003\b Character and Character String Literals \u4ecb\u7d39 20 // decimal 024 // octal 0x14 // hexadecimal 3.14159 // double 3.14159E0 // E exponential .001 // double 'h' // char \"h\" // string, '\\0' #### Character and Character String Literals | Prefix | Meaning | Type | | -------- | -------- | -------- | | u | Unicode 16 character | char16_t | | U | Unicode 32 character | char32_t | | L | wide character | wchar_t | | u8 | utf-8(string literals only) | char | Integer Literals Suffix Minimum Type u or U unsigned l or L long ll or LL long long Floating-point Literals Suffix Minimum Type f or F float l or L long double 2.2 Variables 2.2.1 Variable Definitions \u4e00\u500b\u7c21\u55ae\u7684\u8b8a\u6578\u5b9a\u7fa9\u662f\u8981\u7531 type specifier \u548c\u540d\u7a31\u6240\u7d44\u6210, \u4e00\u500b\u5b9a\u7fa9\u53ef\u80fd\u53ef\u4ee5\u7531\u4e00\u500b\u6216\u591a\u500b\u521d\u59cb\u503c\u548c\u540d\u7a31\u6240\u7d44\u6210 int sum = 0 , value , units_sold = 0 ; Sales_item item ; std : string book ( \"0-201-78345-X\" ); #### Initializers \u4e00\u500b\u7269\u4ef6\u88ab\u5275\u5efa\u6642, \u540c\u6642\u7d66\u5b9a\u4e00\u500b\u7279\u5b9a\u7684\u503c, \u7a31\u70ba\u521d\u59cb\u5316 > !! Initialization is not assignment. \u521d\u59cb\u5316\u662f\u7576\u8b8a\u6578\u5728\u88ab\u5275\u5efa\u6642\u7d66\u5b9a\u4e00\u500b\u503c, \u8ce6\u503c\u662f\u7269\u4ef6\u73fe\u6709\u7684\u503c\u88ab\u65b0\u7684\u503c\u6240\u53d6\u4ee3 List Initialization int val = 0 ; int val = { 0 }; int val { 0 }; // C++ 11 int val ( 0 ); long double ld = 3.1415926536 ; int a { ld }, b = { ld }; // error: narrowing conversion required int c ( ld ), d = ld ; // ok: but value will be truncated Default Initialization std :: string empty ; // \u96b1\u5f0f\u521d\u59cb\u5316\u7a7a\u7684string Sales_item item ; // \u9810\u8a2d\u521d\u59cb\u5316 2.2.2 Variable Declaration and Definitions \u4e00\u500b\u8b8a\u6578\u53ea\u80fd\u88ab\u5b9a\u7fa9\u4e00\u6b21(\u53ea\u80fd\u6709\u4e00\u500b\u5b9a\u7fa9)\uff0c\u4f46\u662f\u53ef\u4ee5\u88ab\u5ba3\u544a\u5f88\u591a\u6b21\u3002 \u4e00\u500b\u8b8a\u6578\u7684\u5b9a\u7fa9\u4e5f\u662f\u4e00\u7a2e\u5ba3\u544a\u3002 extern int i ; // declares but doesn't defines i int j ; // declares and defines j 2.2.3 Identifiers 2.2.4 Scope of a Name 2.3 Compound Types \u8907\u5408\u578b\u614b\uff0c\u662f\u4e00\u7a2e\u6839\u64da\u53e6\u4e00\u7a2e\u578b\u614b\u5b9a\u7fa9\u800c\u4f86\u7684\u578b\u614b\u3002C++ \u6709\u5f88\u591a\u7a2e\u8907\u5408\u578b\u614b\uff0c\u5728\u672c\u7ae0\u7bc0\u6703\u63d0\u5230\u5176\u4e2d - reference and pointer \u3002 2.3.1 Reference \u9644\u8a3b\uff1a\u5728\u4e4b\u5f8c\u7684\u7ae0\u7bc0\u6703\u63d0\u5230\u4e00\u7a2e\u65b0\u7684\u6a19\u6e96\u7684reference - \"rvalue reference\"\uff0c\u5b83\u4e3b\u8981\u662f\u7528\u65bc class \u88e1\u9762\uff0c\u6280\u8853\u4e0a\u6211\u5011\u901a\u5e38\u8aaa\u7684reference \u6307\u7684\u662f - \"lvalue reference\"\u3002 reference \u662f\u5c0d\u4e00\u500b\u7269\u4ef6\u5b9a\u7fa9\u4e00\u500b\u5225\u540d\u3002 \u901a\u5e38\u6211\u5011\u521d\u59cb\u5316\u4e00\u500b\u8b8a\u6578\uff0c\u662f\u5c07\u7269\u4ef6\u7684\u503c \u8907\u88fd \u5230\u6211\u5011\u8981\u5275\u5efa\u7684\u8b8a\u6578\u3002\u4f46\u662f\u7576\u6211\u5011\u5b9a\u7fa9\u4e00\u500breference\u4e26\u521d\u59cb\u5316\u6642\uff0c\u4e0d\u662f\u8907\u88fd\u7269\u4ef6\u7684\u503c\u5230reference\uff0c\u800c\u662f \u9023\u7d50(bind) reference \u8ddf\u9019\u500b\u7269\u4ef6\u3002\u4e00\u4f46\u521d\u59cb\u5316\u904e\u5f8c\uff0creference \u5c31\u8ddf\u9019\u500b\u521d\u59cb\u5316\u7269\u4ef6\u9023\u7d50\u5728\u4e00\u8d77\u4e86\uff0c\u4e14\u4e0d\u80fd\u91cd\u65b0\u9023\u7d50\u5230\u5176\u4ed6\u7684\u7269\u4ef6 int ival = 1024 ; int & refVal = ival ; // refVal refers to(is another name for) ival int & refVal2 ; // error: a reference must be initialized int & refVal3 = 10 ; // error; 2.3.2 Pointers 2.3.3 Understanding Compound Type Declaration Compound Type \b(\u8907\u5408\u578b\u614b) \u6307\u7684\u5c31\u662f\b\u5e38\u898b\u7684 * , & \b\u5b57\u7b26 , \b\b\u6b64\u7a2e\u578b\u614b\u7684\u5b9a\u7fa9\u53d6\u6c7a\u65bc\u591a\u7a2e\u578b\u614b\u7684\u7d44\u5408 Defining Multiple Variable int * p1 , p2 ; // p1 is and pointer, p2 is an int int * p1 , * p2 ; // p1, p2 are pointers to int Pointers to Pointers \u901a\u5e38, \u5728\u5ba3\u544a\u4e0a\u5c0d\u65bc type modifiers \u4f7f\u7528\u7684\u6578\u91cf\u662f\u6c92\u6709\u9650\u5236\u7684, \u7576\u6211\u5011\u4f7f\u7528\u8d85\u904e\u4e00\u500b type modifiers, \u908f\u8f2f\u4e0a\u662fok\u7684, \u4f46\u662f\u4e26\u4e0d\u76f4\u89c0 int ival = 1024 ; int * pi = & ival ; // pi point to an int int ** ppi = & pi ; // ppi points to a pointer to an int Reference to Pointers reference \u4e0d\u662f\u4e00\u500b object, \u6240\u4ee5 pointer \u662f\u4e0d\u80fd\u6307\u5411 reference \u7684, \u4f46\u662f pointer \u662f\u4e00\u500b object, \u6240\u4ee5 reference \u662f\u53ef\u4ee5\u53c3\u8003 pointer \u7684: int i = 42 ; int * p ; // p \u662f\u4e00\u500b pointer \u6307\u5411 int int *& r = p ; // r \u662f\u4e00\u500b reference \u53c3\u8003 pointer p r = & i ; // r \u53c3\u8003\u4e00\u500b pointer, \u5c07 &i assigning to r \u4f7f\u5f97 p \u6307\u5411\u5230 i * r = 0 ; // dereference r, p \u6240\u6307\u5411\u7684 object i, \u503c\u88ab\u6539\u8b8a\u6210 0 \u6700\u7c21\u55ae\u53bb\u95b1\u8b80\u7406\u89e3 r \u578b\u5225\u7684\u65b9\u5f0f, \u5c31\u662f\u7531\u53f3\u8b80\u5230\u5de6\u7684\u65b9\u5f0f\u53bb\u95b1\u8b80 \u6700\u9760\u8fd1\u8b8a\u6578\u7684 symbol ( & in &r ) \u662f\u6700\u65e9\u88ab\u4f5c\u52d5\u7684 symbol 2.4 const Qualifier \u578b\u614b const , \u6211\u5011\u53ef\u4ee5\u7528\u4f86\u5b9a\u7fa9\u4e00\u500b\u4e0d\u80fd\u88ab\u6539\u8b8a\u7684\u8b8a\u6578 const int bufsize = 512 ; // input buffer size bufsize = 512 ; // error:attempt to write to const object \u56e0\u70ba\u6211\u5011create const object \u904e\u5f8c, \u5c31\u4e0d\u80fd\u6539\u8b8a\u4ed6\u7684\u503c\u4e86, \u6240\u4ee5 const \u8b8a\u6578\u4e00\u5b9a\u8981\u521d\u59cb\u5316 const int i = get_size (); // ok:initialized at run time const int j = 42 ; // ok:initialized at compile time const int k ; // error:k is uninitialized const Initialization and const int i = 42 ; const int ci = i ; // ok:the value in i is copied into ci const j = ci ; // ok:the value in ci is copied into j By Default, const Object Are Local to a File const int bufSize = 512 ; \u5982\u679c\u5728\u7de8\u8b6f\u6642\u671f\u521d\u59cb\u5316\u7684 const \u5e38\u6578, compiler \u5728\u7de8\u8b6f\u904e\u7a0b\u4e2d\u6703\u5c07\u5c0d\u61c9\u7684\u503c\u76f4\u63a5\u53d6\u4ee3\u8b8a\u6578, \u4ee5\u4e0a\u9762\u70ba\u4f8b: compiler \u6703\u7522\u751f 512 \u53d6\u4ee3 bufSize 2.4.1 Reference to const \u5f85\u7e8c\uff0c\u7b49\u6709\u6642\u9593\u518d\u7e7c\u7e8c\u5beb\u3002","title":"Chapter 2 - Variables and Basic Types"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#chapter-2-variables-and-basic-types","text":"","title":"Chapter 2 - Variables and Basic Types"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#tags-c-c11-cprimer","text":"","title":"tags: C++ C++11 C++primer"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#21-primitive-built-in-types","text":"","title":"2.1 Primitive Built-in Types"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#211-arithmetic-types","text":"char \u4fdd\u8b49\u5927\u5c0f\u8db3\u5920\u5132\u5b58\u88dd\u7f6e\u7684 basic character set wchar_t , char16_t , char32_t \u7528\u65bc\u5132\u5b58 extended character set, wchar_t \u4fdd\u8b49\u5927\u5c0f\u8db3\u5920\u5132\u5b58\u88dd\u7f6e\u6700\u5927\u7684 extended character set, \u800c char16_t , char32_t \u5247\u662f\u7528\u65bc Unicode character int \u4fdd\u8b49\u53ef\u5132\u5b58\u7684\u5927\u5c0f >= short long \u4fdd\u8b49\u53ef\u5132\u5b58\u7684\u5927\u5c0f >= int long long \u4fdd\u8b49\u53ef\u5132\u5b58\u7684\u5927\u5c0f >= long Type Meaning Minimum Size bool boolean NA char character 8 bits wchar_t wide character 16 bits char16_t Unicode character 16 bits char32_t Unicode character 32 bits short short integer 16 bits int integer 16 bits long long integer 32 bits long long long integer 64 bits float single-precision floating-point 6 significant digits double double-precision floating-point 10 significant digits long double extended-precision floating-point 10 significant digits","title":"2.1.1 Arithmetic Types"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#advice-deciding-which-type-to-use","text":"C++ \u7684\u8a2d\u8a08\u8b93\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u5728\u5fc5\u8981\u7684\u6642\u5019\u53ef\u4ee5\u66f4\u8cbc\u8fd1\u786c\u9ad4, \u9019\u4e9b arithmetic types \u88ab\u8a2d\u8a08\u6210\u53ef\u4ee5\u8fce\u5408\u5404\u5f0f\u5404\u6a23\u4e0d\u540c\u7684\u786c\u9ad4, \u67d0\u4e9b\u7684 arithmetic types \u6216\u8a31\u6703\u8b93\u958b\u767c\u8005\u89ba\u5f97\u8907\u96dc, \u6240\u4ee5\u4ee5\u4e0b\u63d0\u4f9b\u5e7e\u7a2e\u7c21\u55ae\u7684\u65b9\u6cd5\u53bb\u9078\u64c7\u4f7f\u7528\u7684\u578b\u5225: - \u7576\u4f60\u77e5\u9053\u9019\u500b\u503c\u4e0d\u53ef\u80fd\u662f\u8ca0\u7684\u6642\u5019, \u8acb\u4f7f\u7528 unsigned - \u6574\u6578\u8acb\u4f7f\u7528 int , short \u901a\u5e38\u592a\u5c0f, long \u5247\u5f80\u5f80\u8ddf int \u4f54\u7528\u4e00\u6a23\u7684\u5927\u5c0f, \u5982\u679c\u4f60\u8981\u4f7f\u7528\u7684\u503c\u5927\u65bc int \u7684 minimum size, \u5247\u8acb\u6539\u7528 long long - \u6d6e\u9ede\u6578\u904b\u7b97\u8acb\u4f7f\u7528 double , float \u901a\u5e38\u4e0d\u5920\u7cbe\u6e96, double-precision floating-point \u8207 single-precision floating-point \u7684\u6240\u8017\u7684\u8a08\u7b97\u91cf\u5dee\u7570\u4e26\u4e0d\u5927, \u4e8b\u5be6\u4e0a, \u5728\u6709\u4e9b\u88dd\u7f6e double-precision floating-point \u7684\u904b\u7b97\u901f\u5ea6\u751a\u81f3\u5feb\u65bc single-precision floating-point","title":"Advice: Deciding Which Type to use"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#212-type-conversions","text":"\u578b\u5225\u8f49\u63db\u901a\u5e38\u53d6\u6c7a\u65bc\u6b64\u578b\u614b\u53ef\u5bb9\u8a31\u7684\u5927\u5c0f\u7bc4\u570d bool b = 42 ; // b is true int i = b ; // i has value 1 i = 3.14 ; // i has value 3 double pi = i ; // pi has value 3.0 unsigned char c = -1 ; // assuming 8-bits char, c has value 255 signed char c2 = 256 ; // assuming 8-bits char, the value of c is undefined > \u96b1\u5f0f\u578b\u5225\u8f49\u63db\u7684\u7d30\u7bc0\u898f\u5247, \u53ef\u4ee5\u5728\u66f8\u4e0a\u67e5 \u7576\u6211\u5011\u5728\u4e00\u500b expression \u88e1\u9762\u4f7f\u7528\u4e86\u4e00\u7a2e arithmetic types \u7684\u8b8a\u6578, \u4f46 expression \u537b\u671f\u671b\u5f97\u5230\u53e6\u4e00\u7a2e arithmetic types \u7684\u8b8a\u6578\u6642, compiler \u6703\u81ea\u52d5\u505a\u578b\u5225\u8f49\u63db int i = 42 ; if ( i ) // condition will evaluate as true i = 0 ; \u7576\u6d89\u53ca\u5230 unsigned \u578b\u5225\u6642\u5fc5\u9808\u5c0f\u5fc3 unsigned u = 10 ; int i = -42 ; std :: cout << i + i << std :: endl ; // print -84 std :: cout << u + i << std :: endl ; // if 32-bits int, print 4294967264 \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7b2c\u4e8c\u500b expression i \u88ab\u96b1\u5f0f\u578b\u5225\u8f49\u63db\u6210 unsigned\b \u6240\u4ee5\u9020\u6210\u554f\u984c // WRONG: u can never be less than 0; the condition will always succeed for ( unsigned u = 10 ; u >= 0 ; -- u ) std :: cout << u << std :: endl ; \u53ef\u4ee5\u6539\u6210\u4f7f\u7528 while \u4f86\u89e3\u6c7a\u9019\u7a2e\u554f\u984c unsigned u = 11 ; while ( u > 0 ) { -- u ; std :: cout << u << std :: endl ; }","title":"2.1.2 Type Conversions"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#caution-dont-mix-signed-and-unsigned-types","text":"\u7576 expression \u540c\u6642\u5305\u542b signed \u8ddf unsigned \u578b\u5225\u7684\u8b8a\u6578\u800c signed \u8b8a\u6578\u662f\u8ca0\u503c\u6642, \u53ef\u80fd\u6703\u7522\u751f\u610f\u5916\u7684\u5f8c\u679c, \u7c21\u55ae\u4f86\u8aaa, \u907f\u514d\u5c07\u9019\u5169\u7a2e\u578b\u5225\u6df7\u5408\u4f7f\u7528","title":"Caution: Don't Mix Signed and Unsigned Types"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#213-literals","text":"\u6bcf\u500b\u5b57\u9762\u5e38\u6578\u90fd\u6709\u4e00\u7a2e\u578b\u5225, \u4ee5\u4e0b\u70ba\u5e38\u898b\u5e7e\u7a2e\u5beb\u6cd5, \u82e5\u60f3\u8981\u5f37\u5236\u6c7a\u5b9a\u5b57\u9762\u5e38\u6578\u7684\u578b\u5225, \u53ef\u4ee5\u53c3\u8003\b Character and Character String Literals \u4ecb\u7d39 20 // decimal 024 // octal 0x14 // hexadecimal 3.14159 // double 3.14159E0 // E exponential .001 // double 'h' // char \"h\" // string, '\\0' #### Character and Character String Literals | Prefix | Meaning | Type | | -------- | -------- | -------- | | u | Unicode 16 character | char16_t | | U | Unicode 32 character | char32_t | | L | wide character | wchar_t | | u8 | utf-8(string literals only) | char |","title":"2.1.3 Literals"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#integer-literals","text":"Suffix Minimum Type u or U unsigned l or L long ll or LL long long","title":"Integer Literals"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#floating-point-literals","text":"Suffix Minimum Type f or F float l or L long double","title":"Floating-point Literals"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#22-variables","text":"","title":"2.2 Variables"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#221-variable-definitions","text":"\u4e00\u500b\u7c21\u55ae\u7684\u8b8a\u6578\u5b9a\u7fa9\u662f\u8981\u7531 type specifier \u548c\u540d\u7a31\u6240\u7d44\u6210, \u4e00\u500b\u5b9a\u7fa9\u53ef\u80fd\u53ef\u4ee5\u7531\u4e00\u500b\u6216\u591a\u500b\u521d\u59cb\u503c\u548c\u540d\u7a31\u6240\u7d44\u6210 int sum = 0 , value , units_sold = 0 ; Sales_item item ; std : string book ( \"0-201-78345-X\" ); #### Initializers \u4e00\u500b\u7269\u4ef6\u88ab\u5275\u5efa\u6642, \u540c\u6642\u7d66\u5b9a\u4e00\u500b\u7279\u5b9a\u7684\u503c, \u7a31\u70ba\u521d\u59cb\u5316 > !! Initialization is not assignment. \u521d\u59cb\u5316\u662f\u7576\u8b8a\u6578\u5728\u88ab\u5275\u5efa\u6642\u7d66\u5b9a\u4e00\u500b\u503c, \u8ce6\u503c\u662f\u7269\u4ef6\u73fe\u6709\u7684\u503c\u88ab\u65b0\u7684\u503c\u6240\u53d6\u4ee3","title":"2.2.1 Variable Definitions"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#list-initialization","text":"int val = 0 ; int val = { 0 }; int val { 0 }; // C++ 11 int val ( 0 ); long double ld = 3.1415926536 ; int a { ld }, b = { ld }; // error: narrowing conversion required int c ( ld ), d = ld ; // ok: but value will be truncated","title":"List Initialization"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#default-initialization","text":"std :: string empty ; // \u96b1\u5f0f\u521d\u59cb\u5316\u7a7a\u7684string Sales_item item ; // \u9810\u8a2d\u521d\u59cb\u5316","title":"Default Initialization"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#222-variable-declaration-and-definitions","text":"\u4e00\u500b\u8b8a\u6578\u53ea\u80fd\u88ab\u5b9a\u7fa9\u4e00\u6b21(\u53ea\u80fd\u6709\u4e00\u500b\u5b9a\u7fa9)\uff0c\u4f46\u662f\u53ef\u4ee5\u88ab\u5ba3\u544a\u5f88\u591a\u6b21\u3002 \u4e00\u500b\u8b8a\u6578\u7684\u5b9a\u7fa9\u4e5f\u662f\u4e00\u7a2e\u5ba3\u544a\u3002 extern int i ; // declares but doesn't defines i int j ; // declares and defines j","title":"2.2.2 Variable Declaration and Definitions"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#223-identifiers","text":"","title":"2.2.3 Identifiers"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#224-scope-of-a-name","text":"","title":"2.2.4 Scope of a Name"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#23-compound-types","text":"\u8907\u5408\u578b\u614b\uff0c\u662f\u4e00\u7a2e\u6839\u64da\u53e6\u4e00\u7a2e\u578b\u614b\u5b9a\u7fa9\u800c\u4f86\u7684\u578b\u614b\u3002C++ \u6709\u5f88\u591a\u7a2e\u8907\u5408\u578b\u614b\uff0c\u5728\u672c\u7ae0\u7bc0\u6703\u63d0\u5230\u5176\u4e2d - reference and pointer \u3002","title":"2.3 Compound Types"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#231-reference","text":"\u9644\u8a3b\uff1a\u5728\u4e4b\u5f8c\u7684\u7ae0\u7bc0\u6703\u63d0\u5230\u4e00\u7a2e\u65b0\u7684\u6a19\u6e96\u7684reference - \"rvalue reference\"\uff0c\u5b83\u4e3b\u8981\u662f\u7528\u65bc class \u88e1\u9762\uff0c\u6280\u8853\u4e0a\u6211\u5011\u901a\u5e38\u8aaa\u7684reference \u6307\u7684\u662f - \"lvalue reference\"\u3002 reference \u662f\u5c0d\u4e00\u500b\u7269\u4ef6\u5b9a\u7fa9\u4e00\u500b\u5225\u540d\u3002 \u901a\u5e38\u6211\u5011\u521d\u59cb\u5316\u4e00\u500b\u8b8a\u6578\uff0c\u662f\u5c07\u7269\u4ef6\u7684\u503c \u8907\u88fd \u5230\u6211\u5011\u8981\u5275\u5efa\u7684\u8b8a\u6578\u3002\u4f46\u662f\u7576\u6211\u5011\u5b9a\u7fa9\u4e00\u500breference\u4e26\u521d\u59cb\u5316\u6642\uff0c\u4e0d\u662f\u8907\u88fd\u7269\u4ef6\u7684\u503c\u5230reference\uff0c\u800c\u662f \u9023\u7d50(bind) reference \u8ddf\u9019\u500b\u7269\u4ef6\u3002\u4e00\u4f46\u521d\u59cb\u5316\u904e\u5f8c\uff0creference \u5c31\u8ddf\u9019\u500b\u521d\u59cb\u5316\u7269\u4ef6\u9023\u7d50\u5728\u4e00\u8d77\u4e86\uff0c\u4e14\u4e0d\u80fd\u91cd\u65b0\u9023\u7d50\u5230\u5176\u4ed6\u7684\u7269\u4ef6 int ival = 1024 ; int & refVal = ival ; // refVal refers to(is another name for) ival int & refVal2 ; // error: a reference must be initialized int & refVal3 = 10 ; // error;","title":"2.3.1 Reference"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#232-pointers","text":"","title":"2.3.2 Pointers"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#233-understanding-compound-type-declaration","text":"Compound Type \b(\u8907\u5408\u578b\u614b) \u6307\u7684\u5c31\u662f\b\u5e38\u898b\u7684 * , & \b\u5b57\u7b26 , \b\b\u6b64\u7a2e\u578b\u614b\u7684\u5b9a\u7fa9\u53d6\u6c7a\u65bc\u591a\u7a2e\u578b\u614b\u7684\u7d44\u5408","title":"2.3.3 Understanding Compound Type Declaration"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#defining-multiple-variable","text":"int * p1 , p2 ; // p1 is and pointer, p2 is an int int * p1 , * p2 ; // p1, p2 are pointers to int","title":"Defining Multiple Variable"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#pointers-to-pointers","text":"\u901a\u5e38, \u5728\u5ba3\u544a\u4e0a\u5c0d\u65bc type modifiers \u4f7f\u7528\u7684\u6578\u91cf\u662f\u6c92\u6709\u9650\u5236\u7684, \u7576\u6211\u5011\u4f7f\u7528\u8d85\u904e\u4e00\u500b type modifiers, \u908f\u8f2f\u4e0a\u662fok\u7684, \u4f46\u662f\u4e26\u4e0d\u76f4\u89c0 int ival = 1024 ; int * pi = & ival ; // pi point to an int int ** ppi = & pi ; // ppi points to a pointer to an int","title":"Pointers to Pointers"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#reference-to-pointers","text":"reference \u4e0d\u662f\u4e00\u500b object, \u6240\u4ee5 pointer \u662f\u4e0d\u80fd\u6307\u5411 reference \u7684, \u4f46\u662f pointer \u662f\u4e00\u500b object, \u6240\u4ee5 reference \u662f\u53ef\u4ee5\u53c3\u8003 pointer \u7684: int i = 42 ; int * p ; // p \u662f\u4e00\u500b pointer \u6307\u5411 int int *& r = p ; // r \u662f\u4e00\u500b reference \u53c3\u8003 pointer p r = & i ; // r \u53c3\u8003\u4e00\u500b pointer, \u5c07 &i assigning to r \u4f7f\u5f97 p \u6307\u5411\u5230 i * r = 0 ; // dereference r, p \u6240\u6307\u5411\u7684 object i, \u503c\u88ab\u6539\u8b8a\u6210 0 \u6700\u7c21\u55ae\u53bb\u95b1\u8b80\u7406\u89e3 r \u578b\u5225\u7684\u65b9\u5f0f, \u5c31\u662f\u7531\u53f3\u8b80\u5230\u5de6\u7684\u65b9\u5f0f\u53bb\u95b1\u8b80 \u6700\u9760\u8fd1\u8b8a\u6578\u7684 symbol ( & in &r ) \u662f\u6700\u65e9\u88ab\u4f5c\u52d5\u7684 symbol","title":"Reference to Pointers"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#24-const-qualifier","text":"\u578b\u614b const , \u6211\u5011\u53ef\u4ee5\u7528\u4f86\u5b9a\u7fa9\u4e00\u500b\u4e0d\u80fd\u88ab\u6539\u8b8a\u7684\u8b8a\u6578 const int bufsize = 512 ; // input buffer size bufsize = 512 ; // error:attempt to write to const object \u56e0\u70ba\u6211\u5011create const object \u904e\u5f8c, \u5c31\u4e0d\u80fd\u6539\u8b8a\u4ed6\u7684\u503c\u4e86, \u6240\u4ee5 const \u8b8a\u6578\u4e00\u5b9a\u8981\u521d\u59cb\u5316 const int i = get_size (); // ok:initialized at run time const int j = 42 ; // ok:initialized at compile time const int k ; // error:k is uninitialized const","title":"2.4 const Qualifier"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#initialization-and-const","text":"int i = 42 ; const int ci = i ; // ok:the value in i is copied into ci const j = ci ; // ok:the value in ci is copied into j","title":"Initialization and const"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#by-default-const-object-are-local-to-a-file","text":"const int bufSize = 512 ; \u5982\u679c\u5728\u7de8\u8b6f\u6642\u671f\u521d\u59cb\u5316\u7684 const \u5e38\u6578, compiler \u5728\u7de8\u8b6f\u904e\u7a0b\u4e2d\u6703\u5c07\u5c0d\u61c9\u7684\u503c\u76f4\u63a5\u53d6\u4ee3\u8b8a\u6578, \u4ee5\u4e0a\u9762\u70ba\u4f8b: compiler \u6703\u7522\u751f 512 \u53d6\u4ee3 bufSize","title":"By Default, const Object Are Local to a File"},{"location":"Others/C%2B%2B_Primer_Ch2_Variable%26Types/#241-reference-to-const","text":"\u5f85\u7e8c\uff0c\u7b49\u6709\u6642\u9593\u518d\u7e7c\u7e8c\u5beb\u3002","title":"2.4.1 Reference to const"},{"location":"Others/Clean_Code/","text":"Clean Code \u91cd\u9ede tags: cleancode book \u8a3b\u89e3 \u201c\u4e0d\u8981\u66ff\u7cdf\u7cd5\u7684\u7a0b\u5f0f\u78bc\u8a3b\u89e3\uff0c\u91cd\u5beb\u5b83\u201d \u3002 \u9069\u7576\u7684\u8a3b\u89e3\u662f\u7528\u4f86\u300e==\u5f4c\u88dc\u6211\u5011\u7528\u7a0b\u5f0f\u78bc\u8868\u9054\u610f\u5716\u7684\u5931\u6557==\u300f\uff0c\u6211\u5011\u61c9\u8a72\u7aed\u76e1\u6240\u80fd\u7684\u8b93\u8a3b\u89e3\u6e1b\u81f3\u6700\u5c11\u3002 \u53ef\u7528\u65bc\u5c0d\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u7684\u4e00\u4e9b==\u5f8c\u679c\u544a\u8aa1==\u3002 \u53ef\u4ee5==\u4f7f\u7528\u51fd\u5f0f\u6216\u8b8a\u6578==\u6642\u5c31\u5225\u4f7f\u7528\u8a3b\u89e3\u3002 \u53ef\u7528\u65bc==\u653e\u5927\u91cd\u8981\u6027==\u3002 \u4e0d\u8981\u8a3b\u89e3\u7a0b\u5f0f\u78bc\uff0c\u73fe\u5728\u6709==\u7248\u672c\u7ba1\u63a7==\u53d6\u4ee3\u3002 \u7de8\u6392 ==\u5229\u7528\u7a7a\u767d\u884c\u4f86\u5206\u9694\u601d\u7dd2==\uff0c\u6bcf\u4e00\u500b\u7a7a\u767d\u884c\u4ee3\u8868\u4e00\u500b\u8996\u89ba\u4e0a\u7684\u63d0\u793a\u3002 ==\u76f8\u4f9d\u7684\u51fd\u5f0f (Dependent Function) ==\uff0c\u5728\u5782\u76f4\u7684\u7de8\u6392\u4e0a\u76e1\u53ef\u80fd\u7684\u9760\u8fd1\u3002 ==\u5782\u76f4\u7684\u9806\u5e8f==\uff0c\u6211\u5011\u5e0c\u671b\u51fd\u5f0f\u547c\u53eb\u5448\u73fe==\u5411\u4e0b\u76f8\u4f9d==\uff0c\u5c31\u50cf\u770b\u5831\u7d19\u4e00\u6a23\uff0c\u6211\u5011\u671f\u5f85\u6700\u91cd\u8981\u7684\u6982\u5ff5\u6703\u6700\u5148\u51fa\u73fe\u3002 \u6c34\u5e73\u7de8\u6392\u4e0a\uff0c\u5728\u904b\u7b97\u5b50 (operators) \u7684\u9644\u8fd1\u90fd\u6dfb\u52a0\u7a7a\u767d\u3002 \u4e00\u500b\u5718\u968a\u7684\u958b\u767c\u8005\uff0c==\u61c9\u8a72\u8981\u8a8d\u540c\u67d0\u4e00\u7a2e\u98a8\u683c\u7684\u7de8\u6392==\uff0c\u6211\u5011\u4e26\u4e0d\u60f3\u8b93\u5b83\u770b\u8d77\u4f86\u662f\u7531\u4e00\u7fa4\u610f\u898b\u4e0d\u5408\u7684\u500b\u9ad4\u6240\u5beb\u6210\u3002 \u7269\u4ef6\u8207\u8cc7\u6599\u7d50\u69cb \u985e\u5225\u4e0d\u53ea\u662f\u900f\u904e\u8b80\u53d6\u53ca\u8a2d\u5b9a\u51fd\u5f0f\u8b93\u8b8a\u6578\u4f9b\u4eba\u5b58\u53d6\u800c\u5df2\uff0c\u66f4\u78ba\u5207\u7684\u8aaa\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u500b\u62bd\u8c61\u4ecb\u9762\uff0c\u8b93\u4f7f\u7528\u8005\u5728\u4e0d\u9700\u8981\u77e5\u9053\u5be6\u73fe\u904e\u7a0b\u7684\u72c0\u614b\u4e0b\uff0c\u9084\u80fd\u5920\u64cd\u7e31\u8cc7\u6599\u7684\u672c\u8cea \u7d50\u69cb\u5316\u7684\u7a0b\u5f0f\u78bc\u5bb9\u6613\u6dfb\u52a0\u65b0\u7684\u51fd\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u8b8a\u52d5\u5df2\u6709\u7684\u8cc7\u6599\u7d50\u69cb\u3002\u800c\u7269\u4ef6\u5c0e\u5411\u7684\u7a0b\u5f0f\u78bc\uff0c\u5bb9\u6613\u6dfb\u52a0\u65b0\u7684\u985e\u5225\uff0c\u800c\u4e0d\u7528\u8b8a\u52d5\u5df2\u6709\u7684\u51fd\u5f0f\u3002 \u7d50\u69cb\u5316\u7684\u7a0b\u5f0f\u78bc\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u56e0\u70ba\u5fc5\u9808\u6539\u8b8a\u6240\u6709\u7684\u51fd\u5f0f\u3002\u7269\u4ef6\u5c0e\u5411\u7684\u7a0b\u5f0f\u78bc\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u51fd\u5f0f\uff0c\u56e0\u70ba\u5fc5\u9808\u6539\u8b8a\u6240\u6709\u7684\u985e\u5225\u3002 \u534a\u7269\u4ef6\u534a\u8cc7\u6599\u7d50\u69cb\uff0c\u9019\u7a2e\u6df7\u5408\u9ad4\uff0c\u6703\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u7a0b\u5f0f\uff0c\u4e5f\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u662f\u5169\u7a2e\u4e16\u754c\u6700\u7cdf\u7cd5\u7684\u60c5\u6cc1\uff0c\u61c9\u8a72\u907f\u514d\u7522\u751f\u6b64\u985e\u6df7\u5408\u9ad4\u3002 \u932f\u8aa4\u8655\u7406 \u4f7f\u7528\u4f8b\u5916\u4e8b\u4ef6\u800c\u975e\u56de\u50b3\u932f\u8aa4\u78bc\uff0c\u53ef\u4ee5\u5c07\u908f\u8f2f\u8ddf\u932f\u8aa4\u8655\u7406\u5206\u958b\u8655\u7406\u3002 \u5f85\u7e8c\uff5e \u908a\u754c \u85c9\u7531\u64b0\u5beb\u4e00\u4e9b\u6e2c\u8a66\u7a0b\u5f0f\u4f86\u63a2\u7d22\u8207\u4e86\u89e3\u7b2c\u4e09\u65b9\u8edf\u9ad4\uff0c\u9019\u7a2e\u6e2c\u8a66\u53eb\u5b78\u7fd2\u5f0f\u6e2c\u8a66\uff0c\u9084\u53ef\u4ee5\u9806\u4fbf\u9054\u5230\u908a\u7de3\u6e2c\u8a66\u7684\u6548\u679c\uff0c\u540c\u6642\u4e5f\u6e1b\u8f15\u6574\u5408\u6240\u5e36\u4f86\u7684\u8ca0\u64d4\u3002 \u55ae\u5143\u6e2c\u8a66 TDD \u5f85\u7e8c\uff5e \u985e\u5225 \u985e\u5225\u7b2c\u4e00\u6e96\u5247\uff0c\u8d8a\u6e1b\u77ed\u8d8a\u597d\uff0c\u90a3\u9ebc\u8a72\u5982\u4f55\u8861\u91cf\u985e\u5225\u7684\u5927\u5c0f\u5462\uff1f\u6211\u5011\u5229\u7528\u4e0d\u540c\u7684\u91cf\u6e2c\u65b9\u5f0f\uff0c\u6211\u5011\u8a08\u7b97==\u8077\u8cac\u7684\u6578\u91cf==\u3002==\u985e\u5225\u7684\u547d\u540d\u61c9\u8db3\u4ee5\u63cf\u8ff0\u5176\u8077\u8cac==\uff0c\u5982\u679c\u7121\u6cd5\u66ff\u9019\u500b\u985e\u53d6\u4e00\u500b\u7c21\u77ed\u7684\u540d\u5b57\uff0c\u90a3\u9019\u500b\u985e\u53ef\u80fd\u5c31\u904e\u5927\u4e86\u3002 ==\u55ae\u4e00\u8077\u8cac\u539f\u5247 (Single Responsibility Principle,SRP) == \u4e3b\u5f35\u4e00\u500b\u985e\u6216\u4e00\u500b\u6a21\u7d44\u61c9\u8a72\u6709\u4e00\u500b\uff0c\u800c\u4e14\u53ea\u80fd\u6709\u4e00\u500b\u4fee\u6539\u7684\u7406\u7531\u3002 \u518d\u6b21\u5f37\u8abf\uff0c\u6211\u5011\u60f3\u8981\u6211\u5011\u7684\u7cfb\u7d71\u662f\u7531\u8a31\u591a\u5c0f\u578b\u985e\u5225\u6240\u7d44\u6210\uff0c\u800c\u4e0d\u662f\u7531\u5c11\u6578\u5e7e\u500b\u5927\u578b\u985e\u5225\u6240\u7d44\u6210\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c==\u5728\u65b9\u6cd5\u88e1\u64cd\u7e31\u8d8a\u591a\u6b64\u985e\u7684\u8b8a\u6578\uff0c\u4ee3\u8868\u9019\u500b\u65b9\u6cd5\u66f4\u51dd\u805a\u65bc\u985e\u5225\u3002\u6211\u5011\u5e0c\u671b\u51dd\u805a\u6027\u53ef\u4ee5\u9ad8\u4e00\u4e9b==\uff0c\u4ee3\u8868\u985e\u5225\u88e1\u7684\u65b9\u6cd5\u548c\u8b8a\u6578\u662f\u76f8\u4e92\u4f9d\u8cf4\u7684\uff0c\u4e26\u76f8\u4e92\u7d50\u5408\u6210\u4e00\u500b\u908f\u8f2f\u4e0a\u7684\u6574\u9ad4\u3002 \u8a66\u60f3\u4e00\u500b\u5ba3\u544a\u8a31\u591a\u8b8a\u6578\u7684\u51fd\u5f0f\uff0c\u4f60\u60f3\u628a\u4ed6\u62c6\u6210\u5e7e\u500b\u5c0f\u51fd\u5f0f\uff0c\u4f60\u60f3\u62bd\u51fa\u7684\u51fd\u5f0f\u88e1\u4f7f\u7528\u4e86\u56db\u500b\u5728\u539f\u51fd\u5f0f\u4e2d\u5ba3\u544a\u7684\u8b8a\u6578\uff0c\u4f60\u6216\u8a31\u4e0d\u6703\u60f3\u5c07\u9019\u56db\u500b\u8b8a\u6578\u90fd\u7576\u4f5c\u53c3\u6578\u50b3\u5230\u65b0\u51fd\u5f0f\uff0c\u6240\u4ee5\u4f60\u6703\u5c07\u56db\u500b\u8b8a\u6578\u5347\u7b49\u6210\u985e\u5225\u7684\u5be6\u9ad4\u8b8a\u6578\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u5728\u4e0d\u7528\u50b3\u905e\u4efb\u4f55\u53c3\u6578\u7684\u60c5\u6cc1\u4e0b\uff0c\u6210\u529f\u62c6\u89e3\u51fd\u5f0f\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u56e0\u70ba\u985e\u5225\u7d2f\u7a4d\u4e86\u8d8a\u4f86\u8d8a\u591a\u5be6\u9ad4\u8b8a\u6578\uff0c\u4f46\u662f\u53ea\u6709\u5c11\u6578\u51fd\u5f0f\u5171\u7528\u8457\u9019\u4e9b\u5be6\u9ad4\u8b8a\u6578\uff0c\u6240\u4ee5\u985e\u5225\u56e0\u6b64\u55aa\u5931\u4e86\u51dd\u805a\u6027\u3002\u4f46\u8acb\u7b49\u4e00\u4e0b\uff01 \u9019\u4e0d\u6b63\u662f\u4ee3\u8868\u8457\uff0c\u5b83\u5011\u61c9\u8a72\u81ea\u6210\u4e00\u500b\u65b0\u985e\u5225\u55ce\uff1f\u6c92\u932f\u3002==\u7576\u985e\u5225\u55aa\u5931\u51dd\u805a\u6027\u6642\uff0c\u5c31\u62c6\u89e3\u958b\u4f86\u5427==\u3002 \u5f85\u7e8c\uff5e","title":"Clean Code \u91cd\u9ede"},{"location":"Others/Clean_Code/#clean-code","text":"","title":"Clean Code \u91cd\u9ede"},{"location":"Others/Clean_Code/#tags-cleancode-book","text":"","title":"tags: cleancode book"},{"location":"Others/Clean_Code/#_1","text":"\u201c\u4e0d\u8981\u66ff\u7cdf\u7cd5\u7684\u7a0b\u5f0f\u78bc\u8a3b\u89e3\uff0c\u91cd\u5beb\u5b83\u201d \u3002 \u9069\u7576\u7684\u8a3b\u89e3\u662f\u7528\u4f86\u300e==\u5f4c\u88dc\u6211\u5011\u7528\u7a0b\u5f0f\u78bc\u8868\u9054\u610f\u5716\u7684\u5931\u6557==\u300f\uff0c\u6211\u5011\u61c9\u8a72\u7aed\u76e1\u6240\u80fd\u7684\u8b93\u8a3b\u89e3\u6e1b\u81f3\u6700\u5c11\u3002 \u53ef\u7528\u65bc\u5c0d\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u7684\u4e00\u4e9b==\u5f8c\u679c\u544a\u8aa1==\u3002 \u53ef\u4ee5==\u4f7f\u7528\u51fd\u5f0f\u6216\u8b8a\u6578==\u6642\u5c31\u5225\u4f7f\u7528\u8a3b\u89e3\u3002 \u53ef\u7528\u65bc==\u653e\u5927\u91cd\u8981\u6027==\u3002 \u4e0d\u8981\u8a3b\u89e3\u7a0b\u5f0f\u78bc\uff0c\u73fe\u5728\u6709==\u7248\u672c\u7ba1\u63a7==\u53d6\u4ee3\u3002","title":"\u8a3b\u89e3"},{"location":"Others/Clean_Code/#_2","text":"==\u5229\u7528\u7a7a\u767d\u884c\u4f86\u5206\u9694\u601d\u7dd2==\uff0c\u6bcf\u4e00\u500b\u7a7a\u767d\u884c\u4ee3\u8868\u4e00\u500b\u8996\u89ba\u4e0a\u7684\u63d0\u793a\u3002 ==\u76f8\u4f9d\u7684\u51fd\u5f0f (Dependent Function) ==\uff0c\u5728\u5782\u76f4\u7684\u7de8\u6392\u4e0a\u76e1\u53ef\u80fd\u7684\u9760\u8fd1\u3002 ==\u5782\u76f4\u7684\u9806\u5e8f==\uff0c\u6211\u5011\u5e0c\u671b\u51fd\u5f0f\u547c\u53eb\u5448\u73fe==\u5411\u4e0b\u76f8\u4f9d==\uff0c\u5c31\u50cf\u770b\u5831\u7d19\u4e00\u6a23\uff0c\u6211\u5011\u671f\u5f85\u6700\u91cd\u8981\u7684\u6982\u5ff5\u6703\u6700\u5148\u51fa\u73fe\u3002 \u6c34\u5e73\u7de8\u6392\u4e0a\uff0c\u5728\u904b\u7b97\u5b50 (operators) \u7684\u9644\u8fd1\u90fd\u6dfb\u52a0\u7a7a\u767d\u3002 \u4e00\u500b\u5718\u968a\u7684\u958b\u767c\u8005\uff0c==\u61c9\u8a72\u8981\u8a8d\u540c\u67d0\u4e00\u7a2e\u98a8\u683c\u7684\u7de8\u6392==\uff0c\u6211\u5011\u4e26\u4e0d\u60f3\u8b93\u5b83\u770b\u8d77\u4f86\u662f\u7531\u4e00\u7fa4\u610f\u898b\u4e0d\u5408\u7684\u500b\u9ad4\u6240\u5beb\u6210\u3002","title":"\u7de8\u6392"},{"location":"Others/Clean_Code/#_3","text":"\u985e\u5225\u4e0d\u53ea\u662f\u900f\u904e\u8b80\u53d6\u53ca\u8a2d\u5b9a\u51fd\u5f0f\u8b93\u8b8a\u6578\u4f9b\u4eba\u5b58\u53d6\u800c\u5df2\uff0c\u66f4\u78ba\u5207\u7684\u8aaa\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u500b\u62bd\u8c61\u4ecb\u9762\uff0c\u8b93\u4f7f\u7528\u8005\u5728\u4e0d\u9700\u8981\u77e5\u9053\u5be6\u73fe\u904e\u7a0b\u7684\u72c0\u614b\u4e0b\uff0c\u9084\u80fd\u5920\u64cd\u7e31\u8cc7\u6599\u7684\u672c\u8cea \u7d50\u69cb\u5316\u7684\u7a0b\u5f0f\u78bc\u5bb9\u6613\u6dfb\u52a0\u65b0\u7684\u51fd\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u8b8a\u52d5\u5df2\u6709\u7684\u8cc7\u6599\u7d50\u69cb\u3002\u800c\u7269\u4ef6\u5c0e\u5411\u7684\u7a0b\u5f0f\u78bc\uff0c\u5bb9\u6613\u6dfb\u52a0\u65b0\u7684\u985e\u5225\uff0c\u800c\u4e0d\u7528\u8b8a\u52d5\u5df2\u6709\u7684\u51fd\u5f0f\u3002 \u7d50\u69cb\u5316\u7684\u7a0b\u5f0f\u78bc\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u56e0\u70ba\u5fc5\u9808\u6539\u8b8a\u6240\u6709\u7684\u51fd\u5f0f\u3002\u7269\u4ef6\u5c0e\u5411\u7684\u7a0b\u5f0f\u78bc\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u51fd\u5f0f\uff0c\u56e0\u70ba\u5fc5\u9808\u6539\u8b8a\u6240\u6709\u7684\u985e\u5225\u3002 \u534a\u7269\u4ef6\u534a\u8cc7\u6599\u7d50\u69cb\uff0c\u9019\u7a2e\u6df7\u5408\u9ad4\uff0c\u6703\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u7a0b\u5f0f\uff0c\u4e5f\u96e3\u4ee5\u6dfb\u52a0\u65b0\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u662f\u5169\u7a2e\u4e16\u754c\u6700\u7cdf\u7cd5\u7684\u60c5\u6cc1\uff0c\u61c9\u8a72\u907f\u514d\u7522\u751f\u6b64\u985e\u6df7\u5408\u9ad4\u3002","title":"\u7269\u4ef6\u8207\u8cc7\u6599\u7d50\u69cb"},{"location":"Others/Clean_Code/#_4","text":"\u4f7f\u7528\u4f8b\u5916\u4e8b\u4ef6\u800c\u975e\u56de\u50b3\u932f\u8aa4\u78bc\uff0c\u53ef\u4ee5\u5c07\u908f\u8f2f\u8ddf\u932f\u8aa4\u8655\u7406\u5206\u958b\u8655\u7406\u3002 \u5f85\u7e8c\uff5e","title":"\u932f\u8aa4\u8655\u7406"},{"location":"Others/Clean_Code/#_5","text":"\u85c9\u7531\u64b0\u5beb\u4e00\u4e9b\u6e2c\u8a66\u7a0b\u5f0f\u4f86\u63a2\u7d22\u8207\u4e86\u89e3\u7b2c\u4e09\u65b9\u8edf\u9ad4\uff0c\u9019\u7a2e\u6e2c\u8a66\u53eb\u5b78\u7fd2\u5f0f\u6e2c\u8a66\uff0c\u9084\u53ef\u4ee5\u9806\u4fbf\u9054\u5230\u908a\u7de3\u6e2c\u8a66\u7684\u6548\u679c\uff0c\u540c\u6642\u4e5f\u6e1b\u8f15\u6574\u5408\u6240\u5e36\u4f86\u7684\u8ca0\u64d4\u3002","title":"\u908a\u754c"},{"location":"Others/Clean_Code/#_6","text":"TDD \u5f85\u7e8c\uff5e","title":"\u55ae\u5143\u6e2c\u8a66"},{"location":"Others/Clean_Code/#_7","text":"\u985e\u5225\u7b2c\u4e00\u6e96\u5247\uff0c\u8d8a\u6e1b\u77ed\u8d8a\u597d\uff0c\u90a3\u9ebc\u8a72\u5982\u4f55\u8861\u91cf\u985e\u5225\u7684\u5927\u5c0f\u5462\uff1f\u6211\u5011\u5229\u7528\u4e0d\u540c\u7684\u91cf\u6e2c\u65b9\u5f0f\uff0c\u6211\u5011\u8a08\u7b97==\u8077\u8cac\u7684\u6578\u91cf==\u3002==\u985e\u5225\u7684\u547d\u540d\u61c9\u8db3\u4ee5\u63cf\u8ff0\u5176\u8077\u8cac==\uff0c\u5982\u679c\u7121\u6cd5\u66ff\u9019\u500b\u985e\u53d6\u4e00\u500b\u7c21\u77ed\u7684\u540d\u5b57\uff0c\u90a3\u9019\u500b\u985e\u53ef\u80fd\u5c31\u904e\u5927\u4e86\u3002 ==\u55ae\u4e00\u8077\u8cac\u539f\u5247 (Single Responsibility Principle,SRP) == \u4e3b\u5f35\u4e00\u500b\u985e\u6216\u4e00\u500b\u6a21\u7d44\u61c9\u8a72\u6709\u4e00\u500b\uff0c\u800c\u4e14\u53ea\u80fd\u6709\u4e00\u500b\u4fee\u6539\u7684\u7406\u7531\u3002 \u518d\u6b21\u5f37\u8abf\uff0c\u6211\u5011\u60f3\u8981\u6211\u5011\u7684\u7cfb\u7d71\u662f\u7531\u8a31\u591a\u5c0f\u578b\u985e\u5225\u6240\u7d44\u6210\uff0c\u800c\u4e0d\u662f\u7531\u5c11\u6578\u5e7e\u500b\u5927\u578b\u985e\u5225\u6240\u7d44\u6210\u3002 \u4e00\u822c\u4f86\u8aaa\uff0c==\u5728\u65b9\u6cd5\u88e1\u64cd\u7e31\u8d8a\u591a\u6b64\u985e\u7684\u8b8a\u6578\uff0c\u4ee3\u8868\u9019\u500b\u65b9\u6cd5\u66f4\u51dd\u805a\u65bc\u985e\u5225\u3002\u6211\u5011\u5e0c\u671b\u51dd\u805a\u6027\u53ef\u4ee5\u9ad8\u4e00\u4e9b==\uff0c\u4ee3\u8868\u985e\u5225\u88e1\u7684\u65b9\u6cd5\u548c\u8b8a\u6578\u662f\u76f8\u4e92\u4f9d\u8cf4\u7684\uff0c\u4e26\u76f8\u4e92\u7d50\u5408\u6210\u4e00\u500b\u908f\u8f2f\u4e0a\u7684\u6574\u9ad4\u3002 \u8a66\u60f3\u4e00\u500b\u5ba3\u544a\u8a31\u591a\u8b8a\u6578\u7684\u51fd\u5f0f\uff0c\u4f60\u60f3\u628a\u4ed6\u62c6\u6210\u5e7e\u500b\u5c0f\u51fd\u5f0f\uff0c\u4f60\u60f3\u62bd\u51fa\u7684\u51fd\u5f0f\u88e1\u4f7f\u7528\u4e86\u56db\u500b\u5728\u539f\u51fd\u5f0f\u4e2d\u5ba3\u544a\u7684\u8b8a\u6578\uff0c\u4f60\u6216\u8a31\u4e0d\u6703\u60f3\u5c07\u9019\u56db\u500b\u8b8a\u6578\u90fd\u7576\u4f5c\u53c3\u6578\u50b3\u5230\u65b0\u51fd\u5f0f\uff0c\u6240\u4ee5\u4f60\u6703\u5c07\u56db\u500b\u8b8a\u6578\u5347\u7b49\u6210\u985e\u5225\u7684\u5be6\u9ad4\u8b8a\u6578\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u5728\u4e0d\u7528\u50b3\u905e\u4efb\u4f55\u53c3\u6578\u7684\u60c5\u6cc1\u4e0b\uff0c\u6210\u529f\u62c6\u89e3\u51fd\u5f0f\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u56e0\u70ba\u985e\u5225\u7d2f\u7a4d\u4e86\u8d8a\u4f86\u8d8a\u591a\u5be6\u9ad4\u8b8a\u6578\uff0c\u4f46\u662f\u53ea\u6709\u5c11\u6578\u51fd\u5f0f\u5171\u7528\u8457\u9019\u4e9b\u5be6\u9ad4\u8b8a\u6578\uff0c\u6240\u4ee5\u985e\u5225\u56e0\u6b64\u55aa\u5931\u4e86\u51dd\u805a\u6027\u3002\u4f46\u8acb\u7b49\u4e00\u4e0b\uff01 \u9019\u4e0d\u6b63\u662f\u4ee3\u8868\u8457\uff0c\u5b83\u5011\u61c9\u8a72\u81ea\u6210\u4e00\u500b\u65b0\u985e\u5225\u55ce\uff1f\u6c92\u932f\u3002==\u7576\u985e\u5225\u55aa\u5931\u51dd\u805a\u6027\u6642\uff0c\u5c31\u62c6\u89e3\u958b\u4f86\u5427==\u3002 \u5f85\u7e8c\uff5e","title":"\u985e\u5225"},{"location":"Others/How_to_Build_a_Web_on_GCP/","text":"How to build a web server on GCP tags: gcp , flask , python , web , linux \u5148\u5728 GCP \u5275\u5efa\u4e00\u500b VM instance \u63a5\u8457\u5617\u8a66\u900f\u904e ssh \u53bb\u8ddf VM \u9023\u7dda \u5728 VM \u5efa\u7f6e python \u74b0\u5883 \u8a2d\u5b9a\u4e26\u555f\u52d5flask \u8b93 flask process \u5728\u80cc\u666f\u4e2d\u904b\u884c(\u5f9e\u80cc\u666f\u4e2d\u91cd\u8d77 flask process ) \u5275\u5efa\u4e00\u500b VM instance \u5148\u5230 compute engine \u65b0\u589e\u4e00\u500b VM instance\uff0c\u8981\u8a18\u5f97\u52fe\u9078 Allow HTTP traffic \uff0c Allow HTTPS traffic \uff0c\u7136\u5f8c\u8981\u8a2d\u5b9a external IP\u3002 \u900f\u904e ssh \u8ddf VM \u9023\u7dda \u9996\u5148\u6211\u5011\u5fc5\u9808\u5148\u7522\u751f ssh public key \u8ddf private key\uff1a ssh-keygen -t rsa -f ~/.ssh/[KEY_FILENAME] -C [USERNAME] \u5982\u679c key \u7522\u751f\u6210\u529f\uff0ckey \u6703\u51fa\u73fe\u5728\u4ee5\u4e0b\u4f4d\u7f6e\uff1a Public key file: ~/.ssh/[KEY_FILENAME].pub Private key file: ~/.ssh/[KEY_FILENAME] \u63a5\u8457\u5230 compute engine \u7684 metadata \u9801\u9762\u65b0\u589e public key\uff0c\u5c07 public key \u7684\u5167\u5bb9\u8907\u88fd\u904e\u4f86\u3002 \u65b0\u589e\u6210\u529f\u904e\u5f8c\uff0c\u4f7f\u7528 ssh \u6307\u4ee4\u8ddf VM \u9023\u7dda\uff1a ssh -i ~/.ssh/my-ssh-key [USERNAME]@[IP_ADDRESS] \u5728\u672c\u7bc4\u4f8b\u4e2d\uff0cprivate key \u4f4d\u65bc ~/.ssh/my-ssh-key \u3002 \u5728 VM \u5efa\u7f6e python \u74b0\u5883 \u5b89\u88dd python\uff1a $ sudo apt update $ sudo apt install python3 \u5efa\u7f6e python virtual environment \u4e26\u555f\u52d5\uff1a $ python3 -m venv [DIR_PATH] $ source [DIR_PATH]/bin/activate \u5229\u7528 requirements file \u5b89\u88dd\u5c08\u6848\u6240\u9700\u7684 python \u5957\u4ef6\uff1a $ pip install -r [REQUIREMENTS_FILE_NAME] \u5982\u4f55\u7522\u751f requirements file\uff0c\u53ef\u4ee5\u900f\u904e freeze \u6307\u4ee4\uff1a $ pip freeze $ pip freeze > [REQUIREMENTS_FILE_NAME] \u8a2d\u5b9a\u4e26\u555f\u52d5flask \u5728\u5c08\u6848\u76ee\u9304\u5e95\u4e0b\u505a\u76f8\u95dc\u8a2d\u5b9a\uff0c\u4e26\u555f\u52d5\uff1a $ export FLASK_APP=[RUN_FILE_NAME] $ flask run --host=0.0.0.0 \u82e5\u5c07 IP \u8a2d\u70ba 0.0.0.0 \u8868\u793a\u5c0d\u5916\u958b\u653e\u6240\u6709\u9023\u7dda\uff0c\u9700\u8981\u5207\u63db\u6210 root \u6b0a\u9650\uff1a $ sudo su \u8b93 flask process \u5728\u80cc\u666f\u4e2d\u904b\u884c \u4f7f\u7528\u6307\u4ee4 & \u52a0\u5728\u7a0b\u5f0f\u540d\u5f8c\u9762\uff0c\u5c31\u53ef\u5c07\u5728\u80cc\u666f\u904b\u884c\uff0c\u4f8b\u5982\uff1a $ flask run & \u4f7f\u7528 top \u7a0b\u5f0f\u6216\u662f pgrep \u5f97\u77e5 process \u7684 process id (PID)\uff0c\u53ef\u4f7f\u7528 fg \u7a0b\u5f0f\u5c07 process attach \u56de\u4f86\uff0c\u6216\u662f\u4f7f\u7528 kill \u7a0b\u5f0f\u5c07 process \u95dc\u9589\u3002 $ top | grep [PROCESS_NAME] $ pgrep [PROCESS_NAME] $ fg [PROCESS_ID] $ kill [PROCESS_ID] \u63d0\u9192\uff01\uff01\u76ee\u524d\u53ea\u80fd\u4f7f\u7528 http \u9023\u7dda\u800c\u4e0d\u662f https\u3002","title":"How to build a web server on GCP"},{"location":"Others/How_to_Build_a_Web_on_GCP/#how-to-build-a-web-server-on-gcp","text":"","title":"How to build a web server on GCP"},{"location":"Others/How_to_Build_a_Web_on_GCP/#tags-gcp-flask-python-web-linux","text":"\u5148\u5728 GCP \u5275\u5efa\u4e00\u500b VM instance \u63a5\u8457\u5617\u8a66\u900f\u904e ssh \u53bb\u8ddf VM \u9023\u7dda \u5728 VM \u5efa\u7f6e python \u74b0\u5883 \u8a2d\u5b9a\u4e26\u555f\u52d5flask \u8b93 flask process \u5728\u80cc\u666f\u4e2d\u904b\u884c(\u5f9e\u80cc\u666f\u4e2d\u91cd\u8d77 flask process )","title":"tags: gcp, flask, python, web, linux"},{"location":"Others/How_to_Build_a_Web_on_GCP/#vm-instance","text":"\u5148\u5230 compute engine \u65b0\u589e\u4e00\u500b VM instance\uff0c\u8981\u8a18\u5f97\u52fe\u9078 Allow HTTP traffic \uff0c Allow HTTPS traffic \uff0c\u7136\u5f8c\u8981\u8a2d\u5b9a external IP\u3002","title":"\u5275\u5efa\u4e00\u500b VM instance"},{"location":"Others/How_to_Build_a_Web_on_GCP/#ssh-vm","text":"\u9996\u5148\u6211\u5011\u5fc5\u9808\u5148\u7522\u751f ssh public key \u8ddf private key\uff1a ssh-keygen -t rsa -f ~/.ssh/[KEY_FILENAME] -C [USERNAME] \u5982\u679c key \u7522\u751f\u6210\u529f\uff0ckey \u6703\u51fa\u73fe\u5728\u4ee5\u4e0b\u4f4d\u7f6e\uff1a Public key file: ~/.ssh/[KEY_FILENAME].pub Private key file: ~/.ssh/[KEY_FILENAME] \u63a5\u8457\u5230 compute engine \u7684 metadata \u9801\u9762\u65b0\u589e public key\uff0c\u5c07 public key \u7684\u5167\u5bb9\u8907\u88fd\u904e\u4f86\u3002 \u65b0\u589e\u6210\u529f\u904e\u5f8c\uff0c\u4f7f\u7528 ssh \u6307\u4ee4\u8ddf VM \u9023\u7dda\uff1a ssh -i ~/.ssh/my-ssh-key [USERNAME]@[IP_ADDRESS] \u5728\u672c\u7bc4\u4f8b\u4e2d\uff0cprivate key \u4f4d\u65bc ~/.ssh/my-ssh-key \u3002","title":"\u900f\u904e ssh \u8ddf VM \u9023\u7dda"},{"location":"Others/How_to_Build_a_Web_on_GCP/#vm-python","text":"\u5b89\u88dd python\uff1a $ sudo apt update $ sudo apt install python3 \u5efa\u7f6e python virtual environment \u4e26\u555f\u52d5\uff1a $ python3 -m venv [DIR_PATH] $ source [DIR_PATH]/bin/activate \u5229\u7528 requirements file \u5b89\u88dd\u5c08\u6848\u6240\u9700\u7684 python \u5957\u4ef6\uff1a $ pip install -r [REQUIREMENTS_FILE_NAME] \u5982\u4f55\u7522\u751f requirements file\uff0c\u53ef\u4ee5\u900f\u904e freeze \u6307\u4ee4\uff1a $ pip freeze $ pip freeze > [REQUIREMENTS_FILE_NAME]","title":"\u5728 VM \u5efa\u7f6e python \u74b0\u5883"},{"location":"Others/How_to_Build_a_Web_on_GCP/#flask","text":"\u5728\u5c08\u6848\u76ee\u9304\u5e95\u4e0b\u505a\u76f8\u95dc\u8a2d\u5b9a\uff0c\u4e26\u555f\u52d5\uff1a $ export FLASK_APP=[RUN_FILE_NAME] $ flask run --host=0.0.0.0 \u82e5\u5c07 IP \u8a2d\u70ba 0.0.0.0 \u8868\u793a\u5c0d\u5916\u958b\u653e\u6240\u6709\u9023\u7dda\uff0c\u9700\u8981\u5207\u63db\u6210 root \u6b0a\u9650\uff1a $ sudo su","title":"\u8a2d\u5b9a\u4e26\u555f\u52d5flask"},{"location":"Others/How_to_Build_a_Web_on_GCP/#flask-process","text":"\u4f7f\u7528\u6307\u4ee4 & \u52a0\u5728\u7a0b\u5f0f\u540d\u5f8c\u9762\uff0c\u5c31\u53ef\u5c07\u5728\u80cc\u666f\u904b\u884c\uff0c\u4f8b\u5982\uff1a $ flask run & \u4f7f\u7528 top \u7a0b\u5f0f\u6216\u662f pgrep \u5f97\u77e5 process \u7684 process id (PID)\uff0c\u53ef\u4f7f\u7528 fg \u7a0b\u5f0f\u5c07 process attach \u56de\u4f86\uff0c\u6216\u662f\u4f7f\u7528 kill \u7a0b\u5f0f\u5c07 process \u95dc\u9589\u3002 $ top | grep [PROCESS_NAME] $ pgrep [PROCESS_NAME] $ fg [PROCESS_ID] $ kill [PROCESS_ID] \u63d0\u9192\uff01\uff01\u76ee\u524d\u53ea\u80fd\u4f7f\u7528 http \u9023\u7dda\u800c\u4e0d\u662f https\u3002","title":"\u8b93 flask process \u5728\u80cc\u666f\u4e2d\u904b\u884c"},{"location":"Others/Why_UML_Modeling/","text":"Why UML Modeling ? \u70ba\u4f55\u4f7f\u7528UML\u5efa\u6a21 \u4f60\u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u5225\u4eba\u7576\u5fd9\u7684\u60c5\u6cc1\u4e4b\u4e0b\u4e00\u500b\u4eba\u82b1\u5e7e\u500b\u5c0f\u6642\u5c31\u53ef\u4ee5\u505a\u51fa\u4e00\u500b\u72d7\u5c4b\u3002 \u4f46\u662f\u4eca\u5929\u5982\u679c\u4f60\u60f3\u8981\u9020\u4e00\u9593\u623f\u5b50\u7d66\u5bb6\u4eba\u4f4f\uff0c\u4f60\u53ef\u80fd\u5c31\u9700\u8981\u6bd4\u8f03\u5b8c\u5584\u7684\u8a08\u756b\uff0c\u8b6c\u5982\u8a71\u8a2d\u8a08\u5716\u3002\u7576\u7136\u5efa\u9020\u623f\u5b50\b\u6700\u597d\u662f\u7531\u4e00\u500b\u5718\u968a\u4f86\u5be6\u73fe\uff0c\u4ed6\u9700\u8981\u5efa\u6a21\uff0c\u4e26\u4e14\u660e\u78ba\u5b9a\u7fa9\u6d41\u7a0b\u3002 \u90a3\u5982\u679c\u662f\u84cb\u4e00\u68df\u5927\u6a13\u5462\b\uff1f\u90a3\u80af\u5b9a\u662f\u9700\u8981\u5efa\u6a21\u7684\u3002 \u90a3\u5982\u679c\u662f\u5728\u8edf\u9ad4\u958b\u767c\u5462\uff1f _\"\u6211\u5011\u5efa\u6a21\u662f\u70ba\u4e86\u8868\u9054\u7cfb\u7d71\u7684\u7d50\u69cb\u8ddf\u884c\u70ba\uff0c\u70ba\u4e86\u8996\u89ba\u5316\u8ddf\u63a7\u5236\u7cfb\u7d71\u67b6\u69cb\uff0c\u70ba\u4e86\u8b93\u6211\u5011\u7684\u7cfb\u7d71\u66f4\u5bb9\u6613\u7684\u88ab\u4e86\u89e3\uff0c\u901a\u5e38\u85c9\u7531\u9019\u7a2e\u65b9\u5f0f\u6211\u5011\u6703\u66f4\u5bb9\u6613\u767c\u73fe\u53ef\u7c21\u5316\u8ddf\u53ef\u91cd\u8907\u5229\u7528\u7684\u6a5f\u6703\uff0c \u6211\u5011\u5efa\u9020\u6a21\u578b\u4f86\u63a7\u7ba1\u98a8\u96aa \u3002\" -Grady Booch, The Unified Modeling Language User Guide (2nd Edition)_\u3112 Importance of Modeling \b\u5efa\u6a21\u7684\u91cd\u8981\u6027 \u8b93\u6211\u5011\u53ef\u4ee5\u6c7a\u5b9a\u7cfb\u7d71\u7d50\u69cb\b\u8ddf\u884c\u70ba\u3002 \b\u5e6b\u52a9\u6211\u5011\u628a\u7cfb\u7d71\u8996\u89ba\u5316\u3002 \u53ef\u4ee5\u63d0\u4f9b\b\u4e00\u500b\u7bc4\u672c\u8b93\u6211\u5011\u6bd4\u8f03\u5bb9\u6613\u5efa\u69cb\u4e00\u500b\u7cfb\u7d71\u3002 \u5e6b\u52a9\u6211\u5011\b\b\u9010\u500b\u90e8\u5206\u7684\u4e86\u89e3\u8907\u96dc\u7cfb\u7d71\u3002 \b\u8a18\u9304\u6211\u5011\u7684\u6c7a\u5b9a\u3002 Principles of UML Modeling \u4f7f\u7528UML\u5efa\u6a21\u7684\u539f\u5247 1. \u9078\u5c0d\u6a21\u578b\u7684\u7a2e\u985e\u662f\u5f88\u91cd\u8981\u7684 \u9078\u64c7\u54ea\u500b\u6a21\u578b\u4f86\u4f5c\b\u5c0d\u65bc\u7a81\u7834\u554f\u984c\u7684\u65b9\u5f0f\u548c\u89e3\u6c7a\u65b9\u6848\u600e\u9ebc\u5f62\u6210\u90fd\u6709\u6df1\u9060\u7684\u5f71\u97ff\u3002 - \b\u9078\u5c0d\u6a21\u578b\b\u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u5c07 highlight \u51fa\u95dc\u9375\u7684\u958b\u767c\u554f\u984c\u3002 - \b\b\u9078\u932f\u6a21\u578b\u6703\u8aa4\u5c0e\u6211\u5011\uff0c\u8b93\u6211\u5011\u5931\u7126\u5728\u4e0d\u76f8\u95dc\u7684\u8b70\u984c\u4e0a\u3002 \b \u8209\u4f8b\uff1a\b\u6211\u5011\u5728\u4e0d\u540c\u7684\u8edf\u9ad4\u958b\u767c\u968e\u6bb5\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u578b\u3002 \b\b 2. \u6bcf\u500b\u6a21\u578b\u90fd\u53ef\u4ee5\u4ee5\u4e0d\u540c\u9ad8\u5ea6\u8ddf\u7cbe\u78ba\u5ea6\u4f86\u8868\u9054 \u8209\u4f8b\uff1a - \b\u5982\u679c\u6211\u5011\u84cb\u4e00\u68df\u9ad8\u6a13\uff0c\u6211\u5fc5\u9808\u8981\u4e00\u500b30,000\u82f1\u5c3a\u7684\u8996\u91ce\b\uff0c\u5e6b\u52a9\u6295\u8cc7\u8005\u53bb\u60f3\u50cf\u4ed6\u7684\u5916\u89c0\u8ddf\u611f\u89ba\u3002 - \u5176\u4ed6\u6642\u5019\uff0c\u4f8b\u5982\u4e00\u4e9b\u68d8\u624b\u7684\u7ba1\u7dda\uff0c\u6216\u4e0d\u5c0b\u5e38\u7684\u7d50\u69cb\u6642\uff0c\u6211\u5011\u9700\u8981\b\u964d\u5230\u87ba\u7d72\b\u7b49\u7d1a\u7684\b\u5c64\u7d1a\u4f86\u770b\u554f\u984c\u3002 3. \u826f\u597d\u7684\u6a21\u578b\u61c9\u8a72\u8cbc\u8fd1\u73fe\u5be6 \u6240\u6709\u6a21\u578b\u90fd\u7c21\u5316\u4e86\b\u73fe\u5be6\uff0c\u597d\u7684\u6a21\u578b\u53cd\u6620\u51fa\u91cd\u8981\u7684\u95dc\u9375\u7279\u5fb5\u3002 4. \u4e0d\u6703\u6709\u55ae\b\b\u4e00\u6a21\u578b\u5c31\u8db3\u5920\u7684\u60c5\u6cc1 \u6bcf\u500b\u7cfb\u7d71\u6700\u597d\u7531\u4e00\u7d44\u5e7e\u4e4e\u7368\u7acb\u7684\u6a21\u578b\u4f86\u8655\u7406\u3002\u6bcf\u500b\u6a21\u578b\u90fd\u53ef\u4ee5\b\u5206\u958b\u7814\u7a76\u8ddf\u5efa\u9020\uff0c\u4f46\b\b\b\b\u4ecd\u7136\u662f\u76f8\u4e92\u95dc\u806f\u7684\u3002 \u8209\u4f8b\uff1a - \b\u4f60\u53ef\u4ee5\u7368\u7acb\u505a\u914d\u96fb\u898f\u5283\u3002 - \u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u770b\u5230\u5b83\u5011\u8207\u5e73\u9762\u5716\u7684\u6620\u5c04\uff0c\u751a\u81f3\u53ef\u80fd\u770b\u5230\u5b83\u5011\u8207\u7ba1\u9053\u898f\u5283\u4e2d\u7ba1\u9053\u7684\u4ea4\u4e92\u3002","title":"Why UML Modeling ? \u70ba\u4f55\u4f7f\u7528UML\u5efa\u6a21"},{"location":"Others/Why_UML_Modeling/#why-uml-modeling-uml","text":"\u4f60\u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u5225\u4eba\u7576\u5fd9\u7684\u60c5\u6cc1\u4e4b\u4e0b\u4e00\u500b\u4eba\u82b1\u5e7e\u500b\u5c0f\u6642\u5c31\u53ef\u4ee5\u505a\u51fa\u4e00\u500b\u72d7\u5c4b\u3002 \u4f46\u662f\u4eca\u5929\u5982\u679c\u4f60\u60f3\u8981\u9020\u4e00\u9593\u623f\u5b50\u7d66\u5bb6\u4eba\u4f4f\uff0c\u4f60\u53ef\u80fd\u5c31\u9700\u8981\u6bd4\u8f03\u5b8c\u5584\u7684\u8a08\u756b\uff0c\u8b6c\u5982\u8a71\u8a2d\u8a08\u5716\u3002\u7576\u7136\u5efa\u9020\u623f\u5b50\b\u6700\u597d\u662f\u7531\u4e00\u500b\u5718\u968a\u4f86\u5be6\u73fe\uff0c\u4ed6\u9700\u8981\u5efa\u6a21\uff0c\u4e26\u4e14\u660e\u78ba\u5b9a\u7fa9\u6d41\u7a0b\u3002 \u90a3\u5982\u679c\u662f\u84cb\u4e00\u68df\u5927\u6a13\u5462\b\uff1f\u90a3\u80af\u5b9a\u662f\u9700\u8981\u5efa\u6a21\u7684\u3002 \u90a3\u5982\u679c\u662f\u5728\u8edf\u9ad4\u958b\u767c\u5462\uff1f _\"\u6211\u5011\u5efa\u6a21\u662f\u70ba\u4e86\u8868\u9054\u7cfb\u7d71\u7684\u7d50\u69cb\u8ddf\u884c\u70ba\uff0c\u70ba\u4e86\u8996\u89ba\u5316\u8ddf\u63a7\u5236\u7cfb\u7d71\u67b6\u69cb\uff0c\u70ba\u4e86\u8b93\u6211\u5011\u7684\u7cfb\u7d71\u66f4\u5bb9\u6613\u7684\u88ab\u4e86\u89e3\uff0c\u901a\u5e38\u85c9\u7531\u9019\u7a2e\u65b9\u5f0f\u6211\u5011\u6703\u66f4\u5bb9\u6613\u767c\u73fe\u53ef\u7c21\u5316\u8ddf\u53ef\u91cd\u8907\u5229\u7528\u7684\u6a5f\u6703\uff0c \u6211\u5011\u5efa\u9020\u6a21\u578b\u4f86\u63a7\u7ba1\u98a8\u96aa \u3002\" -Grady Booch, The Unified Modeling Language User Guide (2nd Edition)_\u3112","title":"Why UML Modeling ? \u70ba\u4f55\u4f7f\u7528UML\u5efa\u6a21"},{"location":"Others/Why_UML_Modeling/#importance-of-modeling","text":"\u8b93\u6211\u5011\u53ef\u4ee5\u6c7a\u5b9a\u7cfb\u7d71\u7d50\u69cb\b\u8ddf\u884c\u70ba\u3002 \b\u5e6b\u52a9\u6211\u5011\u628a\u7cfb\u7d71\u8996\u89ba\u5316\u3002 \u53ef\u4ee5\u63d0\u4f9b\b\u4e00\u500b\u7bc4\u672c\u8b93\u6211\u5011\u6bd4\u8f03\u5bb9\u6613\u5efa\u69cb\u4e00\u500b\u7cfb\u7d71\u3002 \u5e6b\u52a9\u6211\u5011\b\b\u9010\u500b\u90e8\u5206\u7684\u4e86\u89e3\u8907\u96dc\u7cfb\u7d71\u3002 \b\u8a18\u9304\u6211\u5011\u7684\u6c7a\u5b9a\u3002","title":"Importance of Modeling \b\u5efa\u6a21\u7684\u91cd\u8981\u6027"},{"location":"Others/Why_UML_Modeling/#principles-of-uml-modeling-uml","text":"","title":"Principles of UML Modeling \u4f7f\u7528UML\u5efa\u6a21\u7684\u539f\u5247"},{"location":"Others/Why_UML_Modeling/#1","text":"\u9078\u64c7\u54ea\u500b\u6a21\u578b\u4f86\u4f5c\b\u5c0d\u65bc\u7a81\u7834\u554f\u984c\u7684\u65b9\u5f0f\u548c\u89e3\u6c7a\u65b9\u6848\u600e\u9ebc\u5f62\u6210\u90fd\u6709\u6df1\u9060\u7684\u5f71\u97ff\u3002 - \b\u9078\u5c0d\u6a21\u578b\b\u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u5c07 highlight \u51fa\u95dc\u9375\u7684\u958b\u767c\u554f\u984c\u3002 - \b\b\u9078\u932f\u6a21\u578b\u6703\u8aa4\u5c0e\u6211\u5011\uff0c\u8b93\u6211\u5011\u5931\u7126\u5728\u4e0d\u76f8\u95dc\u7684\u8b70\u984c\u4e0a\u3002 \b \u8209\u4f8b\uff1a\b\u6211\u5011\u5728\u4e0d\u540c\u7684\u8edf\u9ad4\u958b\u767c\u968e\u6bb5\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u578b\u3002 \b\b","title":"1. \u9078\u5c0d\u6a21\u578b\u7684\u7a2e\u985e\u662f\u5f88\u91cd\u8981\u7684"},{"location":"Others/Why_UML_Modeling/#2","text":"\u8209\u4f8b\uff1a - \b\u5982\u679c\u6211\u5011\u84cb\u4e00\u68df\u9ad8\u6a13\uff0c\u6211\u5fc5\u9808\u8981\u4e00\u500b30,000\u82f1\u5c3a\u7684\u8996\u91ce\b\uff0c\u5e6b\u52a9\u6295\u8cc7\u8005\u53bb\u60f3\u50cf\u4ed6\u7684\u5916\u89c0\u8ddf\u611f\u89ba\u3002 - \u5176\u4ed6\u6642\u5019\uff0c\u4f8b\u5982\u4e00\u4e9b\u68d8\u624b\u7684\u7ba1\u7dda\uff0c\u6216\u4e0d\u5c0b\u5e38\u7684\u7d50\u69cb\u6642\uff0c\u6211\u5011\u9700\u8981\b\u964d\u5230\u87ba\u7d72\b\u7b49\u7d1a\u7684\b\u5c64\u7d1a\u4f86\u770b\u554f\u984c\u3002","title":"2. \u6bcf\u500b\u6a21\u578b\u90fd\u53ef\u4ee5\u4ee5\u4e0d\u540c\u9ad8\u5ea6\u8ddf\u7cbe\u78ba\u5ea6\u4f86\u8868\u9054"},{"location":"Others/Why_UML_Modeling/#3","text":"\u6240\u6709\u6a21\u578b\u90fd\u7c21\u5316\u4e86\b\u73fe\u5be6\uff0c\u597d\u7684\u6a21\u578b\u53cd\u6620\u51fa\u91cd\u8981\u7684\u95dc\u9375\u7279\u5fb5\u3002","title":"3. \u826f\u597d\u7684\u6a21\u578b\u61c9\u8a72\u8cbc\u8fd1\u73fe\u5be6"},{"location":"Others/Why_UML_Modeling/#4","text":"\u6bcf\u500b\u7cfb\u7d71\u6700\u597d\u7531\u4e00\u7d44\u5e7e\u4e4e\u7368\u7acb\u7684\u6a21\u578b\u4f86\u8655\u7406\u3002\u6bcf\u500b\u6a21\u578b\u90fd\u53ef\u4ee5\b\u5206\u958b\u7814\u7a76\u8ddf\u5efa\u9020\uff0c\u4f46\b\b\b\b\u4ecd\u7136\u662f\u76f8\u4e92\u95dc\u806f\u7684\u3002 \u8209\u4f8b\uff1a - \b\u4f60\u53ef\u4ee5\u7368\u7acb\u505a\u914d\u96fb\u898f\u5283\u3002 - \u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u770b\u5230\u5b83\u5011\u8207\u5e73\u9762\u5716\u7684\u6620\u5c04\uff0c\u751a\u81f3\u53ef\u80fd\u770b\u5230\u5b83\u5011\u8207\u7ba1\u9053\u898f\u5283\u4e2d\u7ba1\u9053\u7684\u4ea4\u4e92\u3002","title":"4. \u4e0d\u6703\u6709\u55ae\b\b\u4e00\u6a21\u578b\u5c31\u8db3\u5920\u7684\u60c5\u6cc1"},{"location":"Principles%20of%20OOD/","text":"Principles of OOD (Object oriented design) Principles of class design Principles of package cohesion Principles of coupling between packages References http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod https://hackernoon.com/you-dont-understand-the-single-responsibility-principle-abfdd005b137 http://teddy-chen-tw.blogspot.com/2011/12/2.html http://teddy-chen-tw.blogspot.com/2012/01/4.html http://teddy-chen-tw.blogspot.com/2012/01/5dependency-inversion-principle.html","title":"Principles of OOD (Object oriented design)"},{"location":"Principles%20of%20OOD/#principles-of-ood-object-oriented-design","text":"Principles of class design Principles of package cohesion Principles of coupling between packages","title":"Principles of OOD (Object oriented design)"},{"location":"Principles%20of%20OOD/#references","text":"http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod https://hackernoon.com/you-dont-understand-the-single-responsibility-principle-abfdd005b137 http://teddy-chen-tw.blogspot.com/2011/12/2.html http://teddy-chen-tw.blogspot.com/2012/01/4.html http://teddy-chen-tw.blogspot.com/2012/01/5dependency-inversion-principle.html","title":"References"},{"location":"Principles%20of%20OOD/SOLID/","text":"SOLID \u7269\u4ef6\u5c0e\u5411\u8a2d\u8a08\u539f\u5247 SOLID is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible and maintainable. \u66f4\u80fd\u5bb9\u5fcd\u8b8a\u5316, \u66f4\u5f48\u6027 \u66f4\u5bb9\u6613\u7406\u89e3 \u66f4\u597d\u7dad\u8b77 the SOLID principles can also form a core philosophy for methodologies such as agile development or adaptive software development. S ingle-Responsibility Principle (SRP) O pen-Closed Principle (OCP) L iskov Substitution Principle (LSP) I nterface Segregation Principle (ISP) D ependency-Inversion Principle (DIP) Single Responsibility Principle (SRP) \"A class should have only one reason to change.\" - Robert C. Martin This design violates the SRP. The Rectangle class has two responsibilities. The first responsibility is to provide a mathematical model of the geometry of a rectangle. The second responsibility is to render the rectangle on a graphical user interface. problem: 1. we must include the GUI in the computational geometry application. In .NET the GUI assembly would have to be built and deployed with the computational geometry application. 2. if a change to the GraphicalApplication causes the Rectangle to change for some reason, that change may force us to rebuild, retest, and redeploy the ComputationalGeometryApplication. If we forget to do this, that application may break in unpredictable ways. Should these responsibilities be separated? public interface Modem { public void Dial ( string pno ); public void Hangup (); public void Send ( char c ); public char Recv (); } there are two responsibilities being shown here. The first responsibility is connection management. The second is data communication. Should these two responsibilities be separated? That depends upon how the application is changing. If the application changes in ways that affect the signature of the connection functions, then the design will smell of Rigidity because the classes that call send and read will have to be recompiled and redeployed more often than we like. If, on the other hand, the application is not changing in ways that cause the the two responsibilities to change at differen times, then there is no need to separate them. Indeed, separating them would smell of Needless Complexity . Open-Closed Principle (OCP) \"Software entities (class, modules, functions, etc.) should be open for extension, but closed for modification.\" - Robert C. Martin They are \u201cOpen For Extension\u201d . This means that the behavior of the module can be extended. That we can make the module behave in new and different ways as the requirements of the application change, or to meet the needs of new applications. They are \u201cClosed for Modification\u201d . The source code of such a module is inviolate. No one is allowed to make source code changes to it. It would seem that these two attributes are at odds with each other. The normal way to extend the behavior of a module is to make changes to that module. A module that cannot be changed is normally thought to have a fixed behavior. How can these two opposing attributes be resolved? Abstraction is the Key. Figure 1 shows a simple design that does not conform to the open-closed principle. Both the Client and Server classes are concrete. There is no guarantee that the member functions of the Server class are virtual. The Client class uses the Server class.If we wish for a Client object to use a different server object, then the Client class must be changed to name the new server class. enum ShapeType { circle , square }; struct Point {}; struct Shape { ShapeType itsType ; }; struct Circle { ShapeType itsType ; double itsRadius ; Point itsCenter ; }; struct Square { ShapeType itsType ; double itsSide ; Point itsTopLeft ; }; // // These functions are implemented elsewhere // void DrawSquare ( struct Square * ); void DrawCircle ( struct Circle * ); typedef struct Shape * ShapePointer ; void DrawAllShapes ( ShapePointer list [], int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { struct Shape * s = list [ i ]; switch ( s -> itsType ) { case square : DrawSquare (( struct Square * ) s ); break ; case circle : DrawCircle (( struct Circle * ) s ); break ; } } } class Shape { public : virtual void Draw () const = 0 ; }; class Square : public Shape { public : virtual void Draw () const ; }; class Circle : public Shape { public : virtual void Draw () const ; }; void DrawAllShapes ( Set < Shape *>& list ) { for ( Iterator < Shape *> i ( list ); i ; i ++ ) ( * i ) -> Draw (); } Strategic Closure It should be clear that no significant program can be 100% closed. Since closure cannot be complete, it must be strategic. That is, the designer must choose the kinds of changes against which to close his design. This takes a certain amount of prescience derived from experience. The experienced designer knows the users and the industry well enough to judge the probability of different kinds of changes. Liskov Substitution Principle (LSP) \"Subtypes must be substitutable for their base types.\" - Robert C. Martin A Example of violation of LSP void DrawShape ( const Shape & s ) { if ( typeid ( s ) == typeid ( Square )) DrawSquare ( static_cast < Square &> ( s )); else if ( typeid ( s ) == typeid ( Circle )) DrawCircle ( static_cast < Circle &> ( s )); } Clearly the DrawShape function is badly formed. It must know about every possible derivative of the Shape class, and it must be changed whenever new derivatives of Shape are created. Square and Rectangle, a More Subtle Violation. class Rectangle { public : void SetWidth ( double w ) { itsWidth = w ;} void SetHeight ( double h ) { itsHeight = w ;} double GetHeight () const { return itsHeight ;} double GetWidth () const { return itsWidth ;} private : double itsWidth ; double itsHeight ; }; memory problem assume that we don't care about memory problem class Rectangle { public : virtual void SetWidth ( double w ) { itsWidth = w ;} virtual void SetHeight ( double h ) { itsHeight = h ;} double GetHeight () const { return itsHeight ;} double GetWidth () const { return itsWidth ;} private : double itsHeight ; double itsWidth ; }; class Square : public Rectangle { public : virtual void SetWidth ( double w ); virtual void SetHeight ( double h ); }; void Square::SetWidth ( double w ) { Rectangle :: SetWidth ( w ); Rectangle :: SetHeight ( w ); } void Square::SetHeight ( double h ) { Rectangle :: SetHeight ( h ); Rectangle :: SetWidth ( h ); } The real problem is void g ( Rectangle & r ) { r . SetWidth ( 5 ); r . SetHeight ( 4 ); assert ( r . GetWidth () * r . GetHeight ()) == 20 ); } we can use factory pattern to solve this problem, because the key point is about constructor struct RectangleFactory { static Rectangle create_rectangle ( int w , int h ); static Rectangle create_square ( int size ); } So We must Design by Contract Interface Segregation Principle (ISP) \"Clients should not be forced to depend upon interfaces that they don't use.\" - Robert C. Martin This principle deals with the disadvantages of \u201cfat\u201d interfaces. Classes that have \u201cfat\u201d interfaces are classes whose interfaces are not cohesive. In this article we will discuss the disadvantages of \u201cfat\u201d or \u201cpolluted\u201d interfacse. Interface Pollution Consider a security system. In this system there are Door objects that can be locked and unlocked, and which know whether they are open or closed. (See Listing 1). class Door { public : virtual void Lock () = 0 ; virtual void Unlock () = 0 ; virtual bool IsDoorOpen () = 0 ; }; class Timer { public : void Regsiter ( int timeout , TimerClient * client ); }; class TimerClient { public : virtual void TimeOut () = 0 ; }; Now consider that one such implementation. TimedDoor needs to sound an alarm when the door has been left open for too long. In order to do this the TimedDoor object communicates with another object called a Timer. When an object wishes to be informed about a timeout, it calls the Register function of the Timer. The arguments of this function are the time of the timeout, and a pointer to a TimerClient object whose TimeOut function will be called when the timeout expires. How can we get the TimerClient class to communicate with the TimedDoor class so that the code in the TimedDoor can be notified of the timeout? There are several alternatives. Figure 1 shows a common solution. We force Door, and therefore TimedDoor, to inherit from TimerClient. This ensures that TimerClient can register itself with the Timer and receive the TimeOut message. But problem is Not all varieties of Door need timing. Moreover, the applications that use those derivatives will have to #include the definition of the TimerClient class, even though it is not used. that means you have to recompile. Separation through Multiple Inheritance class TimedDoor : public Door , public TimerClient { public : virtual void TimeOut ( int timeOutId ); }; Dependency-Inversion Principle (DIP) High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions. The Definition of a \u201cBad Design\u201d It is hard to change because every change affects too many other parts of the system. (Rigidity) When you make a change, unexpected parts of the system break. (Fragility) It is hard to reuse in another application because it cannot be disentangled from the current application. (Immobility) Example: The \"Copy\" Program void Copy () { int c ; while (( c = ReadKeyboard ()) != EOF ) WritePrinter ( c ); } consider a new program that copies keyboard characters to a disk file. the \u201cCopy\u201d module is dependent upon the \u201cWrite Printer\u201d module, and so cannot be reused in the new context. So we can enhance our program. enum OutputDevice { printer , disk }; void Copy ( outputDevice dev ) { int c ; while (( c = ReadKeyboard ()) != EOF ) if ( dev == printer ) WritePrinter ( c ); else WriteDisk ( c ); } However this adds new interdependencies to the system. As time goes on, and more and more devices must participate in the copy program, the \u201cCopy\u201d module will be littered with if/else statements and will be dependent upon many lower level modules. It will eventually become rigid and fragile. Dependency Inversion class Reader { public : virtual int Read () = 0 ; }; class Writer { public : virtual void Write ( char ) = 0 ; }; void Copy ( Reader & r , Writer & w ) { int c ; while (( c = r . Read ()) != EOF ) w . Write ( c ); } Layering According to Booch , \u201c...all well structured object oriented architectures have clearly-defined layers, with each layer providing some coherent set of services though a well-defined and controlled interface.\u201d is hard to extend is hard to change it has the insidious characteristic that the Policy Layer is sensitive to changes all the way down in the Utility Layer. Dependency is transitive .","title":"SOLID \u7269\u4ef6\u5c0e\u5411\u8a2d\u8a08\u539f\u5247"},{"location":"Principles%20of%20OOD/SOLID/#solid","text":"SOLID is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible and maintainable. \u66f4\u80fd\u5bb9\u5fcd\u8b8a\u5316, \u66f4\u5f48\u6027 \u66f4\u5bb9\u6613\u7406\u89e3 \u66f4\u597d\u7dad\u8b77 the SOLID principles can also form a core philosophy for methodologies such as agile development or adaptive software development. S ingle-Responsibility Principle (SRP) O pen-Closed Principle (OCP) L iskov Substitution Principle (LSP) I nterface Segregation Principle (ISP) D ependency-Inversion Principle (DIP)","title":"SOLID \u7269\u4ef6\u5c0e\u5411\u8a2d\u8a08\u539f\u5247"},{"location":"Principles%20of%20OOD/SOLID/#single-responsibility-principle-srp","text":"\"A class should have only one reason to change.\" - Robert C. Martin This design violates the SRP. The Rectangle class has two responsibilities. The first responsibility is to provide a mathematical model of the geometry of a rectangle. The second responsibility is to render the rectangle on a graphical user interface. problem: 1. we must include the GUI in the computational geometry application. In .NET the GUI assembly would have to be built and deployed with the computational geometry application. 2. if a change to the GraphicalApplication causes the Rectangle to change for some reason, that change may force us to rebuild, retest, and redeploy the ComputationalGeometryApplication. If we forget to do this, that application may break in unpredictable ways.","title":"Single Responsibility Principle (SRP)"},{"location":"Principles%20of%20OOD/SOLID/#should-these-responsibilities-be-separated","text":"public interface Modem { public void Dial ( string pno ); public void Hangup (); public void Send ( char c ); public char Recv (); } there are two responsibilities being shown here. The first responsibility is connection management. The second is data communication. Should these two responsibilities be separated? That depends upon how the application is changing. If the application changes in ways that affect the signature of the connection functions, then the design will smell of Rigidity because the classes that call send and read will have to be recompiled and redeployed more often than we like. If, on the other hand, the application is not changing in ways that cause the the two responsibilities to change at differen times, then there is no need to separate them. Indeed, separating them would smell of Needless Complexity .","title":"Should these responsibilities be separated?"},{"location":"Principles%20of%20OOD/SOLID/#open-closed-principle-ocp","text":"\"Software entities (class, modules, functions, etc.) should be open for extension, but closed for modification.\" - Robert C. Martin They are \u201cOpen For Extension\u201d . This means that the behavior of the module can be extended. That we can make the module behave in new and different ways as the requirements of the application change, or to meet the needs of new applications. They are \u201cClosed for Modification\u201d . The source code of such a module is inviolate. No one is allowed to make source code changes to it. It would seem that these two attributes are at odds with each other. The normal way to extend the behavior of a module is to make changes to that module. A module that cannot be changed is normally thought to have a fixed behavior. How can these two opposing attributes be resolved? Abstraction is the Key. Figure 1 shows a simple design that does not conform to the open-closed principle. Both the Client and Server classes are concrete. There is no guarantee that the member functions of the Server class are virtual. The Client class uses the Server class.If we wish for a Client object to use a different server object, then the Client class must be changed to name the new server class. enum ShapeType { circle , square }; struct Point {}; struct Shape { ShapeType itsType ; }; struct Circle { ShapeType itsType ; double itsRadius ; Point itsCenter ; }; struct Square { ShapeType itsType ; double itsSide ; Point itsTopLeft ; }; // // These functions are implemented elsewhere // void DrawSquare ( struct Square * ); void DrawCircle ( struct Circle * ); typedef struct Shape * ShapePointer ; void DrawAllShapes ( ShapePointer list [], int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) { struct Shape * s = list [ i ]; switch ( s -> itsType ) { case square : DrawSquare (( struct Square * ) s ); break ; case circle : DrawCircle (( struct Circle * ) s ); break ; } } } class Shape { public : virtual void Draw () const = 0 ; }; class Square : public Shape { public : virtual void Draw () const ; }; class Circle : public Shape { public : virtual void Draw () const ; }; void DrawAllShapes ( Set < Shape *>& list ) { for ( Iterator < Shape *> i ( list ); i ; i ++ ) ( * i ) -> Draw (); }","title":"Open-Closed Principle (OCP)"},{"location":"Principles%20of%20OOD/SOLID/#strategic-closure","text":"It should be clear that no significant program can be 100% closed. Since closure cannot be complete, it must be strategic. That is, the designer must choose the kinds of changes against which to close his design. This takes a certain amount of prescience derived from experience. The experienced designer knows the users and the industry well enough to judge the probability of different kinds of changes.","title":"Strategic Closure"},{"location":"Principles%20of%20OOD/SOLID/#liskov-substitution-principle-lsp","text":"\"Subtypes must be substitutable for their base types.\" - Robert C. Martin","title":"Liskov Substitution Principle (LSP)"},{"location":"Principles%20of%20OOD/SOLID/#a-example-of-violation-of-lsp","text":"void DrawShape ( const Shape & s ) { if ( typeid ( s ) == typeid ( Square )) DrawSquare ( static_cast < Square &> ( s )); else if ( typeid ( s ) == typeid ( Circle )) DrawCircle ( static_cast < Circle &> ( s )); } Clearly the DrawShape function is badly formed. It must know about every possible derivative of the Shape class, and it must be changed whenever new derivatives of Shape are created.","title":"A Example of violation of LSP"},{"location":"Principles%20of%20OOD/SOLID/#square-and-rectangle-a-more-subtle-violation","text":"class Rectangle { public : void SetWidth ( double w ) { itsWidth = w ;} void SetHeight ( double h ) { itsHeight = w ;} double GetHeight () const { return itsHeight ;} double GetWidth () const { return itsWidth ;} private : double itsWidth ; double itsHeight ; }; memory problem assume that we don't care about memory problem class Rectangle { public : virtual void SetWidth ( double w ) { itsWidth = w ;} virtual void SetHeight ( double h ) { itsHeight = h ;} double GetHeight () const { return itsHeight ;} double GetWidth () const { return itsWidth ;} private : double itsHeight ; double itsWidth ; }; class Square : public Rectangle { public : virtual void SetWidth ( double w ); virtual void SetHeight ( double h ); }; void Square::SetWidth ( double w ) { Rectangle :: SetWidth ( w ); Rectangle :: SetHeight ( w ); } void Square::SetHeight ( double h ) { Rectangle :: SetHeight ( h ); Rectangle :: SetWidth ( h ); } The real problem is void g ( Rectangle & r ) { r . SetWidth ( 5 ); r . SetHeight ( 4 ); assert ( r . GetWidth () * r . GetHeight ()) == 20 ); } we can use factory pattern to solve this problem, because the key point is about constructor struct RectangleFactory { static Rectangle create_rectangle ( int w , int h ); static Rectangle create_square ( int size ); } So We must Design by Contract","title":"Square and Rectangle, a More Subtle Violation."},{"location":"Principles%20of%20OOD/SOLID/#interface-segregation-principle-isp","text":"\"Clients should not be forced to depend upon interfaces that they don't use.\" - Robert C. Martin This principle deals with the disadvantages of \u201cfat\u201d interfaces. Classes that have \u201cfat\u201d interfaces are classes whose interfaces are not cohesive. In this article we will discuss the disadvantages of \u201cfat\u201d or \u201cpolluted\u201d interfacse.","title":"Interface Segregation Principle (ISP)"},{"location":"Principles%20of%20OOD/SOLID/#interface-pollution","text":"Consider a security system. In this system there are Door objects that can be locked and unlocked, and which know whether they are open or closed. (See Listing 1). class Door { public : virtual void Lock () = 0 ; virtual void Unlock () = 0 ; virtual bool IsDoorOpen () = 0 ; }; class Timer { public : void Regsiter ( int timeout , TimerClient * client ); }; class TimerClient { public : virtual void TimeOut () = 0 ; }; Now consider that one such implementation. TimedDoor needs to sound an alarm when the door has been left open for too long. In order to do this the TimedDoor object communicates with another object called a Timer. When an object wishes to be informed about a timeout, it calls the Register function of the Timer. The arguments of this function are the time of the timeout, and a pointer to a TimerClient object whose TimeOut function will be called when the timeout expires. How can we get the TimerClient class to communicate with the TimedDoor class so that the code in the TimedDoor can be notified of the timeout? There are several alternatives. Figure 1 shows a common solution. We force Door, and therefore TimedDoor, to inherit from TimerClient. This ensures that TimerClient can register itself with the Timer and receive the TimeOut message. But problem is Not all varieties of Door need timing. Moreover, the applications that use those derivatives will have to #include the definition of the TimerClient class, even though it is not used. that means you have to recompile.","title":"Interface Pollution"},{"location":"Principles%20of%20OOD/SOLID/#separation-through-multiple-inheritance","text":"","title":"Separation through Multiple Inheritance"},{"location":"Principles%20of%20OOD/SOLID/#class-timeddoor-public-door-public-timerclient-public-virtual-void-timeoutint-timeoutid","text":"","title":"class TimedDoor : public Door, public TimerClient\n{\npublic:\n    virtual void TimeOut(int timeOutId);\n};\n"},{"location":"Principles%20of%20OOD/SOLID/#dependency-inversion-principle-dip","text":"High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.","title":"Dependency-Inversion Principle (DIP)"},{"location":"Principles%20of%20OOD/SOLID/#the-definition-of-a-bad-design","text":"It is hard to change because every change affects too many other parts of the system. (Rigidity) When you make a change, unexpected parts of the system break. (Fragility) It is hard to reuse in another application because it cannot be disentangled from the current application. (Immobility)","title":"The Definition of a \u201cBad Design\u201d"},{"location":"Principles%20of%20OOD/SOLID/#example-the-copy-program","text":"void Copy () { int c ; while (( c = ReadKeyboard ()) != EOF ) WritePrinter ( c ); } consider a new program that copies keyboard characters to a disk file. the \u201cCopy\u201d module is dependent upon the \u201cWrite Printer\u201d module, and so cannot be reused in the new context. So we can enhance our program. enum OutputDevice { printer , disk }; void Copy ( outputDevice dev ) { int c ; while (( c = ReadKeyboard ()) != EOF ) if ( dev == printer ) WritePrinter ( c ); else WriteDisk ( c ); } However this adds new interdependencies to the system. As time goes on, and more and more devices must participate in the copy program, the \u201cCopy\u201d module will be littered with if/else statements and will be dependent upon many lower level modules. It will eventually become rigid and fragile.","title":"Example: The \"Copy\" Program"},{"location":"Principles%20of%20OOD/SOLID/#dependency-inversion","text":"class Reader { public : virtual int Read () = 0 ; }; class Writer { public : virtual void Write ( char ) = 0 ; }; void Copy ( Reader & r , Writer & w ) { int c ; while (( c = r . Read ()) != EOF ) w . Write ( c ); }","title":"Dependency Inversion"},{"location":"Principles%20of%20OOD/SOLID/#layering","text":"According to Booch , \u201c...all well structured object oriented architectures have clearly-defined layers, with each layer providing some coherent set of services though a well-defined and controlled interface.\u201d is hard to extend is hard to change it has the insidious characteristic that the Policy Layer is sensitive to changes all the way down in the Utility Layer. Dependency is transitive .","title":"Layering"},{"location":"Principles%20of%20OOD/coupling_packages/","text":"The Acyclic Dependencies Principle (ADP) \"THE DEPENDENCY STRUCTURE BETWEEN PACKAGES MUST BE A DIRECTED ACYCLIC GRAPH (DAG). THAT IS, THERE MUST BE NO CYCLES IN THE DEPENDENCY STRUCTURE.\" none of the teams are at the mercy of the others. Changes made to one package do not need to have an immediate affect on other teams. Each team can decide for itself when to adapt its packages to new releases of the packages they use. This is a very simple and rational process. And it is widely used. However, to make it work you must manage the dependency structure of the packages. There can be no cycles. Packages depend upon one another. Speci\ufb01cally, a class in one package may #include the header file of a class in a different package. This can be depicted on a class diagram as a dependency relationship between packages (See Figure 1). Packages, in UML 9.0 are depicted as \u201ctabbed folders\u201d. Dependency relationships are dashed arrows. The arrows point in the direction of the dependency. That is, the arrow head is placed next to the package that is being depended upon. In C++ terms, there is a #include statement in a class within the dependent package that references the header \ufb01le of a class in the package being depended upon. Now notice one more thing. Regardless of which package you begin at, it is impossible to follow the dependency relationships and wind up back at that package. This structures has no cycles. It is a directed acyclic graph . (DAG). Notice also that when MyDialogs is released it has utterly no affect upon many of the other packages in the system. They don\u2019t know about MyDialogs; and they don\u2019t care when it changes. This is nice. It means that the impact of releasing MyDialogs is relatively small. When it is time to release the whole system; it is done from the bottom up. First the Windows package is compiled, tested, and released. Then MessageWindow and Mydialogs. These are followed by Task, and then TaskWindow and Database. MyTasks is next; and \ufb01nally MyApplication. This process is very clear and easy to deal with. We know how to build the system because we understand the dependencies between its parts. The Effect of a Cycle in the Package Dependency Graph. Let us say that the a new requirement forces us to change one of the classes in MyDialogs such that it #includes one of the class headers in MyApplication. This creates a dependency cycle as shown in Figure 3. This cycle creates some immediate problems. For example, the engineers responsible for the MyTasks package know that in order to release, they must be compatible with Task, MyDialogs, Database, and Windows. However, with the cycle in place, they must now also be compatible with MyApplication, TaskWindow and MessageWindow. That is, MyTasks now depends upon every other package in the system .This makes MyTasks very dif\ufb01cult to release. MyDialogs suffers the same fate. In fact, the cycle has had the effect that MyApplication, MyTasks, and MyDialogs must always be released at the same time. But this is just the tip of the trouble. Consider what happens when we want to unit test the Mydialogs package. We \ufb01nd that we must link in every other package in the system; including the Database package. This means that we have to do a complete build just to unit test MyDialogs. This is intolerable. Breaking the Cycle. It is always possible to break a cycle of packages and reinstate the dependency graph as a DAG. There are two primary mechanisms. Apply the Dependency Inversion Principle (DIP). In the case of Figure 3, we could create an abstract base class that has the interface that MyDialogs needs. We could then put that abstract base into MyDialogs and inherit it into MyApplication. This inverts the dependency between MyDialogs and MyApplication thus breaking the cycle. See Figure 4. Create a new package that both MyDialogs and MyApplication depend upon. Move the class(es) that they both depend upon into that new package. The \"Jitters\" The second solution implies that the package structure is not stable in the presence of changing requirements. Indeed, as the application grows, the package dependency structure jitters and grows. Thus the dependency structure must always be monitored for cycles. When cycles occur they must be broken somehow. Sometimes this will mean creating new packages, making the dependency structure grow.","title":"Coupling packages"},{"location":"Principles%20of%20OOD/coupling_packages/#the-acyclic-dependencies-principle-adp","text":"\"THE DEPENDENCY STRUCTURE BETWEEN PACKAGES MUST BE A DIRECTED ACYCLIC GRAPH (DAG). THAT IS, THERE MUST BE NO CYCLES IN THE DEPENDENCY STRUCTURE.\" none of the teams are at the mercy of the others. Changes made to one package do not need to have an immediate affect on other teams. Each team can decide for itself when to adapt its packages to new releases of the packages they use. This is a very simple and rational process. And it is widely used. However, to make it work you must manage the dependency structure of the packages. There can be no cycles. Packages depend upon one another. Speci\ufb01cally, a class in one package may #include the header file of a class in a different package. This can be depicted on a class diagram as a dependency relationship between packages (See Figure 1). Packages, in UML 9.0 are depicted as \u201ctabbed folders\u201d. Dependency relationships are dashed arrows. The arrows point in the direction of the dependency. That is, the arrow head is placed next to the package that is being depended upon. In C++ terms, there is a #include statement in a class within the dependent package that references the header \ufb01le of a class in the package being depended upon. Now notice one more thing. Regardless of which package you begin at, it is impossible to follow the dependency relationships and wind up back at that package. This structures has no cycles. It is a directed acyclic graph . (DAG). Notice also that when MyDialogs is released it has utterly no affect upon many of the other packages in the system. They don\u2019t know about MyDialogs; and they don\u2019t care when it changes. This is nice. It means that the impact of releasing MyDialogs is relatively small. When it is time to release the whole system; it is done from the bottom up. First the Windows package is compiled, tested, and released. Then MessageWindow and Mydialogs. These are followed by Task, and then TaskWindow and Database. MyTasks is next; and \ufb01nally MyApplication. This process is very clear and easy to deal with. We know how to build the system because we understand the dependencies between its parts.","title":"The Acyclic Dependencies Principle (ADP)"},{"location":"Principles%20of%20OOD/coupling_packages/#the-effect-of-a-cycle-in-the-package-dependency-graph","text":"Let us say that the a new requirement forces us to change one of the classes in MyDialogs such that it #includes one of the class headers in MyApplication. This creates a dependency cycle as shown in Figure 3. This cycle creates some immediate problems. For example, the engineers responsible for the MyTasks package know that in order to release, they must be compatible with Task, MyDialogs, Database, and Windows. However, with the cycle in place, they must now also be compatible with MyApplication, TaskWindow and MessageWindow. That is, MyTasks now depends upon every other package in the system .This makes MyTasks very dif\ufb01cult to release. MyDialogs suffers the same fate. In fact, the cycle has had the effect that MyApplication, MyTasks, and MyDialogs must always be released at the same time. But this is just the tip of the trouble. Consider what happens when we want to unit test the Mydialogs package. We \ufb01nd that we must link in every other package in the system; including the Database package. This means that we have to do a complete build just to unit test MyDialogs. This is intolerable.","title":"The Effect of a Cycle in the Package Dependency Graph."},{"location":"Principles%20of%20OOD/coupling_packages/#breaking-the-cycle","text":"It is always possible to break a cycle of packages and reinstate the dependency graph as a DAG. There are two primary mechanisms. Apply the Dependency Inversion Principle (DIP). In the case of Figure 3, we could create an abstract base class that has the interface that MyDialogs needs. We could then put that abstract base into MyDialogs and inherit it into MyApplication. This inverts the dependency between MyDialogs and MyApplication thus breaking the cycle. See Figure 4. Create a new package that both MyDialogs and MyApplication depend upon. Move the class(es) that they both depend upon into that new package.","title":"Breaking the Cycle."},{"location":"Principles%20of%20OOD/coupling_packages/#the-jitters","text":"The second solution implies that the package structure is not stable in the presence of changing requirements. Indeed, as the application grows, the package dependency structure jitters and grows. Thus the dependency structure must always be monitored for cycles. When cycles occur they must be broken somehow. Sometimes this will mean creating new packages, making the dependency structure grow.","title":"The \"Jitters\""},{"location":"Principles%20of%20OOD/package_cohesion/","text":"Granularity The class, while a very convenient unit for organizing small applications, is too \ufb01nely grained to be used as an organizational unit for large applications. Something \u201clarger\u201d than a class is needed to help organize large applications. Designing with Packages In the UML, packages can be used as containers for a group of classes. By grouping classes into packages we can reason about the design at a higher level of abstraction. The relationships between those packages expresses the high level organization of the application. But this begs a large number of questions. What are the best partitioning criteria? What are the relationships that exist between packages, and what design principles govern their use? Should packages be designed before classes (Top down)? Or should classes be designed before packages (Bottom up)? How are packages physically represented? In C++? In the development environment? Once created, to what purpose will we put these packages? To answer these questions, I have put together several design principles which govern the creation, interrelationship, and use of packages. The Reuse/Release Equivalence Principle (REP). \"THE GRANULE OF REUSE IS THE GRANULE OF RELEASE. ONLY COMPONENTS THAT ARE RELEASED THROUGH A TRACKING SYSTEM CAN BE EFFECTIVELY REUSED. THIS GRANULE IS THE PACKAGE.\" The Common Reuse Principle (CRP) \"THE CLASSES IN A PACKAGE ARE REUSED TOGETHER. IF YOU REUSE ONE OF THE CLASSES IN A PACKAGE, YOU REUSE THEM ALL.\" Classes are seldom reused in isolation. Generally reusable classes collaborate with other classes that are part of the reusable abstraction. The CRP states that these classes belong together in the same package. A simple example might be a container class and its associated iterators. These classes are reused together because they are tightly coupled to each other. Thus they ought to be in the same package. it is common for packages to have physical representations as shared libraries or DLLs. If a DLL is released because of a change to a class that I don\u2019t care about, I still have to redistribute that new DLL and revalidate that the application works with it. Thus, I want to make sure that when I depend upon a package, I depend upon every class in that package. Otherwise I will be revalidating and redistributing more than is necessary, and wasting lots of effort. The Common Closure Principle (CCP) \"THE CLASSES IN A PACKAGE SHOULD BE CLOSED TOGETHER AGAINST THE SAME KINDS OF CHANGES. A CHANGE THAT AFFECTS A PACKAGE AFFECTS ALL THE CLASSES IN THAT PACKAGE.\" If the code in an application must change, where would you like those changes to occur: all in one package, or distributed through many packages? It seems clear that we would rather see the changes focused into a single package rather than have to dig through a whole bunch of packages and change them all. That way we need only release the one changed package. Other packages that don\u2019t depend upon the changed package do not need to be revalidated or rereleased. The CCP ampli\ufb01es this by grouping together classes which cannot be closed against certain types of changes into the same packages. Thus, when a change in requirements comes along; that change has a good chance of being restricted to a minimal number of packages.","title":"Granularity"},{"location":"Principles%20of%20OOD/package_cohesion/#granularity","text":"The class, while a very convenient unit for organizing small applications, is too \ufb01nely grained to be used as an organizational unit for large applications. Something \u201clarger\u201d than a class is needed to help organize large applications.","title":"Granularity"},{"location":"Principles%20of%20OOD/package_cohesion/#designing-with-packages","text":"In the UML, packages can be used as containers for a group of classes. By grouping classes into packages we can reason about the design at a higher level of abstraction. The relationships between those packages expresses the high level organization of the application. But this begs a large number of questions. What are the best partitioning criteria? What are the relationships that exist between packages, and what design principles govern their use? Should packages be designed before classes (Top down)? Or should classes be designed before packages (Bottom up)? How are packages physically represented? In C++? In the development environment? Once created, to what purpose will we put these packages? To answer these questions, I have put together several design principles which govern the creation, interrelationship, and use of packages.","title":"Designing with Packages"},{"location":"Principles%20of%20OOD/package_cohesion/#the-reuserelease-equivalence-principle-rep","text":"\"THE GRANULE OF REUSE IS THE GRANULE OF RELEASE. ONLY COMPONENTS THAT ARE RELEASED THROUGH A TRACKING SYSTEM CAN BE EFFECTIVELY REUSED. THIS GRANULE IS THE PACKAGE.\"","title":"The Reuse/Release Equivalence Principle (REP)."},{"location":"Principles%20of%20OOD/package_cohesion/#the-common-reuse-principle-crp","text":"\"THE CLASSES IN A PACKAGE ARE REUSED TOGETHER. IF YOU REUSE ONE OF THE CLASSES IN A PACKAGE, YOU REUSE THEM ALL.\" Classes are seldom reused in isolation. Generally reusable classes collaborate with other classes that are part of the reusable abstraction. The CRP states that these classes belong together in the same package. A simple example might be a container class and its associated iterators. These classes are reused together because they are tightly coupled to each other. Thus they ought to be in the same package. it is common for packages to have physical representations as shared libraries or DLLs. If a DLL is released because of a change to a class that I don\u2019t care about, I still have to redistribute that new DLL and revalidate that the application works with it. Thus, I want to make sure that when I depend upon a package, I depend upon every class in that package. Otherwise I will be revalidating and redistributing more than is necessary, and wasting lots of effort.","title":"The Common Reuse Principle (CRP)"},{"location":"Principles%20of%20OOD/package_cohesion/#the-common-closure-principle-ccp","text":"\"THE CLASSES IN A PACKAGE SHOULD BE CLOSED TOGETHER AGAINST THE SAME KINDS OF CHANGES. A CHANGE THAT AFFECTS A PACKAGE AFFECTS ALL THE CLASSES IN THAT PACKAGE.\" If the code in an application must change, where would you like those changes to occur: all in one package, or distributed through many packages? It seems clear that we would rather see the changes focused into a single package rather than have to dig through a whole bunch of packages and change them all. That way we need only release the one changed package. Other packages that don\u2019t depend upon the changed package do not need to be revalidated or rereleased. The CCP ampli\ufb01es this by grouping together classes which cannot be closed against certain types of changes into the same packages. Thus, when a change in requirements comes along; that change has a good chance of being restricted to a minimal number of packages.","title":"The Common Closure Principle (CCP)"},{"location":"Qt/","text":"Qt \u7ae0\u7bc0 Model-View Programming Example Code Repository qt_mvc_json","title":"Qt"},{"location":"Qt/#qt","text":"","title":"Qt"},{"location":"Qt/#_1","text":"Model-View Programming","title":"\u7ae0\u7bc0"},{"location":"Qt/#example-code-repository","text":"qt_mvc_json","title":"Example Code Repository"},{"location":"Qt/model_view/","text":"Model-View Programming Qt \u5b98\u65b9\u6587\u4ef6 Model view programming Model view tutorial","title":"Model-View Programming"},{"location":"Qt/model_view/#model-view-programming","text":"","title":"Model-View Programming"},{"location":"Qt/model_view/#qt","text":"Model view programming Model view tutorial","title":"Qt \u5b98\u65b9\u6587\u4ef6"},{"location":"ROS/ros/","text":"ROS Logging log \u8a0a\u606f\u6703\u7d00\u9304\u5230 ~/.ros/log/xxxx/rosout.log log \u8a0a\u606f\u6703\u900f\u904e topic \u50b3\u51fa: /rosout ( rosgraph_msgs/Log ) \u5167\u90e8\u662f\u63a1\u7528 log4cxx \u7684 framework ros global \u7684 log4cxx \u53c3\u6578\u6a94\u5728 /opt/ros/<ros_dist>/share/ros/config/rosconsole.config Testing \u8981\u505a node \u4e4b\u9593\u7684\u6e2c\u8a66\u6642, \u4f7f\u7528 rostest, \u4f46\u662f\u5982\u679c\u662f\u5c0d\u55ae\u4e00 node \u5167\u90e8\u7a0b\u5f0f\u505a\u6e2c\u8a66\u7684\u8a71, \u4f7f\u7528 gtest \u4e0d\u80fd\u4f7f\u7528 rostest command line tool \u53bb\u57f7\u884c test, \u6703\u5931\u6557 \u8981\u4f7f\u7528 \u4e0b\u9762\u9019\u4e9b\u6307\u4ee4 , test \u624d\u53ef\u4ee5\u88ab\u6b63\u5e38\u904b\u884c, \u53ef\u4ee5\u53c3\u8003 \u9019\u500b \u9019\u7528\u500b\u6307\u4ee4 build: $ catkin build <pkg> --catkin-make-args tests \u7528\u9019\u500b\u6307\u4ee4\u57f7\u884c(\u9019\u5176\u5be6\u662f build + execute): $ catkin run_tests <pkg> \u4f7f\u7528 $ catkin run_tests \u6703\u6709\u53e6\u4e00\u500b\u554f\u984c, stdout \u6703\u7522\u751f\u592a\u591a\u8cc7\u8a0a\u84cb\u6389 test ouput \u7d50\u679c \u53ef\u4ee5\u53c3\u8003 \u9019\u500b $ catkin run_tests <pkg> | sed -En '/^-- run_tests.py/,/^-- run_tests.py/p' test \u57f7\u884c\u6642, log \u8a0a\u606f\u6703\u5931\u6548, \u53ea\u6709 WARN level \u4ee5\u4e0a\u624d\u6703 print \u51fa\u4f86, /rosout \u5247\u5168\u90e8\u90fd\u4e0d\u6703\u88ab publish \u53c3\u8003 \u9019\u500b \u82e5\u8981\u57f7\u884c gtest , \u53ef\u4ee5\u76f4\u63a5\u57f7\u884c .../devel/.private/<pkg>/lib/<pkg>/<test_program> What is Mocking in Unit test","title":"ROS"},{"location":"ROS/ros/#ros","text":"","title":"ROS"},{"location":"ROS/ros/#logging","text":"log \u8a0a\u606f\u6703\u7d00\u9304\u5230 ~/.ros/log/xxxx/rosout.log log \u8a0a\u606f\u6703\u900f\u904e topic \u50b3\u51fa: /rosout ( rosgraph_msgs/Log ) \u5167\u90e8\u662f\u63a1\u7528 log4cxx \u7684 framework ros global \u7684 log4cxx \u53c3\u6578\u6a94\u5728 /opt/ros/<ros_dist>/share/ros/config/rosconsole.config","title":"Logging"},{"location":"ROS/ros/#testing","text":"\u8981\u505a node \u4e4b\u9593\u7684\u6e2c\u8a66\u6642, \u4f7f\u7528 rostest, \u4f46\u662f\u5982\u679c\u662f\u5c0d\u55ae\u4e00 node \u5167\u90e8\u7a0b\u5f0f\u505a\u6e2c\u8a66\u7684\u8a71, \u4f7f\u7528 gtest \u4e0d\u80fd\u4f7f\u7528 rostest command line tool \u53bb\u57f7\u884c test, \u6703\u5931\u6557 \u8981\u4f7f\u7528 \u4e0b\u9762\u9019\u4e9b\u6307\u4ee4 , test \u624d\u53ef\u4ee5\u88ab\u6b63\u5e38\u904b\u884c, \u53ef\u4ee5\u53c3\u8003 \u9019\u500b \u9019\u7528\u500b\u6307\u4ee4 build: $ catkin build <pkg> --catkin-make-args tests \u7528\u9019\u500b\u6307\u4ee4\u57f7\u884c(\u9019\u5176\u5be6\u662f build + execute): $ catkin run_tests <pkg> \u4f7f\u7528 $ catkin run_tests \u6703\u6709\u53e6\u4e00\u500b\u554f\u984c, stdout \u6703\u7522\u751f\u592a\u591a\u8cc7\u8a0a\u84cb\u6389 test ouput \u7d50\u679c \u53ef\u4ee5\u53c3\u8003 \u9019\u500b $ catkin run_tests <pkg> | sed -En '/^-- run_tests.py/,/^-- run_tests.py/p' test \u57f7\u884c\u6642, log \u8a0a\u606f\u6703\u5931\u6548, \u53ea\u6709 WARN level \u4ee5\u4e0a\u624d\u6703 print \u51fa\u4f86, /rosout \u5247\u5168\u90e8\u90fd\u4e0d\u6703\u88ab publish \u53c3\u8003 \u9019\u500b \u82e5\u8981\u57f7\u884c gtest , \u53ef\u4ee5\u76f4\u63a5\u57f7\u884c .../devel/.private/<pkg>/lib/<pkg>/<test_program> What is Mocking in Unit test","title":"Testing"}]}